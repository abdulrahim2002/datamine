[["1", "Refactoring conventions", "Ben Christensen", "benjchristensen", "01/10/13, 09:33:34 PM", "NaN", "NaN"], ["2", "Language adaptors", "Ben Christensen", "benjchristensen", "01/11/13, 12:26:34 AM", "Includes Groovy and JRuby", "NaN"], ["3", "Clojure adaptor", "Ben Christensen", "benjchristensen", "01/11/13, 07:08:36 PM", "NaN", "NaN"], ["4", "remove 'wrap' functionality", "Ben Christensen", "benjchristensen", "01/12/13, 07:22:01 PM", "We no longer need this as we've merged the interface and abstract classes together and don't need to ensure we have the abstract class.", "NaN"], ["5", "Support multiple class types for language adaptors", "Ben Christensen", "benjchristensen", "01/15/13, 09:47:27 PM", "NaN", "NaN"], ["6", "Refactoring", "Ben Christensen", "benjchristensen", "01/16/13, 08:34:20 PM", "- convert to rx.\\* package names\n  - rx.observables\n  - rx.observables.operations (private package from javadocs)\n  - rx.util\n  - rx.lang\n  - rx.concurrency (placeholder for schedulers)\n- change Func order to have return type at end => T, R instead of R, T\n  - this matches the C# and Guava conventions\n- added Action as Func without return value\n  - added overload subscribe methods with Action typed arguments\n- added from() alias methods in Observable", "NaN"], ["27", "Scala adaptor", "Jason Cacciatore", "jcacciatore", "01/17/13, 01:12:16 AM", "NaN", "NaN"], ["106", "Performance optimizations for dynamic function execution.", "Ben Christensen", "benjchristensen", "01/22/13, 03:12:38 AM", "- memoize dynamic function constructions so executions are statically typed after a single dynamic lookup instead of dynamic on every execution\n\nhttps://github.com/Netflix/RxJava/issues/104", "NaN"], ["107", "Performance: Reduce synchronization", "Ben Christensen", "benjchristensen", "01/22/13, 11:49:16 PM", "Performance changes as part of https://github.com/Netflix/RxJava/issues/104 and is an extension of work done in pull https://github.com/Netflix/RxJava/pull/106.\n\nThis code was used to test the performance:\n\n``` java\n    public void runCompositionTest(Integer[] values) {\n        System.out.println(\"runCompositionTest\");\n\n        final AtomicInteger onNextSum = new AtomicInteger(0);\n        final long start = System.nanoTime();\n\n        MathFunction m = new MathFunction();\n        // 50 levels of composition (same function so that's not the cost)\n        Observable.from(values)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m).map(m)\n                .subscribe(new TestObserver(onNextSum, start));\n    }\n```\n\nBefore it took:\n\n```\nSum: 710082754 Time: 60.605ms\n```\n\nBy reducing the nested synchronization (eliminating most of it) it is now running at:\n\n```\nSum: 710082754 Time: 22.429ms\n```", "NaN"], ["108", "Adding a draft of Subject class", "George Campbell", "abersnaze", "01/31/13, 06:09:16 PM", "https://github.com/Netflix/RxJava/issues/19", "NaN"], ["109", "Creating toObservable for Future", "George Campbell", "abersnaze", "01/31/13, 06:08:37 PM", "simple wrapper that turns a future into a observable.", "NaN"], ["110", "Build fix", "Ben Christensen", "benjchristensen", "01/25/13, 04:22:34 AM", "Getting RxJava to build all of the LanguageAdaptor sub modules correctly.\n\nUpgraded to Gradle 1.3 and made changes to rxjava-scala build file.", "NaN"], ["111", "IDE Support", "Ben Christensen", "benjchristensen", "01/25/13, 04:50:53 AM", "NaN", "NaN"], ["112", "Examples Submodule", "Ben Christensen", "benjchristensen", "01/25/13, 06:24:16 AM", "new submodule for showing examples in various languages", "NaN"], ["113", "Concat", "Billy Yuen", "billyy", "01/31/13, 06:28:19 PM", "NaN", "NaN"], ["114", "Examples", "Ben Christensen", "benjchristensen", "01/29/13, 09:47:20 PM", "Start of \"How to Use\" examples in Clojure, Groovy and Java.", "NaN"], ["115", "more examples", "Ben Christensen", "benjchristensen", "01/31/13, 06:35:14 PM", "NaN", "NaN"], ["116", "Refactor", "Ben Christensen", "benjchristensen", "01/31/13, 09:27:04 PM", "NaN", "NaN"], ["120", "Fixing javadocs", "Ben Christensen", "benjchristensen", "02/05/13, 09:48:36 PM", "https://github.com/Netflix/RxJava/issues/119\n- added correct links to external images\n- cleaned up some of the text\n- improved some function memoization that was missed", "NaN"], ["121", "Minor cleanup of Clojure example.", "Dave Ray", "daveray", "02/06/13, 05:02:18 AM", "Cleaned up some formatting and spacing. Used future-cancel. Future\nsubscriptions were not being returned properly. Replaced use of #_ with\ncomment form. Fixed rest args usage for hello example.", "NaN"], ["122", "Examples Cleanup", "Ben Christensen", "benjchristensen", "02/06/13, 07:09:16 AM", "Some cleanup on builds, particularly rxjava-examples.\n\nI can't add Scala support while retaining Groovy and have it work in Eclipse as the plugins collide. Gradle handles it fine for builds from command-line but editing via text editors and not IDEs is not ideal.\n\nPerhaps the examples should go in the /src/test/ folder (or /src/examples/) of each of the rxjava-[language] projects instead of rxjava-examples?", "NaN"], ["124", "trivial syntax clean-up in scala adaptor", "Jason Cacciatore", "jcacciatore", "02/06/13, 11:15:17 PM", "NaN", "NaN"], ["127", "Update README", "Matthew Michihara", "matthewmichihara", "02/07/13, 05:37:12 PM", "NaN", "NaN"], ["129", "Code cleanup", "Mairbek Khadikov", "mairbek", "02/07/13, 05:37:41 PM", "Cleaned up some warnings highlighted by Intellij Idea", "NaN"], ["132", "Refactoring language tests and examples layout", "Ben Christensen", "benjchristensen", "02/08/13, 07:21:41 AM", "- removed rxjava-examples as it was not working having all languages in the same project\n- started convention of having /src/examples/ in language-adaptors with first implementation being rxjava-groovy and rxjava-clojure (though the clojure one isn't compiling correctly yet)\n- moved language unit tests to actual language rather than via Java to language parsers", "NaN"], ["133", "Various fixes", "Ben Christensen", "benjchristensen", "02/08/13, 07:59:33 AM", "- restore performance optimization to reduce wrapping \n- restoring null check removed in recent commit ", "NaN"], ["134", "Adapt Groovy VideoExample to Clojure", "Dave Ray", "daveray", "02/09/13, 06:59:43 AM", "Seems to work.", "NaN"], ["135", "Idiomatic usage of import in ns macro in rx-examples.", "Daniel De Aguiar", "ddeaguiar", "02/09/13, 08:43:05 PM", "Reference: [clojure.core docs](http://clojure.github.com/clojure/clojure.core-api.html#clojure.core/ns). \n\nThanks!", "NaN"], ["136", "Add examples for jbundler and sbt", null, "unrelentingtech", "02/11/13, 05:14:55 PM", "NaN", "NaN"], ["137", "Implemented range operator. Fixes issue #68", "Mairbek Khadikov", "mairbek", "02/11/13, 05:14:16 PM", "NaN", "NaN"], ["138", "Implemented SequenceEqual Operator", "Mairbek Khadikov", "mairbek", "02/12/13, 11:25:00 PM", "Fixes issue #76\n\nSince there is no direct analogue of `IEqualityComparer` in Java, `Func2<T, T, Boolean>` has been used.", "NaN"], ["140", "Implemented TakeLast operator", "Mairbek Khadikov", "mairbek", "02/12/13, 11:34:45 PM", "Fixes issue #85.", "NaN"], ["142", "RxJava ErrorHandler Plugin", "Ben Christensen", "benjchristensen", "02/13/13, 12:10:21 AM", "https://github.com/Netflix/RxJava/issues/141 Error Handler Plugin\nhttps://github.com/Netflix/RxJava/issues/139 Plugin System", "NaN"], ["144", "Used mockito's inOrder to verify ordering instead of hand-written stub", "Mairbek Khadikov", "mairbek", "02/14/13, 05:19:17 PM", "NaN", "NaN"], ["145", "Support 'provided' dependencies in IntelliJ Idea build", "Ben Christensen", "benjchristensen", "02/14/13, 08:25:09 PM", "This adds support to the Gradle builds for IntelliJ to import the project and have classpaths set correctly. \n\nGradle documentation for these changes: http://www.gradle.org/docs/current/dsl/org.gradle.plugins.ide.idea.model.IdeaModule.html", "NaN"], ["146", "Merge of Pull #125 for Issue #87 Operator TakeWhile", "Ben Christensen", "benjchristensen", "02/14/13, 09:41:16 PM", "Manually merging https://github.com/Netflix/RxJava/pull/125 from @mairbek ", "NaN"], ["147", "Operator: forEach", "Ben Christensen", "benjchristensen", "02/15/13, 09:27:54 PM", "Issue https://github.com/Netflix/RxJava/issues/45\n\nRelated to Pull https://github.com/Netflix/RxJava/pull/131", "NaN"], ["150", "Cleaned up copy-paste in OperationMerge code", "Mairbek Khadikov", "mairbek", "02/19/13, 06:24:47 PM", "NaN", "NaN"], ["151", "Implemented TakeUntil operation", "Mairbek Khadikov", "mairbek", "03/11/13, 08:38:30 PM", "Fixes issue #86", "NaN"], ["155", "Change target compatibility from 1.5 to 1.6", "Ben Christensen", "benjchristensen", "02/27/13, 05:30:01 AM", "https://github.com/Netflix/RxJava/issues/153", "NaN"], ["156", "Implemented ToIterable Operation", "Mairbek Khadikov", "mairbek", "02/27/13, 08:29:46 PM", "For issue #18.\n\nThis would allow to implement other blocking methods like `single`, `lastOrDefault` next.", "NaN"], ["157", "Implemented single and singleOrDefault", "Mairbek Khadikov", "mairbek", "02/28/13, 08:33:37 PM", "For issue #77.", "NaN"], ["159", "Implemented LastOrDefault Operator", "Mairbek Khadikov", "mairbek", "02/28/13, 07:51:39 PM", "For issue #58", "NaN"], ["160", "Manual merge of mairbek/single Pull #157", "Ben Christensen", "benjchristensen", "02/28/13, 08:33:24 PM", "Merging https://github.com/Netflix/RxJava/pull/157 which had conflicts and needed a manual merge.", "NaN"], ["161", "Added build status badges", null, "garethbowles", "02/28/13, 08:38:09 PM", "I'm not wild about the icons that CloudBees provides, but it looks fairly straightforward to change them if needed.", "NaN"], ["165", "Fixed bug in ranges", "Mairbek Khadikov", "mairbek", "03/01/13, 08:00:15 PM", "Fixed issue #164.", "NaN"], ["166", "Review of Next Operation", "Ben Christensen", "benjchristensen", "03/02/13, 09:51:11 PM", "Some changes I made while reviewing https://github.com/Netflix/RxJava/pull/163", "NaN"], ["167", "Reimplemented Last operation", "Mairbek Khadikov", "mairbek", "03/12/13, 04:24:41 AM", "For issue #57.", "NaN"], ["168", "Implemented Most Recent", "Mairbek Khadikov", "mairbek", "03/11/13, 11:14:41 PM", "For issue #64.", "NaN"], ["171", "Implemented Defer Operation", "Mairbek Khadikov", "mairbek", "03/11/13, 09:36:46 PM", "For issue #35.", "NaN"], ["176", "Implemented GroupBy", "Mairbek Khadikov", "mairbek", "03/12/13, 03:00:52 AM", "For issue #51.", "NaN"], ["177", "Operator: Dematerialize - review and manual merge", "Ben Christensen", "benjchristensen", "03/11/13, 09:15:10 PM", "Manual merge of pull request https://github.com/Netflix/RxJava/pull/174 for issue https://github.com/Netflix/RxJava/issues/37", "NaN"], ["178", "Review and Refactor of GetIterator", "Ben Christensen", "benjchristensen", "03/11/13, 09:30:09 PM", "Review of pull request https://github.com/Netflix/RxJava/pull/169 for issue https://github.com/Netflix/RxJava/issues/50 along with a simple refactoring to reduce code in Observable.java.", "NaN"], ["179", "Operator GroupBy Pull Request - Review and Refactor", "Ben Christensen", "benjchristensen", "03/12/13, 03:00:51 AM", "Refactored version of pull request https://github.com/Netflix/RxJava/pull/176 for issue https://github.com/Netflix/RxJava/issues/51\n\nI would like to avoid delegation if possible since it will mean it needs to be kept in sync with Observable.\n\nThis refactored approach allows inheritance without delegation by composing the Observable  inside another operator function. ", "NaN"], ["180", "Formatting and cleanup", "Ben Christensen", "benjchristensen", "03/12/13, 03:20:44 AM", "NaN", "NaN"], ["181", "Add OSGi manifest headers", "Ben Christensen", "benjchristensen", "03/12/13, 03:58:33 AM", "https://github.com/Netflix/RxJava/issues/154\n\nI can't confirm that these work but submitting based on discussion on issue #154.", "NaN"], ["182", "Subscriptions utility class and rx.subscriptions package", "Ben Christensen", "benjchristensen", "03/12/13, 03:59:18 AM", "https://github.com/Netflix/RxJava/issues/173", "NaN"], ["183", "Groovy VideoExample improvements", "Ben Christensen", "benjchristensen", "03/12/13, 04:10:34 AM", "- Make VideoExample more idiomatic for Groovy based on feedback\n- Use the new BooleanSubscription object", "NaN"], ["184", "Convert 'last' from non-blocking to blocking to match Rx.Net", "Ben Christensen", "benjchristensen", "03/12/13, 04:24:40 AM", "Merging pull request https://github.com/Netflix/RxJava/pull/167 which needed manual merging.\n\nDid some other cleanup while in there and added a missing generic 'Object' override.\n\nThank you @mairbek for doing this work.", "NaN"], ["186", "Add 'Fragment-Host' to submodules for OSGi", "Ben Christensen", "benjchristensen", "03/12/13, 08:26:54 PM", "Based on discussion on issue https://github.com/Netflix/RxJava/issues/154", "NaN"], ["187", "Confusing Javadoc for `toObservable(Future)` methods", "Ben Christensen", "benjchristensen", "03/12/13, 08:55:39 PM", "https://github.com/Netflix/RxJava/issues/148", "NaN"], ["188", "Subscriptions cleanup", "Ben Christensen", "benjchristensen", "03/12/13, 09:58:36 PM", "Some things I missed in previous commit and am cleaning up related to https://github.com/Netflix/RxJava/issues/173", "NaN"], ["189", "Handful of Improvements", "Ben Christensen", "benjchristensen", "03/13/13, 05:36:45 AM", "Some improvements made while reviewing code.\n- add error handling to VideoExample.groovy so it's a better representation of how onError is used\n- handle errors from Func1 failures when subscribe happens\n- handle null Subscriptions on 'trusted' functions, not just untrusted", "NaN"], ["190", "update dematerialize so can chain correctly", "Prabir Shrestha", "prabirshrestha", "03/13/13, 08:55:14 PM", "Just noticed this when I actually had to chain it.\n\n``` java\nObservable<File> saveResult = ....;\n```\n\ncurrent:\n\n``` java\nObservable<Notification<File>> a = saveResult.materialize().dematerialize();\n```\n\nexpected:\n\n``` java\nObservable<File> a = saveResult.materialize().dematerialize();\n```\n\nhere is what is happening\n\n``` java\nObservable<File> x = saveResult;\nObservable<Notification<File>> y = x.materialize();\nObservable<Notification<File>> currentResult = y.dematerialize();\nObservable<File> expectedResult = Observable.dematerialize(y);\n```\n\nworkaround is to use static method to get the expected result.\n\nWith this change you can chain correctly. Added unit test.\n\n``` java\nObservable<Integer> obs = Observable.just(1);\nObservable<Integer> chained = obs.materialize().dematerialize();\n```\n\nThis will be a breaking change. But I think this is the expected way.", "NaN"], ["191", "Where alias to filter", "Prabir Shrestha", "prabirshrestha", "03/15/13, 05:01:32 PM", "PR for #101", "NaN"], ["194", "Add pointer regarding unit tests as inner classes", "Steffen Opel", "sopel", "03/15/13, 02:14:30 AM", "@benjchristensen - If I hadn't stumbled over your respective [pointer](https://github.com/Netflix/RxJava/issues/154#issuecomment-14544894) by chance, I would have asked the same question as Matt Bishop when encountering this README.\n\nYour reasoning for embedding unit tests as inner classes is inspiring (thanks much) and a helpful explanation for those who disagree regardless, so I suggest to promote it accordingly.", "NaN"], ["196", "New operation Finally (issue #43)", "Adam Bliss", "abliss", "04/03/13, 06:40:48 PM", "Hi,\n\nI was looking around for some fun stuff to do for the Netflix Cloud Prize, and I figured I might start by contributing some enhancements to RxJava.\n\nI did my best to match your existing style and practices, but I've doubtless made some mistakes.  If you have time to take a quick look and give me some feedback, I'll accept it gratefully. \n\nCheers,\n--abliss", "NaN"], ["197", "TakeWhile observables do not properly complete", "Gijs Stuurman", "thegeez", "03/26/13, 08:08:43 PM", "See failing test case for an example.\n\nThis slipped through the tests because Observable.toObservable uses\nSubscription.EMPTY, which means the onCompleted call after all three items\nare produced calls the onComplete on the takeWhile observable, which already requested to be unsubscribed. The\nundesired behaviour is shown with Observables that use subscriptions\n(such as Subject) or inifinite Observables (which is how I ran into\nthis bug). \n\nSimilar bugs might exist elsewhere for other operations, because most\ntests use Observable.toObservable rather than an Observable that uses\nsubscriptions.\n\nThe fix follows Rx.Net", "NaN"], ["201", "Synchronize Observer on OperationMerge", "Ben Christensen", "benjchristensen", "04/02/13, 05:56:16 AM", "fix for Merge serialization bug reported in https://github.com/Netflix/RxJava/issues/200\n\nThis is necessary because by definition Merge is subscribing to multiple sequences in parallel and is supposed to serialize them into a single Observable.", "NaN"], ["203", "All Operation Implemented", "Mairbek Khadikov", "mairbek", "03/26/13, 08:12:09 PM", "Closes issue #21.", "NaN"], ["205", "Reimplementation of Concat, improved handling of Observable<Observable<T...", "Adam Bliss", "abliss", "04/18/13, 05:47:51 PM", "...>>.\n\nThe old version required all of the Observable<T>s to be generated and buffered\nbefore the concat could begin.  If the outer Observable was asynchronous, items\ncould be dropped (test added).  The new version passes the test, and does the\nbest job I could (after examining several possible strategies) of achieving\nclear and consistent semantics in accordance with the principle of least\nsurprise.\n\n(My attempt to fix issue #202)", "NaN"], ["206", "Observable.toList breaks with multiple subscribers", "Gijs Stuurman", "thegeez", "03/27/13, 04:48:52 AM", "``` clojure\n(let [i1 (Subject/create)\n        out (Observable/toList i1)]\n    (.subscribe out (partial prn \"first observer\"))\n    (.subscribe out (partial prn \"second observer\"))\n    (.subscribe out (partial prn \"third observer\"))\n    (.onNext i1 1)\n    (.onNext i1 2)\n    (.onNext i1 3)\n    (.onNext i1 4)\n    (.onNext i1 5)\n    (.onNext i1 6)\n    (.onCompleted i1))\n```\n\nOutput: \n\n```\n\"first observer\" [1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6]\n\"second observer\" [1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6]\n\"third observer\" [1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6]\n```\n\nShould be:\n\n```\n\"first observer\" [1 2 3 4 5 6]\n\"second observer\" [1 2 3 4 5 6]\n\"third observer\" [1 2 3 4 5 6]\n```", "NaN"], ["207", "Implemented combineLatest semantics", "Joachim Hofer", "jmhofer", "03/27/13, 11:18:46 PM", "... at least if I understand them correctly...\n\nThis is an attempt at resolving #29", "NaN"], ["211", "Remove use of JSR 305 and dependency on com.google.code.findbugs", "Ben Christensen", "benjchristensen", "03/27/13, 11:31:20 PM", "fixes https://github.com/Netflix/RxJava/issues/192\n\nThe library and annotations were being used for trivial reasons so removing the usage so we don't have the dependency.", "NaN"], ["212", "Operation take leaks errors", "John Gardiner Myers", "johngmyers", "03/31/13, 02:54:19 AM", "The take() operator improperly propagates an error from its source after the count has been exhausted.\n\nTest cases exhibiting the bug attached.", "NaN"], ["215", "Manual Merge of Pull Request #212", "Ben Christensen", "benjchristensen", "03/31/13, 02:54:17 AM", "Manual merge of https://github.com/Netflix/RxJava/pull/212 with small reorganization of 1 file/package.", "NaN"], ["218", "Implement ReplaySubject with infinite history", "John Gardiner Myers", "johngmyers", "04/18/13, 08:21:49 PM", "NaN", "NaN"], ["220", "TakeWhile protect calls to predicate", "John Gardiner Myers", "johngmyers", "04/01/13, 05:18:57 PM", "Per RX guideline 6.4, calls to selector functions passed in to the operator should be caught and fed through to the subscribed observer. Operator TakeWhile doesn't do this with the passed in predicate.", "NaN"], ["221", "Error Handling Improvements - User Provided Observers/Functions", "Ben Christensen", "benjchristensen", "04/02/13, 05:30:04 AM", "Improve error handling as per discussion in issue https://github.com/Netflix/RxJava/issues/216\n\nThis is by no means exhaustive in the search for places needing this protection but gets the most obvious ones entering via `subscribe` and `forEach`.\n\nThe intention is to protect against exceptions being thrown and ensure onNext/onError/onCompleted contract compliance.", "NaN"], ["222", "Pull issue 43 merge", null, "joshgord", "04/03/13, 06:40:47 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/196", "NaN"], ["223", "Concat merge", "Billy Yuen", "billyy", "04/18/13, 05:47:50 PM", "1. Update javadoc on subscribe() blocking if observables are running on the same thread.\n2. Add test case with infinity observable.\n3. Add test case to unsubscribe() with all observables running in different thread (non-blocking).", "NaN"], ["224", "RxJavaObservableExecutionHook", "Ben Christensen", "benjchristensen", "04/04/13, 10:23:01 PM", "Allow a plugin to intercept invocations of an Observable via its subscribe method.\n\nUse cases:\n- extra logging or metrics for start, return and error events when subscribing\n- decorate (or replace) an 'onSubscribe' function with additional behavior\n- decorate an Exception\n- decorate a Subscription\n\nThis is modeled after Hystrix Plugins: http://netflix.github.com/Hystrix/javadoc/index.html?com/netflix/hystrix/strategy/executionhook/HystrixCommandExecutionHook.html\n\nJavadocs will be at http://netflix.github.com/RxJava/javadoc/", "NaN"], ["225", "Schedulers (merge of pull #199)", "Ben Christensen", "benjchristensen", "04/05/13, 08:19:18 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/199 by @mairbek plus the following changes:\n- made some classes non-public so they don't become part of the published API (if we find they have value in the public API we can make them so but once published it's hard to remove them so I'd rather keep them implementation details until then)\n- consolidated ExecutorScheduler and ScheduledExecutorScheduler\n- made ExecutorScheduler use a system-wide ScheduledExecutorScheduler for handling delayed events when only an Executor is available\n- made the IOThreadPool use a non-bounded cached thread-pool \n\nNext step from here is to review all operator implementations and add the Scheduler overloads.", "NaN"], ["228", "Interval", "Joachim Hofer", "jmhofer", "04/18/13, 07:11:04 PM", "I have attempted to implement the \"Interval\" operator (#55) here. As far as I can see, it seems to work. This is based on the quite fresh work on schedulers.\n\nIt doesn't work with the `currentThread` or `newThread` schedulers, I guess due to the simple `SleepingAction`. It does work with a `ScheduledExecutorService`, though.\n\nFor testing this conveniently, I also wrote a test scheduler with adjustable time.\n\nLooking forward to any review comments.", "NaN"], ["229", "Trying to extend the Scheduler interface according to the comments at", "Joachim Hofer", "jmhofer", "04/18/13, 04:11:16 PM", "I've tried to extend the `Scheduler` interface according to the discussion at issue #19. If I understand this correctly, most of it can be done via the `AbstractScheduler`.\n\nI hope this helps. Please have a look.", "NaN"], ["230", "An unsubscribed AtomicObservableSubscription.wrap() unsubscribes its argument", "John Gardiner Myers", "johngmyers", "04/16/13, 08:16:22 PM", "Fixes #210", "NaN"], ["231", "Multicast", "Mairbek Khadikov", "mairbek", "04/18/13, 07:08:55 PM", "Implemented Multicast operation, working on issue #65.", "NaN"], ["232", "Corrected naming", "Mairbek Khadikov", "mairbek", "04/16/13, 08:08:04 PM", "Renamed `Operator` to `Operation` to be consistent.", "NaN"], ["234", "ScheduledObserver Ordering", "Mairbek Khadikov", "mairbek", "04/18/13, 05:47:04 PM", "Fixing issue #233.\nBlocking solution for now, thinking about non-blocking alternatives.", "NaN"], ["235", "Schedulers Interface (Merging and Adding to Pull Request 229)", "Ben Christensen", "benjchristensen", "04/18/13, 04:11:13 PM", "Merging and adding to pull request https://github.com/Netflix/RxJava/pull/229 from @jmhofer which adds functionality discussed in the Scheduler issue https://github.com/Netflix/RxJava/issues/19\n\nWork done in https://github.com/Netflix/RxJava/pull/229 added the following methods to `Scheduler`:\n- `Subscription schedule(T state, Func2<Scheduler, T, Subscription> action, long delayTime, TimeUnit unit)`\n- `Subscription schedule(T state, Func2<Scheduler, T, Subscription> action)`\n\nThese are in fact the primary methods from RxNet (http://msdn.microsoft.com/en-us/library/hh211963(v=vs.103).aspx) and the others are just helper overloads.\n\nIt seems beneficial to use these 2 methods for actual implementation logic while all other methods are just decorating and forwarding from AbstractScheduler to these methods.\n\nI propose these changes on top of pull request https://github.com/Netflix/RxJava/pull/229 to achieve this.\n\nI also added unit tests that @mairbek created (https://github.com/Netflix/RxJava/pull/229#issuecomment-16115941).\n\nAll unit tests are passing \u2026 but we don't yet have enough unit test coverage so I won't be surprised if bugs are found.", "NaN"], ["236", "Fixed Sleeping Action", "Mairbek Khadikov", "mairbek", "04/18/13, 05:29:29 PM", "Sleeping action wasn't working correctly.", "NaN"], ["238", "ScheduledObserver/ObserveOn - Manual Merge of Pull 234", "Ben Christensen", "benjchristensen", "04/18/13, 05:47:01 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/234 with some unit test tweaks and additions.", "NaN"], ["239", "CurrentThreadScheduler Delayed Execution Fix", "Mairbek Khadikov", "mairbek", "04/18/13, 07:06:20 PM", "Added unit tests for the delayed execution for `CurrentThreadScheduler`.\nRe-implemented queueing in order to make those tests pass.", "NaN"], ["240", "Update TestScheduler to match merged Scheduler changes", "Ben Christensen", "benjchristensen", "04/18/13, 07:41:44 PM", "- I accidentally merged this code before fixing it to match the changes to AbstractScheduler/Scheduler", "NaN"], ["241", "ReplaySubject - Manual Merge of Pull 218", "Ben Christensen", "benjchristensen", "04/18/13, 08:21:47 PM", "Manual merge of ReplaySubject from pull request https://github.com/Netflix/RxJava/pull/218\n- merged DefaultSubject and PublishedSubject which were the same thing (lots more unit tests though from this pull request)\n- still not sure what the right name is for DefaultSubject/PublishSubject\n- renamed RepeatSubject to ReplaySubject to match .Net\n- tweaked unit tests with InOrder while reviewing them to understand behavior\n- moved UnsubscribeTester into a package private class as I'm still undecided on long-term placement of this and the OperatorTester class", "NaN"], ["244", "Pre 0.8.0 Release Changes", "Ben Christensen", "benjchristensen", "04/19/13, 06:50:27 PM", "Some cleanup before releasing.", "NaN"], ["245", "Moved state from Observable to Observer", "Mairbek Khadikov", "mairbek", "05/01/13, 04:51:00 AM", "NaN", "NaN"], ["246", "Scheduling actions periodically", "Joachim Hofer", "jmhofer", "05/01/13, 04:55:54 AM", "As proposed earlier by @mairbek in https://github.com/Netflix/RxJava/pull/228#issuecomment-16254526, I extended the `Scheduler` by yet another method `schedulePeriodically`. This has a default implementation that works via recursion. I tried it out with all existing schedulers, and it seems to work fine. I also wrote a unit test for it using the `TestScheduler`.\n\nI switched scheduled executor services to use their fixed rate scheduling instead of the recursive default implementation. And I also switched the `OperationInterval` implementation to use periodic scheduling.", "NaN"], ["247", "Add flatMap alias to mapMany", "Ben Christensen", "benjchristensen", "05/01/13, 04:50:14 AM", "This is to match with what Java 8 is adding to Stream so we support the duality of Iterable/Collection to Observable.\n\nhttp://download.java.net/lambda/b86/docs/api/java/util/stream/Stream.html#flatMap(java.util.function.Function)", "NaN"], ["248", "Implemented Sample Operation", "Joachim Hofer", "jmhofer", "05/01/13, 08:49:18 PM", "Now that `OperationInterval` is in, `OperationSample` (see  #74) was kind of straightforward. I also added a unit test against sampling, and allowed for specifying a scheduler used by the sample operation.", "NaN"], ["249", "Timestamp operation", "Joachim Hofer", "jmhofer", "05/01/13, 08:51:44 PM", "Straightforward implementation of issue #93, based on `OperationMap` (without the scheduler version, as `map` doesn't take a scheduler yet either).", "NaN"], ["250", "Initial implementation of AsyncSubject", "Michael de Jong", "michaeldejong", "05/01/13, 05:04:40 AM", "I've done some work on AsyncSubject<T>, including unit tests and I'm looking for feedback. \n\nI don't expect to get this pull request immediately accepted. But I hope to find out if this is the correct workflow for this repository, and if the code is up to your standards, before I start pouring in more hours into issue #17. If you guys are ok with the AsyncSubject<T> implementation I'll start working on the others.\n\nLooking forward to some feedback!", "NaN"], ["252", "Observable.toFuture", "Ben Christensen", "benjchristensen", "05/01/13, 04:56:04 AM", "NaN", "NaN"], ["253", "Fix multiple subscription bug on operation filter", "Gerben", "Treora", "05/01/13, 08:48:19 PM", "A new subscription must be created on every subscribe call, otherwise any\nsubscribe call after the first directly fails.", "NaN"], ["254", "Swing scheduler", "Joachim Hofer", "jmhofer", "05/06/13, 08:12:50 PM", "I've added a Swing-specific scheduler to RxJava. However, it probably doesn't belong to `rxjava-core` and therefore, I've created a subfolder named `extensions` with currently one single subproject `rxjava-swing` with currently one single class `SwingScheduler`.\n\nI've tried to create a build for this, too, but I'm not very familiar with Gradle, so somebody should probably check that it's okay like this.\n\nAlso, I'm not very happy with the subfolder name (`extensions`). Maybe somebody has a better idea for a more specific name?", "NaN"], ["255", "Cleaning up - fixing a lot of build warnings (mostly javadoc)", "Joachim Hofer", "jmhofer", "05/06/13, 08:14:13 PM", "I'm not good at ignoring warnings... - there are lots of them in the build output, mostly due to invalid javadoc link syntax or missing `@return` descriptions.\n\nThis is my attempt at fixing them.", "NaN"], ["256", "Created the initial implementation of BehaviorSubject", "Michael de Jong", "michaeldejong", "05/07/13, 04:19:12 PM", "I've been trying to implement the BehaviorSubject. Functionally it works as it should, but I'm not entirely happy with the static `createWithDefaultValue(T)` method. I can't create a static method `create(T)` because Subject extends Observable, which has a static `create(Object)` method. So to resolve that I had to give the static method in BehaviorSubject a different name.\n\nAdditionally I'm using an `AtomicReference<T>` in this static method to keep track of the last published value. I tried coming up with different solutions to push the last published value to the Observer when it's subscribing, but this seems to be the most clean solution.\n\nIf there's any feedback on either issue, please let me know.", "NaN"], ["257", "Improved scan, reduce, aggregate", "Joachim Hofer", "jmhofer", "05/07/13, 02:04:57 PM", "`scan` is currently restricted to accumulators of type `Func2<T, T, T>` where `Func2<R, T, R>` would be possible for initial values of type `R`. This pull request tries to fix this by generalizing the `scan` implementation. I had to restructure the scan operator a bit for this to stay typesafe. Imho it's more readable now, though.\n\nThis indirectly leads to generalized `reduce`, too.\n\nAlso, `aggregate` is added as an alias for `reduce` (see #20).", "NaN"], ["258", "Operation: throttle", "Michael de Jong", "michaeldejong", "09/11/13, 04:53:17 PM", "The throttle operation is a filtering operator which is meant to combat receiving bursts of events in short periods of time. The original Rx .Net implementation of this operator works as followed:\n\nUpon receiving an event A, it waits a certain specified amount of time Z before propagating it to the `Observer`. If another event B is received within this period of time, the propagation of A is cancelled, and B will be propagated in stead as soon as a Z amount of time has passed since B was received.\n\nAs @benjchristensen already mentioned, the use of threads in this way is quite inefficient. To this end I proposed two additional variations on this scheme of throttling [here](https://github.com/Netflix/RxJava/pull/258#issuecomment-17880627). The question now is which schemes do we want (to support)?\n\nAny thoughts on this is highly appreciated!", "NaN"], ["259", "Added the switch operator to Observable", "Michael de Jong", "michaeldejong", "05/16/13, 07:16:25 PM", "I've implemented the switch operator for `Observable` sequences (see issue #13). Because \"switch\" is a keyword in Java I have opted for switchDo. This matches to the finallyDo method which represents the finally operator and has the same naming problem. \n\nPlease let me know if you have any feedback.", "NaN"], ["262", "A few basic Swing observables", "Joachim Hofer", "jmhofer", "05/07/13, 03:37:01 PM", "This adds a few observables for observing common button click, keyboard and mouse events.", "NaN"], ["263", "Publish, Replay and Cache Operators", "Ben Christensen", "benjchristensen", "05/07/13, 02:53:54 PM", "(Redo of https://github.com/Netflix/RxJava/pull/260 after merging)\n\nAdded basic Publish (https://github.com/Netflix/RxJava/issues/15) and Replay (https://github.com/Netflix/RxJava/issues/71) operators to Observable. I have not done any of the overloads (particularly `Replay` which has 10+ in .Net.\n\nI also added a new `Cache` operator as discussed by @johngmyers and I at https://github.com/Netflix/RxJava/pull/209.\n\nPlaying with `Replay` and `ConnectableObservable` it does not cater well to the typical use case of needing to just de-dupe calls (cache the responses) so this `Cache` operator can be thought of as an automatic version of `Replay`. It comes with the same risk as `toList` if used with infinite or very large sequences as you can not unsubscribe from it.", "NaN"], ["264", "Merge BehaviorSubject from Pull 256", "Ben Christensen", "benjchristensen", "05/07/13, 04:19:11 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/256 \n\nAdditionally removes SynchronizedObserver usage from Subject implementations.\n- We don't need to add synchronization as the subjects can trust their source Observables to comply with the Rx contract.\n- This optimization follows Rx Design Guidelines 6.8. Avoid serializing operators\n\nThis was discussed at https://github.com/Netflix/RxJava/pull/256", "NaN"], ["265", "Swing - component event observables and minor cleanup", "Joachim Hofer", "jmhofer", "05/07/13, 10:00:34 PM", "Here's another small pull request concerning the Swing contrib. - With this, I think I'm very well equipped to start with my little Swing Pong demo...", "NaN"], ["266", "change from junit to junit-dep", "Ben Christensen", "benjchristensen", "05/07/13, 10:06:11 PM", "- removes Hamcrest dependencies (http://saltnlight5.blogspot.com/2012/10/whats-up-with-junit-and-hamcrest.html)\n- solves conflicts on our CI server (blocking release to Maven Central)", "NaN"], ["267", "CombineLatest without synchronization", "Joachim Hofer", "jmhofer", "07/05/13, 10:03:20 PM", "Finally, I managed to get rid of all the synchronization in `CombineLatest` (it all boils down to two atomics and one concurrent map). As concurrency is always hairy to get right: Can someone please check that it's okay like that?\n\nI also added static methods to `Observable` for it, and fixed the handling of exceptions within the combining function.\n\nUsage is (though non-asynchronous source observables don't make sense, I use these here in order to keep the example simple):\n\n``` java\nObservable<Integer> o1 = Observable.from(1, 2, 3);\nObservable<Integer> o2 = Observable.from(4, 5, 6);\nObservable<Integer> r = Observable.combineLatest(o1, o2, new Func2<Integer, Integer, Integer>() {\n  @Override Integer call(Integer a, Integer b) {\n    return a + b;\n  }\n});\n```", "NaN"], ["268", "Fix concurrency bug in ScheduledObserver", "Ben Christensen", "benjchristensen", "05/10/13, 08:22:17 PM", "- found a concurrency bug while working on https://github.com/Netflix/Hystrix/issues/123\n- the following code would lock up occasionally due to onCompleted not being delivered:\n\n``` java\npublic class RunTest {\n    public static void main(String[] args) {\n        System.out.println(\"Starting test...\");\n\n        final ArrayList<String> strings = new ArrayList<String>(200000);\n\n        int num = 10000;\n        while (true) {\n            long start = System.currentTimeMillis();\n            final AtomicInteger count = new AtomicInteger();\n            for (int i = 0; i < num; i++) {\n                new TestService1(2, 5).toObservable().forEach(new Action1<Integer>() {\n\n                    @Override\n                    public void call(Integer v) {\n                        count.addAndGet(v);\n                    }\n                });\n\n                new TestService2(\"hello\").toObservable().forEach(new Action1<String>() {\n\n                    @Override\n                    public void call(String v) {\n                        strings.add(v);\n                    }\n\n                });\n            }\n            long time = (System.currentTimeMillis() - start);\n            long executions = num * 2;\n            System.out.println(\"Time: \" + time + \"ms for \" + executions + \" executions (\" + (time * 1000) / executions + \" microseconds)\");\n            System.out.println(\"   Count: \" + count);\n            System.out.println(\"   Strings: \" + strings.size());\n            strings.clear();\n        }\n    }\n}\n```\n- Also made OperationObserveOn not use ScheduledObserver if the `ImmediateScheduler` is chosen to allow an optimization. I believe this optimization is safe because ScheduledObserver does not require knowledge of a Scheduler (such as for now()) and all we do is emit data to the Observer on a scheduler and if we know it's Immediate we can go direct and skip the enqueuing step. This allows shaving off a noticable number of microseconds per execution in the loop above.", "NaN"], ["269", "Fix concurrency bug in ScheduledObserver", "Ben Christensen", "benjchristensen", "05/11/13, 02:10:25 PM", "This is a followup to https://github.com/Netflix/RxJava/commit/1fa6ae3be23200c787cc1c25c0bb8cac99ae0d17 that fixed one issue (concurrency) and created another (broke Rx contract by allowing concurrent execution of onNext).\n\nI have reverted back to the previous implementatio and then attempted to fix the concurrency issue again.\n\nI think it ended up being a simple fix \u2026 just re-ordering the `enqueue` method to remove the race-condition between the logic protected by the AtomicInteger and adding to the queue.\n\nIt's not an atomic operation (adding then processing) so we need to just add to the queue and treat it as an async data structure and keep the AtomicInteger portion to only protecting the \"process or not process\" logic.\n\n``` java\n        // this must happen before 'counter' is used to provide synchronization between threads\n        queue.offer(notification);\n```\n\nThis may still have issues but it's now working in all of my concurrency tests (the ones that broken with the original and then my modified version). The tests are not easy to build unit tests out of as they require running for many seconds and non-deterministically causing a race condition so I have not yet spend the time to try and figure out a deterministic unit test hence them not being committed.", "NaN"], ["271", "Rewrite concat operation to not block on subscribe", "Gerben", "Treora", "05/16/13, 04:23:18 PM", "Hi,\nWhile trying to stop the subscribe function from blocking, I ended up rewriting the most of the concat operation. From related issue discussions it appears the desired behaviour is still under debate, so I hope you agree on the chosen approach. See the explanation below.\nBecause practically it implements two asynchronous observers that interact with eachother, there are quite a few possible race conditions and other possibilities to break the Rx grammar, but I hope I fixed all of them.\nRegards,\n\nGerben\n\nThe concat operator previously blocked on calling subscribe until all the\nsequences had finished. In quite some cases this results in unwanted (and\nunexpected) behaviour, such as when prefixing an infinite Observable\nwith a fixed one, for example when using startWith (which calls concat):\n`someInputStream.startWith(123).subscribe(x -> print(x));`\nThis statement will block indefinitely if the input stream is infinite. Also\non finite sequences it seems silly to have to wait for them to finish.\n\nIn this new approach the incoming observables are put into a queue, instead\nof waiting for the whole sequence to finish. When the first observable\ncompletes, the next one is taken from the queue and subscribed to, and so\non. The queue can be extended while processing the observables, and\nonCompleted is only called when both the source of observables has completed\nand all observables in the queue have been read.", "NaN"], ["272", "BlockingObservable", "Ben Christensen", "benjchristensen", "05/16/13, 04:22:39 PM", "Move all blocking operators to `BlockingObservable`. This has breaking changes for anything using blocking operators ... part of the pursuit of establishing a clean API on our path to 1.0.\n\nThis is something I've been wanting to do for a while but got the push over the ledge via discussion at https://github.com/Netflix/RxJava/issues/270.\n\nThis strays from \"match Rx.Net as closely as possible\" but feels justified for the following reasons:\n- Rx is primarily intended for asynchronous event handling and composition\n- mixing blocking and non-blocking operators is confusing and leads to poor usage patterns\n- mixing blocking operators (like `take` and `takeLast` is non-obvious)\n- Rx.Net intends on deprecating (or has already) blocking operators as per Erik Meijer @headinthebox in this discussion: https://github.com/Netflix/RxJava/issues/270#issuecomment-17882444 \n\nI have removed all blocking operators from `Observable` and put them in `BlockingObservable`. I have left `Observable.toBlockingObservable` as a means of going from one to the other as it is an obvious communication of what is now being permitted. \n\nWhile doing this I also cleaned up some odd API artifacts such as `toObservable` vs `from` and moved implementation specific code from `rx.util` into the internal package `rx.operators` where all code reserves the right to change at any time.\n\nI intend on releasing this as version 0.9.", "NaN"], ["273", "Concat", "Billy Yuen", "billyy", "05/16/13, 04:23:16 PM", "Add new unit test to cover non-blocking subscribe() for Concat operator.", "NaN"], ["274", "0.9 cleanup", "Ben Christensen", "benjchristensen", "05/16/13, 10:54:43 PM", "NaN", "NaN"], ["275", "Move forEach to BlockingObservable", "Ben Christensen", "benjchristensen", "05/16/13, 11:07:31 PM", "- was missed in previous refactoring", "NaN"], ["279", "Adding marble diagrams", "David Gross", "DavidMGross", "05/28/13, 08:15:44 PM", "several new marble diagrams for previously undiagrammed methods", "NaN"], ["280", "Diagrams and some new javadoc content for Observable subclasses", "David Gross", "DavidMGross", "05/28/13, 08:40:58 PM", "Some marble or marblish diagrams and a bit of new documentation for the\nBlockingObservable and ConnectableObservable subclasses.", "NaN"], ["281", "Operation: buffer", "Michael de Jong", "michaeldejong", "07/22/13, 04:55:22 PM", "The buffer operation is an operation which allows you to buffer incoming events into one or more buffers. Depending on their purpose, these buffers can be emitted to an `Observer` when needed. In essence this means that events are collected and propagated to the `Observer` in batches. The [original issue](https://github.com/Netflix/RxJava/issues/16), which this pull request addresses, mentions a total of 10 variations on this operator. This pull request contains code which supports all of them.\n\n![buffer](https://f.cloud.github.com/assets/4491168/731348/2f076cc8-e269-11e2-8fa8-e798f04f2f3c.png)\n\nThe 10 variations which exist in Rx .Net, can be subdivided into two categories: single and multi buffers. With single buffers, only one buffer at any time is actively collecting incoming events, whereas with multi buffers, multiple buffers are actively collecting incoming events. In the first case the `Observer` will receive every original event only once in one buffer, whereas in the latter case, the `Observer` will receive every original event zero or more times.\n### Single buffers\n##### buffer(bufferClosingSelector)\n\nThe bufferClosingSelector parameter is a `Func0<Observable<BufferClosing>>`. It uses to `Func0` object to construct an `Observable` which produces a `BufferClosing` object. Once this object has been produced by the `Observable` the currently active buffer will be closed and emitted to the `Observer`. At the same time a new buffer will be created which will start recording incoming events. \n##### buffer(count)\n\nThis operator closes and emits the current buffer after counting a certain amount of received events. At the same time it will create a new buffer which will start recording incoming events. One example would be `buffer(2)`, which with the following input: `[0, 1, 2, 3, 4, 5]` will output the following buffers: `[0, 1], [2, 3], [4, 5]`.\n##### buffer(timespan)\n\nThis operator closes and emits the current buffer after a certain amount of time has elapsed. At the same time it will create a new buffer which will start recording incoming events.\n##### buffer(timespan, scheduler)\n\nSame as previous operator, but now with a custom scheduler.\n##### buffer(timespan, count)\n\nThis operator closes and emits the current buffer after counting a certain amount of received events or after a certain amount of time has elapsed. At the same time it will create a new buffer which will start recording incoming events.\n##### buffer(timespan, count, scheduler)\n\nSame as previous operator, but now with a custom scheduler.\n### Multiple buffers\n##### buffer(count, skip)\n\nThis operator will create a new buffer after it has received 'skip' amount of events. Each buffer will be closed once it has reached a capacity of '[count'. One example would be `buffer(3, 1)`, which with the following input: `0, 1, 2, 3, 4, 5]`, will output the following buffers: `[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5]`.\n##### buffer(bufferOpenings, bufferClosingSelector)\n\nThis operator takes two parameters: an `Observable<BufferOpening>` and a `Func1<BufferOpening, Observable<BufferClosing>>`. The first parameter determines when buffers are created. The second parameter determines when the buffers are closed. Every time a `BufferOpening` object is received from the `Observable` a new buffer is created. The received `BufferOpening` object is fed into the second parameter which yields an `Observable<BufferClosing>` object. When this `Observable` produces a `BufferClosing` object, the associated buffer is closed and emitted.\n##### buffer(timespan, timeshift)\n\nThis operator is very similar to `buffer(count, skip)`, but in stead of counting events, it's based on time. The `timeshift` period defines how often a new buffer will be created. The `timespan` period defines the period between buffer construction and buffer emission.\n##### buffer(timespan, timeshift, scheduler)\n\nSame as previous operator, but now with a custom scheduler.\n\nAs always, **feedback is welcome!**", "NaN"], ["284", "GroupBy fixes as reported in Issue 282", "Ben Christensen", "benjchristensen", "06/05/13, 04:37:50 AM", "Issue https://github.com/Netflix/RxJava/issues/282\n- Refactored to maintain a single subscription that propagates events to the correct child GroupedObservables.\n- make unsubscribe work correctly for parent/child sequences\n- add language adaptor support", "NaN"], ["285", "Several new or more-precise marble diagrams", "David Gross", "DavidMGross", "06/03/13, 11:08:46 PM", "Add several new or more-specific marble diagrams, correct two bad image\nlinks, correct some typos", "NaN"], ["287", "Error handling and validation", "Ben Christensen", "benjchristensen", "06/04/13, 06:45:01 AM", "Refactoring related to arg validation and error handling.\n\nhttps://github.com/Netflix/RxJava/issues/198 Throw if no onError handler specified\nhttps://github.com/Netflix/RxJava/issues/278 Subscribe argument validation", "NaN"], ["288", "Fix PublishSubject non-deterministic behavior on concurrent modification", "Ben Christensen", "benjchristensen", "06/05/13, 04:30:43 AM", "- changed to take snapshot of observers.values() before iterating in onNext/onError/onCompleted so that nested subscriptions that add to observers can't change the values() iteration\n- single-threaded nested subscriptions are now deterministic\n- multi-threaded subscriptions will no longer be allowed to race to get into an interating onNext/onError/onCompleted loop, they will always wait until the next\n- also improved terminal state behavior when subscribing to a PublishSubject that has already received onError/onCompleted\n\nhttps://github.com/Netflix/RxJava/issues/282", "NaN"], ["290", "Issue 103", "George Campbell", "abersnaze", "07/05/13, 09:30:02 PM", "Adding the zip operator that works on collection of Observables and a FuncN.\n\nhttps://github.com/Netflix/RxJava/issues/103", "NaN"], ["302", "Update Observable.isInternalImplementation, get rid of NullPointerExcept...", "Roman", "nj4x", "07/05/13, 09:15:35 PM", "...ion\n\nNullPointerException has been encountered during my tests. It is because java.lang.Class.getPackage() may return null \"... if no package information is available from the archive or codebase\" (documented feature).", "NaN"], ["303", "Pull 267 - Merge combineLatest", "Ben Christensen", "benjchristensen", "07/05/13, 10:03:20 PM", "Spent some time reviewing it and it seems good. Any bugs can be dealt with as people start playing with it instead of me holding this up as a pull request any longer since this exposes `combineLatest` in `Observable` for I believe the first time and is thus a low risk to breaking any existing users.", "NaN"], ["305", "Getting rid of one of the Gradle 1.6 deprecation warnings", "Joachim Hofer", "jmhofer", "07/22/13, 04:35:58 PM", "This PR addresses one of Gradle's new deprecation warnings.\n\n(The other warning is caused by the LicensePlugin, as far as I can see.)", "NaN"], ["308", "Ensure now() is always updated in TestScheduler.advanceTo/By", "Nick North", "NorthNick", "07/22/13, 04:35:26 PM", "The TestScheduler advanceTimeTo() and advanceTimeBy() methods only update now() correctly if there is a scheduled event in the work queue after the target time. If the queue is empty, now() is not updated at all. If it has no items after the target time, then now() is updated to the time of the last event on the queue.\n\nThe pull request ensures now() is always updated to the target time. There is no check to make sure time always moves forwards, but then that check is not in the current implementation either.", "NaN"], ["309", "A little typo in a comment in the Clojure examples", "Joseph Wilk", "josephwilk", "07/22/13, 04:33:11 PM", "NaN", "NaN"], ["311", "Various Javadoc improvements and corrections.", "Dave Ray", "daveray", "07/31/13, 08:53:46 PM", "I've been exploring the rxjava source code for the last week or two in my spare time and along the way I cleaned up and made minor corrections and improvements to the Javadocs. Here's the changes if they're of interest.", "NaN"], ["312", "Fix for OperatorOnErrorResumeNextViaObservable and async Resume", "Peter McDonnell", "petermd", "07/31/13, 09:01:02 PM", "This patch is to ensure that OnErrorResumeNextViaObservable handles source Observables that emit invalid sequences of onNext/onError/onCompleted.\n\nPlease see #306 for a more detailed description of how this can occur (and what other fixes might be needed)\n\nTo re-create the issue the provided resume Observable itself must be async. Because it does not complete immediately there is a window where the source Observable can produce additional events which are then propogated into the output. \n\nThe fix ensures the operator only propogates onNext/onCompleted as long as the original subscription is valid. It also prevents the resume subscription happening more than once even if multiple onError events being received.", "NaN"], ["314", "Map Error Handling", "Ben Christensen", "benjchristensen", "07/31/13, 10:37:46 PM", "While reviewing pull request https://github.com/Netflix/RxJava/pull/312 I noticed that the behavior of Map didn't seem right in how it continued emitting values and necessitated the changes to onErrorResumeNext. \n\nDigging in it seems the onNext was manually doing error handling but in a non-comprehensive manner whereas now I am letting the `SafeObserver` (previously called `AtomicObserver`) handle it which does unsubscribes and ignores subsequent events if it doesn't unsubscribe correctly.\n\nThis is also related to https://github.com/Netflix/RxJava/issues/216.", "NaN"], ["315", "Change onError(Exception) to onError(Throwable) - Issue #296", "Ben Christensen", "benjchristensen", "08/01/13, 05:25:08 PM", "This changes `Observer#onError(Exception e)` to `Observer#onError(Throwable e)`\n\nSee \"Observer#onError should use Throwable\" https://github.com/Netflix/RxJava/issues/296 for discussion that led to this change.\n\nThis is a breaking change and will result in a version bump from 0.9.x to 0.10.x. ", "NaN"], ["316", "Remove thread.sleep from unit test to speed it up", "Ben Christensen", "benjchristensen", "08/01/13, 05:33:40 PM", ".. and apparently formatting and imports changed a bunch ...", "NaN"], ["318", "Initial support for scheduling on Android Handler threads", "Matthias K\u00e4ppler", "mttkay", "08/23/13, 05:56:26 AM", "To add to the discussion in https://github.com/Netflix/RxJava/pull/317, this is pretty much what we're using in our production app since a few weeks now. It used to live in our app project, but since we've already started talking about adding to rxjava-contrib, I've pulled out the code in question and integrated it into RxJava under rxjava-android.\n\nThis comprises:\n- [x] a `Scheduler` implementation which schedules work on Android's `Handler` threads, including the main UI thread.\n- [x] an `AndroidSchedulers` class which provides factory methods to instantiate Handler schedulers, especially the main thread scheduler\n- [x] unit test support via Robolectric\n- [x] build integration\n\nThere is some discussion needed around both test support and build integration. @mustafasezgin will want to weigh in on this. In order to write Android unit tests, you're unfortunately required to take a few obstacles, so we had to add some cruft to the production code (an empty Android `R` class and a custom test runner.)", "NaN"], ["321", "AtomicObservableSubscription to SafeObservableSubscription", "Ben Christensen", "benjchristensen", "08/24/13, 04:00:59 AM", "NaN", "NaN"], ["322", "Update Android README.md", "Matthias K\u00e4ppler", "mttkay", "08/24/13, 05:03:46 PM", "Added sample usage of Android Handler schedulers.", "NaN"], ["323", "Static core", "Matt Jacobs", "mattrjacobs", "08/30/13, 05:35:18 PM", "Another take on Issues #204, #208.  \n- typesafe rxjava-core\n- modular jars\n- Scala support via implicits\n- Groovy support via extension methods\n- No Clojure support in this PR (eventually via macros)\n- Eliminated JRuby support (for now)", "NaN"], ["324", "0.11 Cleanup", "Ben Christensen", "benjchristensen", "08/30/13, 10:27:59 PM", "NaN", "NaN"], ["325", "Preserve metadata on fn and action macros", "Dave Ray", "daveray", "08/31/13, 06:07:39 AM", "Because they're macros, rx/fn and rx/action would lose metadata attached\nto them, in particular type hints which are slightly important to\ndisambiguate overloaded Observable methods. Fixed.", "NaN"], ["330", "Make DummyObservable visible to clojureTest classpath.", "Dave Ray", "daveray", "08/31/13, 08:28:40 PM", "RxJava issue #327. Moved DummyObservable into main so that it's\ncompiled and available when the clojureTest task executes. Perhaps\nsomeone with stronger Gradle skills can figure out how to put this Java\nclass in src/test and get things to work out. Correctly. For the time\nbeing, several clean/build cycles worked fine for me.", "NaN"], ["331", "Adding super/extends so that Observable is covariant", "Joachim Hofer", "jmhofer", "09/04/13, 10:43:30 PM", "Ok, so this pull request changes a _lot_ of lines. It's mostly generalizing all the `FuncX`s to be used like `FuncX[-T1, -T2, ..., -TX, +R]` (contravariant parameters, covariant return type) and all the `Observer`s to be used \"in a contravariant way\". A few of the `Observable` uses are covariant, now, too (mostly `zip`).\n\nThis is the pull request for #326.\n\nThis doesn't look very good in the code (thanks Java). Also, it doesn't seem to make Scala interop easier at all (at least not yet).\n\nPlease take a look. I'm not exactly happy with the result. - Maybe I'm doing something wrong here? - I've still got hope that there's an easier way...\n\nThe pull request compiles and tests ok for me (except for the Clojure module, but that's another story and not due to my changes).", "NaN"], ["332", "Issue 329: Fix non-deterministic unit tests", "Ben Christensen", "benjchristensen", "08/31/13, 09:15:47 PM", "I'm sure there are others, but I've tried to fix the ones reported in https://github.com/Netflix/RxJava/issues/329", "NaN"], ["341", "Update gradle wrapper to latest", "Justin Ryan", "quidryan", "09/03/13, 08:51:23 PM", "NaN", "NaN"], ["343", "Covariant Support with super/extends and OnSubscribeFunc", "Ben Christensen", "benjchristensen", "09/04/13, 10:43:29 PM", "Merging and adding to work by @jmhofer in https://github.com/Netflix/RxJava/pull/331\n\nIn particular this adds the following change to the previous pull request:\n\n``` java\npublic static <T> Observable<T> create(Func1<? super Observer<? super T>, ? extends Subscription> func)\n```\n\nto\n\n``` java\npublic static <T> Observable<T> create(OnSubscribeFunc<T> func)\n```", "NaN"], ["344", "Update Clojure interop to support new OnSubscribeFunc with rx/fn.", "Dave Ray", "daveray", "09/04/13, 11:14:56 PM", "NaN", "NaN"], ["345", "Remove unnecessary Observable constructor", "Ben Christensen", "benjchristensen", "09/04/13, 11:14:45 PM", "- fixed unit tests that relied on it", "NaN"], ["346", "BlockingObservable Refactor", "Ben Christensen", "benjchristensen", "09/05/13, 01:10:01 AM", "- No longer extends from Observable. If someone chooses to use BlockingObservable the intent is to leave the Observable so it shouldn't show the non-blocking operators.\n- Remove duplicate static methods, similar to how done on Observable in earlier commit.", "NaN"], ["347", "Fixing Scala unit tests after previous commits accidentally broke them", "Ben Christensen", "benjchristensen", "09/05/13, 01:27:08 AM", "NaN", "NaN"], ["348", "switchDo to switchOnNext", "Ben Christensen", "benjchristensen", "09/05/13, 06:44:08 AM", "See https://github.com/Netflix/RxJava/issues/342 for original question.\n\nDoes anyone have an opinion on this?", "NaN"], ["349", "Window Operator", "Ben Christensen", "benjchristensen", "09/05/13, 10:14:03 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/337\n\nSince this pull request was submitted there were significant changes to the `create` operator and generics, so I manually merged into master. I have not actually reviewed for behavior, but unit tests are passing and code structure looked good.\n\nThis is for issue https://github.com/Netflix/RxJava/issues/102?source=c", "NaN"], ["350", "A little Swing wrap-up", "Joachim Hofer", "jmhofer", "09/06/13, 04:34:12 PM", "These are some old changes in the Swing contrib library that wrap up a few loose endings (javadoc warnings, slightly inconsistent behavior for `KEY_TYPED` events, an additional helper for computing relative mouse motion).\n\nI updated this to work with the current master (and fixed a few warnings concerning unused imports and double semicolons). I also checked whether this needs some variance generalizations, but it seems that it doesn't.", "NaN"], ["351", "Fix Observable.window static/instance bug", "Ben Christensen", "benjchristensen", "09/06/13, 04:29:38 PM", "- reported at https://github.com/Netflix/RxJava/pull/349#issuecomment-23946707", "NaN"], ["352", "Adding Func5-9 and N to the wrapper", "George Campbell", "abersnaze", "09/06/13, 07:02:36 PM", "the zip(Collection, FuncN) isn't working in groovy because the function wrapper doesn't implement FuncN", "NaN"], ["353", "Take Operator Error Handling", "Ben Christensen", "benjchristensen", "09/07/13, 07:05:51 AM", "Unit test for https://github.com/Netflix/RxJava/issues/217", "NaN"], ["354", "Count, Sum, Average implementations", "Joachim Hofer", "jmhofer", "09/09/13, 04:52:15 PM", "I implemented three easy  operations here simply using `reduce`.\n\nTwo things were tricky however:\n1. How to name the various \"overloads\" (have to use different names due to identical erasure). I propose `sum`, `sumLongs`, `sumFloats`, `sumDoubles` here (and the same for the averages).\n2. How to handle empty source observables when averaging. I propose throwing an `ArithmeticException` here.\n\nAny other opinions?", "NaN"], ["355", "implemented skipWhile and skipWhileWithIndex (#80)", "Joachim Hofer", "jmhofer", "09/09/13, 04:53:07 PM", "The title says it all already.", "NaN"], ["356", "Added interval methods to Observable, where they were still missing", "Joachim Hofer", "jmhofer", "09/09/13, 04:53:56 PM", "This was simply missing and forgotten in #55.", "NaN"], ["357", "Implemented \"First\" and \"FirstOrDefault\" operations", "Joachim Hofer", "jmhofer", "09/10/13, 01:06:10 AM", "This PR builds upon the `skipWhile`  PR (#355) which makes implementing the two `first` variants extremely easy.\n\nI changed `firstOrDefault` slightly from what Rx.NET does by explicitly requiring a default value as parameter of the function call. I don't know what default value I should return otherwise, except `null` (and imho this would be pretty useless).\n\nThis PR addresses issue #44.", "NaN"], ["361", "Fix vararg issues reported in https://github.com/Netflix/RxJava/issues/359", "Ben Christensen", "benjchristensen", "09/10/13, 12:54:16 AM", "Branch working on https://github.com/Netflix/RxJava/issues/359\n\nI'll continue committing to this until all the varargs are replaced.", "NaN"], ["362", "Merge 'first' Operator", "Ben Christensen", "benjchristensen", "09/10/13, 01:05:58 AM", "Merge pull request https://github.com/Netflix/RxJava/pull/357 with `first` and `firstOrDefault` operators.", "NaN"], ["363", "unit tests for covariance", "Ben Christensen", "benjchristensen", "09/10/13, 01:47:55 AM", "- refactoring so not everything for the entire Observable ends up in a single class", "NaN"], ["364", "additions to tests", "Ben Christensen", "benjchristensen", "09/10/13, 02:39:26 AM", "NaN", "NaN"], ["368", "Operators: Throttle and Debounce", "Ben Christensen", "benjchristensen", "09/11/13, 04:53:16 PM", "This adds `throttleFirst`, `throttleLast` (alias of `sample`) and `debounce` (aliased with `throttleWithTimeout`).\n\nThis merges pull request https://github.com/Netflix/RxJava/pull/258.\n\nUnfortunately the Rx `throttle` operator behavior is actually `debounce`, not `throttle`. This pull request tries to address that.\n\nHere is a good place to get a description of `throttle` versus `debounce`: http://drupalmotion.com/article/debounce-and-throttle-visual-explanation\n\n> Debounce: Think of it as \"grouping multiple events in one\". Imagine that you go home, enter in the elevator, doors are closing... and suddenly your neighbor appears in the hall and tries to jump on the elevator. Be polite! and open the doors for him: you are debouncing the elevator departure. Consider that the same situation can happen again with a third person, and so on... probably delaying the departure several minutes.\n> \n> Throttle: Think of it as a valve, it regulates the flow of the executions. We can determine the maximum number of times a function can be called in certain time. So in the elevator analogy.. you are polite enough to let people in for 10 secs, but once that delay passes, you must go!\n\nOther links includes:\n- http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n- http://www.illyriad.co.uk/blog/index.php/2011/09/javascript-dont-spam-your-server-debounce-and-throttle/\n\nI feel we need some kind of `throttle*` operator name as an alias to `debounce` to help people discover it, especially those coming from Rx.Net or RxJS. I'm not fond of `throttleWithTimeout` which is what I have it as right now. Perhaps `throttleViaDebounce` even though that doesn't actually make sense? \n\nI do not want to use `throttle` because it's not actually the definition of `throttle`. To confirm this I have asked over a dozen server-side engineers what their definition of `throttle` is and their expectations of an operator is. It never matches the Rx definition and they are always surprised by the `debounce` behavior.\n\nI have included `throttleLast` as an alias to `sample` so that as people start typing `throttle...` it prompts them for the different options and discoverability will be improved instead of knowing to go look for `sample`.\n\nThe `throttleFirst` operator is included as an efficient approach to throttling tht does not involve ticking time, intervals or buffering in any way. It simply allows an `onNext` value through if the last `onNext` event was greater than X time units ago. All others are discarded. This matches server-side throttling expectations and is limited overhead.\n\nQuestions:\n\n1) Is there a better name for `throttleWithTimeout` as an alias to `debounce`?\n2) Does the documentation sufficiently explain the different strategies?\n3) If ambitious in your review, does anyone see concurrency bugs?", "NaN"], ["369", "Remove covariance of scan/reduce", "Ben Christensen", "benjchristensen", "09/11/13, 04:52:56 PM", "Remove covariance of scan/reduce since consumer/producer are the same <T, T, T>\n\nSee https://github.com/Netflix/RxJava/issues/360#issuecomment-24203016", "NaN"], ["370", "Change zip method signature from Collection to Iterable", "Ben Christensen", "benjchristensen", "09/11/13, 04:52:23 AM", "Fix javadoc typos.", "NaN"], ["371", "Operator: Retry", "Ben Christensen", "benjchristensen", "09/11/13, 06:18:58 AM", "https://github.com/Netflix/RxJava/issues/72", "NaN"], ["373", "a few warnings, javadoc, and one missing scheduler parameter", "Joachim Hofer", "jmhofer", "09/13/13, 03:20:09 AM", "This is just a quick fix for #368 according to @samuelgruetter's comments.\n\nI also removed a few unnecessary `@SuppressWarnings(\"unchecked\")` and one unnecessary semicolon.", "NaN"], ["374", "Implemented distinctUntilChanged operation", "Joachim Hofer", "jmhofer", "09/13/13, 03:22:34 AM", "This is the implementation for `distinctUntilChanged` as described in #39.\n\nI haven't implemented the two methods from .NET that are using an `IEqualityComparator` because I don't think it would be idiomatic Java to define an interface like this and use that here. - Or does somebody want that?", "NaN"], ["375", "Implemented `distinct` operator", "Joachim Hofer", "jmhofer", "09/13/13, 03:35:35 AM", "This PR implements `distinct`, as speficied by #38. \n\nAgain, I haven't implemented the .NET methods taking an `IEqualityComparator` (see #374).", "NaN"], ["376", "Idiomatic Scala Adaptor", "Samuel Gruetter", "samuelgruetter", "09/13/13, 03:19:17 AM", "This is a first pull request for https://github.com/Netflix/RxJava/issues/336 . The Scala Adaptor is still far from being finished (see TODOs in `language-adaptors/rxjava-scala/TODO.md`), but I think it's in a state where it can be merged in so that people can try it out and give feedback.", "NaN"], ["377", "Distinct operator", "Ben Christensen", "benjchristensen", "09/13/13, 03:35:34 AM", "Merging https://github.com/Netflix/RxJava/pull/375", "NaN"], ["378", "UnitTests while working on EventStream use cases", "Ben Christensen", "benjchristensen", "09/13/13, 03:42:01 AM", "NaN", "NaN"], ["379", "Make `interval` work with multiple subscribers", "Joachim Hofer", "jmhofer", "09/13/13, 04:39:10 PM", "As per @samuelgruetter's comments in #55, I added some tests against `interval` together with multiple subscribers, and then proceeded to fix the behavior by wrapping it in another subscription function.\n\nI hope it's ok now.", "NaN"], ["380", "Implemented `distinct` and `distinctUntilChanged` variants using a comparator", "Joachim Hofer", "jmhofer", "09/13/13, 04:44:09 PM", "As @abersnaze and @benjchristensen both agreed (see the #374 discussion) that they'd like the comparator versions of these two operations, too, I implemented them here.", "NaN"], ["381", "Implemented `mapWithIndex`", "Joachim Hofer", "jmhofer", "09/14/13, 03:37:10 PM", "As requested by @samuelgruetter in #372.", "NaN"], ["382", "Removing deprecated RxImplicits from rxjava-scala", "Matt Jacobs", "mattrjacobs", "09/18/13, 05:31:32 AM", "Now that @samuelgruetter's work on a value class implementation of Scala Observable has been merged, no need for the standalone `RxImplicits`", "NaN"], ["385", "Implemented the 'any' operator", "Shixiong Zhu", "zsxwing", "09/21/13, 08:31:37 PM", "This implements the operator `Any` from #24 in all two variants.\n\nHowever, I encountered two problems.\n\nUpdated: the online document http://msdn.microsoft.com/en-us/library/hh211993(v=vs.103).aspx is wrong. See my later discussion.\n\nAnother question is if I add the `any` method to `rx.Observable<T>`, some unit tests will fail as the method `any` in  `rx.Observable<T>` overrides the method `org.mockito.Matchers.any(java.lang.Class<T>)` in some unit tests (e.g., `rx.subjects.ReplaySubject<T>`). Do I need to use another method name, or just modify the unit tests? Now the `any` methods in `rx.Observable<T>` are commented out.\n\nThanks.", "NaN"], ["389", "Scala Adaptor Improvements", "Samuel Gruetter", "samuelgruetter", "09/18/13, 05:27:48 AM", "Includes groupBy, scala README, examples, moving ImplicitFunctionConversions out of internal package, multicast, publish, replay, and methods for BlockingObservable.\n\nNote that the commit https://github.com/samuelgruetter/RxJava/commit/ac26e42d1e85deac0b7bfa50c3ca3e5298493dd4 modifies core by making the Java `Subject<T, R>` used as contravariant in `T` and covariant in `R`, which allows me to write Scala's multicast without typecasting.", "NaN"], ["390", "Implemented the 'elementAt' and 'elementAtOrDefault' operators. see #41", "Shixiong Zhu", "zsxwing", "09/21/13, 08:40:00 PM", "Hi,\n\nThis implements the `ElementAt` and `ElementAtOrDefault` operators from #41.\n\nFor `ElementAt`, if the index is less than 0, or greater than or equal to the number of elements in the source sequence, an IndexOutOfBoundsException will be threw.\n\nFor `ElementAtOrDefault`,  if the index is less than 0, an IndexOutOfBoundsException will be threw. What's more, I added a `defaultValue` parameter. I can not get the element type in the source observable due to type erasure. So I can not determine the default value automatically. That's why `ElementAtOrDefault` needs  a `defaultValue` parameter.", "NaN"], ["391", "remove scalatest packages from OSGI imports", "Brad", "brad-uk", "09/19/13, 04:54:33 AM", "NaN", "NaN"], ["393", "Parallel Operator & ObserveOn/ScheduledObserver Fixes", "Ben Christensen", "benjchristensen", "09/19/13, 05:07:06 AM", "#### Parallel Operator\n\nThis operator came out of discussions and work with @headinthebox to allow explicit and composable declaration of blocks of work that can be scheduled for parallel execution.\n\nAn Observable event stream will be sharded using groupBy using a value from Scheduler. degreeOfParallelism() (defaulting to number of CPU cores) and perform the defined work in parallel.\n\nInstead of having various parallel operators like parallelMap, parallelFilter parallelScan etc this can work generically for any operators or sequence of operators.\n#### Fix ObserveOn, NewThreadScheduler and ScheduledObserver bugs\n\n@headinthebox and I were working on some code and found differences in behavior between Rx.Net and RxJava with observeOn. This commit should fix that.", "NaN"], ["394", "Change Interval and Sample default Scheduler", "Ben Christensen", "benjchristensen", "09/19/13, 05:07:51 AM", "Change to use built-in thread-pools rather than creating a new Executor on each invocation.\nThe built-in ones are shared across all operators, have threads ready, are marked as daemon threads so don't prevent system shutdown, and are named for clarity when looking at thread dumps and debuggers.\n\nThis fixes https://github.com/Netflix/RxJava/issues/388", "NaN"], ["396", "Add missing methods to Scala Adaptor", "Samuel Gruetter", "samuelgruetter", "09/21/13, 07:05:18 AM", "This pull request adds a method to the Scala Observable for each method in the Java Observable. Some were renamed, have a different signature, or were left out intentionally. A comparison can be found [here](https://github.com/samuelgruetter/rx-playground/wiki/Comparison-of-Scala-Observable-and-Java-Observable). \n\nThe Scala Observable should now be complete, but there are still some [TODOs](https://github.com/samuelgruetter/RxJava/blob/a2ab731ce1a867e1a2902c27062bcea2923ef303/language-adaptors/rxjava-scala/TODO.md).\n\nThere should be no breaking changes, but only additions.\n\nThere's also an automatic completeness test (`rx.lang.scala.CompletenessTest`). If methods are missing, it still succeeds, but it prints the missing methods to stdout.", "NaN"], ["397", "Observable API for Apache HttpAsyncClient 4.0", "Ben Christensen", "benjchristensen", "09/21/13, 09:05:36 PM", "This is still experimental, I have not used it for any significant load or production traffic.", "NaN"], ["398", "Merge 'any' Pull Request", "Ben Christensen", "benjchristensen", "09/21/13, 08:31:36 PM", "Merges pull https://github.com/Netflix/RxJava/pull/385\n\nI changed `any` to `isEmpty` and `exists` as I agree with @samuelgruetter comment at https://github.com/Netflix/RxJava/pull/385#issuecomment-24568332. These names feel more idiomatic to Java languages.", "NaN"], ["399", "Merge Pull #390 - elementAt", "Ben Christensen", "benjchristensen", "09/21/13, 08:39:59 PM", "Merge pull https://github.com/Netflix/RxJava/pull/390", "NaN"], ["400", "Removing 'comparator` overloads of `distinct`", "Ben Christensen", "benjchristensen", "09/21/13, 09:11:02 PM", "Removing these fairly recently added overloads as they turn out to not be the best approach.\n\nDiscussion ongoing as to how to implement them at https://github.com/Netflix/RxJava/issues/395", "NaN"], ["401", "Implemented the 'DefaultIfEmpty' operator. See #34", "Shixiong Zhu", "zsxwing", "09/25/13, 06:24:32 PM", "Hi,\n\nThis implements the `DefaultIfEmpty` operator from #34.\n\nThere are two variants. However, I can not get the element type in the source observable due to type erasure. So I only implemented the variant with a default value: http://msdn.microsoft.com/en-us/library/hh229624(v=vs.103).aspx\n\nPlease take a look. Thanks.", "NaN"], ["402", "Fixes to rxjava-apache-http", "Ben Christensen", "benjchristensen", "09/22/13, 04:27:26 AM", "- made Content-Type inspection more reliable\n- other small improvments", "NaN"], ["403", "Implemented the 'cast' and 'ofType' operators", "Shixiong Zhu", "zsxwing", "09/25/13, 06:28:55 PM", "Hi,\n\nI used 'map' to implement the 'cast' operator #26. I also used 'cast' to implement the 'ofType' operator #67.\nPlease take a look. Thanks!", "NaN"], ["407", "Implemented RefCount Operator", "John Marks", "johnhmarks", "10/09/13, 05:45:15 AM", "Please note that I placed the unit tests under the test root rather than inline with the implementation as has been done for other operators.  This is due to a bug in IDEA that prohibits running unit tests in folders designated as source rather than test.  I can see that a bunch of other operators follow this convention so hopefully that's okay.", "NaN"], ["408", "Do not run RxScalaDemo on each build", "Samuel Gruetter", "samuelgruetter", "09/25/13, 06:04:42 PM", "On my last pull request, I forgot to uncomment the line which ignores `RxScalaDemo`, so currently it is executed on each build, even though it does no automatic testing. And since `RxScalaDemo` takes about 48 seconds, this significantly increases build time. Sorry for this...\n\nAfter this change, the complete build took 3 mins 33.932 secs on my 3 years old laptop, so if cloudbees can't build it in 10 min, there might be something else not properly working...", "NaN"], ["409", "Implemented 'Synchronize' with 'lock'", "Shixiong Zhu", "zsxwing", "09/25/13, 06:03:16 PM", "Hi,\n\nI implemented #84 to support that sending a lock to the `synchronize` operator.\n\nI also found that there was a issue that `testMultiThreadedWithNPE` and `testMultiThreadedWithNPEinMiddle` might fail in some special situation. When `onError` is invoked before any `onNext`, the last statement `assertEquals(1, busyObserver.maxConcurrentThreads.get());` in these methods will fail. I also fixed this issue in the pull request.", "NaN"], ["410", "Implemented the 'Contains' operator", "Shixiong Zhu", "zsxwing", "10/09/13, 05:46:56 AM", "Hi, I implemented the `Contains` operator #31. I saw the discussion about the `distinct` operator #395, so I did not implement the comparator override. Please take a look. Thanks!", "NaN"], ["411", "update counter before triggering latch", "Peter McDonnell", "petermd", "10/09/13, 05:47:27 AM", "as mentioned in #383\n\nrx.concurrency.TestSchedulers.testSchedulingWithDueTime\n\nis flaky because there is a race-condition where the test can assert the counter value before it is updated. fix is just to update the counter before releasing the latch.", "NaN"], ["413", "Fixed the issues of takeLast(items, 0) and null values", "Shixiong Zhu", "zsxwing", "10/09/13, 05:50:01 AM", "Hi,\n\nThere are two issues about `takeLast` #85 #140. The essential cause is `LinkedBlockingDeque`.\n1. count == 0\n   `takeLast` in RxJava will throw an exception when count == 0, as `LinkedBlockingDeque` rejects count <= 0. However, in c#, TakeLast with 0 count is valid. The following codes is OK in C# (no exception and do nothing):\n\n``` c#\n            var source = Observable.Return(1).TakeLast(0);\n            source.Subscribe(\n                x => \n                    Console.WriteLine(\"subscriber got \" + x)\n            );\n            Console.ReadLine();\n```\n1. null values\n   LinkedBlockingDeque requires the elements can not be null but an observable can emit a null value.\n\nI used `ReentrantLock` and `LinkedList` to replace `LinkedBlockingDeque`. Please take a look. Thanks.", "NaN"], ["414", "Implemented the 'SkipLast' operator", "Shixiong Zhu", "zsxwing", "10/09/13, 05:54:28 AM", "Hi,\n\nI implemented the `skipLast` operator #78.  I used `ReentrantLock` and `LinkedList` to implement it rather than `LinkedBlockingDeque` like `takeLast` #85 #140 for two reasons.\n- LinkedBlockingDeque requires that count is greater than 0 but `skipLast` can accept 0. \n- LinkedBlockingDeque requires the elements can not be null but an observable can emit a null value.\n\nIn summary, `LinkedBlockingDeque` will cause issues like #413.\n\nPlease take a look. Thanks.", "NaN"], ["415", "Implemented the 'Empty' operator with scheduler", "Shixiong Zhu", "zsxwing", "10/09/13, 05:55:29 AM", "Hi,\n\nI implemented the 'Empty' operator with scheduler #42. Please take a look. Thanks.", "NaN"], ["416", "Implemented the 'Throw' operator with scheduler", "Shixiong Zhu", "zsxwing", "10/09/13, 08:52:32 PM", "Hi,\n\nI implemented the `Throw` operator #89 with scheduler. I found that RxJava had an `error` method. So I just implemented the scheduler overload.", "NaN"], ["420", "Scala Adaptor", "Samuel Gruetter", "samuelgruetter", "10/09/13, 06:00:36 AM", "Here are more improvements to the Scala adaptor, mostly changes in classes other than `rx.lang.scala.Observable` itself, as well as scaladoc for all classes. And the `MovieLib` example is now part of the `rxjava-scala` project instead of being a seperate project.", "NaN"], ["422", "JRuby function wrapping support", "Mike Ragalie", "ragalie", "10/09/13, 06:08:47 AM", "This PR fixes #320 by implementing JRuby wrappers for RxJava-specific function interfaces. Given a set of method signatures for a Java method, JRuby will select the signature that best matches the Ruby arguments provided and wrap each argument in a proxy that implements the correct Java interface.\n\nOccasionally JRuby will be unable to unambiguously select one method signature over another, and will either a) select the correct signature, but report that there was ambiguity in the method signatures or b) select the wrong signature and fail.\n\nBy explicitly wrapping `Proc` arguments into wrappers that implement the correct RxJava interface, JRuby will always select the correct method signature and will not need to wrap the argument in a proxy, increasing both correctness and performance.", "NaN"], ["424", "Implemented the 'IgnoreElements' operator", "Shixiong Zhu", "zsxwing", "10/09/13, 08:11:05 PM", "Hi,\n\nI implemented the `IgnoreElements` operator #54. Please take a look. Thanks.", "NaN"], ["425", "Manual Merge of Pull Request #407", "Ben Christensen", "benjchristensen", "10/09/13, 05:45:14 AM", "Added a unit test to #407 while testing it. ", "NaN"], ["426", "PublishSubject ReSubscribe for publish().refCount() Behavior", "Ben Christensen", "benjchristensen", "10/09/13, 08:52:53 PM", "Allow `publish` + `refCount` to support re-subscribing to the origin after decrementing the count to 0 then adding new Observers which increment count to 1+.\n\nThe PublishSubject implementation was performing onError/onCompleted unsubscribe logic that was put in place long ago and I am now pretty sure it was wrong.\n\nThis was revealed while playing with `refCount` which intends on allowing a re-subscription to the source once new Observers arrive. PublishSubject was preventing that.\n\nThe one use case that I'm still wondering about though is if someone subscribes to a PublishSubject after it has emitted onCompleted and isn't \"restarted\". That Observer would wait forever if it is a \"single-shot\" PublishSubject use case. I'm not sure if that's just a bad use and fits into the \"don't do that\" scenario, or if it's a legit issue that has a solution.\n\nRight now this code is \"thread-safe\" in the visibility sense, but it's not atomic and could have race conditions between adding/removing Observers and event notifications. I don't think that's an issue as if someone is concurrently adding/removing it's always a race, but am not 100% sure if there's a use case I'm missing. This also assumes (as it always did) that someone is not invoking onNext concurrently as that would break the Rx contract.", "NaN"], ["430", "Fixed issue #428", "Shixiong Zhu", "zsxwing", "10/16/13, 05:29:43 AM", "I fixed the issue #428. This issus is because the wrong order of `unsubscribe` and `emitChunk`.\n\n`unsubscribe` will cancel the Future, and the currrent thread's interrupt status will be set. If `unsubscribe` is called before `emitChunk`, the currrent thread's interrupt status has already set before `emitChunk`. It may confuse users when they have some codes depending on the interrupt status.\n\nI put `emitChunk` before `unsubscribe` and added a unit test for it.", "NaN"], ["432", "Fixed path to RxScalaDemo.scala", null, "codecurve", "10/16/13, 05:21:46 AM", "NaN", "NaN"], ["433", "Fixed testOnErrorViaHasNext in issue #383", "Shixiong Zhu", "zsxwing", "10/31/13, 08:28:23 PM", "Hi,\n\nThis PR fixed the issue that `testOnErrorViaHasNext` fails sometimes. It only tries to avoid the failure of unit tests.\nHowever, there is still an issue in the `next` operator. The `hasNext` may return true, but the later `next` throws `IllegalStateException(\"Observable is completed\")`. An example unit test throws `IllegalStateException`:\n\n``` java\n        @Test\n        public void test() {\n            Subject<String, String> obs = PublishSubject.create();\n            Iterator<String> it = next(obs).iterator();\n            assertTrue(it.hasNext());\n            obs.onCompleted();\n            it.next();\n        }\n```\n\nI think @abersnaze is right. \n\n> hasNext should block until either the onNext or onComplete has been called.", "NaN"], ["434", "Implemented SerialSubscription and Timeout operator", "John Marks", "johnhmarks", "10/22/13, 07:38:33 PM", "Implemented Timeout operator and SerialSubscription upon which it is based.", "NaN"], ["435", "rx-apache-http recognizes \"Transfer-Encoding: chunked\" as an HTTP stream", "Matt Jacobs", "mattrjacobs", "10/16/13, 05:59:28 AM", "Uses the same infrastructure already in place for \"Content-Type: text/event-stream\" for HTTP response with chunked encoding.  Works with Twitter Streaming API", "NaN"], ["437", "Fixes: Scheduler and Merge", "Ben Christensen", "benjchristensen", "10/16/13, 06:23:16 AM", "1) Scheduler overload with recursive support\n\nFixed while working with @headinthebox \n\n2) unsubscribe was not propagating to parent Observable on merge(Observable<Observable<T>>)\n\nFound and fixed while working with infinite streams. Merge was correctly unsubscribing from all children which means it was always working when doing something like `merge(a, b)`, but it wasn't correctly unsubscribing if given a single `Observable<Observable<T>>`", "NaN"], ["438", "Kotlin Language Adaptor", "Mario Arias", "MarioAriasC", "10/17/13, 02:20:27 AM", "Kotlin could be used with RxJava without language adaptors.\n\nThis language adaptor just provide a set of extension functions to enable a more idiomatic usage.  \n\nThere are two test classes:\n- BasicKotlinTest is just plain Kotlin\n- ExtensionTest is Kotlin with the extensions provided by this adaptor  ", "NaN"], ["441", "Fixed the issue that 'take' does not call 'onError'", "Shixiong Zhu", "zsxwing", "10/22/13, 07:35:14 PM", "I fixed one of the issues in #417: `System.out.println(Observable.from(1, 2, 3).take(1).map(f).toBlockingObservable().single());` is never terminated.\n\nThis issues is because `take` does not handle the exception throwing from `onNext` correctly.", "NaN"], ["443", "OperationSwitch notify onComplete() too early.", "Yannick Lecaillez", "ylecaillez", "10/22/13, 07:36:17 PM", "OperationSwitch has to wait that both parent and child complete before complete itself.", "NaN"], ["447", "Caching the result of 'isInternalImplementation'", "Matt Jacobs", "mattrjacobs", "10/22/13, 07:52:54 PM", "Currently, reflective getPackage() call happens on every subscribe() invocation.  This PR sets up a Concurrent HashMap to cache the result of this call per-class.", "NaN"], ["449", "Removing println from OperationMerge", "Matt Jacobs", "mattrjacobs", "10/23/13, 11:36:09 PM", "NaN", "NaN"], ["450", "Implemented the 'TimeInterval' operator", "Shixiong Zhu", "zsxwing", "10/31/13, 07:19:24 PM", "Hi, this PR implemented the `TimeInterval` operator #90. Please take a look. Thanks.", "NaN"], ["452", "Implemented the scheduler version of the 'Return' operator", "Shixiong Zhu", "zsxwing", "10/31/13, 08:26:19 PM", "Hi, this is the scheduler version of the 'Return' operator #73.", "NaN"], ["453", "Fixed issue #417", "Shixiong Zhu", "zsxwing", "10/31/13, 07:17:48 PM", "``` java\npublic static void main(String[] args) {\n    System.out.println(\"started\");\n    System.out.println(Observable.from(1).observeOn(Schedulers.threadPoolForComputation())\n        .map(f).toBlockingObservable().single());\n    System.out.println(\"done\");\n}\n```\n\nThis issue in #417 is because current `map` implementation violates the design guild:\n\n> 6.4. Protect calls to user code from within an operator\n\nNow current `map` does not handle the error from the `func` param which may be user codes. When the thread pool scheduler is involved, the error from `func` will throw to the outside and be handled by `java.util.concurrent.FutureTask`. The error will be dropped so the observer will not see it.\n\nThis PR used `SafeObserver` to protect `map` from user codes.", "NaN"], ["455", "Scala Adaptor: TODO list and documentation", "Samuel Gruetter", "samuelgruetter", "10/31/13, 07:16:26 PM", "More complete TODO list for Scala Adaptor and some documentation for [CompletenessTest](https://github.com/samuelgruetter/RxJava/blob/scalaadaptor/language-adaptors/rxjava-scala/src/test/scala/rx/lang/scala/CompletenessTest.scala).", "NaN"], ["458", "[rxjava-android] OperationObserveFromAndroidComponent", "Matthias K\u00e4ppler", "mttkay", "10/31/13, 07:16:04 PM", "This is in reference to https://github.com/soundcloud/RxJava/issues/1\n\nAndroid applications can use this operator to safely observe a source sequence on the main user interface thread. As long as the subscription is unsubscribed from in `onDestroy` or `onDetach`, no resource leaks will occur.\n\nI have also added an `AndroidObservable` class which acts as an entry point for instantiating Android specific observer instances.", "NaN"], ["459", "Fixed issue #454", "Shixiong Zhu", "zsxwing", "10/31/13, 07:14:33 PM", "Hi, I used SafeObservableSubscription to fix the issue #454.", "NaN"], ["460", "Implemented the 'Amb' operator", "Shixiong Zhu", "zsxwing", "11/05/13, 04:17:33 AM", "Hi, this PR implemented the `Amb` operator #22. I used varargs to support the array version and first-second version in one method. So in my PR, there are only two variants.", "NaN"], ["463", "Added the rest overloads of Timeout operator", "Shixiong Zhu", "zsxwing", "11/12/13, 11:00:18 PM", "Hi, this PR implemented the rest overloads of `Timeout` operator #91. Please take a look. Thanks.", "NaN"], ["465", "Moving unit tests to test source folders #439", "Pedro Antonio Souza Viegas", "pasviegas", "11/05/13, 04:10:49 AM", "NaN", "NaN"], ["466", "Refactor Unit Tests from Inner Classes to /src/test", "Ben Christensen", "benjchristensen", "11/05/13, 04:10:49 AM", "Manual merge of and additions to pull request https://github.com/Netflix/RxJava/pull/465 to refactor unit tests from inner classes to separate /src/test/ folder to accomplish issue https://github.com/Netflix/RxJava/issues/439  \"minimize library size\".\n\nGreat work by @pasviegas on this pull request!", "NaN"], ["467", "Merge Amb Operator in PR https://github.com/Netflix/RxJava/pull/460", "Ben Christensen", "benjchristensen", "11/05/13, 04:17:32 AM", "Split unit tests out while merging.", "NaN"], ["470", "Operator: Last", "Ben Christensen", "benjchristensen", "11/07/13, 03:27:28 AM", "Adds `Observable.last` and fixes behavior of `BlockingObservable.last` based on email discussion with @headinthebox ", "NaN"], ["471", "Unit Test Tweaks", "Ben Christensen", "benjchristensen", "11/07/13, 04:12:45 AM", "NaN", "NaN"], ["472", "BugFix: Issue 431 Unsubscribe with Schedulers.newThread", "Ben Christensen", "benjchristensen", "11/07/13, 04:49:36 AM", "Fix bug => Unsubscribing does not work when using subscribeOn(Schedulers.newThread())\n\nI believe this fixes https://github.com/Netflix/RxJava/issues/431\n\nThe NewThreadScheduler was not using DiscardableAction that supports being unsubscribed.", "NaN"], ["473", "Fix non-deterministic unit test", "Ben Christensen", "benjchristensen", "11/07/13, 11:14:19 PM", "- the latch was before onError is called\n- use BlockingObservable and expect the IllegalArgumentException to be thrown", "NaN"], ["474", "BugFix: Reduce an empty observable", "Ben Christensen", "benjchristensen", "11/07/13, 11:27:15 PM", "This fixes issue https://github.com/Netflix/RxJava/issues/423\n\nThe fix is based on this comment by @headinthebox: https://github.com/Netflix/RxJava/issues/423#issuecomment-27642532\n\nThank you @zsxwing  for your involvement on this.\n\nIf I have mis-interpreted the results of the discussion and this is still wrong ... please correct me.\n\nHere is the unit test asserting the behavior:\n\n``` java\n    /**\n     * A reduce should fail with an IllegalArgumentException if done on an empty Observable.\n     */\n    @Test(expected = IllegalArgumentException.class)\n    public void testReduceWithEmptyObservable() {\n        Observable<Integer> observable = Observable.range(1, 0);\n        observable.reduce(new Func2<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer call(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).toBlockingObservable().forEach(new Action1<Integer>() {\n\n            @Override\n            public void call(Integer t1) {\n                // do nothing ... we expect an exception instead\n            }\n        });\n\n        fail(\"Expected an exception to be thrown\");\n    }\n```", "NaN"], ["475", "Additional unit test for reduce", "Ben Christensen", "benjchristensen", "11/07/13, 11:32:05 PM", "NaN", "NaN"], ["476", "Don't emit null onComplete when no onNext received in AsyncSubject", "Ben Christensen", "benjchristensen", "11/07/13, 11:45:22 PM", "Reported via email by @axel22 and @headinthebox ", "NaN"], ["477", "CompositeSubscription bugfixes", "Ben Christensen", "benjchristensen", "11/07/13, 11:59:50 PM", "- remove now also unsubscribes the removed subscription\n- added clear method", "NaN"], ["478", "Implemented the \"Operator: Min and MinBy\" and \"Operator: Max and MaxBy\"", "Shixiong Zhu", "zsxwing", "11/12/13, 11:05:37 PM", "Hi, this PR implemented the `Operator: Min and MinBy` #63 and `Operator: Max and MaxBy` #61. Every operator has 2 variants, one for `Comparable`, another for `Comparator`. Please take a look. Thanks!", "NaN"], ["479", "Adds doOnEach operator", "Scott Fleckenstein", "nullstyle", "11/12/13, 11:09:04 PM", "I thought this would be a good and simple way to start getting my feet wet with RxJava.  This implements #40.\n\nAny feedback would be great.\n\nThanks,\nScott", "NaN"], ["480", "BugFix: Emit an IllegalArgumentException instead of ArithmeticException if the observable is empty", "Shixiong Zhu", "zsxwing", "11/12/13, 11:09:57 PM", "This PR fixed the `average` issue in #423. If an observable is empty, `average` will emit an `IllegalArgumentException` instead of `ArithmeticException`. Thanks!", "NaN"], ["481", "Implement the 'Using' operator", "Shixiong Zhu", "zsxwing", "11/12/13, 11:16:12 PM", "Hi, this PR implemented the `Using` operator #99. Please take a look. Thanks! ", "NaN"], ["483", "DoOn Tweaks", "Ben Christensen", "benjchristensen", "11/13/13, 11:36:08 PM", "- do not have 2 method overloads with similar method signatures, dynamic languages can not negotiate method dispatch using function arity\n- add doOnCompleted and doOnError methods instead of different doOnEach overloads\n\nThis is a very slight breaking change by deleting a method added in the last release. I did not catch this when I did the code review.", "NaN"], ["486", "BugFix: AsyncSubject", "Ben Christensen", "benjchristensen", "11/16/13, 02:55:45 AM", "- it was not emitting values to observers that subscribed after onCompleted/onError", "NaN"], ["492", "Implement the scheduler overloads for Range, From, StartWith", "Shixiong Zhu", "zsxwing", "11/19/13, 05:22:22 PM", "Hi, this PR implemented the scheduler overloads for Range #68, From #98 , StartWith #82. Please take a look. Thanks!", "NaN"], ["496", "Add contravariant for min and max", "Shixiong Zhu", "zsxwing", "11/19/13, 04:37:45 AM", "Hi, this PR added  contravariant for min and max mentioned in #494.", "NaN"], ["497", "Zip rewritten from scratch", "David Karnok", "akarnokd", "11/22/13, 08:25:24 PM", "(I hope I managed a clean branch this time...)", "NaN"], ["499", "ObserveOn Refactor", "Ben Christensen", "benjchristensen", "11/19/13, 08:24:55 PM", "Refactor and small fixes of ObserveOn with @headinthebox ", "NaN"], ["501", "ParallelMerge Operator", "Ben Christensen", "benjchristensen", "11/19/13, 10:07:30 PM", "NaN", "NaN"], ["502", "Fix ObserveOn and add ParallelMerge Scheduler overload", "Ben Christensen", "benjchristensen", "11/20/13, 12:31:38 AM", "- ObserveOn was not correctly recursing when the source was async. It would create a new scheduler (i.e. a new thread) each time.\n- Also added unit tests to ParallelMerge", "NaN"], ["503", "New Scala Bindings", null, "headinthebox", "11/20/13, 01:19:48 AM", "# Alternative Rx bindings for Scala\n\nThe previous RxScala binding attempt to optimize for seamless interop between Scala and Java.\nThe intended interop is illustrated by the following example where in Scala a class is defined that takes\nan `Observable[Movie]` that is transformed using RxScala operators:\n\n``` scala\nclass MovieLib(val moviesStream: Observable[Movie]) {\n   val threshold = 1200\n   def shortMovies: Observable[Movie] = ???\n   def longMovies: Observable[Movie] = ???\n}\n```\n\nwhich is then called in Java, passing a Java `Observable<Movie>` to the constructor\n\n``` java\npublic void test() {\n   MovieLib lib = new MovieLib(Observable.from(...));\n\n   lib.longMovies().subscribe(moviePrinter);\n}\n```\n\nThe technique used to obtain this transparency is to use a value class with a private constructor that implements\nthe Rx operators in an idiomatic Scala way, and a companion object that is used to construct instances in Scala\n\n``` scala\nobject Observable {\n   def apply[T](asJava: rx.Observable[_ <: T]): Observable[T] = { new Observable[T](asJava) }\n}\n\nclass Observable[+T] private[scala] (val asJava: rx.Observable[_ <: T])  extends AnyVal {\n   // Idiomatic Scala friendly definitions of Rx operators\n}\n```\n\nSince `rx.lang.scala.Observable[T] extends AnyVal`, the underlying representation of `rx.lang.scala.Observable[T]`\nis the same as `rx.Observable<T>`. Because `rx.lang.scala.Observable[T]` is an opaque type in Scala,\nthe Scala programmer only sees the Scala-friendly operators.\n\nHowever, in the current the illusion of interop is quickly lost when going beyond this simple example.\nFor example but type `Notification[T]` and `Scheduler[T]` are defined using wrappers,\nand hence they are not compatible with `Notification<T>` respectively `Scheduler<T>`.\nFor instance, when materializing an `Observable[T]` in Scala to an `Observable[Notification[T]]`,\nwe lost the seamless interop with `Observable<Notification<T>>` on the Java side.\n\nHowever, the real problems with seamless interop show up when we try to creating bindings for other Rx types.\nIn particular types that have inheritance or more structure.\n\nFor example, RxScala currently defines a type synonym `type Observer[-T] = rx.Observer[_ >: T]`,\nbut no further bindings for observers.\nSimilarly, for subjects RxScala defines `type Subject[-T, +R] = rx.subjects.Subject[_ >: T, _ <: R]`.\nThe problem with these definitions is that on the Java side, subjects are defined as:\n\n``` scala\npublic abstract class Subject<T, R> extends Observable<R> implements Observer<T> { \u2026}\n```\n\nwithout binding any of the Rx subjects.\n\nThe consequence is that `Subject[S,T]` in Scala is unrelated to `rx.lang.scala.Observable[T]` in Scala,\nbut shows up as a `rx.Observable[T]`. The problem however is that if we want to expose subjects in Scala\nsuch that they derive from both `Observable[S]` and `Observer[T]` we cannot use the `extend AnyVal` trick\nwe used for `Observable[T]` and immediately lose transparent interop with Java.\n\nThe problem is even worse because `AsyncSubject<T>`, `BehaviorSubject<T>`, \u2026 all derive from `Subject<T,T>`,\nso if we want them to derive from a common base `Subject[T,T]` type in Scala we lose transparency for those as well.\nAnd again, if we expose the various subjects by extending `AnyVal`, they are useless in Scala because they do not inherit\nfrom a common base type. To avoid implementing all methods of observable and observer on each specific subject\nwe might add implicit conversions to `Observable[T]` and `Observer[T]` but that still does not give Scala users\na native `Subject[S,T]` type.\n\n``` scala\nobject AsyncSubject {\n    def apply[T](): AsyncSubject[T] =\n      new AsyncSubject[T](rx.subjects.AsyncSubject.create())\n}\n\nclass AsyncSubject[T] private [scala] (val inner: rx.subjects.AsyncSubject[T])\n    extends AnyVal\n{ \u2026 }\n\nimplicit final def asObservable[T](subject: AsyncSubject[T]): Observable[T] =\n  Observable(subject.inner)\n\nimplicit final def asObserver[T](subject: AsyncSubject[T]): Observer[T] =\n  subject.inner\n```\n\nThe inheritance problem is not just limited to subjects, but also surfaces for subscriptions.\nRx scala currently defines `type Subscription = rx.Subscription` using a type synonym as well,\nand we run into exactly the same problems as with subjects when we try to bind the\nvarious Rx subscriptions `BooleanSubscription`, `SerialSubscription`,  etc.\n\nSince we cannot wrap Rx types in Scala such that they are both (a) transparently interoperable with Java,\nand (b) feel native and idiomatic to Scala, we should decide in favor of optimizing RxScala for Scala\nand consumption of Rx values from Java but not for Scala as a producer.\n\nThe new bindings feel like a completely native Scala library, without needing any complications of the Scala side.\n\n``` scala\nobject Observer { \u2026}\ntrait Observable[+T] {\n   def asJavaObservable: rx.Observable[_ <: T]\n}\n\nobject Observer {\u2026}\ntrait Observer[-T] {\n  def asJavaObserver: rx.Observer[_ >: T]\n}\n\nobject Subject {\u2026}\ntrait Subject[-T, +R] extends Observable[R] with Observer[T] {\n  val asJavaSubject: rx.subjects.Subject[_ >: T, _<: R]\n}\n\nobject Scheduler {\u2026}\ntrait Scheduler {\n   def asJavaScheduler: rx.Scheduler;\n}\n\nobject Notification {\u2026}\ntrait Notification[+T] {\n  def asJavaNotification: rx.Notification[_ <: T]\n}\n\nobject Subscription {\u2026}\ntrait Subscription {\n   def asJavaSubscription: rx.Subscription\n}\n```\n\nYou pay the price when crossing the Scala/Java interop boundary, which is where it should be.\nThe proper way is to put the burden of interop on the Scala side, in case you want to create\na reusable Rx-based library in Scala, or wrap and unwrap on the Java side.\n\n``` java\npublic static void main(String[] args) {\n\n   Observable<Movie> movies = Observable.from(new Movie(3000), new Movie(1000), new Movie(2000));\n   MovieLib lib = new MovieLib(toScalaObservable(movies));\n   lib.longMovies().asJavaObservable().subscribe(m ->\n      System.out.println(\"A movie of length \" + m.lengthInSeconds() + \"s\")\n   );\n}\n```\n## Delegation versus Inheritance\n\nThe obvious thought is that using delegation instead of inheritance (http://c2.com/cgi/wiki?DelegationIsInheritance)\nwill lead to excessive wrapping, since all Scala types wrap and delegate to an underlying RxJava implementation.\nNote however, that the wrapping happens at query generation time and incurs no overhead when messages are flowing\nthrough the pipeline. Say we have a query `xs.map(f).filter(p).subscribe(o)`. Even though the Scala types are wrappers,\nthe callback that is registered with xs is something like `x => { val y = f(x); if(p(y)){ o.asJavaObserver.onNext(y) }}`\nand hence there is no additional runtime penalty.", "NaN"], ["506", "Operators: And, Then, When", "David Karnok", "akarnokd", "11/22/13, 09:00:31 PM", "Issue #23, Issue #88, Issue #100\n\nCan be extended to Plan4..Plan9 and Pattern4..Pattern9 if Action4..Action9 is available. Not sure about the ActionN version.", "NaN"], ["508", "Empty subscribe", "Ben Christensen", "benjchristensen", "11/21/13, 10:21:19 PM", "NaN", "NaN"], ["510", "BugFix: Zip", "Ben Christensen", "benjchristensen", "11/22/13, 08:25:23 PM", "This is a manual merge of https://github.com/Netflix/RxJava/pull/495 where I added some unit tests and suppressed warnings while reviewing the refactor done by @akarnokd\n\nI believe this fixes issue https://github.com/Netflix/RxJava/issues/387", "NaN"], ["512", "Scala Adaptor Details", "Samuel Gruetter", "samuelgruetter", "11/26/13, 12:23:27 AM", "With https://github.com/Netflix/RxJava/pull/503, some files were lost, so I added them again, and I also fixed many other details. There are no changes in functionality/inheritance, only \"cosmetics\". Except https://github.com/samuelgruetter/RxJava/commit/8567fcbaff20859c68ce4c30c7f347be34581fa4 : @headinthebox could you please confirm this one-line change?", "NaN"], ["513", "Operators toMap and toMultimap again", "David Karnok", "akarnokd", "11/26/13, 06:05:04 AM", "Issue #96 and Issue #97\n\ntoMap: 3 overloads\ntoMultimap: 4 overloads\nAdded groovy test to verify overloading", "NaN"], ["514", "Operation Join again", "David Karnok", "akarnokd", "11/26/13, 12:30:31 AM", "Issue #56", "NaN"], ["516", "Adding utility functions for observables of strings useful for processing non blocking IO.", "George Campbell", "abersnaze", "12/03/13, 10:25:50 PM", "I started developing this for use with the rxjava-apache-http contrib module to safely and scalable decode infinite observables of byte arrays into strings but thought it should live in core because it could be useful for non blocking disk IO.\n\nI did not make this part of rx.Observable because these operators only work on observables of string. The drawback is that discoverability will be harder.", "NaN"], ["518", "Rx java repeat", null, "headinthebox", "12/27/13, 09:33:49 PM", "Implementation of repeat. \n\nThere is an issue with toBlockingObservable when using currentThread(). ", "NaN"], ["520", "Fixed the blocking/non-blocking first", "Shixiong Zhu", "zsxwing", "12/23/13, 08:51:09 PM", "Hi, this PR fixed the last problem in #423.\n- `Observable.first` in RxJava is same as `Observable.FirstAsync` in Rx.Net, which is a non-blocking operator. When the source sequence is empty, it will emit an `IllegalArgumentException`.\n- `Observable.takeFirst` is an alias of `take(1)`. If the source sequence is empty, it will return an empty sequence.\n- `BlockingObservable.first` in RxJava is same as `Observable.First` in Rx.Net, which is a blocking operator. When the source sequence is empty, it will emit an `IllegalArgumentException`.\n- also added `BlockingObservable.firstOrDefault`.\n\nHere I attached my test codes for Rx.Net.\n\n``` c#\n            Console.WriteLine(\"===Test FirstAsync\");\n            {\n                IObservable<int> obs = Observable.Range(1, 4).FirstAsync();\n                obs.Subscribe(\n                    x => Console.WriteLine(\"FirstAsync: \" + x),\n                    e => Console.WriteLine(\"FirstAsync: \" + e),\n                    () => Console.WriteLine(\"FirstAsync completed\")\n                    );\n            }\n            {\n                IObservable<int> obs = Observable.Empty<int>().FirstAsync();\n                obs.Subscribe(\n                    x => Console.WriteLine(\"FirstAsync with empty: \" + x),\n                    e => Console.WriteLine(\"FirstAsync with empty: \" + e),\n                    () => Console.WriteLine(\"FirstAsync with empty completed\")\n                    );\n            }\n            Console.WriteLine(\"===Test Take(1)\");\n            {\n                IObservable<int> obs = Observable.Range(1, 4).Take(1);\n                obs.Subscribe(\n                    x => Console.WriteLine(\"Take(1): \" + x),\n                    e => Console.WriteLine(\"Take(1): \" + e),\n                    () => Console.WriteLine(\"Take(1) completed\")\n                    );\n            }\n            {\n                IObservable<int> obs = Observable.Empty<int>().Take(1);\n                obs.Subscribe(\n                    x => Console.WriteLine(\"Take(1) with empty: \" + x),\n                    e => Console.WriteLine(\"Take(1) with empty: \" + e),\n                    () => Console.WriteLine(\"Take(1) with empty completed\")\n                    );\n            }\n            Console.WriteLine(\"===Test First(1)\");\n            {\n                int value = Observable.Range(1, 4).First();\n                Console.WriteLine(\"First: \" + value);\n            }\n            {\n                try\n                {\n                    int value = Observable.Empty<int>().First();\n                }\n                catch(Exception e) {\n                    Console.WriteLine(\"First with empty: \" + e);\n                }\n            }\n```\n\nThe output is:\n\n<pre>\n===Test FirstAsync\nFirstAsync: 1\nFirstAsync completed\nFirstAsync with empty: System.InvalidOperationException: Sequence contains no elements.\n===Test Take(1)\nTake(1): 1\nTake(1) completed\nTake(1) with empty completed\n===Test First(1)\nFirst: 1\nFirst with empty: System.InvalidOperationException: Sequence contains no elements.\n...\n</pre>", "NaN"], ["522", "Fixed the issue #521", "Shixiong Zhu", "zsxwing", "11/26/13, 12:27:26 AM", "Hi, this PR fixed the issue #521. Please take a look. Thanks!", "NaN"], ["525", "BugFix: Handling of Terminal State for Behavior/Publish Subjects", "Ben Christensen", "benjchristensen", "11/26/13, 05:41:42 AM", "- They were not correctly emitting onCompleted when new Observers subscribed after the Subject was terminated.\n- Added same logic that already existed on AsyncSubject", "NaN"], ["526", "Manual Merge of toMap/toMultiMap", "Ben Christensen", "benjchristensen", "11/26/13, 06:05:02 AM", "Manual merge of https://github.com/Netflix/RxJava/pull/513", "NaN"], ["527", "Docs", "David Gross", "DavidMGross", "11/26/13, 07:30:06 PM", "Javadoc improvements, including diagrams & wiki links for new operators.", "NaN"], ["529", "Scala Tweaks", "Ben Christensen", "benjchristensen", "11/26/13, 07:29:07 PM", "Some cleanup from Erik, unit test fixes, adding license headers.", "NaN"], ["531", "visually distinguish operators that use schedulers, etc.", "David Gross", "DavidMGross", "12/03/13, 10:41:43 PM", "visually distinguish operators that use schedulers; add distinct doOnEach diagrams", "NaN"], ["533", "Async conversions", "David Karnok", "akarnokd", "12/03/13, 10:42:49 PM", "Issue #95\n- Moved to Async class and into the rx.util.functions\n- Added variances to \"lambdas\"\n- Unfortunately, the code looks almost the same as Rx.Net.", "NaN"], ["535", "Fix compilation errors due to referencing the Android support library directly", "Matthias K\u00e4ppler", "mttkay", "12/03/13, 10:43:43 PM", "This is to prevent compilation failures in projects that do not link the support-v4 library. The only other option I saw to fix this would have been to split up the android module into one for native fragments and one for support fragments, which I found would come with unjustified overhead. Hence I settled for the cheap way, which is to sacrifice type safety here.\n\nRefs https://github.com/soundcloud/RxJava/issues/2\n\n/cc @gbenson-nflx ", "NaN"], ["537", "Add scala adapters for doOnEach operator.", "Landon Fuller", "landonf", "12/04/13, 09:06:45 PM", "This re-integrates support for doOnEach that was lost in the Scala refactor.", "NaN"], ["539", "Zipping a finite and an infinite Observable", "Samuel Gruetter", "samuelgruetter", "12/03/13, 10:47:04 PM", "Here are 4 tests testing that zipping a finite and an infinite Observable results in a finite Observable. The third of them fails...", "NaN"], ["541", "Operation SkipUntil", "David Karnok", "akarnokd", "12/03/13, 10:48:38 PM", "Issue #79\n- Written from scratch\n- Consulted Rx.NET sources to verify the behavior; there is one difference: I've implemented the OtherObserver such a way that if it is empty, it calls onCompleted() on the client observer and terminates the whole setup, in other words, the client observer won't be held up just to skip all elements of the source Observable (what if infinite stream is in play?!). ", "NaN"], ["545", "Fixed Zip issue with infinite streams.", "David Karnok", "akarnokd", "12/03/13, 10:46:26 PM", "Issue #539", "NaN"], ["555", "skipUntil() marble diagram and wiki link in javadoc", "David Gross", "DavidMGross", "12/04/13, 12:26:49 AM", "NaN", "NaN"], ["560", "Add type variances for doOnEach actions.", "Landon Fuller", "landonf", "12/04/13, 09:09:52 PM", "This fixes the use of contravariant actions (issue #532)", "NaN"], ["561", "Creating Observables in Scala: Approach04", "Samuel Gruetter", "samuelgruetter", "12/05/13, 11:32:02 AM", "This implements **approach04** from https://github.com/Netflix/RxJava/issues/549 .\nI also moved the `toScalaXxx`/`toJavaXxx` methods into a separate file, so that one can import only these without importing the implicit function conversions. \nThere's now also `Observable.from(Future)` and to test it, some tweaks in `Notification` were necessary.\nNote that this is a breaking change.", "NaN"], ["562", "Scala Adaptor Improvements by Erik", "Samuel Gruetter", "samuelgruetter", "12/04/13, 11:12:47 PM", "There are many important improvements by Erik on the branch https://github.com/Applied-Duality/RxJava/tree/RxJavaBugFixes , and I'd like to have them on Netflix:master, so that everyone works on the same code, and that we can avoid duplicate work, since some changes I'd like to do require changes that Erik has already made. @headinthebox hope you're ok with this.", "NaN"], ["563", "Operation GroupByUntil", "David Karnok", "akarnokd", "12/05/13, 12:29:08 AM", "Issue #52\n\nRebased.", "NaN"], ["565", "Operator GroupJoin v2", "David Karnok", "akarnokd", "12/05/13, 11:33:21 AM", "Issue #53\n\nRebased.\n\nStill: @headinthebox While writing the test for the operator, I've noticed that when both duration selectors are never(), Rx.NET never calls onCompleted on the group subjects, even though the left and right sources onComplete(). I haven't seen Rx.NET test for this scenario. This comes into play when I want to emulate join() with groupJoin(): the outer merge never onCompletes(). If I understand the behavior corretly, when both left and right sources get depleted, there is no way a new group or new group value would arrive, and all the open groups and the main observer can be onCompleted(). This is somewhat similar to join() and groupByUntil() behavior.", "NaN"], ["567", "Operation Timestamp with Scheduler", "David Karnok", "akarnokd", "12/05/13, 11:35:34 AM", "Issue #93", "NaN"], ["568", "Use lock free strategy for several Subscription implementations", "Vanadium", "jloisel", "12/08/13, 11:27:32 PM", "Reduce contention by using CAS (Compare And Swap) operations to replace\nsubscription in several subscription implementations.", "NaN"], ["569", "javadoc improvements (groupJoin, groupByUntil, timestamp w/scheduler)", "David Gross", "DavidMGross", "12/06/13, 12:53:08 AM", "adding marble diagrams and links to the RxJava wiki, standardizing javadoc comment formatting", "NaN"], ["571", "Operation Sample with Observable v2", "David Karnok", "akarnokd", "12/08/13, 11:28:11 PM", "Issue #74\n- Sample will terminate if either the source or the sampler terminates or throws an error.\n- The sampler now emits values only in its onNext() method. Therefore, if the sampler completes and there is a sampled value available (`valueTaken == false`), it won't emit the value before terminating.", "NaN"], ["572", "ObserveOn fix for observing the same source on the same scheduler by two...", "David Karnok", "akarnokd", "12/08/13, 11:33:31 PM", "... different observers.\n\nIssue #551\n- cleaned up\n- added test cases", "NaN"], ["573", "Removed Opening and Closing historical artifacts.", "David Karnok", "akarnokd", "12/08/13, 11:35:03 PM", "Issue #540\n\nThe build fails due Scala compiler error I don't understand:\n\n```\n[ant:scalac] RxJava\\language-adaptors\\rxjava-scala\\src\\main\\s\ncala\\rx\\lang\\scala\\Observable.scala:531: error: type mismatch;\n[ant:scalac]  found   : x2.type (with underlying type rx.Observable[_ <: T])\n[ant:scalac]  required: T\n[ant:scalac]       Observable[T](x2)\n[ant:scalac]                     ^\n[ant:scalac] one error found\n```\n\n``` scala\n  def window[Closing](closings: () => Observable[Closing]): Observable[Observable[T]] = {\n    val func : Func0[_ <: rx.Observable[_ <: Closing]] = closings().asJavaObservable\n    val o1: rx.Observable[_ <: rx.Observable[_]] = asJavaObservable.window[Closing](func)\n    val o2 = Observable[rx.Observable[_]](o1).map((x: rx.Observable[_]) => {\n      val x2 = x.asInstanceOf[rx.Observable[_ <: T]]\n      Observable[T](x2)\n    })\n    o2\n  }\n```\n\nCould someone help me with this?", "NaN"], ["574", "clarify documentation on cache()", "Samuel Gruetter", "samuelgruetter", "12/08/13, 11:35:57 PM", "I lost some time because I didn't read the documentation of `cache()` carefully enough. To make it easier for others, I tried to make the documentation more explicit here.", "NaN"], ["575", "Reimplement the 'SequenceEqual' operator", "Shixiong Zhu", "zsxwing", "12/08/13, 11:38:50 PM", "Hi, this PR reimplemented the `SequenceEqual` operator #76 and should fix the issue #564.\n\nThe wiki page https://github.com/Netflix/RxJava/wiki/Observable-Utility-Operators#sequenceequal still needs to be updated. @DavidMGross could you help update the marble diagram of `SequenceEqual`? Thanks!", "NaN"], ["576", "Timer and Delay", "Samuel Gruetter", "samuelgruetter", "12/10/13, 10:59:02 PM", "As [pointed out](https://github.com/Netflix/RxJava/pull/384#issuecomment-26843865) by @headinthebox, it's possible to implement `delay` in terms of `timer`, `map` and `concat`. \n\nHowever, there were some tricky points:\n-    In order to start the timers right after they're created (and not just when `concat` subscribes to them), I had to use `replay`.\n-    There is bug https://github.com/Netflix/RxJava/issues/552 which also affects `delay`.\n\nI hope that there aren't too many further tricky points that I missed, especially since https://github.com/Netflix/RxJava/issues/552 adds confusion. So this will need another review once https://github.com/Netflix/RxJava/issues/552 is fixed.\n\nThanks @jmhofer for your previous work on `delay`, I reused it where possible (see commit messages).", "NaN"], ["586", "Fix Concat to allow multiple observers", "David Karnok", "akarnokd", "12/08/13, 11:48:23 PM", "Issues #552 and #583", "NaN"], ["587", "Operation LongCount", "David Karnok", "akarnokd", "12/08/13, 11:47:01 PM", "Issue #60\n\nStraightforward version of the regular count(). \n\n(However, I would have implemented it differently so the constant boxing-unboxing could be avoided.)", "NaN"], ["593", "Lock-free subscriptions", "David Karnok", "akarnokd", "12/10/13, 11:03:28 PM", "- Uniform naming of inner components: Issue #592\n- Lock-free approach to avoid deadlocks: Issue #577\n- SerialSubscription.isUnsubscribe added: Issue #590\n\nRemarks:\n- IMO, an unsubscribed Single/Serial/Multiple subscription return Subscriptions.empty() instead of null. So unless the user put a null in there he/she shouldn't worry about null.\n- There was a concurrency bug in @jloisel 's reimplementation of CompositeSubscription. It allowed multiple threads to enter the mutation part if the current state was already MUTATE. I've added the necessary checks to allow only NORMAL -> MUTATE transitions.", "NaN"], ["594", "Implement the 'Start' operator", "Shixiong Zhu", "zsxwing", "12/11/13, 06:08:04 AM", "Hi, this PR implemented the `Start` operator #81. Please take a look.", "NaN"], ["596", "Fix for buffer not stopping when unsubscribed.", "David Karnok", "akarnokd", "12/10/13, 10:57:10 PM", "Issue #559", "NaN"], ["597", "Javadoc updates (longCount, sample(sampler))", "David Gross", "DavidMGross", "12/10/13, 10:57:39 PM", "NaN", "NaN"], ["598", "New Scala Bindings", null, "headinthebox", "12/10/13, 04:51:00 AM", "(copied from release notes)\n# RxScala Release Notes\n\nThis release of the RxScala bindings builds on the previous 0.15 release to make the Rx bindings for Scala\ninclude all Rx types. In particular this release focuses on fleshing out the bindings for the `Subject` and `Scheduler`\ntypes, as well as aligning the constructor functions for `Observable` with those in the RxJava.\n\nExpect to see ongoing additions to make the Scala binding match the equivalent underlying Java API,\nas well as minor changes in the existing API as we keep fine-tuning the experience on our way to a V1.0 release.\n## Observer\n\nIn this release we have made the `asJavaObserver` property in `Observable[T]`as well the the factory method in the\ncompanion object that takes an `rx.Observer` private to the Scala bindings package, thus properly hiding irrelevant\nimplementation details from the user-facing API. The `Observer[T]` trait now looks like a clean, native Scala type:\n\n``` scala\ntrait Observer[-T] {\n  def onNext(value: T): Unit\n  def onError(error: Throwable): Unit\n  def onCompleted(): Unit\n}\n\nobject Observer {...}\n```\n\nTo create an instance of a specific `Observer`, say  `Observer[SensorEvent]` in user code, you can create a new instance\nof the `Observer` trait by implementing any of the methods that you care about:\n\n``` scala\n   val printObserver = new Observer[SensorEvent] {\n      override def onNext(value: SensorEvent): Unit = {...value.toString...}\n   }\n```\n\n or you can use one of the overloads of the companion `Observer` object by passing in implementations of the `onNext`,\n `onError` or `onCompleted` methods.\n\nNote that typically you do not need to create an `Observer` since all of the methods that accept an `Observer[T]`\n(for instance `subscribe`) usually come with overloads that accept the individual methods\n`onNext`, `onError`, and `onCompleted` and will automatically create an `Observer` for you under the covers.\n\nWhile _technically_ it is a breaking change make the `asJavaObserver` property private, you should probably not have\ntouched `asJavaObserver` in the first place. If you really feel you need to access the underlying `rx.Observer`\ncall `toJava`.\n## Observable\n\nJust like for `Observer`, the `Observable` trait now also hides its `asJavaObservable` property and makes the constructor\nfunction in the companion object that takes an `rx.Observable` private (but leaves the companion object itself public).\nAgain, while _technically_ this is a breaking change, this should not have any influence on user code.\n\n``` scala\ntrait Observable[+T] {\n    def subscribe(observer: Observer[T]): Subscription = {...}\n    def apply(observer: Observer[T]): Subscription = {...}\n    ...\n}\nobject Observable {\n   def create[T](func: Observer[T] => Subscription): Observable[T] = {...}\n   ...\n}\n```\n\nThe major changes in `Observable` are wrt to the factory methods where too libral use of overloading of the `apply`\nmethod hindered type inference and made Scala code look unnecessarily different than that in other language bindings.\nAll factory methods now have their own name corresponding to the Java and .NET operators\n(plus overloads that take a `Scheduler`).\n- `def from[T](future: Future[T]): Observable[T]`,\n- `def from[T](iterable: Iterable[T]): Observable[T]`,\n- `def error[T](exception: Throwable): Observable[T]`,\n- `def empty[T]: Observable[T]`,\n- `def items[T](items: T*): Observable[T],\n- Extension method on `toObservable: Observable[T]` on `List[T]`.\n\nIn the _pre-release_ of this version, we expose both `apply` and `create` for the mother of all creation functions.\nWe would like to solicit feedback which of these two names is preferred\n(or both, but there is a high probability that only one will be chosen).\n- `def apply[T](subscribe: Observer[T]=>Subscription): Observable[T]`\n- `def create[T](subscribe: Observer[T] => Subscription): Observable[T]`\n## Subject\n\nThe `Subject` trait now also hides the underlying Java `asJavaSubject: rx.subjects.Subject[_ >: T, _<: T]`\nand takes only a single _invariant_ type parameter `T`. all existing implementations of `Subject` are parametrized\nby a single type, and this reflects that reality.\n\n``` scala\ntrait Subject[T] extends Observable[T] with Observer[T] {}\nobject Subject {\n   def apply(): Subject[T] = {...}\n}\n```\n\nFor each kind of subject, there is a class with a private constructor and a companion object that you should use\nto create a new kind of subject. The subjects that are available are:\n- `AsyncSubject[T]()`,\n- `BehaviorSubject[T](value)`,\n- `Subject[T]()`,\n- `ReplaySubject[T]()`.\n\nThe latter is still missing various overloads http://msdn.microsoft.com/en-us/library/hh211810(v=vs.103).aspx which\nyou can expect to appear once they are added to the underlying RxJava implementation.\n\nCompared with release 0.15.1, the breaking changes in `Subject` for this release are\nmaking `asJavaSubject` private, and collapsing its type parameters, neither of these should cause trouble,\nand renaming `PublishSubject` to `Subject`.\n## Schedulers\n\nThe biggest breaking change compared to the 0.15.1 release is giving `Scheduler` the same structure as the other types.\nThe trait itself remains unchanged, except that we made the underlying Java representation hidden as above.\nas part of this reshuffling, the scheduler package has been renamed from `rx.lang.scala.concurrency`\nto `rx.lang.scala.schedulers`. There is a high probability that this package renaming will also happen in RxJava.\n\n``` scala\ntrait Scheduler {...}\n```\n\nIn the previous release, you created schedulers by selecting them from the `Schedulers` object,\nas in `Schedulers.immediate` or `Schedulers.newThread` where each would return an instance of the `Scheduler` trait.\nHowever, several of the scheduler implementations have additional methods, such as the `TestScheduler`,\nwhich already deviated from the pattern.\n\nIn this release, we changed this to make scheduler more like `Subject` and provide a family of schedulers\nthat you create using their factory function:\n- `CurrentThreadScheduler()`,\n- `ExecutorScheduler(executor)`,\n- `ImmediateScheduler()`,\n- `NewThreadScheduler()`,\n- `ScheduledExecutorServiceScheduler(scheduledExecutorService)`,\n- `TestScheduler()`,\n- `ThreadPoolForComputationScheduler()`,\n- `ThreadPoolForIOScheduler()`.\n\nIn the future we expect that this list will grow further with new schedulers as they are imported from .NET\n(http://msdn.microsoft.com/en-us/library/system.reactive.concurrency(v=vs.103).aspx).\n\nTo make your code compile in the new release you will have to change all occurrences of `Schedulers.xxx`\ninto `XxxScheduler()`, and import `rx.lang.scala.schedulers` instead of `rx.lang.scala.schedulers`.\n## Subscriptions\n\nThe `Subscription` trait in Scala now has `isUnsubscribed` as a member, effectively collapsing the old `Subscription`\nand `BooleanSubscription`, and the latter has been removed from the public surface. Pending a bug fix in RxJava,\n`SerialSubscription` implements its own `isUnsubscribed`.\n\n``` scala\ntrait Subscription {\n  def unsubscribe(): Unit = { ... }\n  def isUnsubscribed: Boolean = ...\n}\n\nobject Subscription {...}\n```\n\n To create a `Subscription` use one of the following factory methods:\n- `Subscription{...}`, `Subscription()`,\n- `CompositeSubscription(subscriptions)`,\n- `MultipleAssignmentSubscription()`,\n- `SerialSubscription()`.\n  \n  In case you do feel tempted to call `new Subscription{...}` directly make sure you wire up `isUnsubscribed`\n  and `unsubscribe()` properly, but for all practical purposes you should just use one of the factory methods.\n## Notifications\n\nAll underlying wrapped `Java` types in the `Notification` trait are made private like all previous types. The companion\nobjects of `Notification` now have both constructor (`apply`) and extractor (`unapply`) functions:\n\n``` scala\nobject Notification {...}\ntrait Notification[+T] {\n   override def equals(that: Any): Boolean = {...}\n   override def hashCode(): Int = {...}\n   def apply[R](onNext: T=>R, onError: Throwable=>R, onCompleted: ()=>R): R = {...}\n}\n```\n\nThe nested companion objects of `Notification` now have both constructor (`apply`) and extractor (`unapply`) functions:\n\n``` scala\nobject Notification {\n   object OnNext { def apply(...){}; def unapply(...){...} }\n   object OnError { def apply(...){}; def unapply(...){...} }\n   object OnCompleted { def apply(...){}; def unapply(...){...} }\n}\n```\n\nTo construct a `Notification`, you import `rx.lang.scala.Notification._` and use `OnNext(\"hello\")`,\nor `OnError(new Exception(\"Oops!\"))`, or `OnCompleted()`.\n\nTo pattern match on a notification you create a partial function like so: `case Notification.OnNext(v) => { ... v ... }`,\nor you use the `apply` function to pass in functions for each possibility.\n\nThere are no breaking changes for notifications.\n## Java Interop Helpers\n\nSince the Scala traits _wrap_ the underlying Java types, yoo may occasionally will have to wrap an unwrap\nbetween the two representations. The `JavaConversion` object provides helper functions of the form `toJavaXXX` and\n`toScalaXXX` for this purpose, properly hiding how precisely the wrapped types are stored.\nNote the (un)wrap conversions are defined as implicits in Scala, but in the unlikely event that you do need them\nbe kind to the reader of your code and call them explicitly.\n\n``` scala\nobject JavaConversions {\n  import language.implicitConversions\n\n  implicit def toJavaNotification[T](s: Notification[T]): rx.Notification[_ <: T] = {...}\n  implicit def toScalaNotification[T](s: rx.Notification[_ <: T]): Notification[T] = {...}\n  implicit def toJavaSubscription(s: Subscription): rx.Subscription = {...}\n  implicit def toScalaSubscription(s: rx.Subscription): Subscription = {...}\n  implicit def scalaSchedulerToJavaScheduler(s: Scheduler): rx.Scheduler = {...}\n  implicit def javaSchedulerToScalaScheduler(s: rx.Scheduler): Scheduler = {...}\n  implicit def toJavaObserver[T](s: Observer[T]): rx.Observer[_ >: T] = {...}\n  implicit def toScalaObserver[T](s: rx.Observer[_ >: T]): Observer[T] = {...}\n  implicit def toJavaObservable[T](s: Observable[T]): rx.Observable[_ <: T] = {...}\n  implicit def toScalaObservable[T](observable: rx.Observable[_ <: T]): Observable[T] = {...}\n}\n```", "NaN"], ["599", "Refactor rx.concurrency to rx.schedulers", "Ben Christensen", "benjchristensen", "12/10/13, 11:57:53 PM", "To match the naming convention of rx.observables, rx.subjects and rx.subscriptions we have decided to rename rx.concurrency to rx.schedulers prior to the 1.0 release. These commits makes this change.\n\nSince this is a non-trivial breaking change to anyone using Schedulers, this leaves the `rx.concurrency.*` classes in place and deprecates them to give time to migrate. These deprecated classes will be deleted prior to the 1.0 release.", "NaN"], ["600", "BugFix: Replay Subject", "Ben Christensen", "benjchristensen", "12/11/13, 01:51:05 AM", "NaN", "NaN"], ["602", "ObserveOn Fixes", "Ben Christensen", "benjchristensen", "12/13/13, 07:32:32 AM", "- refactor to remove imperative assignment of innerScheduler for clearer concurrency and data access\n- fix subscription leak (Composite+MultipleAssignment instead of just Composite)\n- remove confusing conditional logic for inner/outer scheduler", "NaN"], ["604", "Added op:join to concat objects with separator between elements.", "David Karnok", "akarnokd", "12/12/13, 12:05:19 AM", "Straightforward. `\"a\", 1, \"c\"` with separator `\", \"` becomes `\"a, 1, c\"`", "NaN"], ["607", "Javadoc improvements:", "David Gross", "DavidMGross", "12/12/13, 12:04:04 AM", "- consistent nomenclature\n- consistent/standard javadoc formatting\n- more-precise descriptions\n- timer() marble digram & wiki link\n- delay() marble diagram & wiki link", "NaN"], ["609", "Operation Timer 3.0", "David Karnok", "akarnokd", "12/12/13, 08:17:32 PM", "Rebased.", "NaN"], ["612", "Replay additional overloads", "David Karnok", "akarnokd", "12/12/13, 08:19:42 PM", "Issue #71\n- Added several overloads of the `replay` operator: \n  - limited buffer, limited time window, buffer+time, \n  - scheduler overloads; \n  - versions which perform a projection before the replay\n- Added missing `multicast` overload", "NaN"], ["615", "Copied the code from OperationMerge to fix synchronization", "George Campbell", "abersnaze", "12/12/13, 10:28:36 PM", "for #614", "NaN"], ["616", "Combine latest fix", "David Karnok", "akarnokd", "12/30/13, 06:19:03 PM", "Fixes potential issues mentioned in #613\n\nQuestion: it emits a \"row\" while holding a lock. This ensures a FIFO behavior towards the client observer. Do we want such strong guarantee?", "NaN"], ["617", "replay() and timer() javadocs: diagrams & wiki links", "David Gross", "DavidMGross", "12/13/13, 12:59:23 AM", "NaN", "NaN"], ["619", "UnitTest to assert thread safety of Executor Scheduler", "Ben Christensen", "benjchristensen", "12/14/13, 12:15:58 AM", "- The Executor thread-pools hop threads when using observeOn so this tests that it is thread-safe when doing so.\n- The test performs non-thread-safe mutations which should fail (or at least be non-deterministic) if memory visibility problems or concurrency is occurring.", "NaN"], ["621", "SerialSubscription & From", null, "headinthebox", "12/23/13, 09:03:32 PM", "Update scala bindings for SerialSubscription since underlying type now implements isUnsubscribed.\n\nChanged Observable.from to use currentThreadScheduler (principle of least surprise).\nUsed scheduler in create instead of observerOn.\nFixed blocking tests.", "NaN"], ["626", "Added: BO.Latest, fixed: BO.next, BO.mostRecent, BO.toIterable", "David Karnok", "akarnokd", "12/23/13, 09:15:51 PM", "- Implemented Latest (Issue #59)\n- Fixed Next and MostRecent to connect to the source observable only when the iterator is asked for.\n- Fixed ToIterable.next() not properly handling the completed status (repeated calls to just the next() would simply block on the empty queue).", "NaN"], ["628", "Properly wired up SynchronizedObserver within MergeDelayError operator", "Matt Jacobs", "mattrjacobs", "12/16/13, 08:28:06 PM", "Previous pull request for this issue (https://github.com/Netflix/RxJava/pull/615) missed the step of connecting SynchronizedObserver to ParentObserver", "NaN"], ["631", "Make NewThreadScheduler create Daemon threads", "Ben Christensen", "benjchristensen", "12/17/13, 07:49:04 PM", "This matches the behavior of Schedulers.COMPUTATION_EXECUTOR and Schedulers.IO_EXECUTOR.\n\nSee https://groups.google.com/forum/#!topic/rxjava/Qe1qi0aHtnE and https://github.com/Netflix/RxJava/issues/431#issuecomment-30767610", "NaN"], ["633", "Fixed issue #595 about null in toList operator", "Shixiong Zhu", "zsxwing", "12/23/13, 09:16:33 PM", "just fixed the issue #595 about null values. I suppose that 'toList' does not need to handle the concurrent problem, so I use `ArrayList`.", "NaN"], ["635", "Operators: switchCase (Case), ifThen (If), doWhile (DoWhile), WhileDo (W...", "David Karnok", "akarnokd", "12/23/13, 09:19:03 PM", "...hile)\n\nIssue #634\n\nNo MSDN references available.", "NaN"], ["638", "Operators DelaySubscription, TakeLast w/ time, TakeLastBuffer", "David Karnok", "akarnokd", "12/23/13, 09:40:26 PM", "Issue #634", "NaN"], ["639", "Moved the descriptions of some operators to a new wiki page.", "David Gross", "DavidMGross", "12/19/13, 05:54:17 PM", "\"Conditional and Boolean Operators\"\nadjusting the javadoc links accordingly", "NaN"], ["651", "Subjects Refactor - Non-Blocking, Common Abstraction, Performance", "Ben Christensen", "benjchristensen", "12/23/13, 06:36:32 PM", "These changes evolved out of reviewing pull request https://github.com/Netflix/RxJava/pull/605 and code reviewing master branch with @headinthebox and validating functionality against .Net. I also spent some time to figure out a non-blocking design that I believe is working.\n\nThe results for `ReplaySubject` is that it performs faster than what is currently in master and does not block in almost all cases. I have not yet perf-tested the other 3 Subjects.\n- Common logic composed inside SubjectSubscriptionManager used by all 4 Subjects\n- ReplaySubject does not block while replaying to new subscribers\n- Added unit tests and fixed behavior while reviewing with @headinthebox compared to Rx.Net\n- Uses mostly non-blocking approach (I believe it\u2019s all correct, unit and long running tests have been used to prove it. The tests found concurrency problems during development and became stable once I got the design correct. As with all concurrent code I may be missing something.)\n  - The only place it blocks is if a new Observer subscribes, completes replay and `onComplete`/`onError` are in process. It will wait for those to complete before applying the terminal state on itself.\n\nAs for performance, for relative comparison my machine gets these numbers for the master branch:\n\n```\n     * ArrayList with raw values & synchronized access\n     * \n     * Run: 10 - 11,993,341 ops/sec\n     * Run: 11 - 11,719,523 ops/sec\n     * Run: 12 - 11,965,214 ops/sec\n     * Run: 13 - 11,814,730 ops/sec\n     * Run: 14 - 11,947,459 ops/sec\n```\n\nThis commit gets these numbers:\n\n```\n     * ArrayList with raw values & non-blocking (no synchronization)\n     * \n     * Run: 10 - 16,069,678 ops/sec\n     * Run: 11 - 15,954,688 ops/sec\n     * Run: 12 - 16,158,874 ops/sec\n     * Run: 13 - 16,209,504 ops/sec\n     * Run: 14 - 16,151,174 ops/sec\n```\n\nI'm curious about adding bounded support and using a circular-array rather than ArrayList and seeing if it performs better.\n\nThe performance tests are inside `SubjectPerformanceTests` and inspired by tests done in the non-blocking code workshop with Martin Thompson. \n\nSome of the code is not as elegant as I'd like but was done for performance reasons. For example, I had a much more elegant version using a simple linked list but it had horrible performance. Another example is that using `Notification` to wrap every `onNext` so we have a single data structure is very inefficient so it maintains `T` without wrapping and then conditional logic to check for terminal state. These and other things have been determined while doing perf tests during development and I have consciously moved towards performance rather than the most elegant code.\n\nI'd appreciate feedback on concurrency problems if any exist or ways of getting more performance out while achieving the same functional requirements.", "NaN"], ["652", "Subjects fixes performance improvements", "David Karnok", "akarnokd", "12/23/13, 06:36:33 PM", "Based on PR #651 \n\nImprovements upon Ben's excellent work:\n- (Original performance for me was 1.662.152 ops/sec on average.)\n- Storing subscriptions and observers in arrays rather than in a Map inside `SubjectSubscriptionManager.`. This adds +2.340.000 ops/sec on average; total ~ 4.000.000 ops/sec so far.\n- `SafeObserver` uses a volatile for the actual Observer which is swapped to a `nopObserver` if a terminal case occurs. This avoids an atomic get and if statement and adds a +100.000 ops/second on average; total ~4.100.000 ops/sec so far.\n- I suggest adding a create option to set the initial buffer size (not done here) which would reduce the number of array-resizes. With 2048 as a sweet spot on my machine, this adds +1.100.000 ops/second; total 5.200.000 so far.\n\n**Bounded version**\nWe have a boundable ReplaySubject in main named `CustomReplaySubject` and PR #649 to improve a bit upon its performance. It might benefit from the changes above as well. It would be more tricky implementation in terms of the replay operation, since the buffer would be in constant virtual index motion (including its start and end), so observers would need to atomically get a value from it whose index could get below the virtual start index of the buffer. Will think about this.", "NaN"], ["657", "Operations Aggregate, Average and Sum with selector", "David Karnok", "akarnokd", "12/27/13, 09:13:33 PM", "Issue #653\n\nRemarks:\n- I know we can combine ops to get one of the new aggregate variant, but I think it might be worth having a direct version which avoids nesting several layers of Observables, Observers and Subscriptions.\n- The `averageInteger` and `sumInteger` (and the other types) are handy if we want to use chained operation invocations (with less overhead):\n\n``` java\nObservable.from(\"a\", \"bb\", \"ccc\").sumInteger(s -> s.length())\n    .toBlockingObservable().single();\n```\n\ninstead of\n\n``` java\nObservable.sumIntegers(Observable.from(\"a\", \"bb\", \"ccc\").map(s -> s.length()))\n    .toBlockingObservable().single();\n```", "NaN"], ["659", "Missing fixes from the subject rewrite", "David Karnok", "akarnokd", "12/23/13, 10:47:12 PM", "Two small changes:\n- Prevent overwriting the terminal notification in `BehaviorSubject` so new subscribers to a terminated subject can see the error/completion.\n- Call `Thread.currentThread().interrupt()` if the `terminationLatch.await()` throws.", "NaN"], ["661", "Subscriptions Rewrite", "Ben Christensen", "benjchristensen", "12/23/13, 08:38:38 PM", "Refactor rewrite of Subscriptions by @headinthebox and myself after reviewing the various different implementations.\n- We removed `SingleAssignmentSubscription` while trying to reduce surface area and simplify code.\n- Moved to a non-blocking state-machine model that does not lock or busy spin during \"mutation states\"", "NaN"], ["664", "Operation AsObservable", "David Karnok", "akarnokd", "12/27/13, 04:31:56 PM", "Split from PR #641", "NaN"], ["667", "Operators Skip, SkipLast, Take with time", "David Karnok", "akarnokd", "12/27/13, 08:22:48 PM", "Rebased version, without the drain scheduler variant.\n- Fixes issue mentioned in #666 as well.", "NaN"], ["669", "Javadoc improvements:", "David Gross", "DavidMGross", "12/24/13, 05:14:09 AM", "- diagrams for switchCase, doWhile, whileDo, ifThen, delaySubscription, single, singleOrDefault, takeFirst, takeLast (and variant forms of these)\n- standardizing javadoc comment formatting\n- standardizing nomenclature", "NaN"], ["670", "API Design Tweaks", "Ben Christensen", "benjchristensen", "12/24/13, 06:25:26 AM", "Some changes resulting from review with @headinthebox and @jhusain\n\nGeneral principles pursued are to simplify the mental model and surface area of the API.", "NaN"], ["688", "Fix SafeObserver handling of onComplete errors", "Ben Christensen", "benjchristensen", "12/24/13, 06:56:27 AM", "Fixes https://github.com/Netflix/RxJava/issues/630", "NaN"], ["689", "Removed ObserverBase", "David Karnok", "akarnokd", "12/27/13, 04:31:10 PM", "For issue #674\n\nRemoved ObserverBase and adapted JoinObserver1.", "NaN"], ["690", "Fixed Scala bindings", null, "headinthebox", "12/24/13, 06:43:03 PM", "NaN", "NaN"], ["691", "javadoc improvements:", "David Gross", "DavidMGross", "12/24/13, 08:37:05 PM", "- diagrams for switchLatest, mergeMap, concatMap, switchMap, mapWithIndex, doOnNext\n- change text to note deprecation of aggregate\n- standardized formatting\n- force image size in ReplaySubject javadoc", "NaN"], ["693", "Kotlin M6.2", "Mario Arias", "MarioAriasC", "12/26/13, 04:15:48 PM", "Version updated for Kotlin M6.2", "NaN"], ["694", "Change page from \"Mathematical Operators\" to \"Mathematical and Aggregate Operators\"", "David Gross", "DavidMGross", "12/27/13, 04:28:40 PM", "- move toList, reduce, concat, toSortedList, toMap, and toMultiMap to that page\n- deprecate aggregate in favor of reduce\n\n[should I move takeLast, last, and takeLastBuffer to the Aggregate operators page? they don't operate on the aggregate, exactly, but they do wait until the source completes before emitting anything]", "NaN"], ["697", "Manual Merge of Pull #667", "Ben Christensen", "benjchristensen", "12/27/13, 08:22:47 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/667", "NaN"], ["698", "Merge of Pull 657: Average and Sum", "Ben Christensen", "benjchristensen", "12/27/13, 09:13:31 PM", "NaN", "NaN"], ["699", "Repeat Operator", "Ben Christensen", "benjchristensen", "12/27/13, 09:33:49 PM", "- merge and slight modification of https://github.com/Netflix/RxJava/pull/518 done with @headinthebox ", "NaN"], ["700", "various javadoc improvements", "David Gross", "DavidMGross", "12/27/13, 11:02:21 PM", "- diagrams for skip(t), single(), take(t), skipLast(t)\n- adding diagrams, improving javadocs for sumFoo/averageFoo operators\n- adding diagram to repeat()", "NaN"], ["701", "Collect Operator", "Ben Christensen", "benjchristensen", "12/27/13, 09:58:02 PM", "Added with @headinthebox while reviewing Java 8 Streams https://github.com/Netflix/RxJava/issues/678", "NaN"], ["703", "Small Tweaks", "Ben Christensen", "benjchristensen", "12/27/13, 11:00:08 PM", "Some small changes while reviewing code.", "NaN"], ["705", "adjust javadocs for new sumFoo()/averageFoo() method names", "David Gross", "DavidMGross", "12/29/13, 03:18:21 AM", "NaN", "NaN"], ["707", "Merge of rxjava-async-util", "Ben Christensen", "benjchristensen", "12/30/13, 06:06:49 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/704", "NaN"], ["708", "Combine latest fix", "Ben Christensen", "benjchristensen", "12/30/13, 06:19:01 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/616\n\nI would like to get a version of this that doesn't use a lock in the `onNext` method but have chosen to merge this for now to get the functionality correct and then followup later with a refactor or rewrite when I or someone else has time.", "NaN"], ["709", "Lotsa javadoc improvements", "David Gross", "DavidMGross", "12/30/13, 10:38:11 PM", "- diagrams for previously-undiagram'd methods\n- links to wiki docs where available\n- standardizing format & nomenclature", "NaN"], ["710", "Created new wiki page for the operators in the Async class", "David Gross", "DavidMGross", "12/31/13, 12:57:28 AM", "...adjusted javadoc links accordingly\n...added new sections for previously un-wiki-documented operators in Async\n...added links to those in javadocs", "NaN"], ["712", "Fix Scheduler Memory Leaks", "Ben Christensen", "benjchristensen", "01/02/14, 05:12:31 AM", "The `NewThreadScheduler`, `CurrentThreadScheduler` and `ExecutorScheduler` all had memory leaks when doing recursion with the `Func2` method signature. This pull request fixes that along with improving the unit test coverage.\n\nThe fix involved treating \"outer\" and \"inner\" schedulers differently, with \"inner\" being the place where recursion happens.\n\nThe memory behavior can be tested using `TestRecursionMemoryUsage`.\n\nThis fixes the problems reported in https://github.com/Netflix/RxJava/pull/643 and  https://github.com/Netflix/RxJava/pull/648 but does not change the `Scheduler` or `Subscription` interfaces or public implementation details.", "NaN"], ["714", "rxjava-computation-expressions", "Ben Christensen", "benjchristensen", "01/02/14, 10:49:25 PM", "The conditional operators are going in this contrib module.\n\nSee https://github.com/Netflix/RxJava/issues/683", "NaN"], ["715", "Add missing type hint to clojure example", "Deleted user", "ghost", "01/03/14, 12:23:47 AM", "#623", "NaN"], ["717", "Added ConnectableObservable", null, "headinthebox", "01/03/14, 04:41:12 PM", "Fixed test\nAdded overload for scan\nAdded trivial test for scan", "NaN"], ["718", "Implemented the Merge overloads", "Shixiong Zhu", "zsxwing", "01/14/14, 03:29:04 AM", "Hi, this PR implemented the overloads of `merge` in #62. Please take a look.", "NaN"], ["720", "Added `Observable.timeout` wrappers to scala adapter", null, "hura", "01/09/14, 05:44:38 PM", "Added the four timeout methods on Observable in the Scala adaptor. Note\nfor the java/scala type interop:\nhttp://stackoverflow.com/q/20912151", "NaN"], ["723", "Deprecate multiple arity \u2018from\u2019", "Ben Christensen", "benjchristensen", "01/06/14, 09:06:02 PM", "- added @Deprecated annotations where it was only part of the Javadoc\n- deprecated \u2018where\u2019 which is a duplicate of `filter` kept from early days matching Rx.Net\n\nSee https://github.com/Netflix/RxJava/issues/686", "NaN"], ["724", "Revert use of CurrentThreadScheduler for Observable.from", "Ben Christensen", "benjchristensen", "01/06/14, 10:05:07 PM", "Use ImmediateScheduler as performance is 4x faster and CurrentThreadScheduler currently offers no benefit (it doesn\u2019t solve the unsubscribe problem).\n\nPerformance numbers:\n\n```\n * Observable.from(Arrays.asList(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L), scheduler);\n *\n * --- Schedulers.immediate() ---\n *\n * Run: 0 - 1,849,947 ops/sec\n * Run: 1 - 2,076,067 ops/sec\n * Run: 2 - 2,114,688 ops/sec\n * Run: 3 - 2,114,301 ops/sec\n * Run: 4 - 2,102,543 ops/sec\n *\n * --- Schedulers.currentThread() ---\n *\n * Run: 0 - 548,862 ops/sec\n * Run: 1 - 559,955 ops/sec\n * Run: 2 - 581,412 ops/sec\n * Run: 3 - 562,187 ops/sec\n * Run: 4 - 565,723 ops/sec\n\n * Observable.from(Arrays.asList(1L), scheduler);\n *\n * --- Schedulers.immediate() ---\n *\n * Run: 10 - 4,113,672 ops/sec\n * Run: 11 - 4,068,351 ops/sec\n * Run: 12 - 4,070,318 ops/sec\n * Run: 13 - 4,161,793 ops/sec\n * Run: 14 - 4,156,725 ops/sec\n *\n * --- Schedulers.currentThread() ---\n *\n * Run: 10 - 1,692,286 ops/sec\n * Run: 11 - 1,765,054 ops/sec\n * Run: 12 - 1,763,100 ops/sec\n * Run: 13 - 1,770,907 ops/sec\n * Run: 14 - 1,732,291 ops/sec\n```", "NaN"], ["725", "Simpler computation/io naming for Schedulers", "Ben Christensen", "benjchristensen", "01/06/14, 10:05:31 PM", "- simpler (no one remembers the current names when talking about them)\n- does not tie naming to a particular implementation involving thread pools versus a pool of event loops or something similar (as we likely will change the implementation, see https://github.com/Netflix/RxJava/issues/713)", "NaN"], ["727", "ImmediateScheduler optimization for toObservableIterable", "Ben Christensen", "benjchristensen", "01/07/14, 02:20:14 AM", "- the ImmediateScheduler no longer schedules itself but uses a loop\n- 10-20x faster to use a loop rather than schedule itself recursively", "NaN"], ["730", "Improve Error Handling and Stacktraces When Unsubscribe Fails", "Ben Christensen", "benjchristensen", "01/09/14, 06:51:04 AM", "The stacktraces were a mess when onError failed or was not implemented and unsubscribe also failed.\nThat is a far edge case and means code is broken and breaking the Rx contracts \u2026 but that\u2019s just when we need clear stacktraces.\nThe CompositeException and SafeObserver class now do a dance and wire together a causal chain to provide a stacktrace that can identity all the points of error.\nAlso standardized and simplified the RxJavaPlugin.onErrorHandler while working in the vicinity.\n\nThis came about after I was asked to help debug a problem and couldn\u2019t do it by looking at the thrown exception, I had to use a debugger and step through.", "NaN"], ["731", "Replaced 'Thread.sleep' with 'CountDownLatch' to fix the flaky test failures", "Shixiong Zhu", "zsxwing", "01/09/14, 05:45:03 PM", "Fixed the test failures in https://github.com/Netflix/RxJava/issues/383#issuecomment-30081304 and #581", "NaN"], ["732", "Ported groupByUntil function to scala-adapter", "Chris Grimm", "chrisgrimm", "01/14/14, 06:51:37 PM", "Ported the groupByUntil function to scala-adapter. This is my first time contributing, please let me know if anything is off.", "NaN"], ["733", "Buffer with Observable boundary.", "David Karnok", "akarnokd", "01/14/14, 03:32:10 AM", "Mentined in Issue #653.\n- 1 overload where the user can specify the capacity of the internal buffer.", "NaN"], ["734", "Delay with subscription and item delaying observables.", "David Karnok", "akarnokd", "01/14/14, 03:35:27 AM", "Listed in #653\n\nNote: onError and onCompleted events of the source are immediately propagated and will prevent emitting any pending values.", "NaN"], ["735", "Window with Observable boundary.", "David Karnok", "akarnokd", "01/14/14, 03:36:06 AM", "Listed in issue #653.", "NaN"], ["736", "MergeMap with Iterable and resultSelector overloads", "David Karnok", "akarnokd", "01/14/14, 03:41:12 AM", "Listed in #653.", "NaN"], ["738", "Publish and PublishLast overloads", "David Karnok", "akarnokd", "01/14/14, 03:43:32 AM", "Listed in #653\n\nThese operators use the existing multicast and subject infrastructure so I omitted any direct tests.", "NaN"], ["739", "Debounce with selector", "David Karnok", "akarnokd", "01/14/14, 03:45:11 AM", "Listed in #653", "NaN"], ["740", "Timeout with selector overloads", "David Karnok", "akarnokd", "01/14/14, 03:46:02 AM", "Listed in #653.", "NaN"], ["741", "Zip with iterable, removed old aggregator version and updated tests", "David Karnok", "akarnokd", "01/14/14, 08:18:51 AM", "Listed in #653.", "NaN"], ["742", "Build with Gradle 1.10.", "Luke Daley", "ldaley", "01/12/14, 12:16:50 AM", "Required that the IDE plugins also be applied to the root, because of the improved Scala support with the IDEA plugin.", "NaN"], ["745", "Fixed issue #737", "Shixiong Zhu", "zsxwing", "01/14/14, 03:51:00 AM", "Fixed issue #737. Moved the `onCompleted` logic under the condition `latest == id`.", "NaN"], ["749", "Separated Android test code from source.", "Jeffrey Yu", "wehjin", "01/14/14, 08:20:39 AM", "Moved the nested test classes in the android contrib code into a separate test folder.  The unit-test dependencies were making ProGuard sad, causing it to complain about missing libraries.", "NaN"], ["751", "Provide Observable.timestamp(Scheduler) to be used in the tests.", "Eugene Vigdorchik", "vigdorchik", "02/14/14, 08:40:27 PM", "The test could've used toBlockingObservable, but this hangs, even though timestamped observable is completed.", "NaN"], ["752", "Organize, Format, Alphabetize and Finalize", "Ben Christensen", "benjchristensen", "01/15/14, 07:50:35 AM", "Code cleanup after the many new operators that have come in over the past 2 months.\n\n1) Organized imports\n2) Formatted all code for standard whitespace, code formatting etc\n3) Sorted methods in `Observable.java` alphabetically\n4) Updated all license headers\n5) Made `Observable` methods final as they are not intended to be overridden in the rare cases when inheritance makes sense for `Observable`. This better communicates the inheritance intent of the class and prevents against accidental misuse (such as overriding `subscribe` which breaks it).", "NaN"], ["755", "Add marble diagrams to new operators & variants.", "David Gross", "DavidMGross", "01/15/14, 10:16:08 PM", "Add javadoc \"@deprecated use...\" where appropriate.\nSome javadoc comment reformatting (e.g. overlong lines).", "NaN"], ["760", "Performance Tests Source Folder", "Ben Christensen", "benjchristensen", "01/16/14, 07:51:43 PM", "- Create /src/perf for placing performance tests\n- Start some operator tests and move existing perf tests into this folder.\n- Probably want to explore using https://code.google.com/p/caliper/", "NaN"], ["762", "adding javadoc marble diagram for the mergeMap(next,completed,error) variety", "David Gross", "DavidMGross", "01/17/14, 03:23:55 AM", "NaN", "NaN"], ["763", "Added support for custom functions in combineLatest.", "Chris Grimm", "chrisgrimm", "02/11/14, 08:42:31 PM", "NaN", "NaN"], ["765", "A variety of improvements to the javadoc text.", "David Gross", "DavidMGross", "01/21/14, 05:28:31 AM", "NaN", "NaN"], ["767", "Zip fix for multiple onCompleted and moved unsubscribe outside the lock.", "David Karnok", "akarnokd", "01/21/14, 05:29:16 AM", "Also added the test case from the issue.\n\nInstead of #766", "NaN"], ["770", "Bind Operator", "Ben Christensen", "benjchristensen", "01/22/14, 04:13:41 AM", "Implementation of `bind` operator along with new `create` and `subscribe` methods and several reimplemented operators: `fromIterable`, `toList`, `toSortedList`, `map`, `cast`, `timestamp`, `merge`, `flatMap`, `mergeMap`, `groupBy`, `parallel`.\n\nThe `bind` signature is:\n\n``` java\npublic <R> Observable<R> bind(final Func1<Operator<? super R>, Operator<? super T>> bind)\n```\n\nThe new `Operator` class signature is:\n\n``` java\npublic abstract class Operator<T> implements Observer<T>, Subscription\n```\n\nThe `create` method now looks like:\n\n``` java\npublic final static <T> Observable<T> create(final Action1<Operator<? super T>> f)\n```\n\nA new `subscribe` signature is:\n\n``` java\npublic final void subscribe(Operator<? super T> o)\n```\n\nThe use of these three new methods allows for chaining operators together and supporting unsubscription on both synchronous and asynchronous sources.\n##### Status and Plan\n- I have temporarily disabled Scala and Kotlin builds until they are fixed. \n- The Groovy module has been retrofitted with an extension module to intercept and disambiguate the new `create` method from the deprecated one.\n- I have not yet tested Clojure or JRuby\n- I am pretty certain I have the generics wrong on `OperatorMerge` so am using it in non-typesafe manner right now\n\nThis design has been reviewed with several people on Github and in person. Besides resolving the items listed above, my intention is as follows:\n- invite feedback and review on this pull request in the next 12-24 hours\n- merge into trunk if nothing major comes up\n- work towards resolving issues with the language adaptors and polishing any rough edges of the new changes\n- finalize `bind` signatures\n- consider deprecating or eliminating `CurrentThreadScheduler` (if it needs to exist at all, perhaps rename to `TrampolineScheduler` to remove confusion between `Immediate` and `CurrentThread`)\n- release as 0.17.0 (along with some unrelated `Scheduler` changes)\n- continue working in the future migrating operators to this new design\n\nSee https://github.com/Netflix/RxJava/issues/746 for background on the proposal, reasons and design discussion.", "NaN"], ["777", "Fixed testSingleSourceManyIterators", "David Karnok", "akarnokd", "02/11/14, 08:26:06 PM", "Converted to a single-threaded test.", "NaN"], ["778", "Fix zip race condition", "Vadim Spivak", "vadims", "01/22/14, 10:32:07 PM", "The ItemObserver collection logic needs to run in both the OnNext and OnCompleted handlers. \n\nOtherwise, you might have values waiting to be emitted and without seeing an OnCompleted. I couldn't think of an easy unit test for this, it actually took a while to narrow down the example.\n\nThe only way I could reproduce it on my machine was to use Hystrix and it happens somewhat sporadically (10-50 iterations).\n\n``` java\npublic class Test {\n\n  public static class DummyCommand extends HystrixCommand<Integer> {\n\n    protected DummyCommand() {\n      super(HystrixCommandGroupKey.Factory.asKey(\"Dummy\"));\n    }\n\n    @Override\n    protected Integer run() throws Exception {\n      Thread.sleep(1);\n      return 1;\n    }\n  }\n\n  public static void main(String[] args) throws InterruptedException {\n\n    while (true) {\n      Observable.zip(tap(new DummyCommand().observe()), tap(new DummyCommand().observe()), new Func2<Integer, Integer, Integer>() {\n        @Override\n        public Integer call(Integer a, Integer b) {\n          return a + b;\n        }\n      }).toBlockingObservable().single();\n      System.out.println(\"\\n\\n\\n\");\n      Thread.sleep(5);\n    }\n\n  }\n\n  public static Observable<Integer> tap(Observable<Integer> observable) {\n    return observable.doOnEach(new Action1<Notification<? super Integer>>() {\n      @Override\n      public void call(Notification<? super Integer> notification) {\n        System.out.println(\"notification = \" + notification);\n      }\n    });\n  }\n\n}\n```", "NaN"], ["781", "Fixed buglet in join binding, simplified types", null, "headinthebox", "02/06/14, 12:33:06 AM", "Txs to @samuelgruetter for pointing out a small bug involving implicit conversions.\n\nSimplified some of the types of empty, buffer, window, groupBy until to leverage Scala's top and bottom type (we could not do this in C#).", "NaN"], ["783", "Implement some Android UI related operators", "Vladimir Mironov", "nsk-mironov", "02/06/14, 12:33:59 AM", "1. OperatorViewClick\n2. OperatorEditTextInput\n3. OperatorCompoundButtonInput", "NaN"], ["784", "Lift and Observer+Subscription", "Ben Christensen", "benjchristensen", "01/26/14, 05:17:48 AM", "Make `Observer` implement `Subscription` and rename `bind` to `lift` as per decisions in https://github.com/Netflix/RxJava/issues/775\n\nSignatures are now:\n\n``` java\n// Observable.create\npublic final static <T> Observable<T> create(OnSubscribe<T> f)\n\n// Observable.OnSubscribe typed function interface\npublic static interface OnSubscribe<T> extends Action1<Observer<? super T>>\n\n// lift function\npublic <R> Observable<R> lift(final Func1<Observer<? super R>, Observer<? super T>> bind)\n\n// Observer\npublic abstract class Observer<T> implements Subscription {\n     public abstract void onNext(T t);\n     public abstract void onError(Throwable e);\n     public abstract void onCompleted();\n     public final void add(Subscription s)\n     public final void unsubscribe()\n     public final boolean isUnsubscribed()\n}\n\n// Subject\npublic abstract class Subject<T, R> extends Observer<T> {\n    public abstract Observable<R> toObservable();\n}\n```\n\nThis is a major set of changes to the internals, particularly the unit tests because Mockito has issues with abstract classes as opposed to `Observer` being an interface.\n\nThere are still some unit tests failing that I haven't yet figured out:\n- OperationJoinsTest.whenComplicated in rxjava-core\n- OperationConditionalsTest.testDoWhileManyTimes in rxjava-computation-expressions\n- OperationConditionalsTest.testWhileDoManyTimes in rxjava-computation-expressions\n\nI intend on merging this sooner rather than later so everyone can be working off the same codebase, even though I do not consider this code ready for release, even once those unit tests are fixed.\n\nInterestingly, these performance tests on my machine are much better:\n\n``` java\n// OperatorFromIterablePerformance.timeTenLongs()\nv0.16\n     * Run: 10 - 8,096,667 ops/sec\n     * Run: 11 - 8,382,131 ops/sec\n     * Run: 12 - 8,256,288 ops/sec\n     * Run: 13 - 8,139,703 ops/sec\n     * Run: 14 - 8,011,023 ops/sec\n\n... after v0.17 work:\n\n     * Run: 10 - 31,296,553 ops/sec\n     * Run: 11 - 30,080,435 ops/sec\n     * Run: 12 - 31,886,941 ops/sec\n     * Run: 13 - 32,281,807 ops/sec\n     * Run: 14 - 33,519,028 ops/sec\n\n\n// OperatorMapPerformance.timeMapPlusOne();\n\nv0.16\n\n     * Run: 10 - 11,375,632 ops/sec\n     * Run: 11 - 11,390,325 ops/sec\n     * Run: 12 - 11,655,527 ops/sec\n     * Run: 13 - 11,528,440 ops/sec\n     * Run: 14 - 11,321,181 ops/sec\n\n... after v0.17 work:\n\n     * Run: 10 - 17,674,464 ops/sec\n     * Run: 11 - 17,890,239 ops/sec\n     * Run: 12 - 17,919,155 ops/sec\n     * Run: 13 - 16,356,974 ops/sec\n     * Run: 14 - 16,723,414 ops/sec\n\n// OperatorMergePerformance.timeRepetitionsEmissionSynchronous()\n\nv0.16\n\n     * Run: 10 - 32,609,617 ops/sec\n     * Run: 11 - 33,511,839 ops/sec\n     * Run: 12 - 34,768,096 ops/sec\n     * Run: 13 - 32,376,499 ops/sec\n     * Run: 14 - 33,166,835 ops/sec\n\n... after v0.17 work:\n\n     * Run: 10 - 45,945,747 ops/sec\n     * Run: 11 - 46,342,209 ops/sec\n     * Run: 12 - 44,493,090 ops/sec\n     * Run: 13 - 44,999,640 ops/sec\n     * Run: 14 - 47,389,771 ops/sec\n\n```", "NaN"], ["785", "Reimplement Zip Operator Using Lift [Preview]", "Ben Christensen", "benjchristensen", "02/05/14, 03:53:18 AM", "A preview of a re-implementation of the `zip` operator.\n\nThis re-implements the `zip` operator but not yet the `zipIterable` so those unit tests are still failing. I'm submitting early to get a code review and will finish the `zipIterable` sometime early next week.\n\nI have already had the concurrency model reviewed by two others and all unit tests are passing but further review is justified and welcome.\n\nThe performance of this implementation (without doing any profiling) has risen from 1.42m ops/second on v0.16 to 1.67m ops/second as measured on my machine for the simple test `Observable.zip(from(1), from(1), {a, b -> a+b})` and 31k ops/second to 63k ops/second for `Observable.zip(range(0, 100), range(100, 200), {a, b -> a+b})`.", "NaN"], ["786", "Careful With That Global Search And Replace, Eugene.", "David Gross", "DavidMGross", "01/27/14, 06:05:20 PM", "restoring the working URLs of RxJava wiki pages and marble diagrams in the javadocs\nhttp://www.youtube.com/watch?v=AYMyxTFwuz8", "NaN"], ["787", "Fix problem with Observable.create()", "Mario Arias", "MarioAriasC", "01/27/14, 06:05:55 PM", "- Fix problem with Obserable.create()\n- Avoid the use of deprecated methods ", "NaN"], ["788", "Performance benchmark with caliper", "George Campbell", "abersnaze", "02/09/14, 12:29:37 AM", "Minimal changes to get a `./gradlew time` task to accurately benchmark performance changes for #776.\n\nI'm still looking into JHM but I'm not sure how well it will integrate with Rx's gradle build.", "NaN"], ["790", "Convert to scan to use lift", "George Campbell", "abersnaze", "02/12/14, 08:37:07 PM", "I switched the scan to an operator and cleaned up what looked like a lot of unnecessary code from the summing operations.", "NaN"], ["791", "improve switchOnNext description in javadocs", "David Gross", "DavidMGross", "01/30/14, 06:12:32 AM", "also: repair anchors in links to RxJava wiki in javadocs", "NaN"], ["793", "Observer + Subscriber", "Ben Christensen", "benjchristensen", "01/31/14, 06:58:33 AM", "As per discussion in https://github.com/Netflix/RxJava/issues/792 the `abstract class Observer` has been returned to `interface Observer` and there is now `abstract class Subscriber implements Observer<T>, Subscription` to fill that role.\n\nSignatures are now:\n\n``` java\n// Observable.create\npublic final static <T> Observable<T> create(OnSubscribe<T> f)\n\n// Observable.OnSubscribe typed function interface\npublic static interface OnSubscribe<T> extends Action1<Subscriber<? super T>>\n\n// Observable.subscribe\npublic final Subscription subscribe(Subscriber<? super T> subscriber)\npublic final Subscription subscribe(Observer<? super T> observer)\n\n// lift function\npublic <R> Observable<R> lift(final Func1<Subscriber<? super R>, Subscriber<? super T>> bind)\n\n// Observer\npublic interface Observer<T> {\n     public abstract void onNext(T t);\n     public abstract void onError(Throwable e);\n     public abstract void onCompleted();\n}\n\n// Subscriber\npublic abstract class Subscriber<T> implements Observer<T>, Subscription {\n     public final void add(Subscription s)\n     public final void unsubscribe()\n     public final boolean isUnsubscribed()\n}\n\n// Subject \npublic abstract class Subject<T, R> extends Observable<R> implements Observer<T>\n```", "NaN"], ["796", "Add Subscription.isUnsubscribed()", "Ben Christensen", "benjchristensen", "02/01/14, 12:56:52 AM", "With the new model of injecting `Subscription` into functions for synchronous loops to check `isUnsubscribed()` it now makes sense for this to be on the interface of all `Subscription` implementations.", "NaN"], ["797", "Scheduler Outer/Inner [Preview]", "Ben Christensen", "benjchristensen", "02/04/14, 05:19:18 PM", "Following are proposed changes to the `Scheduler` signature based on discussions between @headinthebox and I intended to simplify scheduling and make it easier to do the right thing.\n\nThis originates from three findings:\n\n1) It was very easy to cause memory leaks or inadvertent parallel execution since the distinction between outer and inner scheduling was not obvious.\n\nTo solve this the new design explicitly has the outer `Scheduler` and then `Scheduler.Inner` for recursion.\n\n2) The passing of state is not useful since scheduling over network boundaries with this model does not work.\n\nIn this new design all state passing signatures have been removed. This was determined while implementing a `RemoteScheduler` that attempted to use `observeOn` to transition execution from one machine to another. This does not work because of the requirement for serializing/deserializing the state of the entire execution stack. Migration of work over the network has been bound to be better suited to explicit boundaries established by Subjects. Thus, the complications within the Schedulers are unnecessary.\n\n3) The number of overloads with different ways of doing the same things were confusing.\n\nThis new design removes all but the essential and simplest methods.\n\nThis is the new signature for `Scheduler`:\n\n``` java\npublic abstract class Scheduler {\n\n     // the primary entry point, it immediately schedulers work on a new thread and executes it\n     // the return subscription will shut down the Inner scheduler when unsubscribed\n     public abstract <T> Subscription schedule(Action1<Scheduler.Inner> action);\n     public <T> Subscription schedule(final Action1<Scheduler.Inner> action, final long delayTime, final TimeUnit unit);\n     public int degreeOfParallelism();\n     public long now();\n\n     public abstract class Inner implements Subscription {\n\n         public abstract void schedule(Action1<Scheduler.Inner> action);\n         public abstract void schedule(Action1<Scheduler.Inner> action, long delayTime, TimeUnit unit);\n         public void schedulePeriodically(final Action1<Scheduler.Inner> action, long initialDelay, long period, TimeUnit unit);\n            // I question having schedulePeriodically here, since recursion allow the same behavior, and with conditional logic\n         public void schedule(Action1<Scheduler.Inner> action, Date dueTime);\n      }\n}\n```\n\nThe simplest execution of a single task is:\n\n``` java\nSchedulers.newThread().schedule(new Action1<Inner>() {\n\n    @Override\n    public void call(Inner inner) {\n        doWork();\n    }\n\n});\n```\n\nRecursion is easily invoked:\n\n``` java\nSchedulers.newThread().schedule(new Action1<Inner>() {\n\n    @Override\n    public void call(Inner inner) {\n        doWork();\n        // recurse until unsubscribed (the schedule will do nothing if unsubscribed)\n        inner.schedule(this);\n    }\n\n});\n```\n\nThe use of `Action1<Inner>` on both the outer and inner levels makes it so recursion that refer to `this` and it works easily. \n\nSimilar to the new `lift`/`create` pattern with `Subscriber` the `Inner` is also a `Subscription` so it allows efficient loops with `unsubscribe` support:\n\n``` java\nSchedulers.newThread().schedule(new Action1<Inner>() {\n\n    @Override\n    public void call(Inner inner) {\n        while(!inner.isUnsubscribed()) {\n            doWork();\n        }\n    }\n\n});\n```\n\nAn action can now `unsubscribe` the `Scheduler.Inner`:\n\n``` java\nSchedulers.newThread().schedule(new Action1<Inner>() {\n\n    @Override\n    public void call(Inner inner) {\n        while(!inner.isUnsubscribed()) {\n            int i = doOtherWork();\n            if(i > 100) {\n                // an Action can cause the Scheduler to unsubscribe and stop\n                inner.unsubscribe();\n            }\n        }\n    }\n\n});\n```\n\nTypically just stopping is sufficient:\n\n``` java\nSchedulers.newThread().schedule(new Action1<Inner>() {\n\n    @Override\n    public void call(Inner inner) {\n        int i = doOtherWork();\n        if (i < 10) {\n            // recurse until done 10\n            inner.schedule(this);\n        }\n    }\n\n});\n```\n\nbut if other work in other tasks is being done and you want to unsubscribe conditionally you could:\n\n``` java\nSchedulers.newThread().schedule(new Action1<Inner>() {\n\n    @Override\n    public void call(Inner inner) {\n        int i = doOtherWork();\n        if (i < 10) {\n            // recurse until done 10\n            inner.schedule(this);\n        } else {\n            inner.unsubscribe();\n        }\n    }\n\n});\n```\n\nand the recursion can be delayed:\n\n``` java\nSchedulers.newThread().schedule(new Action1<Inner>() {\n\n    @Override\n    public void call(Inner inner) {\n        doWork();\n        // recurse until unsubscribed ... but delay the recursion\n        inner.schedule(this, 500, TimeUnit.MILLISECONDS);\n    }\n\n});\n```\n\nThe methods on the `Inner` never return a `Subscription` because they are always a single thread/event-loop/actor/etc and controlled by the `Subscription` returned by the initial `Scheduler.schedule` method. This is part of clarifying the contract.\n\nThus an `unsubscribe` controlled from the outside would be done like this:\n\n``` java\nSubscription s = Schedulers.newThread().schedule(new Action1<Inner>() {\n\n    @Override\n    public void call(Inner inner) {\n        while(!inner.isUnsubscribed()) {\n            doWork();\n        }\n    }\n\n});\n\n// unsubscribe from outside\ns.unsubscribe();\n```\n\nI'd appreciate feedback on this design direction.\n\n---\n\nNOTE: This pull request is not yet complete. I have not modified the language adaptors or other modules, and there are 3 unit tests in core failing (related to `buffer` and `window`).", "NaN"], ["801", "Added more possible failure cases to CompositeExceptionTest", "Matt Jacobs", "mattrjacobs", "02/04/14, 04:47:55 AM", "NaN", "NaN"], ["803", "Add testMultipleWithSameCause UnitTest", "Ben Christensen", "benjchristensen", "02/04/14, 05:54:18 AM", "Also make tests capable of failing with timeouts. Before the constructor would immediately go into an infinite loop and hang the tests.", "NaN"], ["805", "Fix CompositeException", "Ben Christensen", "benjchristensen", "02/04/14, 05:31:26 PM", "This fixes possible issues where infinite loops could be created if the right combination of Exceptions and causal chains were composed together.", "NaN"], ["812", "Fixed OperationSubscribeOn so OperationConditionalsTest works again.", "David Karnok", "akarnokd", "02/05/14, 05:50:34 PM", "Commenting out the inner makes the `OperationConditionalsTest` pass.\n\nUnfortunately, I'm not sure whether this change affects non-Trampolined schedulers in any way or why was there a need to unsubscribe an inner scheduler. It is possible the actual bug is in TrampolineScheduler.", "NaN"], ["814", "RunAsync method for outputting multiple values", "David Karnok", "akarnokd", "02/05/14, 05:43:47 PM", "Added `runAsync` method to allow producing multiple values while running an action on a scheduler.\n\nThe drawback is that the action is run immediately and observers might not get any or all of the produced values. An overload lets the client specify a subject (such as ReplaySubject) to reliably capture all values and replay them to Observers. Otherwise, it just acts as a cold observable with the additional option to cancel the schedule and/or the action.", "NaN"], ["816", "One global onCompleted object", "Samuel Gruetter", "samuelgruetter", "02/05/14, 06:16:46 PM", "issue https://github.com/Netflix/RxJava/issues/662", "NaN"], ["817", "Scala Scheduler Bindings Fix", null, "headinthebox", "02/05/14, 09:45:19 PM", "- Updated schedulers to reflect 0.17 changes.\n- Add timer bindings", "NaN"], ["818", "CompositeSubscription memory reduction", "David Karnok", "akarnokd", "02/05/14, 09:45:09 PM", "Since CompositeSubscription is now used everywhere with Subscriber, I looked at the code again and tried to reduce memory consumption. I've added CLEAR_STATE_UNSUBSCRIBED singleton to transition into when unsubscribed. Note that the previous version kept the subscription array after the unsubscription, keeping references to other subscriptions alive (although unsubscribed); I'm not certain why unsubscription didn't simply discard the array before.\n\nI've played with changing the `add` and `remove` methods (not included in this PR) to do more direct array manipulation with about 10-40% speed increase for tests like add directly followed by remove. The speed increase comes from:\n- using arraycopy to avoid dynamic array creation in copyOf,\n- handling case where CS contains a single item to be removed and transitions into CLEAR_STATE instead of creating a new empty state.\n\nSimilar memory reduction could be implemented in MAS and SAS.", "NaN"], ["819", "CompositeSubscription performance increase", "David Karnok", "akarnokd", "02/05/14, 10:26:02 PM", "- Optimized the case when the composite holds only a single element.\n- Replaced Arrays.copyOf with regular arraycopy to avoid the cost of reflective array creation\n- Included perf test where I got 32% increase on my i7 4770K", "NaN"], ["820", "Git keeps modifying this file so committing it how it wants it.", "Ben Christensen", "benjchristensen", "02/06/14, 12:11:01 AM", "NaN", "NaN"], ["821", "Update to use Subscriber/Subscriptions.create", "Ben Christensen", "benjchristensen", "02/06/14, 12:38:16 AM", "Master had changed since the pull request.", "NaN"], ["822", "Reimplement 'subscribeOn' using 'lift'", "Shixiong Zhu", "zsxwing", "02/07/14, 04:04:39 AM", "hi, this PR reimplemented the `subscribeOn` using `lift`. However, both the original and current implementation can not guarantee that `unsubscribe` is always called in the `scheduler`. An extreme example is:\n\n``` java\n    public static void main(String[] args) throws InterruptedException {\n        Observable.create(new OnSubscribe<Integer>() {\n\n            @Override\n            public void call(final Subscriber<? super Integer> t1) {\n                final Subscription s = Subscriptions.create(new Action0() {\n\n                    @Override\n                    public void call() {\n                        System.out.println(Thread.currentThread().getName());\n                    }\n                });\n                t1.add(s);\n                new Thread(new Runnable() {\n\n                    @Override\n                    public void run() {\n                        t1.unsubscribe();\n                    }\n\n                }, \"test\").start();\n                try {\n                    Thread.sleep(10000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                t1.onCompleted();\n            }\n        }).subscribeOn(Schedulers.newThread()).subscribe();\n        Thread.sleep(10000);\n    }\n```\n\nwill output \"test\".", "NaN"], ["824", "Set setDaemon on NewThreadScheduler", "David Karnok", "akarnokd", "02/06/14, 07:47:09 PM", "First noticed by @zsxwing.", "NaN"], ["825", "Issue #799 - Commenting out the call to attachCallingThreadStack when co...", "Matt Jacobs", "mattrjacobs", "02/06/14, 07:46:12 PM", "...nstructing a CompositeException", "NaN"], ["826", "Return wrapped Subscription", "Ben Christensen", "benjchristensen", "02/06/14, 07:45:27 PM", "- make sure the SafeSubscriber is included in what is returned\n- then return as Subscription not Subscriber so it can't be cast back to a Subscriber", "NaN"], ["827", "Fixed cut & paster error in io scheduler", null, "headinthebox", "02/06/14, 08:28:03 PM", "Thanks @samuelgruetter for pointing this out. ", "NaN"], ["828", "Repeat Operator", "Ben Christensen", "benjchristensen", "02/06/14, 08:22:28 PM", "Based on code and discussion in https://github.com/Netflix/RxJava/pull/807/files", "NaN"], ["829", "adding marble diagrams, see-also links to javadocs of new repeat() variants", "David Gross", "DavidMGross", "02/07/14, 03:56:05 AM", "NaN", "NaN"], ["832", "[Issue #831] Fix for OperationJoin race condition", null, "duncani", "02/07/14, 04:09:48 AM", "This is to fix the race condition outlined in issue #831 .\nThe join now grabs a copy of the other side's id in the first critical section then won't go higher than that in the iteration of the other side's values (now using entrySet()).", "NaN"], ["833", "Take operator was breaking the unsubscribe chain", "Ben Christensen", "benjchristensen", "02/07/14, 03:51:58 AM", "Fixes issue https://github.com/Netflix/RxJava/issues/830", "NaN"], ["834", "Update clojure for 0.17", "Dave Ray", "daveray", "02/07/14, 06:32:43 AM", "Updated interop for `OnSubscribe` interface. Updated readme and examples.", "NaN"], ["835", "ObserveOn Operator with Backpressure", "Ben Christensen", "benjchristensen", "02/09/14, 12:26:20 AM", "This is a re-implementation of ObserveOn done for 3 purposes:\n\n1) Migrate to new `lift` style so the `Subscription` flows through correctly\n2) Eliminate the wasted first schedule step (reported by @mttkay  https://github.com/Netflix/RxJava/pull/797#issuecomment-34044956)\n3) Eliminate buffering so it naturally provides back pressure \n\nUnit tests are passing on my machine for a full build, but I'm interested in user experience, particularly from Android users where `observeOn` behavior is mission critical.\n\nThis WILL change behavior and possibly cause problems if `observeOn` was being used to make something async (which is not the purpose of `observeOn`. The `subscribeOn` operator is the one to use for making something ~~async~~ concurrent. [Update: Per discussions below we may want another operator or `observeOn` overload to allow async behavior to use a queue and decouple producer/consumer. The `observeOn` operator however should by default only do what it says - switch threads.]\n\nThis is a complete re-write so I may very well have created nasty bugs that we don't yet have unit tests for so I'd appreciate a thorough review and testing.\n\nOne possible concern is performance. In the case of a synchronous firehose (not the normal use case, but a use case nonetheless), this is far slower because now each `onNext` is sent one-at-a-time across thread boundaries whereas before it would put everything into a queue on one side then read it all from the queue on the other side. \n\nThus, for this code that synchronously firehoses 100000 values it is about 7 times faster on the current code without back-pressure:\n\n``` java\nlong last = Observable.range(0, 100000).observeOn(Schedulers.newThread()).toBlockingObservable().last();\n```\n\nHowever, this code is the same performance:\n\n``` java\nlong last = Observable.interval(1, TimeUnit.MILLISECONDS).take(1000).observeOn(Schedulers.newThread()).toBlockingObservable().last();\n```\n\nThe difference being that we're not just filling up the queue in the second one as it has latency.\n\nI believe this is okay as the intent of `observeOn` is moving across thread boundaries, such as for UI events, and eliminating the bad behavior of buffer-bloat is the right thing. \n\nI'm sure we can find some performance improvements in this code, but it's worth pointing out how the change in behavior can affect it.", "NaN"], ["836", "Setting up the new subproject for debugging observable chains.", "George Campbell", "abersnaze", "02/11/14, 08:31:08 PM", "By creating and registering this plugin you get a complete log of all the events (subscribe, onNext, onError, onCompleted and unsubscribe) that happen in all observables, observers and subscribers. The debug hook also takes a Func1 for transforming data before they are sent to actual onNext functions.\n\nThis pull request is for the raw data.  There isn't any persistence or visualization of the data generated yet.\n\nHere is an example of a simple observable chain\n\n```\nfrom(1, 3).flatMap({ it -> from(it, it + 1) }).take(3).subscribe()\n```\n\nAnd the stream of notifications sent.\n\n```\n{ \"nano\": 1391761208271225000, \"thread\": 1, \"observer\": \"rx.Observable$27@3290a11e\", \"type\": \"Subscribe\", \"source\": \"rx.Observable$2@3541d281\"}\n{ \"nano\": 1391761208272832000, \"thread\": 1, \"observer\": \"rx.operators.OperatorTake$1@f81c4a1\", \"type\": \"Subscribe\", \"source\": \"rx.Observable$2@10942dfb\", \"to\": \"rx.operators.OperatorTake@7056c23d\"}\n{ \"nano\": 1391761208275469000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1@49c5146e\", \"type\": \"Subscribe\", \"source\": \"rx.Observable$2@29c06798\", \"to\": \"rx.operators.OperatorMerge@16d14192\"}\n{ \"nano\": 1391761208275644000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMap$1@427e3f2\", \"type\": \"Subscribe\", \"source\": \"rx.operators.OperatorFromIterable@56e626ff\", \"to\": \"rx.operators.OperatorMap@200a5beb\"}\n{ \"nano\": 1391761208276707000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMap$1@427e3f2\", \"type\": \"OnNext\", \"value\": \"1\", \"to\": \"rx.operators.OperatorMap@200a5beb\"}\n{ \"nano\": 1391761208276839000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1@49c5146e\", \"type\": \"OnNext\", \"value\": \"rx.Observable@299b78d4\", \"from\": \"rx.operators.OperatorMap@200a5beb\", \"to\": \"rx.operators.OperatorMerge@16d14192\"}\n{ \"nano\": 1391761208277012000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1$InnerObserver@2b6dd9c5\", \"type\": \"Subscribe\", \"source\": \"rx.operators.OperatorFromIterable@38f42ac9\"}\n{ \"nano\": 1391761208277075000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1$InnerObserver@2b6dd9c5\", \"type\": \"OnNext\", \"value\": \"1\"}\n{ \"nano\": 1391761208277166000, \"thread\": 1, \"observer\": \"rx.operators.OperatorTake$1@f81c4a1\", \"type\": \"OnNext\", \"value\": \"1\", \"from\": \"rx.operators.OperatorMerge@16d14192\", \"to\": \"rx.operators.OperatorTake@7056c23d\"}\n{ \"nano\": 1391761208277243000, \"thread\": 1, \"observer\": \"rx.Observable$27@3290a11e\", \"type\": \"OnNext\", \"value\": \"1\", \"from\": \"rx.operators.OperatorTake@7056c23d\"}\n{ \"nano\": 1391761208277338000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1$InnerObserver@2b6dd9c5\", \"type\": \"OnNext\", \"value\": \"2\"}\n{ \"nano\": 1391761208277397000, \"thread\": 1, \"observer\": \"rx.operators.OperatorTake$1@f81c4a1\", \"type\": \"OnNext\", \"value\": \"2\", \"from\": \"rx.operators.OperatorMerge@16d14192\", \"to\": \"rx.operators.OperatorTake@7056c23d\"}\n{ \"nano\": 1391761208277471000, \"thread\": 1, \"observer\": \"rx.Observable$27@3290a11e\", \"type\": \"OnNext\", \"value\": \"2\", \"from\": \"rx.operators.OperatorTake@7056c23d\"}\n{ \"nano\": 1391761208277557000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1$InnerObserver@2b6dd9c5\", \"type\": \"OnCompleted\"}\n{ \"nano\": 1391761208279076000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMap$1@427e3f2\", \"type\": \"OnNext\", \"value\": \"3\", \"to\": \"rx.operators.OperatorMap@200a5beb\"}\n{ \"nano\": 1391761208279154000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1@49c5146e\", \"type\": \"OnNext\", \"value\": \"rx.Observable@24d8116d\", \"from\": \"rx.operators.OperatorMap@200a5beb\", \"to\": \"rx.operators.OperatorMerge@16d14192\"}\n{ \"nano\": 1391761208279252000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1$InnerObserver@65601e00\", \"type\": \"Subscribe\", \"source\": \"rx.operators.OperatorFromIterable@951c5ff\"}\n{ \"nano\": 1391761208279322000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1$InnerObserver@65601e00\", \"type\": \"OnNext\", \"value\": \"3\"}\n{ \"nano\": 1391761208279409000, \"thread\": 1, \"observer\": \"rx.operators.OperatorTake$1@f81c4a1\", \"type\": \"OnNext\", \"value\": \"3\", \"from\": \"rx.operators.OperatorMerge@16d14192\", \"to\": \"rx.operators.OperatorTake@7056c23d\"}\n{ \"nano\": 1391761208279483000, \"thread\": 1, \"observer\": \"rx.Observable$27@3290a11e\", \"type\": \"OnNext\", \"value\": \"3\", \"from\": \"rx.operators.OperatorTake@7056c23d\"}\n{ \"nano\": 1391761208279562000, \"thread\": 1, \"observer\": \"rx.Observable$27@3290a11e\", \"type\": \"OnCompleted\", \"from\": \"rx.operators.OperatorTake@7056c23d\"}\n{ \"nano\": 1391761208279692000, \"thread\": 1, \"observer\": \"rx.Observable$27@3290a11e\", \"type\": \"Unsubscribe\", \"from\": \"rx.operators.OperatorTake@7056c23d\"}\n{ \"nano\": 1391761208279756000, \"thread\": 1, \"observer\": \"rx.operators.OperatorTake$1@f81c4a1\", \"type\": \"Unsubscribe\", \"from\": \"rx.operators.OperatorMerge@16d14192\", \"to\": \"rx.operators.OperatorTake@7056c23d\"}\n{ \"nano\": 1391761208279830000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1@49c5146e\", \"type\": \"Unsubscribe\", \"from\": \"rx.operators.OperatorMap@200a5beb\", \"to\": \"rx.operators.OperatorMerge@16d14192\"}\n{ \"nano\": 1391761208279880000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMap$1@427e3f2\", \"type\": \"Unsubscribe\", \"to\": \"rx.operators.OperatorMap@200a5beb\"}\n{ \"nano\": 1391761208279946000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1$InnerObserver@2b6dd9c5\", \"type\": \"Unsubscribe\"}\n{ \"nano\": 1391761208280018000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1$InnerObserver@65601e00\", \"type\": \"Unsubscribe\"}\n{ \"nano\": 1391761208280085000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMap$1@427e3f2\", \"type\": \"OnCompleted\", \"to\": \"rx.operators.OperatorMap@200a5beb\"}\n{ \"nano\": 1391761208280150000, \"thread\": 1, \"observer\": \"rx.operators.OperatorMerge$1@49c5146e\", \"type\": \"OnCompleted\", \"from\": \"rx.operators.OperatorMap@200a5beb\", \"to\": \"rx.operators.OperatorMerge@16d14192\"}\n```", "NaN"], ["837", "Perf with JMH", "George Campbell", "abersnaze", "02/09/14, 12:29:34 AM", "#776 This is a small change on top of perf with Caliper to performance benchmarking with JMH.", "NaN"], ["838", "Make Scala OnCompleted Notification an object", "Samuel Gruetter", "samuelgruetter", "02/09/14, 12:27:25 AM", "This should solve issue https://github.com/Netflix/RxJava/issues/662 and https://github.com/Netflix/RxJava/pull/584 .", "NaN"], ["839", "Error Handling: OnErrorNotImplemented and java.lang.Error", "Ben Christensen", "benjchristensen", "02/08/14, 06:45:40 AM", "Special Handling of java.lang.Error and OnErrorNotImplemented\n- https://github.com/Netflix/RxJava/issues/748#issuecomment-32471495\n- https://github.com/Netflix/RxJava/issues/771\n- https://github.com/Netflix/RxJava/issues/789", "NaN"], ["841", "Range OnSubscribe", "Ben Christensen", "benjchristensen", "02/09/14, 03:25:04 AM", "Reimplemented as a simple loop instead of Iterable. \n\nSimpler code gives a performance bump:\n\n```\n     * -- 0.17\n     * \n     * Run: 10 - 271,147,198 ops/sec\n     * Run: 11 - 274,821,481 ops/sec\n     * Run: 12 - 271,632,295 ops/sec\n     * Run: 13 - 277,876,014 ops/sec\n     * Run: 14 - 274,821,763 ops/sec\n     * \n     * -- 0.16.1\n     * \n     * Run: 10 - 222,104,280 ops/sec\n     * Run: 11 - 224,311,761 ops/sec\n     * Run: 12 - 222,999,339 ops/sec\n     * Run: 13 - 222,344,174 ops/sec\n     * Run: 14 - 225,247,983 ops/sec\n```", "NaN"], ["842", "Test Unsubscribe", "Ben Christensen", "benjchristensen", "02/09/14, 03:32:42 AM", "- also cleaned up some stuff I remembered after merging last commits", "NaN"], ["843", "Updating StringObservable", "George Campbell", "abersnaze", "02/11/14, 08:33:14 PM", "Updating StringObservable to use lift\nAnd added from(InputStream) and from(Reader)", "NaN"], ["845", "Fix problem with Subscription", "Mario Arias", "MarioAriasC", "02/10/14, 11:20:34 PM", "- Fix problem with anonymous implementation of Subscription\n- Enable Kotlin module ", "NaN"], ["846", "Added overloaded createRequest method that takes an HttpContext instance", "Johan Haleby", "johanhaleby", "02/11/14, 08:25:45 PM", "An HttpContext is needed when doing for example preemptive digest authentication with HTTP Client.", "NaN"], ["847", "Various Changes While Fixing GroupBy", "Ben Christensen", "benjchristensen", "02/11/14, 08:07:46 AM", "NaN", "NaN"], ["849", "Add 'Fragment-Host' to rxjava-contrib modules for OSGi", null, "Acardiac", "02/11/14, 08:19:06 PM", "avoid split packages\nhttp://wiki.osgi.org/wiki/Split_Packages\n\nsee also discussion #154", "NaN"], ["851", "Reimplement the timeout operator and fix timeout bugs", "Shixiong Zhu", "zsxwing", "02/11/14, 08:24:47 PM", "This PR reimplemented the `timeout` operator. I also fixed the following bugs of `timeout`:\n- The `timeout` can not work on a synchronized Observable. Unit test:\n  https://github.com/zsxwing/RxJava/commit/356a6902a6e96e4d1a131d71521b62d26596fd6c#diff-f181dce6b07869d0daacb404a292ce0cR231\n- The selector variant of Timeout should throw `TimeoutException` when a timeout event happens without an other Observable. Unit test: https://github.com/zsxwing/RxJava/commit/356a6902a6e96e4d1a131d71521b62d26596fd6c#diff-836fc7028db94329e793dcc6075a258dR259\n  and\n  https://github.com/zsxwing/RxJava/commit/356a6902a6e96e4d1a131d71521b62d26596fd6c#diff-836fc7028db94329e793dcc6075a258dR289\n- The selector variant of Timeout has a race condition between `onNext` and `timeout` methods. Unit test: https://github.com/zsxwing/RxJava/commit/356a6902a6e96e4d1a131d71521b62d26596fd6c#diff-836fc7028db94329e793dcc6075a258dR321\n- The method signatures of some selector variants of Timeout are wrong.", "NaN"], ["852", "rxjava-debug", "Ben Christensen", "benjchristensen", "02/11/14, 08:31:07 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/836", "NaN"], ["853", "StringObservable Update", "Ben Christensen", "benjchristensen", "02/11/14, 08:33:13 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/843", "NaN"], ["854", "The onCreate hook disappeared", "George Campbell", "abersnaze", "02/11/14, 10:59:42 PM", "I think in the merging this hook disappeared from the original pull request for the debug hooks.", "NaN"], ["855", "Move InterruptibleBlockingQueue Inside ObserveOn", "Ben Christensen", "benjchristensen", "02/11/14, 10:59:28 PM", "I decided I'm not ready to commit to this in the public API so am leaving it an implementation detail of ObserveOn.\nWhile working on groupBy, parallel and subscribeOn this queue was not the right solution.", "NaN"], ["857", "Change Lift to use rx.Observable.Operator", "Ben Christensen", "benjchristensen", "02/12/14, 01:05:26 AM", "The generics insanity has to stop.\n\nThis pull request is a result of @abersnaze and I continuing to fail to make generics work with this signature:\n\n``` java\nFunc1<Subscriber<? super R>, Subscriber<? super T>>\n```\n\nIt all fell apart while trying to do things that needed the equivalent of:\n\n``` java\nFunc1<Subscriber<? super R>, Subscriber<? super ? super T>>\n```\n\n... and other such variants.\n\nWith this change I can also finally get the `OperatorMerge` generics to work. \n\nThus, the `Operator` type exists inside `Observable` just like `OnSubscribe` like this:\n\n``` java\n    /**\n     * Operator function for lifting into an Observable.\n     */\n    public interface Operator<R, T> extends Func1<Subscriber<? super R>, Subscriber<? super T>> {\n        // cover for generics insanity\n    }\n```\n\nThis gives us imports like this:\n\n``` java\nimport rx.Observable;\nimport rx.Observable.OnSubscribe;\nimport rx.Observable.Operator;\n```\n\nI know it's not as pure as having `lift(Func1)` but this is far more usable.\n\n``` java\npublic <R> Observable<R> lift(final Operator<R, T> bind)\n```\n\nIf anyone has a different suggestion that still solves the generics issue please let me know.", "NaN"], ["859", "Add 'Fragment-Host' to rxjava-contrib/debug module for OSGi", null, "Acardiac", "02/12/14, 03:41:52 AM", "see #849", "NaN"], ["860", "Fixing the generics for merge and lift", "George Campbell", "abersnaze", "02/12/14, 05:27:17 PM", "I've tracked down to two problems #858 \n\nThe first is that lift wasn't quite right. I changed the lift argument from `Operator<R, T>` to `Operator<? extends R, ? super T>`.  Unfortunately Java won't let us hide that away in the `Operator` class so we have to redeclare that everywhere in the debug hooks but it's still better than the alternative of having to use the full `Func1<? extends Subscriber<? super R>, ? super Subscriber<? super T>>` everywhere.\n\nThe second problem was in the return type of merge `Observable<T>`.  Because of operators like `merge(Observable<? extends T> t1, Observable<? extends T> t2)` the only thing that can be said for the return type is that it is also `Observable<? extends T>` but at the moment it is returning `Observable<T>`.\n\nThis pull request changes all of them and leads to some silly return values like\n\n```\nObservable<String> a, b;\nObservable<? extends String> x = merge(a, b);\n```", "NaN"], ["862", "Update the timeout docs", "Shixiong Zhu", "zsxwing", "02/12/14, 05:28:23 PM", "Updated the timeout docs.", "NaN"], ["863", "Optimize SwingMouseEventSource.fromRelativeMouseMotion", null, "Acardiac", "02/12/14, 05:28:08 PM", "do it more functional way\nsee the trick here:\nhttp://www.introtorx.com/Content/v1.0.10621.0/12_CombiningSequences.html#Zip", "NaN"], ["866", "Update OperationScan to OperatorScan", "Ben Christensen", "benjchristensen", "02/12/14, 09:21:31 PM", "Migrate to use updated conventions of Operator\\* classes that implement rx.Observable.Operator", "NaN"], ["869", "subscribeOn + groupBy", "Ben Christensen", "benjchristensen", "02/14/14, 08:01:40 PM", "Some changes on top of https://github.com/Netflix/RxJava/pull/864 as part of work on https://github.com/Netflix/RxJava/issues/844.\n\nPrimarily I did two things here:\n- get unsubscribe working again via `subscribeOn` for synchronous `Observable`s\n- leverage new `subscribeOn` behavior to make the `groupBy` unit tests work", "NaN"], ["870", "Add the selector variants of timeout in RxScala", "Shixiong Zhu", "zsxwing", "02/13/14, 05:16:41 PM", "This PR added the selector variants of the `timeout` operator in the Scala and also added two examples.", "NaN"], ["874", "Update CompositeSubscriptionTest.java", "Dave Moten", "davidmoten", "02/14/14, 06:31:00 PM", "Fix apparent typo, unsubscription of s2 was not checked and should have been.", "NaN"], ["876", "Manual Merge of #750", "Ben Christensen", "benjchristensen", "02/14/14, 08:40:27 PM", "Manual merge of https://github.com/Netflix/RxJava/pull/751", "NaN"], ["877", "Correct synchronization guard in groupByUntil", "Pyry Jahkola", "pyrtsa", "02/14/14, 08:46:23 PM", "Can't see how `synchronized (key) { ... }` could have been correct here; `key` will hardly ever be the same instance for different invocations of `keySelector`, and the comment on line 73 clearly states `gate` to be the guard for `map`.", "NaN"], ["878", "Scheduler.scheduleRecursive", "Ben Christensen", "benjchristensen", "02/14/14, 08:45:55 PM", "Make recursive scheduling a first-class citizen without needing to refer to \"this\" which doesn't work inside lambdas (Java8/Scala/etc).\n\n``` java\n        Schedulers.newThread().scheduleRecursive(new Action1<Recurse>() {\n            @Override\n            public void call(Recurse r) {\n                System.out.println(\"do stuff on thread: \" + Thread.currentThread() + \" Time: \" + System.nanoTime());\n                r.schedule(100, TimeUnit.MILLISECONDS);\n            }\n        });\n```", "NaN"], ["880", "Force ViewObservable be subscribed and unsubscribed in the UI thread", "Shixiong Zhu", "zsxwing", "02/15/14, 06:28:48 PM", "According to #869 , `unsubscribe` can run in any thread. However, that will cause some concurrent issues in rxjava-android.\n\nThis PR schedules the `unsubscribe` action to run in the UI thread to solve the problem.", "NaN"], ["881", "Lift Performance", "Ben Christensen", "benjchristensen", "02/17/14, 09:39:09 PM", "Using `f.lift()` directly instead of `subscribe` improves ops/second on the included test from 5,907,721 ops/sec to 10,145,486 ops/sec", "NaN"], ["883", "Make Subscriptions of SwingObservable thread-safe", "Shixiong Zhu", "zsxwing", "02/18/14, 07:42:10 AM", "Updated rxjava-swing according to the discussion in #869. Is it necessary to move the unit tests to src/test/java folder?", "NaN"], ["885", "Fixed an issue with the from(Reader) added a bunch of unit tests.", "George Campbell", "abersnaze", "02/18/14, 12:43:57 AM", "fixed a problem @fommil noticed in #840", "NaN"], ["887", "Remove Bad Filter Logic", "Ben Christensen", "benjchristensen", "02/17/14, 06:25:34 PM", "This code was accidentally committed during exploration of groupBy/subscribeOn.", "NaN"], ["888", "Revert Bounded ObserveOn", "Ben Christensen", "benjchristensen", "02/17/14, 07:02:33 PM", "Reverting to only having unbounded `observeOn` in public API as per comment at https://github.com/Netflix/RxJava/pull/835#issuecomment-35299824\n\nLeaving the bounded implementation as an internal operator implementation for now to be discussed further in v0.18 dev cycle.", "NaN"], ["890", "Split SubscribeOn into SubscribeOn/UnsubscribeOn", "Ben Christensen", "benjchristensen", "02/17/14, 08:33:29 PM", "Working with @headinthebox based on discussions at https://github.com/Netflix/RxJava/pull/869 and https://github.com/Netflix/RxJava/pull/880#issuecomment-35163539 we determined that there are times when `unsubscribeOn` behavior is needed.\n\nThe `subscribeOn` operator can not mix `subscribe` and `unsubscribe` scheduling behavior without breaking the `lift`/`Subscriber` behavior that allows unsubscribing synchronous sources. The newly added `unsubscribeOn` operator will not work with synchronous unsubscribes, but it will work for the targeted use cases such as UI event handlers.", "NaN"], ["891", "Eliminate rx.util.* dumping grounds", "Ben Christensen", "benjchristensen", "02/17/14, 09:36:40 PM", "Move all classes into proper homes rather than having `rx.util` as the miscellaneous dumping grounds.\n\nI have attempted to make rx.util.functions.\\* have deprecated proxies to ease the migration. I'm doing this in 0.17 instead of waiting since 0.17 already has breaking changes. ", "NaN"], ["892", "onErrorFlatMap + OnErrorThrowable", "Ben Christensen", "benjchristensen", "02/18/14, 03:58:41 PM", "I am working on solving a production error handling use case that needs the ability to handle errors on an `Observable` acting like a message-bus. This requires it to ignore errors if they occur.\n\nWith @headinthebox the idea of `onErrorFlatMap` evolved, but we now have a decision to make about the implementation.\n\nIt's pretty easy to solve the first half and allow `onErrorFlatMap` to return `Observables` that are injected into the output `Observable` but don't `onComplete` and thus allow the stream to continue.\n\nHowever, we're looking at whether we can also capture the `T value` that caused the exception to be thrown so we can achieve use cases like this:\n\n``` java\n    @Test\n    public void spliceAndContinueEmitting() {\n        TestSubscriber<String> ts = new TestSubscriber<String>();\n        Observable.from(1, 2, 3, 4, 5, 6).map(new Func1<Integer, String>() {\n\n            @Override\n            public String call(Integer v) {\n                if (v < 2 || v > 5) {\n                    return \"Value=\" + v;\n                }\n                throw new RuntimeException(\"error in map function: \" + v);\n            }\n\n        }).onErrorFlatMap(new Func1<OnErrorThrowable, Observable<String>>() {\n\n            @Override\n            public Observable<String> call(OnErrorThrowable t) {\n                return Observable.from(\"Error=\" + t.getValue());\n            }\n\n        }).subscribe(ts);\n\n        ts.assertTerminalEvent();\n        System.out.println(ts.getOnErrorEvents());\n        assertEquals(0, ts.getOnErrorEvents().size());\n        System.out.println(ts.getOnNextEvents());\n        ts.assertReceivedOnNext(Arrays.asList(\"Value=1\", \"Error=2\", \"Error=3\", \"Error=4\", \"Error=5\", \"Value=6\"));\n    }\n```\n\nThis outputs:\n\n```\n[Value=1, Error=2, Error=3, Error=4, Error=5, Value=6]\n```\n\nTo accomplish this however we must capture the `value` and wrap the `Throwable` in all operators that execute user-provided functions. This results in code like this:\n\n``` java\n            @Override\n            public void onNext(T t) {\n                try {\n                    o.onNext(transformer.call(t));\n                } catch (Throwable e) {\n                    onError(new OnErrorThrowable(e, t));\n                }\n            }\n```\n\ninstead of this:\n\n``` java\n            @Override\n            public void onNext(T t) {\n                try {\n                    o.onNext(transformer.call(t));\n                } catch (Throwable e) {\n                    onError(e);\n                }\n            }\n```\n\nThe drawback to this is that `onError` will now receive an `OnErrorThrowable` if the error comes from a user-provided function. The benefit is that the value associated with the failure is now accessible for debugging, reporting, feedback loops etc.\n\nOperators affected by this are `cast`, `doOnEach`, `filter`, `groupBy`, `map`, `scan`, `zip` (and surely others) as these all take user-provided functions.\n\nAre there reasons we should not wrap these errors inside an `OnErrorThrowable`?", "NaN"], ["893", "Change Parallel to use Long instead of Int", "Ben Christensen", "benjchristensen", "02/18/14, 12:00:42 AM", "NaN", "NaN"], ["894", "Synchronized Operator Check for isTerminated", "Ben Christensen", "benjchristensen", "02/18/14, 12:41:53 AM", "As per https://github.com/Netflix/RxJava/issues/872 make Synchronized reject events after terminal state.\nThis class should not unsubscribe though. That is only for SafeSubscriber at the end.", "NaN"], ["895", "Rewrite OperationObserveFromAndroidComponent to OperatorObserveFromAndro...", "Shixiong Zhu", "zsxwing", "02/18/14, 07:42:46 AM", "This PR did the following things:\n- Rewrite `OperationObserveFromAndroidComponent` to `OperatorObserveAndroidComponent`.\n- Call `unsubscribe` at once if the current thread is the UI thread.\n- Remove `itUnsubscribesFromTheSourceSequence` since it's meaningless in the new design.", "NaN"], ["896", "removing java 7 dep", "George Campbell", "abersnaze", "02/18/14, 06:39:18 AM", "NaN", "NaN"], ["898", "Handle illegal errors thrown from plugin", "Ben Christensen", "benjchristensen", "02/18/14, 04:12:16 PM", "NaN", "NaN"], ["901", "GroupBy Unit Test from #900", "Ben Christensen", "benjchristensen", "02/19/14, 04:50:29 AM", "https://github.com/Netflix/RxJava/issues/900", "NaN"], ["902", "Fixed NullPointerException that may happen on timeout", "Johan Haleby", "johanhaleby", "02/19/14, 02:59:42 PM", "An unhandled NullPointerException is thrown in the releaseResources method in rx.apache.http.consumers.ResponseConsumerDelegate if a timeout occur. If a timeout occur then onResponseReceived is never called and thus consumer is null.", "NaN"], ["903", "Scheduler.Recurse fields should be private", "Ben Christensen", "benjchristensen", "02/19/14, 08:48:07 PM", "NaN", "NaN"], ["904", "Merge: Unsubscribe Completed Inner Observables", "Ben Christensen", "benjchristensen", "02/19/14, 08:48:18 PM", "Fixing bug report from https://github.com/Netflix/RxJava/issues/897", "NaN"], ["905", "RxJavaSchedulers Plugin", "Ben Christensen", "benjchristensen", "02/19/14, 09:33:46 PM", "Allow setting different default schedulers for use by system.", "NaN"], ["909", "Scheduler Plugin Refactor", "Ben Christensen", "benjchristensen", "02/20/14, 05:25:57 PM", "1) Deprecate Direct Access to Scheduler Implementations\n\nThis enforces the convention of using `Schedulers.*` and then makes the RxJavaDefaultSchedulers plugin more reliable.\n\n2) Scheduler instances should be or behave like singletons\n\nRemove the Func0 factory signature for Scheduler creation.", "NaN"], ["910", "Remove groupBy with selector.", "Ben Christensen", "benjchristensen", "02/20/14, 05:26:45 PM", "I think we can use `groupBy(keySelector).map(elementSelector)` instead. Is there any reason to keep this signature?\n\nRelated to https://github.com/Netflix/RxJava/commit/02ccc4d727a9297f14219549208757c6e0efce2a#commitcomment-5430646", "NaN"], ["918", "Operator: doOnTerminate", "Ben Christensen", "benjchristensen", "02/21/14, 10:10:11 PM", "Like finallyDo but before emitting the terminal state instead of after.", "NaN"], ["919", "BugFix: Zip Never Completes When Zero Observables", "Ben Christensen", "benjchristensen", "02/21/14, 10:39:25 PM", "Fixes https://github.com/Netflix/RxJava/pull/868 and https://github.com/Netflix/RxJava/pull/917", "NaN"], ["920", "Delete Deprecated onSubscribeStart That Doesn't Work", "Ben Christensen", "benjchristensen", "02/21/14, 10:48:43 PM", "- It's messy to make this work so deleting it instead.\n- Better to move forward in the 0.17 release than try and make this work for the very small percentage (probably only Netflix) that uses it.", "NaN"], ["922", "Changes made while integrating it with our internal system", "George Campbell", "abersnaze", "02/24/14, 07:11:17 PM", "Added complete and error hooks to make the duration of events evident.\nChanged the debug notification to:\nremoved the start nano and thread id to leave that up to the hook writer to decide if they want that.\nadded the source observerable to make linking operators together.", "NaN"], ["923", "Observable creation from Subscriber[T]=>Unit for Scala", "Samuel Gruetter", "samuelgruetter", "03/06/14, 06:04:55 AM", "This PR adds the `Subscriber` type, and `Observable.apply[T](Subscriber[T] => Unit)`.\n\nAdditionally, I made some tweaks in `RxScalaDemo`, and I could remove all comments of the kind `TODO something behaves weirdly here`, because now the weird behavior was gone. Seems like there was some progress in RxJava core :-)\n\nSorry that this PR mixes several topics, let me know if you want me to split it by topic.\n\n/cc @headinthebox @vjovanov", "NaN"], ["924", "Localized Operator Error Handling", "Ben Christensen", "benjchristensen", "02/25/14, 06:44:00 AM", "Do error handling in the `lift` function rather than try/catch in `subscribe` since this catches at the operator level rather than for an entire sequence. This then allows `onErrorResumeNext` and siblings to handle the error instead of it only being emitted to the final `Subscriber`.\n\nI derived this fix while working on Hystrix 1.4.", "NaN"], ["925", "Rxjava clojure bindings final", "Dave Ray", "daveray", "02/25/14, 10:09:50 PM", "Clojure bindings for RxJava. Rebased and cleaned up version of https://github.com/Netflix/RxJava/pull/908 ready for merge. Didn't really get any external feedback, so I'm assuming that means it's perfect :)", "NaN"], ["926", "TestSubscriber: Default onError and Terminal Latch Behavior", "Ben Christensen", "benjchristensen", "02/25/14, 10:12:25 PM", "NaN", "NaN"], ["927", "TestSubscriber lastSeenThread", "Ben Christensen", "benjchristensen", "02/25/14, 10:52:11 PM", "NaN", "NaN"], ["928", "Fix deadlock in SubscribeOnBounded", "David Karnok", "akarnokd", "03/13/14, 04:32:56 PM", "Swap the subscription and the scheduling of pass-through to allow progress of a bounded synchronous source.", "NaN"], ["929", "correct link to maven search", "Volker Leck", "devisnik", "03/06/14, 06:04:28 AM", "Fixes the link for the maven search, now pointing to artifact id `rxjava-android`.", "NaN"], ["930", "Initial commit of the Android samples module", "Matthias K\u00e4ppler", "mttkay", "03/12/14, 04:13:46 PM", "refs https://github.com/soundcloud/RxJava/issues/3\n\nI made it so that the samples project will automatically be pulled in as soon as it detects an Android SDK on the build machine; otherwise it's ignored. It also runs in a sub-gradle so should not be affected by changes to the main project. It does, however, automatically pull in and compile against the current project version.\n\nLet me know what you think. I kept the actual samples minimal for now, I see this more as a tracer bullet for how the samples could fit into the current build setup.", "NaN"], ["931", "A number of improvements to OperatorObserveFromAndroidComponent", "Matthias K\u00e4ppler", "mttkay", "03/06/14, 06:21:50 PM", "Could I get some eyes on this? @tehmou @zsxwing @benjchristensen\n- move the UI thread assert out of the operator and into the helpers; this way, we don't fail the observer anymore with an exception, but the caller.\n- do not loop unsubscribe through the main thread anymore. This unnecessarily defers releasing the references, and might in fact be processed only after Android creates the component after a rotation change. I had to make the references volatile for this to work.\n- immediately unsubscribe in case we detect the componentRef has become invalid. This solves the problem that dangling observers would continue to listen to notifications with no observer alive anymore.\n\nrefs:\nhttps://github.com/Netflix/RxJava/issues/754\nhttps://github.com/Netflix/RxJava/issues/899", "NaN"], ["934", "add Observable.startWith(Observable) method and unit test", "Dave Moten", "davidmoten", "03/06/14, 06:01:14 AM", "add Observable.startWith(Observable) method and unit test. \n\nI would like to avoid breaking method chaining when want to startWith an Observable rather than just an Iterator or specific values. This is a very minor change as under the covers startWith uses concat anyway but it is significant in terms of code readability and is a natural completion of the startWith api. ", "NaN"], ["936", "Skip fixed", null, "headinthebox", "03/04/14, 08:05:53 PM", "Fixed state capture bug.\nAdded unit tests.", "NaN"], ["938", "OperatorWeakBinding (deprecates OperatorObserveFromAndroidComponent)", "Matthias K\u00e4ppler", "mttkay", "03/13/14, 04:09:32 PM", "Android UI operator that weakly binds to a fragment or activity. (see discussion in https://github.com/Netflix/RxJava/issues/899)", "NaN"], ["942", "MathObservable", "Ben Christensen", "benjchristensen", "03/06/14, 05:45:40 AM", "Moving the average/sum/min/max functionality to the MathObservable similar to StringObservable.\n\nSimilar to the rxjava-string module this is seeking to achieve the goal of keeping rxjava-core focused on core functionality.", "NaN"], ["944", "OperationRetry -> OperatorRetry", "Ben Christensen", "benjchristensen", "03/06/14, 05:54:29 AM", "Updated to use \"lift\" and Subscriber.\nFixes https://github.com/Netflix/RxJava/issues/943 Observable.retry() does not unsubscribe from source", "NaN"], ["945", "Manual Merge 940", "Ben Christensen", "benjchristensen", "03/06/14, 05:59:46 AM", "Fixes https://github.com/Netflix/RxJava/pull/940 via manual merge.", "NaN"], ["948", "OperationAll to OperatorAll", "Mark van der Voort", "MarkVanDerVoort", "04/23/14, 04:01:16 AM", "Replaced the `OperationAll` to an `OperatorAll`.\n\nCaveat: I am a newbie here, hoping to learn, so please do not spare me.\nI saw a remark on performancetests, but noticed they were not applied everywhere, so I left them out.\nI saw no issue yet asking for this work, this is on invitation from Erik Meijer at QCON yesterday.\nIf you want me to I can tackle some other operations as well.", "NaN"], ["950", "Add support for Eclipse PDE", null, "Acardiac", "03/10/14, 04:19:12 PM", "Add support for Eclipse PDE handling OSGi fragments.\nhttp://help.eclipse.org/kepler/index.jsp?topic=%2Forg.eclipse.platform.doc.isv%2Freference%2Fmisc%2Fbundle_manifest.html\n\nsee also #849", "NaN"], ["952", "rxjava-scala improvements and reimplemented the `amb` operator", "Shixiong Zhu", "zsxwing", "03/13/14, 04:11:47 PM", "This PR did the following improvements: \n- Added `amb`, `delay`, `delaySubscription` in rxjava-scala. \n- Reimplemented the `amb` operator.", "NaN"], ["953", "Make ObserveOnTest.testNonBlockingOuterWhileBlockingOnNext deterministic", "Ben Christensen", "benjchristensen", "03/10/14, 11:43:13 PM", "reported at https://twitter.com/jaceklaskowski/status/443153927069249536", "NaN"], ["955", "Fixed ReplaySubject leak", "David Karnok", "akarnokd", "03/13/14, 04:15:15 PM", "Fix for issue #939.", "NaN"], ["956", "Fixed byLine test to use line.separator system property instead of \\n.", "David Karnok", "akarnokd", "03/13/14, 04:15:31 PM", "`byLine()` uses the `line.separator` but the test used `\\n`.", "NaN"], ["958", "OperatorSkipWhile", "David Karnok", "akarnokd", "03/13/14, 04:15:55 PM", "Reimplemented OperatorSkipWhile (the OperationSkipWhile has a state-sharing bug with `skipping` and `index`).\n\n+1 test for many subscribers.", "NaN"], ["959", "OperationToFuture must throw CancellationException on get() if cancelled", "Rick Warren", "rickbw", "03/13/14, 04:16:37 PM", "The JDK documentation for Future.get() and its overload requires these methods to throw CancellationException if the Future was cancelled before the task completed. The Futures returned by OperationToFuture.toFuture() did not respect this contract. Now they do.", "NaN"], ["960", "Retry Unit Test from #879", "Ben Christensen", "benjchristensen", "03/13/14, 04:37:33 PM", "From https://github.com/Netflix/RxJava/issues/879", "NaN"], ["962", "Migrate from SynchronizedObserver to SerializedObserver", "Ben Christensen", "benjchristensen", "03/13/14, 06:34:38 PM", "This pull request replaces use of `SynchronizedObserver` with `SerializedObserver`. \n### Why?\n#### 1) Deadlocks\n\nHolding a lock while emitting notifications (`onNext`, `onCompleted`, `onError`) allows for deadlocks if the event results in a cycle back to the parent. \n\nWhile testing RxJava 0.17.0 in Netflix production we ran into one of these. The vulnerability has existed all along but we finally hit it.\n\nThis issue has also been reported before such as: http://twistedoakstudios.com/blog/Post8424_deadlocks-in-practice-dont-hold-locks-while-notifying\n#### 2) Blocking Threads\n\nThe use of `synchronized` can block threads. If it's used in areas such as modifying a data structure this can be okay. When emitting a notification however it is a problem as the result of an `onNext` can take a non-deterministically long time to complete. This means any other thread trying to emit will be blocked.\n\nIf the source threads are event loops (such as Vert.x or Netty) this will block the event loops. \n\nFor example, if two network calls off two Netty event loops are being merged (such as via `flatMap`) and one of them does further slow processing that causes `onNext` to be slow, it will block the other `onNext` which blocks the event loop and prevents any further IO on that thread. This is a significant problem for system scale and breaks the promise of Rx being a non-blocking, reactive library.\n### Solution\n\nThe `synchronize`, `SynchronizedObserver` and `SynchronizedSubscriber` operator and classes have been deprecated. They are replaced by `serialize`, `SerializedObserver` and `SerializedSubscriber`.\n\nThe `SerializedObserver` still ensures only a single thread can emit `onNext`, `onCompleted`, or `onError` at a time but does not hold a lock while doing so. Instead of blocking threads it will accept the incoming events into a buffer. Thus, it becomes an asynchronous operator.\n\nThe `merge` operator (which impacts `flatMap`) now uses `SerializedObserver`, along with any other place in RxJava that needed synchronization.\n### Implementation\n\n3 implementatations were written and tested:\n- [queue and counter](https://github.com/benjchristensen/RxJava/blob/serialize-implementations/rxjava-core/src/main/java/rx/observers/SerializedObserverViaQueueAndCounter.java)\n- [queue and lock](https://github.com/benjchristensen/RxJava/blob/serialize-implementations/rxjava-core/src/main/java/rx/observers/SerializedObserverViaQueueAndLock.java)\n- [atomic state machine](https://github.com/benjchristensen/RxJava/blob/serialize-implementations/rxjava-core/src/main/java/rx/observers/SerializedObserverViaStateMachine.java)\n\nPerformance testing [revealed](https://github.com/benjchristensen/RxJava/blob/serialize-implementations/rxjava-core/src/perf/java/rx/operators/OperatorSerializePerformance.java):\n\n``` java\n    /**\n     * 1 streams emitting in a tight loop. Testing for single-threaded overhead.\n     * \n     * -> blocking synchronization (SynchronizedObserver)\n     * \n     * Run: 10 - 58,186,310 ops/sec\n     * Run: 11 - 60,592,037 ops/sec\n     * Run: 12 - 58,099,263 ops/sec\n     * Run: 13 - 59,034,765 ops/sec\n     * Run: 14 - 58,231,548 ops/sec\n     * \n     * -> state machine technique (SerializedObserverViaStateMachine)\n     * \n     * Run: 10 - 34,668,810 ops/sec\n     * Run: 11 - 32,874,312 ops/sec\n     * Run: 12 - 33,389,339 ops/sec\n     * Run: 13 - 35,269,946 ops/sec\n     * Run: 14 - 34,165,013 ops/sec\n     * \n     * -> using queue and counter technique (SerializedObserverViaQueueAndCounter)\n     * \n     * Run: 10 - 19,548,387 ops/sec\n     * Run: 11 - 19,471,069 ops/sec\n     * Run: 12 - 19,480,112 ops/sec\n     * Run: 13 - 18,720,550 ops/sec\n     * Run: 14 - 19,070,383 ops/sec\n     * \n     * -> using queue and lock technique (SerializedObserverViaQueueAndLock)\n     * \n     * Run: 10 - 51,295,152 ops/sec\n     * Run: 11 - 50,317,937 ops/sec\n     * Run: 12 - 51,126,331 ops/sec\n     * Run: 13 - 52,418,291 ops/sec\n     * Run: 14 - 51,694,710 ops/sec\n     */\n\n    /**\n     * 2 streams emitting in tight loops so very high contention.\n     * \n     * -> blocking synchronization (SynchronizedObserver)\n     * \n     * Run: 10 - 8,361,252 ops/sec\n     * Run: 11 - 7,184,728 ops/sec\n     * Run: 12 - 8,249,685 ops/sec\n     * Run: 13 - 6,831,595 ops/sec\n     * Run: 14 - 8,003,358 ops/sec\n     * \n     * (faster because it allows each thread to be \"single threaded\" while blocking the other)\n     * \n     * -> state machine technique (SerializedObserverViaStateMachine)\n     * \n     * Run: 10 - 4,060,062 ops/sec\n     * Run: 11 - 3,561,131 ops/sec\n     * Run: 12 - 3,721,387 ops/sec\n     * Run: 13 - 3,693,909 ops/sec\n     * Run: 14 - 3,516,324 ops/sec\n     * \n     * -> using queue and counter technique (SerializedObserverViaQueueAndCounter)\n     * \n     * Run: 10 - 4,300,229 ops/sec\n     * Run: 11 - 4,395,995 ops/sec\n     * Run: 12 - 4,551,550 ops/sec\n     * Run: 13 - 4,443,235 ops/sec\n     * Run: 14 - 4,158,475 ops/sec\n     * \n     * -> using queue and lock technique (SerializedObserverViaQueueAndLock)\n     * \n     * Run: 10 - 6,369,781 ops/sec\n     * Run: 11 - 6,933,872 ops/sec\n     * Run: 12 - 5,652,535 ops/sec\n     * Run: 13 - 5,503,716 ops/sec\n     * Run: 14 - 6,219,264 ops/sec\n     */\n\n    /**\n     * 2 streams emitting once a millisecond. Slow emission so little to no contention.\n     * \n     * -> blocking synchronization (SynchronizedObserver)\n     * \n     * Run: 10 - 1,996 ops/sec\n     * Run: 11 - 1,996 ops/sec\n     * Run: 12 - 1,995 ops/sec\n     * Run: 13 - 1,997 ops/sec\n     * Run: 14 - 1,996 ops/sec\n     * \n     * -> state machine technique (SerializedObserverViaStateMachine)\n     * \n     * Run: 10 - 1,996 ops/sec\n     * Run: 11 - 1,996 ops/sec\n     * Run: 12 - 1,996 ops/sec\n     * Run: 13 - 1,996 ops/sec\n     * Run: 14 - 1,996 ops/sec\n     * \n     * -> using queue and counter technique (SerializedObserverViaQueueAndCounter)\n     * \n     * Run: 10 - 1,996 ops/sec\n     * Run: 11 - 1,996 ops/sec\n     * Run: 12 - 1,996 ops/sec\n     * Run: 13 - 1,996 ops/sec\n     * Run: 14 - 1,995 ops/sec\n     * \n     * -> using queue and lock technique (SerializedObserverViaQueueAndLock)\n     * \n     * Run: 10 - 1,996 ops/sec\n     * Run: 11 - 1,996 ops/sec\n     * Run: 12 - 1,997 ops/sec\n     * Run: 13 - 1,996 ops/sec\n     * Run: 14 - 1,995 ops/sec\n     */\n```\n\nThe state machine solution was tested in production but caused performance problems, most likely due to the immense object allocation it needs to do. \n\nThe elegant \"queue and counter\" solution does not perform well enough in the non-contended case.\n\nThe \"queue and lock\" model performs well in the non-contended case and under contention, despite not being a very elegant solution and requiring the use of mutex locks for the state changes (but it does not hold the locks during notification).\n### Considerations\n\nThis does allow unbounded buffer growth, the same as `observeOn` and `zip` instead of blocking the producer threads. \n### Conclusion\n\nThe implementation in this pull request can and likely will be improved over time. The other implementations are purposefully being shown to allow others to provide further insight on how to do this better. \n\nThis change is important to ensure RxJava is non-blocking and our canary testing of this change in the Netflix production environment suggests this change is both performant and functional.", "NaN"], ["963", "A more robust JMH benchmarking set-up", "Gleb Smirnov", "gvsmirnov", "03/13/14, 08:36:51 PM", "Usage:\n\n```\n$ gradle benchmarks\n$ java -jar rxjava-core/build/distributions/rxjava-core-0.17.2-SNAPSHOT-benchmarks.jar [...]\n```\n\nFor example:\n\n```\n$ java -jar rxjava-core/build/distributions/rxjava-core-0.17.2-SNAPSHOT-benchmarks.jar -f 1 -wi 10 -i 10 -tu us -bm avgt\n\nBenchmark                                  (size)   Mode   Samples         Mean   Mean error    Units\nr.o.ObservableBenchmark.measureBaseline         1   avgt        10        0.003        0.000    us/op\nr.o.ObservableBenchmark.measureBaseline      1024   avgt        10        2.764        0.051    us/op\nr.o.ObservableBenchmark.measureBaseline   1048576   avgt        10     3104.088       49.586    us/op\nr.o.ObservableBenchmark.measureMap              1   avgt        10        0.100        0.003    us/op\nr.o.ObservableBenchmark.measureMap           1024   avgt        10        5.036        0.059    us/op\nr.o.ObservableBenchmark.measureMap        1048576   avgt        10     6693.271      277.604    us/op\n```\n\nSee https://github.com/Netflix/RxJava/issues/776 for more details.", "NaN"], ["964", "SubjectSubscriptionManager fix.", "David Karnok", "akarnokd", "03/13/14, 10:48:03 PM", "Fix for #961\n\nIf an already unsubscribed Subscriber is added, the subscription function ends up in an infinite loop as the inner unsubscription logic changes the state to another object before the outer state machine continues.\n- The outer state machine loop now exits if unsubscription happened and doesn't attempt to modify the state.\n- The removeObserver method is changed so that if the subscription to be removed is not in the array, it returns this instead of an unnecessary copy. In addition, copyOf calls have been replaced by arraycopy to avoid reflective array creation.", "NaN"], ["965", "BugFix: Chain Subscription in TimeoutSubscriber and SerializedSubscriber", "Shixiong Zhu", "zsxwing", "03/25/14, 09:06:11 PM", "This PR chains Subscription in TimeoutSubscriber  and SerializedSubscriber. Found by @rbramw #951. Thanks for your unit tests, @rbramw", "NaN"], ["966", "Reimplement the ElementAt operator and add it to rxjava-scala", "Shixiong Zhu", "zsxwing", "03/25/14, 09:05:10 PM", "NaN", "NaN"], ["967", "Reimplement the 'single' operator", "Shixiong Zhu", "zsxwing", "04/20/14, 03:34:21 AM", "This PR did the following work:\n- Reimplement the `single` operator\n- Add `first`, `last`, `single` to rxjava-scala\n- When the `Observable` is empty, `first`, `last`, `single` will throw `NoSuchElementException` instead of `IllegalArgumentException`. It's more consistent with the Java Collection API, e.g., [Deque.getFirst()](http://docs.oracle.com/javase/7/docs/api/java/util/Deque.html#getFirst%28%29), [Deque.getLast()](http://docs.oracle.com/javase/7/docs/api/java/util/Deque.html#getLast%28%29). This will break the current APIs.", "NaN"], ["970", "Notifications for the allocation averse.", "George Campbell", "abersnaze", "03/20/14, 04:25:16 PM", "I've seen and used the sentinel pattern in a couple of places in the implementation of operators.  I figured I'd formalize the hacks into one place where bugs can coalesce.  As a bonus the code that uses it looks a bit cleaner now.", "NaN"], ["972", "Fixed deadlock in Subjects + OperatorCache.", "David Karnok", "akarnokd", "04/16/14, 04:00:40 PM", "Fix for Issue #971.\n- I had to rewrite OperatorCache to allow testing for deadlocks in all Subject types.\n- The terminationLatch was unnecessarily waiting for existing subscribers to deliver their termination events, which caused deadlock with repeat().\n- Treating subjects as internal implementations was not necessary to fix the problem.", "NaN"], ["973", "Merge - Handle Bad Observables", "Ben Christensen", "benjchristensen", "03/20/14, 04:55:08 PM", "- concurrency unit tests\n- handle Observable that emits onComplete multiple times\n\nSee https://github.com/Netflix/RxJava/pull/962#issuecomment-38191868", "NaN"], ["974", "TestSubject, TestObserver and TestScheduler Improvements", "Ben Christensen", "benjchristensen", "03/20/14, 05:39:52 PM", "NaN", "NaN"], ["975", "GroupBy & Time Gap Fixes", "Ben Christensen", "benjchristensen", "03/20/14, 05:47:37 PM", "I ran head-on into the \"time gap\" (https://github.com/Netflix/RxJava/issues/844) issue while working on a stream processing use case (and new 'pivot' operator I'm writing).\nThis is a solution. It's still not ideal as the Javadocs of BufferUntilSubscriber mention, but this is working better than nothing and does not require blocking threads.\nA better solution will come as part of the back pressure work where BufferUntilSubscriber will evolve to have a bounded buffer.", "NaN"], ["976", "parallel-merge unit test assertions", "Ben Christensen", "benjchristensen", "03/20/14, 06:32:18 PM", "Using serialize for merge allows less threads to be used under contention instead of blocking and using them all.\nThis changes the assertion to be <= 3 instead of == 3 because of that.", "NaN"], ["977", "Dematerialize - handle non-materialized terminal events", "Ben Christensen", "benjchristensen", "03/20/14, 09:35:58 PM", "This is used for a use case such as:\n\n``` java\nobservable.flatMap(t -> {\nif(x) {\n  return Observable.from(Notification.create(t));\n} else {\n  return Observable.error(e);\n}).dematerialize();\n```", "NaN"], ["982", "Pivot Operator", "Ben Christensen", "benjchristensen", "03/25/14, 04:34:26 PM", "NaN", "NaN"], ["984", "Tests and Javadoc for Pivot", "Ben Christensen", "benjchristensen", "03/25/14, 06:36:00 PM", "NaN", "NaN"], ["986", "Fix SynchronizedObserver.runConcurrencyTest", "Ben Christensen", "benjchristensen", "03/25/14, 09:32:16 PM", "It wasn't waiting on all threads before emitting onCompleted.", "NaN"], ["987", "Fix Non-Deterministic Pivot Test", "Ben Christensen", "benjchristensen", "03/25/14, 09:38:04 PM", "This fixes a test that failed on build servers (small, slow, single or dual-core machines).", "NaN"], ["988", "OnErrorFailedException", "Ben Christensen", "benjchristensen", "03/25/14, 10:02:48 PM", "Re-throw when onError throws an Exception.\nThis fixes https://github.com/Netflix/RxJava/issues/969", "NaN"], ["990", "Quasar integration contrib module", "Ron Pressler", "pron", "04/02/14, 06:36:43 AM", "This module integrates RxJava with [Quasar](https://github.com/puniverse/quasar) in several ways. It provides:\n- A fiber-based scheduler\n- A fiber-blocking version of BlockingObservables\n- Viewing Quasar channels as Observables and transforming Observables into channels (Quasar channels are a CSP mechanism very similar to channels in the Go programming language).", "NaN"], ["991", "JMH Benchmark Build Config", "Ben Christensen", "benjchristensen", "03/26/14, 11:01:58 PM", "Fixes the Gradle config for JMH so it works from command-line and projects import into Eclipse correctly. \n\nSee https://github.com/Netflix/RxJava/pull/963\n\nThanks @quidryan !", "NaN"], ["993", "JMH Perf Tests", "Ben Christensen", "benjchristensen", "03/27/14, 05:49:30 AM", "1) Migrate all previous tests into `rx.archive` until we have matured with JMH\n2) JMH config in gradle\n3) Start of benchmarking with JMH for `baseline`, `map` and `serialize`\n\n**To Run**\n\nInside ./rxjava-core/ invoke `../gradlew benchmarks`\n\nOr from base invoke `./gradlew benchmarks` and it will scan each sub-module for benchmarks and then only find them in rxjava-core.\n\n**Output**\n\n```\nResult : 72.204 \u00b1(99.9%) 7.524 ns/op\n  Statistics: (min, avg, max) = (69.221, 72.204, 74.048), stdev = 1.954\n  Confidence interval (99.9%): [64.680, 79.729]\n\n\nBenchmark                                                          (size)   Mode   Samples         Mean   Mean error    Units\nr.jmh.Baseline.forLoopInvokingFunction                               1024   avgt         5     3230.689      486.080    ns/op\nr.jmh.Baseline.forLoopInvokingFunction                            1048576   avgt         5  3394679.521   148858.373    ns/op\nr.operators.OperatorMapPerf.mapIdentityFunction                         1   avgt         5       91.338        8.504    ns/op\nr.operators.OperatorMapPerf.mapIdentityFunction                      1024   avgt         5     5626.727     1209.108    ns/op\nr.operators.OperatorMapPerf.mapIdentityFunction                   1048576   avgt         5  6268747.085   258008.983    ns/op\nr.operators.OperatorSerializePerf.noSerializationSingleThreaded      1024   avgt         5       42.198        0.791    ns/op\nr.operators.OperatorSerializePerf.noSerializationSingleThreaded   1048576   avgt         5       45.935        0.911    ns/op\nr.operators.OperatorSerializePerf.serializedSingleStream             1024   avgt         5       69.410       10.499    ns/op\nr.operators.OperatorSerializePerf.serializedSingleStream          1048576   avgt         5       72.305       11.450    ns/op\nr.operators.OperatorSerializePerf.synchronizedSingleStream           1024   avgt         5       72.238        7.233    ns/op\nr.operators.OperatorSerializePerf.synchronizedSingleStream        1048576   avgt         5       72.204        7.524    ns/op\n\n\n```", "NaN"], ["995", "Support Custom JMH Args", "Ben Christensen", "benjchristensen", "03/27/14, 09:56:20 PM", "Support executions of benchmarks such as:\n\n```\n../gradlew benchmarks '-Pjmh=-f 1 -tu ns -bm avgt -wi 5 -i 5 -r 1 .*OperatorSerializePerf.*'\n```\n\nBy default it will run all benchmarks if no args are passed.", "NaN"], ["996", "Perfshadowjar", "Rob Spieldenner", "rspieldenner", "03/28/14, 02:42:26 AM", "NaN", "NaN"], ["999", "New Implementation of SerializedObserver", "Ben Christensen", "benjchristensen", "04/01/14, 09:00:12 PM", "Rewrite of `SerializedObserver` by @akarnokd discussed at  https://github.com/Netflix/RxJava/pull/962#discussion_r10601839 from this Gist: https://gist.github.com/akarnokd/9545150\n#### JMH Benchmarks\n\n0.17.3\n\n```\nBenchmark                                                          (size)   Mode   Samples         Mean   Mean error    Units\nr.operators.OperatorSerializePerf.noSerializationSingleThreaded      1024   avgt         5       45.504        1.710    ns/op\nr.operators.OperatorSerializePerf.noSerializationSingleThreaded   1048576   avgt         5       58.600        5.647    ns/op\nr.operators.OperatorSerializePerf.serializedSingleStream             1024   avgt         5       68.610        4.596    ns/op\nr.operators.OperatorSerializePerf.serializedSingleStream          1048576   avgt         5       71.313        2.318    ns/op\nr.operators.OperatorSerializePerf.synchronizedSingleStream           1024   avgt         5       73.322        3.666    ns/op\nr.operators.OperatorSerializePerf.synchronizedSingleStream        1048576   avgt         5       76.518        1.355    ns/op\n```\n\n0.17.2\n\n```\nBenchmark                                                          (size)   Mode   Samples         Mean   Mean error    Units\nr.operators.OperatorSerializePerf.noSerializationSingleThreaded      1024   avgt         5       45.790        1.184    ns/op\nr.operators.OperatorSerializePerf.noSerializationSingleThreaded   1048576   avgt         5       58.518        3.788    ns/op\nr.operators.OperatorSerializePerf.serializedSingleStream             1024   avgt         5       72.665        7.851    ns/op\nr.operators.OperatorSerializePerf.serializedSingleStream          1048576   avgt         5       74.788        2.946    ns/op\nr.operators.OperatorSerializePerf.synchronizedSingleStream           1024   avgt         5       73.661        3.499    ns/op\nr.operators.OperatorSerializePerf.synchronizedSingleStream        1048576   avgt         5       78.386        5.036    ns/op\n```\n#### Manual Benchmarks\n\n``` java\n/**\n * 0.17.3:\n *\n * Run: 10 - 9,746,505 ops/sec\n * Run: 11 - 9,956,019 ops/sec\n * Run: 12 - 10,053,770 ops/sec\n * Run: 13 - 10,076,958 ops/sec\n * Run: 14 - 9,983,319 ops/sec\n *\n * 0.17.2:\n *\n * Run: 10 - 9,851,999 ops/sec\n * Run: 11 - 9,726,975 ops/sec\n * Run: 12 - 9,719,762 ops/sec\n * Run: 13 - 9,668,141 ops/sec\n * Run: 14 - 9,799,700 ops/sec\n *\n * @param input\n */\npublic void serializedSingleStream(Input input) {\n    for (int i = 0; i < reps; i++) {\n        input.observable.serialize().subscribe(input.subscriber);\n    }\n}\n```", "NaN"], ["1003", "Func0 can transparently implement java.util.concurrent.Callable.", "Rick Warren", "rickbw", "03/31/14, 04:30:35 PM", "This change doesn't change the API at all for users of `Func0`, but it makes all `Func0` objects immediately reusable with any JDK API that accepts `Callables`. For example, a `Func0` can now be submitted directly to an `ExecutorService` for asynchronous execution. It also allows the elimination of a small amount of redundant code within RxJava itself.", "NaN"], ["1005", "add toMap from Java Observable", null, "suncelesta", "04/15/14, 10:07:47 PM", "Added three overloads of toMap to Scala Observable", "NaN"], ["1009", "Android - Adding a new RetainedFragment example", "Zac Siegel", "zsiegel", "04/16/14, 04:01:51 PM", "I wanted to augment the current `RetainedFragment` example class to address some scenarios I have run into using the patterns defined in the current example.  \n\nI was hoping to get some feedback on a more complete scenario I have been working on which is the following.\n\nOn a typical login screen when the user taps a button we want to fire off our network request in an observable. We want to show a progress dialog and then show either success or an error dialog when it fails. We want to gracefully handle rotation and app switching in case a user does something else after firing off the login call. When the user returns we should be able to tell them there was an error or continue forward. \n\nI tried to address this scenario above but specifically I wanted to try and complete the following.\n- Get all the benefits from the current example - i.e. rotation support\n- Make sure the callbacks are not triggered while the app is not in focus\n- Make the example be triggered by a user action - i.e. a user tapping a button\n\nHoping to get some feedback on the example and see if there are any issues with the sample implementation. \n\nAny issues you see here @mttkay or other android RX users?\n\nThanks", "NaN"], ["1010", "UnsafeSubscribe", "Ben Christensen", "benjchristensen", "04/03/14, 04:41:49 AM", "Migrate from reflection to unsafeSubscribe as per discussion at https://github.com/Netflix/RxJava/issues/676\n\nAll operators are migrated to using `unsafeSubscribe` instead of relying on their package to avoid `SafeSubscriber` wrapping.", "NaN"], ["1012", "Removed window between the two synchronized blocks.", "David Karnok", "akarnokd", "04/02/14, 07:36:00 PM", "In the original version, there was a window between finding a null queue and setting emitting false due to being in different synchronized block. If another thread came in this window, it created a new queue with its event which was not emitted until another onXXX method was called, causing unnecessary event delivery delay.\n\nWhile running the tests, the `SerializedObserverTest.testNotificationDelay` failed from time to time due to thread timing. I haven't fixed this test.", "NaN"], ["1015", "Remove Redundant protectivelyWrap Method", "Ben Christensen", "benjchristensen", "04/03/14, 04:50:29 PM", "NaN", "NaN"], ["1019", "Fix: retry() never unsubscribes from source until operator completes", "Ben Christensen", "benjchristensen", "04/04/14, 05:16:23 PM", "This fixes https://github.com/Netflix/RxJava/issues/1018\n\nThank you @petermd", "NaN"], ["1020", "Upgrade Gradle wrapper for Android samples to Gradle 1.11", "Matthias K\u00e4ppler", "mttkay", "04/16/14, 04:02:28 PM", "Android Studio 0.5.4 refuses to build with 1.10.", "NaN"], ["1021", "OperatorWeakBinding to not use WeakReferences anymore", "Matthias K\u00e4ppler", "mttkay", "04/15/14, 09:52:27 PM", "related issues:\nhttps://github.com/Netflix/RxJava/pull/1008\nhttps://github.com/Netflix/RxJava/issues/1006\nhttps://github.com/Netflix/RxJava/issues/979\n\nI changed the samples to actually use `bindActivity` and `bindFragment`", "NaN"], ["1027", "isolate subscriber used for retries, cleanup tests", "Peter McDonnell", "petermd", "04/12/14, 12:09:15 AM", "potential fix for #1024\n\nthere is an outstanding question (see commit comments) about whether its appropriate for the operator to use `unsafeSubscribe` given that it does not completely isolate the `Subscriber` from a badly behaved `Observable`.", "NaN"], ["1030", "Benchmarking: Add JMH benchmark for ReplaySubject.", "Michael Nitschinger", "daschl", "04/11/14, 07:54:53 PM", "Adds some benches for the replay subject.\n\nI.E.\n\n```\nBenchmark                                     (nextRuns)   Mode   Samples         Mean   Mean error    Units\nr.s.ReplaySubjectPerf.subscribeAfterEvents             1  thrpt         5  1898239.827    57634.047    ops/s\nr.s.ReplaySubjectPerf.subscribeAfterEvents          1024  thrpt         5    35680.927      470.929    ops/s\nr.s.ReplaySubjectPerf.subscribeAfterEvents       1048576  thrpt         5       32.427        1.462    ops/s\nr.s.ReplaySubjectPerf.subscribeBeforeEvents            1  thrpt         5  1427820.733    19194.452    ops/s\nr.s.ReplaySubjectPerf.subscribeBeforeEvents         1024  thrpt         5    36835.800      264.748    ops/s\nr.s.ReplaySubjectPerf.subscribeBeforeEvents      1048576  thrpt         5       35.520        1.145    ops/s\n```", "NaN"], ["1031", "Fix NPE in SubjectSubscriptionManager", "Ben Christensen", "benjchristensen", "04/11/14, 07:54:03 PM", "If unsubscribed it should just return, not continue forward. If it does, the `newState` is null and it throws an NPE. ", "NaN"], ["1033", "Manual Merge #1027", "Ben Christensen", "benjchristensen", "04/12/14, 12:09:14 AM", "While reviewing #1027 I added another unit test to understand the issue. Fix by @petermd is good.", "NaN"], ["1035", "Scala cleanup", "Eugene Vigdorchik", "vigdorchik", "04/16/14, 04:01:44 PM", "Review by @headinthebox and @samuelgruetter.", "NaN"], ["1036", "replaced FRP with RP in README title", "Georgi Khomeriki", "flatmap13", "04/15/14, 09:53:50 PM", "Mentioning \"Functional Reactive Programming\" causes confusion and misconception.\nI think it's better to simply stick with \"Reactive Programming\".", "NaN"], ["1038", "rxjava-android: parameterize OperatorViewClick by concrete view type", "Yaroslav", "Yarikx", "04/16/14, 04:02:40 PM", "Parameterize OperatorViewClick observable to actual View type.\nSo actual view with it native type can be used.\n\nSo instead of \n\n```\nObservable<View> imageClicks = ViewObservable.clicks(imageView, false);\n        //...\n        imageClicks.subscribe(new Action1<View>() {\n            @Override\n            public void call(View view) {\n                ImageView imageView = (ImageView) view;\n                imageView.setImageBitmap(bitmap);\n            }\n        });\n```\n\nyou can use\n\n```\n        Observable<ImageView> imageClicks = ViewObservable.clicks(imageView, false);\n        //...\n        imageClicks.subscribe(new Action1<ImageView>() {\n            @Override\n            public void call(ImageView view) {\n                view.setImageBitmap(bitmap);\n            }\n        });\n```", "NaN"], ["1040", "Merge and Cleanup of #972", "Ben Christensen", "benjchristensen", "04/16/14, 04:00:39 PM", "@akarnokd I have manually merged your changes (https://github.com/Netflix/RxJava/pull/972) and migrated from `Action1` to `Action0` as we discussed. \n\nCan you review what I did on top of your changes to make sure it's correct. It seems correct to me but there is some nuanced concurrency here (obviously, hence your fixes) and I would appreciate your validation. ", "NaN"], ["1042", "Kotlin M7 and full compatibility with 0.17.0", "Mario Arias", "MarioAriasC", "04/16/14, 04:01:33 PM", "NaN", "NaN"], ["1047", "Scheduler Simplification", "Ben Christensen", "benjchristensen", "04/19/14, 02:13:21 AM", "API redesign (simplification) as per discussion at https://github.com/Netflix/RxJava/issues/997\n\nThe `Scheduler` API in this pull request is:\n\n``` java\nclass Scheduler {\n    public abstract Inner Inner(); \n    public int degreeOfParallelism();\n    public long now();\n\n    public abstract static class Inner implements Subscription {\n        public abstract Subscription schedule(Action0 action, long delayTime, TimeUnit unit);\n        public abstract Subscription schedule(Action0 action);\n        public final void schedulePeriodically(Action0 action, long initialDelay, long period, TimeUnit unit);\n        public long now();\n    }\n}\n```\n\nWhile migrating to this I found a 4th use case in addition to the previously discussed 3 that required the `schedule` methods inside `Inner` to also return `Subscription` for canceling the individual tasks as opposed to the entire `Inner`.\n\nHere are the use cases:\n#### 1) Single Action\n\n``` java\nfinal Inner is = scheduler.inner();\nis.schedule(new Action0() {\n\n    @Override\n    public void call() {\n        // do work here\n    }\n})\n\nis.unsubscribe()\n```\n\nwith lambda\n\n``` java\nfinal Inner is = scheduler.inner);\nis.schedule(() -> {\n        // do work here\n})\n\nis.unsubscribe()\n```\n#### 2) Inner Recursion\n\n``` java\nfinal Inner is = scheduler.inner();\nis.schedule(new Action0() {\n\n    @Override\n    public void call() {\n        // do work here then recursively reschedule\n    is.schedule(this); // this will NOT work with lambdas, only anonymous inner classes\n    }\n})\n\nis.unsubscribe()\n```\n#### 3) Outer Recursion\n\n``` java\nfinal Inner is = scheduler.inner();\n\npublic void onNext(T t) {\n    is.schedule(new Action0() {\n\n        @Override\n        public void call() {\n            // do work here\n        }\n    })\n}\n\nis.unsubscribe()\n```\n#### 4) Outer Recursion with Task Cancellation\n\nThis is used for things like `debounce` and `throttleLast` where tasks are being scheduled and cancelled as `onNext` notifications are received.\n\n``` java\nfinal Inner is = scheduler.inner();\nSerialSubscription serial = new SerialSubscription();\n\npublic void onNext(T t) {\n    // schedule a new task and cancel previous if not yet executed\n    serial.set(is.schedule(new Action0() {\n\n        @Override\n        public void call() {\n            // do work here\n        }\n    }));\n}\n\nis.unsubscribe()\n```", "NaN"], ["1048", "Remove ExecutorScheduler - New ComputationScheduler", "Ben Christensen", "benjchristensen", "04/19/14, 04:03:28 AM", "Removing `ExecutorScheduler` as it does not comply with the contract of sequential execution. A Scheduler needs to guarantee sequential execution, but putting work on a multi-threaded thread pool allows concurrent execution. \n\nSee https://github.com/Netflix/RxJava/issues/711 and https://github.com/Netflix/RxJava/issues/713", "NaN"], ["1049", "Move rx.joins to rxjava-joins module", "Ben Christensen", "benjchristensen", "04/19/14, 04:42:06 AM", "Migrating rx.joins into a separate contrib module as part of roadmap to 1.0: https://github.com/Netflix/RxJava/issues/1001#issuecomment-40390984\nThis is being done until the rx.joins API has further time to mature as it is likely to change and we can't make breaking changes any further once we hit 1.0.", "NaN"], ["1050", "Reimplement the 'SkipLast' operator", "Shixiong Zhu", "zsxwing", "04/20/14, 03:57:28 AM", "This PR did the following work:\n- Reimplemented the `SkipLast` operator to two different classes: `OperatorSkipLast` and `OperatorSkipLastWithTimed`.\n- Fixed a bug in `OperatorSkipLastWithTimed` that when all elements are valid, `onCompleted` will not be called. The unit test is `testSkipLastTimedWhenAllElementsAreValid`.", "NaN"], ["1051", "Manual Merge #967", "Ben Christensen", "benjchristensen", "04/20/14, 03:34:21 AM", "Manually merge #967", "NaN"], ["1052", "Scheduler Cleanup", "Ben Christensen", "benjchristensen", "04/20/14, 04:12:17 AM", "ComputationScheduler -> EventLoopsScheduler\nRestoring parallel() to using Schedulers.computation()", "NaN"], ["1053", "Deprecation Cleanup", "Ben Christensen", "benjchristensen", "04/20/14, 05:28:06 AM", "The time has come to delete the deprecated methods/classes.\n\nA few still remain to be done before 1.0 but can't be done until all operators are migrated:\n- `Observable.OnSubscribeFunc`\n- `Observable.create(OnSubscribeFunc)`\n- `SafeObservableSubscription`\n- `SafeObserver`", "NaN"], ["1055", "close #1054", "Ron Pressler", "pron", "04/21/14, 04:46:26 PM", "NaN", "NaN"], ["1056", "Add drop(skip) and dropRight(skipLast) to rxscala", "Shixiong Zhu", "zsxwing", "04/21/14, 04:48:23 PM", "NaN", "NaN"], ["1057", "Fix issue #1044", "Shixiong Zhu", "zsxwing", "04/21/14, 04:48:04 PM", "This PR eliminated the ambiguities described in #1044.", "NaN"], ["1058", "Typo in javadoc", "Jacek Laskowski", "jaceklaskowski", "04/21/14, 07:55:23 PM", "NaN", "NaN"], ["1061", "OperatorAll", "David Karnok", "akarnokd", "04/23/14, 04:01:16 AM", "Reimplemented `All`.\n\nIssue #1060", "NaN"], ["1062", "OperatorAny", "David Karnok", "akarnokd", "04/23/14, 04:10:05 AM", "Reimplemented `Any`, aka `IsEmpty` and `Exists`.\n\nIssue #1060", "NaN"], ["1063", "Fix bugs in equals and hashCode of Timestamped", "Shixiong Zhu", "zsxwing", "04/23/14, 04:10:32 AM", "`equals` and `hashCode` of `Timestamped` are not correct. I just used eclipse to generate a new one.", "NaN"], ["1064", "Operator AsObservable", "David Karnok", "akarnokd", "04/23/14, 04:15:39 AM", "Rewritten AsObservable.\n\nIssue #1060", "NaN"], ["1065", "Optimize OperatorSkipLastTimed", "Shixiong Zhu", "zsxwing", "04/24/14, 06:54:49 PM", "Changed OperatorSkipLastTimed to only cache the latest items in the specified time window.", "NaN"], ["1066", "CompositeSubscription fix", "David Karnok", "akarnokd", "04/23/14, 04:19:32 AM", "A bug in the remove() method caused ArrayIndexOutOfBoundsException if the composite is not empty and trying to remove a subscription that is not in the composite at all.", "NaN"], ["1068", "add synchronous test of resubscribe after error", "Dave Moten", "davidmoten", "04/23/14, 04:20:14 AM", "I've added a simple synchronous test of resubscription after error. Retry has had a chequered history of late and I think might benefit from extra tests. The scenario is perhaps covered by the recent additions with #1027 but the test additions for that were async and more complex. This simple scenario broke for versions to 0.16.1 to 0.17.4, hung with 0.17.5 and passes in 0.17.6.", "NaN"], ["1069", "Manual Merge of OperatorAll", "Ben Christensen", "benjchristensen", "04/23/14, 04:01:15 AM", "NaN", "NaN"], ["1070", "Manual Merge of OperatorAny", "Ben Christensen", "benjchristensen", "04/23/14, 04:10:05 AM", "NaN", "NaN"], ["1071", "Manual Merge of AsObservable", "Ben Christensen", "benjchristensen", "04/23/14, 04:15:39 AM", "NaN", "NaN"], ["1072", "Scheduler.Inner -> Scheduler.Worker", "Ben Christensen", "benjchristensen", "04/23/14, 04:33:06 AM", "As per decision at https://github.com/Netflix/RxJava/issues/997#issuecomment-40998613", "NaN"], ["1073", "OperatorBuffer", "David Karnok", "akarnokd", "04/24/14, 06:56:52 PM", "Operator Buffer, split into 4 variants.\n\nIssue #1060.\n\nThere are some important behavioral changes compared to the original versions:\n- When an onError event appears from anywhere, the currently accumulated chunk(s) are _NOT_ emitted before the error is propagated. This conforms with Rx Design Guideline 6.6.\n- The Observable returned by the Func0 inside the `buffer(Func0<Observable<B>>)` now is used as long as possible and whenever it fires an event, a new buffer chunk is started. The Func0 is called only once per subscriber. The original called it and subscribed to it all the time, causing all-increasing resubscriptions.", "NaN"], ["1074", "OperatorConcat", "David Karnok", "akarnokd", "04/24/14, 06:59:12 PM", "Operator Concat\n\nIssue #1060", "NaN"], ["1079", "OperatorCombineLatest", "David Karnok", "akarnokd", "04/24/14, 09:21:37 PM", "Operator CombineLatest\n\nIssue #1060\n\nRemarks:\n- Added an overload to Observable which accepts any number of sources. Not sure why it wasn't exposed before? Perhaps removed?\n- Relying on just the SO's onNext is not enough as leaving the synchronized block allows reordering of onNext calls. Therefore, the combinator uses the trick from SerializedObserver to make sure the combination order is consistent with whe winning of the synchronization \"race\". ", "NaN"], ["1080", "OperatorDefaultIfEmpty", "David Karnok", "akarnokd", "04/24/14, 09:21:37 PM", "Operator DefaultIfEmpty\n\nIssue #1060", "NaN"], ["1081", "OperatorDefer", "David Karnok", "akarnokd", "04/24/14, 09:21:37 PM", "Operator Defer\n\nIssue #1060", "NaN"], ["1083", "OperatorDematerialize", "David Karnok", "akarnokd", "04/24/14, 09:21:38 PM", "Operator Dematerialize\n\nIssue #1060\n\nTwo notes:\n- Since the dematerialize() is an instance method, there is no correct type parametrization for the operator. Therefore, I just used a raw version in the call.\n- The original dematerialize could send out two onCompleted or an onError followed by an onCompleted because the materialize() always adds an onCompleted after the raw events. This affected operators due to unsafeSubscribe. This new version ensures this doesn't happen.", "NaN"], ["1084", "OperatorDistinct", "David Karnok", "akarnokd", "04/24/14, 09:21:38 PM", "Operator Distinct\n\nIssue #1060\n\nI didn't port the variant with the custom key comparator because it has been decided to rely on `Object.equals` and there were not exposed anyway.", "NaN"], ["1085", "OperatorDistinctUntilChanged", "David Karnok", "akarnokd", "04/24/14, 09:21:38 PM", "Operator DistinctUntilChanged\n\nIssue #1060\n\nAgain, I haven't ported the custom comparator version.", "NaN"], ["1086", "OperatorFinallyDo", "David Karnok", "akarnokd", "04/24/14, 09:21:38 PM", "Operator FinallyDo\n\nIssue #1060", "NaN"], ["1087", "OperatorMergeMap", "David Karnok", "akarnokd", "04/24/14, 09:21:38 PM", "Operator MergeMap, namely the paired and the one which turns all event kinds into Observables to merge.\n\nIssue #1060", "NaN"], ["1088", "OperatorToObservableFuture", "Shixiong Zhu", "zsxwing", "04/24/14, 09:21:38 PM", "Also make the Observable be able to unsubscribe.\n\nIssue #1060", "NaN"], ["1089", "Manual Merge of Several PRs", "Ben Christensen", "benjchristensen", "04/24/14, 09:21:37 PM", "This was a manual merge since each of these was conflicting due to the changing import statements at the top. I really wish Github allowed easily handling these ... ", "NaN"], ["1091", "Handle Thrown Errors with UnsafeSubscribe", "Ben Christensen", "benjchristensen", "04/25/14, 02:57:34 AM", "... oxymoronic commit here ... adding some safety to unsafeSubscribe.\n... fixes https://github.com/Netflix/RxJava/issues/1090", "NaN"], ["1092", "Restore ObservableExecutionHook.onCreate", "Ben Christensen", "benjchristensen", "04/25/14, 03:01:00 AM", "NaN", "NaN"], ["1094", "Operator debounce2", "David Karnok", "akarnokd", "04/30/14, 12:11:24 AM", "Operator Debounce again with improvements as discusssed in #1075\n\nFor Issue #1060", "NaN"], ["1095", "OperatorGroupByUntil", "David Karnok", "akarnokd", "04/30/14, 12:11:24 AM", "Operator GroupByUntil\n\nFor Issue #1060\n\nWhile rewriting, I've noticed a common pitfall with the observation of the duration: many other operators react to onNext or onCompleted, but one should only \"expire\" once. I'll review my recent operators and post a separate PR if any.", "NaN"], ["1096", "OperatorGroupJoin", "David Karnok", "akarnokd", "04/30/14, 12:11:24 AM", "Operator GroupJoin\n\nfor Issue #1060\n\nMaybe this could be moved to the new joins.", "NaN"], ["1097", "OperatorToMultimap", "Shixiong Zhu", "zsxwing", "04/30/14, 12:11:24 AM", "Operator `ToMultimap`\n\nIssue #1060", "NaN"], ["1098", "OperatorTimerAndSample", "David Karnok", "akarnokd", "04/30/14, 12:11:24 AM", "Operator Timer and Sample\n\nBecause there was a dependency in Sample towards the now removed Interval, I had to reimplement Sample in this PR as well.\n\nNote that the new `OperatorSampleWithTime` schedules its first sample call before any upstream code is executed. Given the TestScheduler, a sample with 1sec and a timer with 1sec as well won't sample any value. The reason is that in the internal queue of TestScheduler, the sampler's action to take the sample is followed by the action to emit the timer's value.", "NaN"], ["1099", "OperatorToMap", "Shixiong Zhu", "zsxwing", "04/30/14, 12:11:24 AM", "Operator `ToMap`\n\nIssue #1060", "NaN"], ["1100", "OperatorUsing", "Shixiong Zhu", "zsxwing", "04/30/14, 12:11:24 AM", "Operator `Using`\n\nIssue #1060", "NaN"], ["1101", "Operator async", "David Karnok", "akarnokd", "04/30/14, 12:11:24 AM", "`contrib-async-util` mostly renames, deprecated api removed, file comment fixed\n\nSidenote: for me, NetBeans 8.0 editor shows errors in all the files, unable to find rxjava-core classes. Using build command from the menu works. This is true for the other contrib packages as well. Any tips on why?", "NaN"], ["1103", "OperatorJoin", "David Karnok", "akarnokd", "04/30/14, 12:11:24 AM", "Operator Join\n\nIssue #1060\n\nRemark: now that the client.onNext is called outside the synchronization block, joint results may appear in arbitrary order in case both left and right observables emit values concurrently. I suppose the strict ordering is not really expected here, but someone who uses this operator can tell (@duncani perhaps?) .", "NaN"], ["1104", "Operator merge delay error", "David Karnok", "akarnokd", "04/30/14, 12:11:24 AM", "Operator MergeDelayError\n\nIssue #1060", "NaN"], ["1106", "OperatorMergeMaxConcurrent", "David Karnok", "akarnokd", "04/30/14, 12:11:24 AM", "Operator MergeMaxConcurrent\n\nIssue #1060", "NaN"], ["1107", "Fix ReplaySubject's double termination problem.", "David Karnok", "akarnokd", "04/30/14, 12:11:24 AM", "Fix for issue #1105", "NaN"], ["1108", "OperatorMulticastAndReplay", "David Karnok", "akarnokd", "04/30/14, 12:11:25 AM", "Operator Multicast and Replay, because Replay is effectively a multicasted subject.\n\nIssue #1060", "NaN"], ["1109", "OperatorOnErrorResumeNextViaObservable", "David Karnok", "akarnokd", "04/30/14, 12:11:25 AM", "Operator OnErrorResumeNextViaObservable\n\nIssue #1060", "NaN"], ["1110", "OperatorOnErrorReturn", "David Karnok", "akarnokd", "04/30/14, 12:11:25 AM", "Operator OnErrorReturn\n\nIssue #1060", "NaN"], ["1111", "OperatorTimeInterval", "Shixiong Zhu", "zsxwing", "04/30/14, 12:11:25 AM", "Operator `TimeInterval`\n\nIssue #1060", "NaN"], ["1112", "OperatorThrottleFirst", "Shixiong Zhu", "zsxwing", "04/30/14, 12:11:25 AM", "Operator `ThrottleFirst` and moved tests in `ThrottleFirstTests` to `OperatorThrottleFirstTest`.\n\nIssue #1060", "NaN"], ["1115", "OperatorTakeWhile", "Shixiong Zhu", "zsxwing", "04/30/14, 12:11:25 AM", "Operator `TakeWhile`\n\nIssue #1060", "NaN"], ["1117", "Operator OnExceptionResumeNextViaObservable", "David Karnok", "akarnokd", "04/30/14, 12:11:25 AM", "Operator OnExceptionResumeNextViaObservable\n\nIssue #1060", "NaN"], ["1118", "Operator ParallelMerge", "David Karnok", "akarnokd", "04/30/14, 12:11:25 AM", "Operator ParallelMerge, just renamed\n\nIssue #1060", "NaN"], ["1119", "OperatorRefCount", "David Karnok", "akarnokd", "04/30/14, 12:11:25 AM", "Operator RefCount\n#1060", "NaN"], ["1120", "OperatorSequenceEqual", "David Karnok", "akarnokd", "04/30/14, 12:11:25 AM", "Operator SequenceEqual\n#1060\n\nLightened the operator, but note that NotificationLite escaping an operator may cause undesired effects in other operators relying on NotificationLite as well.", "NaN"], ["1121", "OperatorSkipTimed", "David Karnok", "akarnokd", "04/30/14, 12:11:25 AM", "Operator SkipTimed\n#1060\n\nThere was an unexpected dependency in `OperationTakeTimedTest` and is surely to cause conflict when `TakeTimed` is rewritten. Once all operators have been merged, I suggest we create a primary `TestException` and rewrite tests to use it instead of all those custom exception classes everywhere.", "NaN"], ["1122", "OperatorSkipUntil", "David Karnok", "akarnokd", "04/30/14, 12:11:25 AM", "Operator SkipUntil\n#1060", "NaN"], ["1124", "Add lift to rxscala", "Shixiong Zhu", "zsxwing", "05/05/14, 07:09:43 PM", "This PR added `lift` to RxScala and also added a `Subscriber.apply` method to support to chain `Subscriber`s.\n\n/cc @samuelgruetter", "NaN"], ["1125", "Operator contrib math", "David Karnok", "akarnokd", "04/30/14, 12:11:26 AM", "Operators of contrib-math\n\nIssue #1060\n\nI only changed the average code to operators, left the sum and min/max as they were. Renamed files to operator.", "NaN"], ["1126", "Operator When", "David Karnok", "akarnokd", "04/30/14, 12:11:26 AM", "Operator When in contrib-joins\n\nIssue #1060", "NaN"], ["1128", "Fix for SerializedObserverTest", "David Karnok", "akarnokd", "04/30/14, 12:11:26 AM", "Fixed the SerializedObserverTest's problematic assertions:\n- `testMultiThreadedWithNPEinMiddle` might schedule all non-null values before the exception might reach the serialized observer. In addition, waiting after the serialization doesn't help because the cheap value emissions get queued up before that, again, possibly before the exception. The new code adds some delays to the non-null elements allowing the exception to get into the queue. I've looped it 10.000 times without failure, but there is still a non-zero chance the `new NullPointerException()` thread is significantly delayed and ends up as the last event.\n- `testNotificationDelay` might fail due to thread scheduling of the two `OnNextThread` delayed too much in respect to each other before the main thread allows the pass-through. The fix is to let bot instances' Thread reach the run method and then let the main thread pass through them. Again, a loop of 10.000 succeeded locally.\n- Both tests are run 10 times to be more sure.", "NaN"], ["1129", "Conditional statements contribution to Operator", "David Karnok", "akarnokd", "04/30/14, 12:11:26 AM", "Operators rewritten in contrib-computation-expressions.\n\nIssue #1060", "NaN"], ["1130", "Operator Switch", "David Karnok", "akarnokd", "04/30/14, 12:11:26 AM", "Operator Switch\n\nIssue #1060", "NaN"], ["1131", "Operator TakeTimed", "David Karnok", "akarnokd", "04/30/14, 12:11:26 AM", "Operator Take with time\n\nIssue #1060", "NaN"], ["1132", "Manual Merge of Several PRs", "Ben Christensen", "benjchristensen", "04/30/14, 12:11:23 AM", "Merging many PRs that were conflicting.\n\nHeroic work by @akarnokd and @zsxwing on #1060 \n\nAll unit tests are passing on my machine. Going to let this bake a while before a release. Other PRs on still on their way ... ", "NaN"], ["1133", "collapse imports", "Ben Christensen", "benjchristensen", "04/30/14, 12:13:02 AM", "attempt to reduce merge conflicts as it's always the import statements that are conflicting", "NaN"], ["1134", "OperatorTakeLast", "Shixiong Zhu", "zsxwing", "05/05/14, 07:11:08 PM", "Operator `TakeLast`.\n\nThere are two changes comparing with the original implementations:\n- Throw IndexOutOfBoundsException at once when calling `takeLast` with `count < 0`.\n- Replace IllegalArgumentException with IndexOutOfBoundsException  when `count < 0` in `TakeLastWithTimed`.\n\nIssue #1060", "NaN"], ["1135", "OperatorTakeUntil", "Shixiong Zhu", "zsxwing", "05/05/14, 07:12:09 PM", "Operator `TakeUntil`\n\nIssue #1060", "NaN"], ["1137", "Fixes to the operators.", "David Karnok", "akarnokd", "05/05/14, 07:15:17 PM", "Fixes for issue #1136\n- `OperatorMulticast` is straightforward from concurrency perspective. The only consideration is that if the current subscription gets unsubscribed before the `connect` reaches the `unsafeSubscribe`, it really depends on the source what it will do with an unsubscribed client. It is possible to put extra effort to make sure a newly established connection won't get unsubscribed before it is actually connected or if it gets unsubscribed immediately, no subscription is attempted at all.\n- `OperatorSampleWithTime`: didn't want to push too many PRs so I just included it here. There was a missing unsubscribe in the `onCompleted()` that makes sure the worker is stopped.\n- `Subscribers.empty()` was implemented by returning the same Subscriber to everyone, which Subscriber is stateful so if someone unsubscribes it, it will appear everywhere as unsubscribed and can have unwanted effects. There is no such problem with `Observers.empty()` as it is stateless. The change just uses `Subscribers.from()` to wrap `Observers.empty()` and every caller gets its own independent instance.\n- `OperatorRefCount` was a bit more tricky. Since it has a connection counter, one has to serialize subscriptions with unsubscriptions. However, it is possible a subscription gets unsubscribed before code reaches the connect check which may disrupt the connection counter. The solution is to keep track of the unsubscriptions that happen before the connection attempts and not change the counter in case of out-of-order behavior. The final aim was to avoid leaking the connection statuses if the `unsafeSubscribe` throws concurrently with a client unsubscribing by using weak tokens (integers wouldn't have worked as the first 0-127 are cached in the JVM and would never GC).", "NaN"], ["1138", "Operator Window and other changes", "David Karnok", "akarnokd", "05/05/14, 07:17:50 PM", "Operator Window with no-first-loss functionality.\n\nIssue #1060\n\n(I had to leave my computer so the detailed description will come within a few hours.)", "NaN"], ["1142", "Update 'contains' signature to 'contains(Object)'", "Shixiong Zhu", "zsxwing", "05/05/14, 07:18:25 PM", "The original `contains` signature can not support the following codes:\n\n``` java\n    public void test() {\n        ArrayList<String> l = new ArrayList<String>();\n        l.add(\"test\");\n        Observable<ArrayList<String>> o = Observable.<ArrayList<String>>from(l);\n        o.contains(Arrays.asList(\"test\"));\n    }\n```\n\nThis PR changes the signature from `contains(T)` to `contains(Object)`. It's also consistent with `equals(Object)`.\n\nThis change should not break the old codes.", "NaN"], ["1144", "Operator Delay rebase & fixes", "David Karnok", "akarnokd", "05/05/14, 07:25:55 PM", "Operator Delay\n\nIssue #1060", "NaN"], ["1148", "Manual Merge of Delay PR", "Ben Christensen", "benjchristensen", "05/05/14, 07:25:55 PM", "NaN", "NaN"], ["1150", "Fix ReplaySubject Terminal State Race Condition", "Ben Christensen", "benjchristensen", "05/05/14, 08:41:28 PM", "Fixes https://github.com/Netflix/RxJava/issues/1147#issuecomment-42232464 with change from @akarnokd", "NaN"], ["1158", "Scheduler correctness improvements.", "David Karnok", "akarnokd", "05/06/14, 06:31:39 PM", "Second round on the scheduler correctness issue.\n\nSure it looks more heavy as `ScheduledAction` now has its own inner `CompositeSubscription` and a shared reference to the parent `innerSubscription`.\n\nI've tried to benchmark it with `SchedulerPerformanceTests` but that test is flawed:\n- Multiple threads pound on the same long sum value, so naturally additions get lost.\n- The LongObserver gets unsubscribed after the first loop so `from` will not actually call `onNext` but `isUnsubscribed` a lot.\n- Does not wait for the computations to finish and basically measures how fast 5M tasks can be added to the NewThreadScheduler's innerSubscription.\n\nThe flawed test gives ~ 11M ops/sec on my machine. If I fix the test and run against the master, 5M takes extremely long to finish due to the inherent slowness of add/remove in CompositeSubscription if large. On my 4 core hyperthread enabled machine, I get 50k-150k ops/second for baseline with a 100k loop.\n\nThe proposed changes run with the flawed test gives ~10.8M ops/sec. With the test fixed and with the proposed changes, I get ~1.2M ops/sec.", "NaN"], ["1159", "Rxscala improvement", "Shixiong Zhu", "zsxwing", "05/06/14, 05:11:38 PM", "Add `dropUntil`, `contains`, `repeat`, `doOnTerminate`, `startWith`, `publish` variants to RxScala. #1151, #1153.\n\n/cc @headinthebox @samuelgruetter", "NaN"], ["1160", "Add `replay` and `multicast` variants to RxScala", "Shixiong Zhu", "zsxwing", "05/20/14, 04:31:05 PM", "This PR has some breaking changes:\n- Change `def multicast[R >: T](subject: rx.lang.scala.Subject[R]): (() => Subscription, Observable[R])` to `def multicast[R >: T](subject: rx.lang.scala.Subject[R]): ConnectableObservable[R]`\n- Change `def replay: (() => Subscription, Observable[T])` to `def replay: ConnectableObservable[T]`\n- Remove `Observable.apply(Int)`\n\nSo it's better to merge it at the next major release.\n#1152, #1153.\n\n/cc @headinthebox @samuelgruetter", "NaN"], ["1161", "Removed use of deprecated API from tests & operators, fixed year in head...", "David Karnok", "akarnokd", "05/06/14, 05:04:26 PM", "...ers, added and removed suppressions, fixed line endings, replaced tabs with spaces\n\nI haven't deleted `OnSubscribeFunc` because I was not sure when the general cleanup of deprecated stuff will happen; I just made sure Java tests don't use it anymore.", "NaN"], ["1162", "fix to remove drift from schedulePeriodic", "Kirk Shoop", "kirkshoop", "05/06/14, 05:11:12 PM", "When implementing the 'worker' scheduler pattern in rxcpp I implemented schedulePeriodic differently because I predicted that the RxJava version would drift. Once the changes were working, I verified my prediction in rxcpp. \n\nI decided to test the same in RxJava and contribute my approach.\n\nThis was my test:\n\n``` java\nimport java.util.concurrent.TimeUnit;\n\nimport rx.Scheduler;\nimport rx.schedulers.Schedulers;\nimport rx.functions.Action0;\n\npublic class periodic {\n\n    public static void main(String[] args) {\n\n        final Scheduler scheduler = Schedulers.immediate();\n        final Scheduler.Worker w = scheduler.createWorker();\n\n        final long initial = TimeUnit.SECONDS.toMillis(2);\n        final long period = TimeUnit.SECONDS.toMillis(1);\n        final long start = scheduler.now() + initial;\n\n        w.schedulePeriodically(new Action0() {\n            long count = 0;\n            @Override\n            public void call() {\n                long tick = scheduler.now();\n                System.out.println(String.format(\"expected -> %dms, actual -> %dms, drift -> %dms\", count*period, tick - start, tick - (start + (count*period))));\n                ++count;\n            }\n        }, initial, period, TimeUnit.MILLISECONDS);\n    }\n\n}\n```\n\nThe existing impl causes this output:\n\n```\n$ java -cp rxjava-core/build/libs/rxjava-core-0.18.3-SNAPSHOT.jar:./ periodic\nexpected -> 0ms, actual -> 1ms, drift -> 1ms\nexpected -> 1000ms, actual -> 1002ms, drift -> 2ms\nexpected -> 2000ms, actual -> 2003ms, drift -> 3ms\nexpected -> 3000ms, actual -> 3004ms, drift -> 4ms\nexpected -> 4000ms, actual -> 4005ms, drift -> 5ms\nexpected -> 5000ms, actual -> 5006ms, drift -> 6ms\nexpected -> 6000ms, actual -> 6007ms, drift -> 7ms\nexpected -> 7000ms, actual -> 7008ms, drift -> 8ms\nexpected -> 8000ms, actual -> 8009ms, drift -> 9ms\nexpected -> 9000ms, actual -> 9010ms, drift -> 10ms\nexpected -> 10000ms, actual -> 10011ms, drift -> 11ms\nexpected -> 11000ms, actual -> 11012ms, drift -> 12ms\nexpected -> 12000ms, actual -> 12013ms, drift -> 13ms\nexpected -> 13000ms, actual -> 13014ms, drift -> 14ms\nexpected -> 14000ms, actual -> 14016ms, drift -> 16ms\nexpected -> 15000ms, actual -> 15017ms, drift -> 17ms\nexpected -> 16000ms, actual -> 16018ms, drift -> 18ms\nexpected -> 17000ms, actual -> 17019ms, drift -> 19ms\nexpected -> 18000ms, actual -> 18020ms, drift -> 20ms\nexpected -> 19000ms, actual -> 19021ms, drift -> 21ms\nexpected -> 20000ms, actual -> 20022ms, drift -> 22ms\nexpected -> 21000ms, actual -> 21023ms, drift -> 23ms\nexpected -> 22000ms, actual -> 22023ms, drift -> 23ms\nexpected -> 23000ms, actual -> 23024ms, drift -> 24ms\n```\n\nWith this commit the test outputs:\n\n```\n$ java -cp ./:./rxjava-core/build/libs/rxjava-core-0.18.3-SNAPSHOT.jar periodic\nexpected -> 0ms, actual -> 3ms, drift -> 3ms\nexpected -> 1000ms, actual -> 1001ms, drift -> 1ms\nexpected -> 2000ms, actual -> 2001ms, drift -> 1ms\nexpected -> 3000ms, actual -> 3000ms, drift -> 0ms\nexpected -> 4000ms, actual -> 4001ms, drift -> 1ms\nexpected -> 5000ms, actual -> 5000ms, drift -> 0ms\nexpected -> 6000ms, actual -> 6000ms, drift -> 0ms\nexpected -> 7000ms, actual -> 7000ms, drift -> 0ms\nexpected -> 8000ms, actual -> 8001ms, drift -> 1ms\nexpected -> 9000ms, actual -> 9001ms, drift -> 1ms\nexpected -> 10000ms, actual -> 10001ms, drift -> 1ms\nexpected -> 11000ms, actual -> 11001ms, drift -> 1ms\nexpected -> 12000ms, actual -> 12001ms, drift -> 1ms\nexpected -> 13000ms, actual -> 13001ms, drift -> 1ms\nexpected -> 14000ms, actual -> 14001ms, drift -> 1ms\nexpected -> 15000ms, actual -> 15001ms, drift -> 1ms\nexpected -> 16000ms, actual -> 16001ms, drift -> 1ms\nexpected -> 17000ms, actual -> 17000ms, drift -> 0ms\nexpected -> 18000ms, actual -> 18000ms, drift -> 0ms\nexpected -> 19000ms, actual -> 19000ms, drift -> 0ms\nexpected -> 20000ms, actual -> 20000ms, drift -> 0ms\nexpected -> 21000ms, actual -> 21002ms, drift -> 2ms\nexpected -> 22000ms, actual -> 22000ms, drift -> 0ms\nexpected -> 23000ms, actual -> 23001ms, drift -> 1ms\nexpected -> 24000ms, actual -> 24001ms, drift -> 1ms\n```", "NaN"], ["1163", "Fix defer for Java 8 type-inference", "Ben Christensen", "benjchristensen", "05/06/14, 04:58:22 PM", "Fixes https://github.com/Netflix/RxJava/issues/1157", "NaN"], ["1164", "JMH Perf Tests for Schedulers.computation", "Ben Christensen", "benjchristensen", "05/06/14, 06:22:16 PM", "NaN", "NaN"], ["1165", "Update according to review in issue #1159", "Shixiong Zhu", "zsxwing", "05/08/14, 05:06:53 AM", "/cc @samuelgruetter", "NaN"], ["1172", "ObserveOn: Change to batch dequeue.", "David Karnok", "akarnokd", "05/16/14, 04:06:51 AM", "Using the same batch technique as in `SerializedObserver` to dequeue and play values. I had to switch to synchronized because `ConcurrentLinkedQueue` doesn't support drain.\n\nI run the scheduler perf test with it:\n\n```\nResult : 1913,582 \u00b1(99.9%) 29,210 ns/op\n  Statistics: (min, avg, max) = (1905,303, 1913,582, 1922,427), stdev = 7,586\n  Confidence interval (99.9%): [1884,373, 1942,792]\n\nResult : 64.277,546 \u00b1(99.9%) 734,360 ns/op\n  Statistics: (min, avg, max) = (64034,953, 64277,546, 64519,884), stdev = 190,711\n  Confidence interval (99.9%): [63543,186, 65011,906]\n\nResult : 67.999.392,293 \u00b1(99.9%) 4715885,625 ns/op\n  Statistics: (min, avg, max) = (66777535,133, 67999392,293, 69525773,000), stdev = 1224700,521\n  Confidence interval (99.9%): [63283506,668, 72715277,918]\n```\n\nMaster for me was 1863,423 / 119.030,536 / 127.738.858,250 \n\nAppears to be a 2x speedup on 1024 and 1M items.", "NaN"], ["1175", "Fixed synchronous ConnectableObservable.connect problem", "David Karnok", "akarnokd", "05/16/14, 04:04:44 AM", "ConnectableObservable.connect returns a Subscription and thus cannot be unsubscribed synchronously, similar how take didn't work before the Subscriber changes. This PR modifies the `ConnectableObservable` and its current implementation `OperatorMulticast` to extract the connection Subscription token before it is connected to the source. Cancelling this extracted token makes sure the synchronous connection is unsubscribed.\n\n(The Rx.NET version of the test case seemingly doesn't exhibit the problem. I suspect it is the interplay of `IDisposable`s.)", "NaN"], ["1177", "GroupByUntil to use BufferUntilSubscriber", "David Karnok", "akarnokd", "05/09/14, 05:52:08 PM", "Matches `groupBy` behavior. (I still think throwing an error for non-first subscribers is too harsh.)", "NaN"], ["1178", "Fix issue #1173", "Shixiong Zhu", "zsxwing", "05/19/14, 05:38:40 PM", "In `Subscriber.apply(rx.Subscriber)`, `asJavaObserver` and `asJavaSubscription` will be set to `null` because the parent class will be initialized with `asJavaSubscriber==null`. #1173.\n\nThis PR did the initialization again in the subclass.", "NaN"], ["1182", "Add facilities for creating Observables from JavaFX events and ObservableValues", "Alexandre Mazari", "amazari", "05/09/14, 11:39:22 PM", "Heavily inspired by the swing contrib.\n\nProvides:\n- a Scheduler implementation ensuring execution in the JavaFX UI thread\n- a Subscription implementation ensuring that un-subscription happens in JavaFX UI thread\n- an Observable factory method for observing UI events on JavaFX nodes\n- an Observable factory method for observing value changes of a JavaFX ObservableValue\n\nAlso the rxjava-javafx is added to the gradle build.", "NaN"], ["1183", "NotificationLite.accept performance improvements", "David Karnok", "akarnokd", "05/09/14, 04:57:21 PM", "This is a proposal for speeding up the `accept()` method (i.e., reducing its latency).\n\nBenchmark comparison:\n\ndirect onNext: 488 MOps/s\nmaster accept: 378 MOps/s\nthis accept: 477 MOps/s\n\n(i7 4770K, JDK 1.8u5 x64)", "NaN"], ["1185", "Behavior subject time gap fix 2", "David Karnok", "akarnokd", "05/20/14, 05:11:18 AM", "Based on discussions in #1181, I've unified the behavior among the Subjects.\n\nBehaviorSubject doesn't seem to exhibit issue #658 and #1184.\n\nA second pair of eyes would be great to confirm the correctness and check if the removal of the CountDownLatch was the correct approach.", "NaN"], ["1188", "Fix issue #1187 and #1196", "Shixiong Zhu", "zsxwing", "05/16/14, 04:00:58 AM", "This PR fixed issue #1187.\n\nAlthough using `(action: => Unit)` will require the following odd codes when somebody wants to use `Function0` directly:\n\n``` Scala\n  @Test def schedulerExample5(): Unit = {\n    val worker = IOScheduler().createWorker\n    var no = 1\n    val subscription = worker.schedule(new Function0[Unit]{\n      def apply(): Unit = {\n        println(s\"Hello(${no}) from Scheduler\")\n        no += 1\n        worker.schedule(apply(), 100 millis)\n      }\n    }.apply(), 1 seconds)\n    TimeUnit.SECONDS.sleep(2)\n    subscription.unsubscribe()\n  }\n```\n\nI think people rarely use `Function0` directly in Scala. \n\nSo I chose `(action: => Unit)` finally. `schedulerExample4` is an more realistic example for recursive schedule.\n\nThis PR is a breaking change.", "NaN"], ["1191", "Fix attempt for OperatorPivotTest", "David Karnok", "akarnokd", "05/16/14, 04:15:36 AM", "This is an attempt to fix the lack of concurrency in the `OperatorPivotTest.testConcurrencyAndSerialization`. Since this fails mostly on the build server, I'll try to minimize the attempts to not flood it.", "NaN"], ["1195", "SwingScheduler: allow negative schedule", "David Karnok", "akarnokd", "05/16/14, 04:18:31 AM", "Fix for issue #1193 \n\nThe new `schedulePeriodic` may calculate negative delay times if the next task was already due. This change will allow negative timing on the swing scheduler indicating an immediate schedule.", "NaN"], ["1208", "OperatorToObservableList: use LinkedList to buffer the sequence\u2019s items", "Matthias K\u00e4ppler", "mttkay", "05/20/14, 04:10:39 AM", "LinkedList has guaranteed constant insertion time when appending to the end of the list, whereas ArrayList takes O(1) amortized, since a reallocation might be necessary to insert further items. Since no capacity was specified for the buffer, on Hotspot this would cause the array to reallocate after the first 10 insertions, on Android even after the first insertion (since Android\u2019s ArrayList uses a default capacity of zero.)\n\nSince the buffer is copied to an ArrayList before emission, subscriber performance when working with the list should remain unaffected.\n\nSorry for the import noise, that's IntelliJ reformatting them every time I look at the file.\n\nRefs #1141", "NaN"], ["1210", "Add more operators to RxScala", "Shixiong Zhu", "zsxwing", "05/20/14, 04:07:31 AM", "Conflicts against #1178, too. I will rebase once #1178 is merged to master.\n\n/cc @samuelgruetter", "NaN"], ["1216", "Exposing PublishSubject", "Haney Maxwell", "hmrm", "05/20/14, 04:08:18 AM", "All other subjects (Async, Behavior, Replay) have non-private companion objects.", "NaN"], ["1223", "ReplaySubject enhancement with time and/or size bounds", "David Karnok", "akarnokd", "05/20/14, 04:25:09 PM", "Reapplied the enhancements to bring size and/or time bound `ReplaySubject` capabilities while exposing a single subject class (i.e., no separate BoundedReplaySubject or CustomReplaySubject). It now uses the renewed `SubjectSubscriptionManager`.\n\nIn addition, I've moved a confusing behavior from SubjectObserver into AsyncSubject where it belongs.", "NaN"], ["1224", "Implement shorter toBlocking as shorter alias for toBlockingObservable.", "Michael Nitschinger", "daschl", "05/20/14, 04:22:03 PM", "Fixes #1220", "NaN"], ["1226", "Fix bug in `zipWithIndex` and set `zip(that, selector)` public in RxScala", "Shixiong Zhu", "zsxwing", "05/20/14, 04:09:11 PM", "- The function used in `zipWithIndex` is mutable, which make the Observable cannot be reused. Fixed it using `zip((0 until Int.MaxValue).toObservable)`.\n- Make `zip(that, selector)` public and rename to `zipWith`. #1189\n\n/cc @headinthebox, @samuelgruetter  ", "NaN"], ["1228", "Git Reformats This File", "Ben Christensen", "benjchristensen", "05/20/14, 05:25:55 PM", "NaN", "NaN"], ["1229", "Remove Ambiguous Subscribe Overloads with Scheduler", "Ben Christensen", "benjchristensen", "05/20/14, 05:47:35 PM", "- Fixes https://github.com/Netflix/RxJava/issues/1116\n- These should never have been added, the subscribeOn operator already provides this functionality", "NaN"], ["1231", "Operator Alias: Share", "Ben Christensen", "benjchristensen", "05/20/14, 05:54:13 PM", "As per discussion in #682", "NaN"], ["1232", "Adopt Limit and ForEach Java 8 Naming Conventions", "Ben Christensen", "benjchristensen", "05/20/14, 06:08:52 PM", "As per discussion at https://github.com/Netflix/RxJava/issues/678\n\nCode now can look like this:\n\n``` java\nObservable.from(1, 2, 3).limit(2).forEach(System.out::println);\n```\n\nas an alias to this:\n\n``` java\nObservable.from(1, 2, 3).take(2).subscribe(System.out::println);\n```", "NaN"], ["1233", "Deprecate toBlockingObservable in favor of toBlocking", "Ben Christensen", "benjchristensen", "05/20/14, 06:13:15 PM", "As per discussion at https://github.com/Netflix/RxJava/pull/1224#issuecomment-43658284\n\nThis will better match `toParallel` and is shorter to use while still being clear as to what is happening.", "NaN"], ["1235", "Lock-free, MPSC-queue based, fast-path serializing Observer.", "David Karnok", "akarnokd", "05/29/14, 10:53:31 PM", "I've rewritten the `SerializedObserver` to improve performance. It is now lock-free, uses a multiple-producer-single-consumer queue based on Netty's implementation and employs a fast-path logic for single-threaded write-through.\n\nBenchmarked by measuring how fast 500k integers can get through it, if running 1-8 producers at the same time. For a single threaded case, master gives about 18 MOps/s, this implementation gives ~36 MOps/s (would be ~16 MOps/s on the slow path). For producers > 2, master gives ~5.5 MOps/s and this gives ~11.5 MOps/s. For 2 producers, aka 1 producer - 1 consumer, master gives ~4.5 MOps and this gives ~8.5 MOps/s.\n\nThe two new class, `PaddedAtomicInteger` and `MpscPaddedQueue` will come in handy with other lock-free structures such as Schedulers, etc. We may consider adding back the `rx.util` or some other sub-package to store these helper classes: they don't need to be part of the public API but can be left `public` to enable cross-package access internally.\n\nThings I learned during the implementation:\n- It is worth padding the wip counter to fit a cache line so the constant cache thrashing won't affect the parent class' other fields, most likely.\n- Using FieldUpdaters saves space but `sun.misc.Unsafe` can add 8-10% more throughput. To avoid platform issues, I stayed with the FieldUpdaters.\n- Using `getAndIncrement` and `decrementAndGet` are intrinsified in Java 8 and are compiled to a single x86 instruction, which generally outperforms any CAS loop. Same is true for the `getAndSet`.\n- Padding out the `tail` in the `MpscPaddedQueue` again helps separate producers trashing on the tail and a consumer reading the head. Without it, the throughput would decrease by about ~1.5 MOps/s\n- By adding the fast-path logic, the single-threaded throughput increases by a factor of 2 since it avoids an unnecessary enqueue and dequeue and all associated volatile writes. However, if taking the fast-path fails, it incurs extra cost on the slow path for everyone else because of the +1 failed CAS at the start. To fix this case, I've introduced a flag that enables and disables fast-path. To disable the fast path, the active fast path checks if it was able to change wip to zero. If not, it means there was concurrent access and continues on the emission loop path, but disables the fast-path then on. It is basically a detector for concurrent use. Since such concurrent use may be transient, the loop counts how many elements it had to emit, an if it was only 1 or 2, it reenables the fast-path. This limit is the result of trying several values with the benchmark above.\n- The fast-path logic has its weak spot in 2 producer case compared to a plain MPSC queue running in SPSC mode; the latter gives about ~11 MOps/s which is better than this implementation's ~8.5 MOps/s. In contrast, the single-treaded use for the plain MPSC is only ~16 MOps/s. Both implementations perform the same if producers > 2. Therefore, I decided it is more worth having an implementation that is weak for 2 producers but otherwise is as good or outperforms the alternatives. Note that if one knows the number of producers up front, one can create a more specialized implementation, but this is not the case with RxJava operators. This may affect `merge` and co which serialize multiple sources. Note however, that if the source speed isn't that high as in the benchmark, this implementation still provide less latency than the alternatives because the fast-path would be most likely open if the source emission is interleaved.", "NaN"], ["1236", "CompositeSubscription with atomic field updater", "David Karnok", "akarnokd", "05/21/14, 04:47:43 PM", "This PR is aimed at #1204 to reduce unnecessary memory overhead in frequently used classes. This change in `CompositeSubscription` saves about 24 bytes per instance.\n\nIn addition, the field updaters may be faster by about 8-15% for small adds and removals. I've changed the implementation of unsubscribe to use getAndSet which leverages platform intrinsics and is usually compiled to a single instruction: this makes unsubscribing a tiny bit faster and thus reducing latency in benchmarks that only pass on single element around.", "NaN"], ["1237", "SafeSubscriber memory reduction", "David Karnok", "akarnokd", "05/21/14, 04:43:39 PM", "For #1204. This saves 24 bytes per instance. ", "NaN"], ["1239", "Update docs for \"apply\" and add an example", "Shixiong Zhu", "zsxwing", "05/23/14, 04:09:44 AM", "Try to solve #1076. @vchekan, any suggestion?\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1243", "Remove Subscription Wrapper from Observable.subscribe", "Ben Christensen", "benjchristensen", "05/22/14, 04:25:43 AM", "Remove Subscription Wrapper from Observable.subscribe\n\nPerformance increase from 7.7m to 8.8m ops/second\n\nBefore:\n\n```\nBenchmark (size) Mode Samples Mean Mean error Units\nr.u.PerfTransforms.mapTransformation 1 thrpt 5 7714453.187 362218.633 ops/s\nr.u.PerfTransforms.mapTransformation 1 thrpt 5 7527144.767 497816.471 ops/s\n```\n\nAfter:\n\n```\nBenchmark (size) Mode Samples Mean Mean error Units\nr.u.PerfTransforms.mapTransformation 1 thrpt 5 8853534.333 183494.242 ops/s\nr.u.PerfTransforms.mapTransformation 1 thrpt 5 8806958.403 452595.219 ops/s\n```\n\nTest can be run  using:\n\n```\n../gradlew benchmarks '-Pjmh=-f 1 -tu s -bm thrpt -wi 5 -i 5 -r 5 -prof GC .*PerfTransforms.mapTransformation*'\n```", "NaN"], ["1244", "Observable.from(T) using Observable.just(T)", "Ben Christensen", "benjchristensen", "05/22/14, 04:38:27 AM", "For code like `Observable.from(1)` Improve performance from ~3.9m to 4.5+m ops/second\n\nBefore;\n\n```\nr.u.PerfTransforms.flatMapTransformsUsingFrom        1  thrpt         5  3923845.687    46657.660    ops/s\nr.u.PerfTransforms.flatMapTransformsUsingFrom     1024  thrpt         5     8924.953     1983.161    ops/s\n\nr.u.PerfTransforms.flatMapTransformsUsingFrom        1  thrpt         5  3623228.857   490894.492    ops/s\nr.u.PerfTransforms.flatMapTransformsUsingFrom     1024  thrpt         5     9176.330      923.929    ops/s\n```\n\nAfter:\n\n```\nBenchmark                                       (size)   Mode   Samples         Mean   Mean error    Units\nr.u.PerfTransforms.flatMapTransformsUsingFrom        1  thrpt         5  4052364.587   100971.234    ops/s\nr.u.PerfTransforms.flatMapTransformsUsingFrom     1024  thrpt         5    11682.783      496.656    ops/s\n\nBenchmark                                       (size)   Mode   Samples         Mean   Mean error    Units\nr.u.PerfTransforms.flatMapTransformsUsingFrom        1  thrpt         5  4700583.987    77742.037    ops/s\nr.u.PerfTransforms.flatMapTransformsUsingFrom     1024  thrpt         5    12588.803       58.935    ops/s\n```\n\nUsing this test:\n\n```\n../gradlew benchmarks '-Pjmh=-f 1 -tu s -bm thrpt -wi 5 -i 5 -r 5 -prof GC .*PerfTransforms.flatMapTransformsUsingFrom*'\n```", "NaN"], ["1246", "Moved to atomic field updaters.", "David Karnok", "akarnokd", "05/27/14, 02:18:03 AM", "Replaced the AtomicBoolean, AtomicInteger, AtomicLong and AtomicReference instances with volatile fields and field updaters to save on memory and allocation.\n\nUnfortunately, the Clojure test `chunk_test.clj:test-chunk` fails and I don't know why since I don't understand what it is supposed to do. It appears numbers get lost somehow.", "NaN"], ["1247", "Add zip(iterable, selector) to RxScala", "Shixiong Zhu", "zsxwing", "05/27/14, 04:38:08 AM", "- Add `zip(iterable, selector)` to RxScala\n- Use `zip(iterable, selector)` to reimplement `zipWithIndex` to resolve the issue mentioned in #1226\n\n/cc @samuelgruetter", "NaN"], ["1248", "Fixed testConcurrentOnNextFailsValidation", "David Karnok", "akarnokd", "05/23/14, 04:21:09 AM", "The two instructions need to be swapped to make sure woken-up awaiters see the error reliably.", "NaN"], ["1254", "ZipIterable unsubscription fix", "David Karnok", "akarnokd", "05/27/14, 02:45:07 AM", "For issue #1253.", "NaN"], ["1260", "Fix the bug that BlockingObservable.singleOrDefault doesn't call unsubscribe", "Shixiong Zhu", "zsxwing", "05/27/14, 04:40:11 AM", "`BlockingObservable.singleOrDefault` doesn't call `unsubscribe` when throws `IllegalArgumentException(\"Sequence contains too many elements\")`. `testSingleOrDefaultUnsubscribe` proves this bug. ", "NaN"], ["1264", "ObserveOn scheduled unsubscription", "David Karnok", "akarnokd", "05/28/14, 08:36:27 PM", "Proposed fix for #1241.\n\nSome operators eagerly unsubscribe the chain in case of an error, however, this may prevent the delivery of the onError if it is run through the `observeOn` operator as the worker gets unsubscribed and may or may not reach the point where it emits the onError in the other thread. This change will schedule the unsubscription along with the event delivery and thus ensure that all events sent to observeOn prior to unsubscription will be delivered in the new thread.\n\nNote that this change makes the unsubscription delayed and if event processing is slow in the new thread, it may take a while to happen; the original version just dropped any unprocessed work and thus was faster to terminate.", "NaN"], ["1265", "Add more operators to RxScala", "Shixiong Zhu", "zsxwing", "05/29/14, 01:00:44 AM", "The commits explain this PR.\n\nIn addition, the reason that I changed `window(closings: () => Observable[Any])` to `window(boundary: => Observable[Any])` is `window(boundary: => Observable[Any])` can support both two overloads `window(Observable[U])` and `window(Func0[_ <: Observable[_ <: TClosing]])` in RxJava. ", "NaN"], ["1269", "Fix the bug that int overflow can bypass the range check", "Shixiong Zhu", "zsxwing", "05/28/14, 07:28:35 PM", "Fix the bug mentioned in #1266", "NaN"], ["1271", "Operator Retry with predicate", "David Karnok", "akarnokd", "05/28/14, 09:47:30 PM", "Operator Retry with predicate + 1 overload for Issue #1214.\n\nThe Func1 version is simply named `retry`, the Func2 version is named `retryIf` due to lack of ideas and because to avoid overload resolution issues. I also had to open up the OperatorRetryTest classes a bit.", "NaN"], ["1272", "ExecutorScheduler to wrap an Executor", "David Karnok", "akarnokd", "05/28/14, 07:33:56 PM", "For issue #1219 (and #1206)\n\nThis implementation should conform with the Scheduler contract except it is not possible to avoid thread-hopping (don't worry, the tasks execute serially, but maybe not on the same physical thread).\n\nFew open improvement possibilities:\n- Usage of `MpscLinkedQueue` once available.\n- A better performing subscription container for this kind of queue-drain task tracking instead of `CompositeSubscription`.\n- Ability to remove a `Subscription` from a `CompositeSubscription` without it calling unsubscribe on the removed Subscription, \u00e1 la `MultipleAssignmentSubscription.set()`.", "NaN"], ["1275", "Fix Encoding/Formatting", "Ben Christensen", "benjchristensen", "05/28/14, 07:57:50 PM", "The encoding on these files is not liked by Git and it is forcing them to be updated.\n\n/cc @akarnokd As you may want to look at your setup ... this happens somewhat often on commits from you.\n\nI believe it is related to these `.gitattribute` settings:\n\n```\n# Set default behaviour, in case users don't have core.autocrlf set.\n* text=auto\n\n# Explicitly declare text files we want to always be normalized and converted \n# to native line endings on checkout.\n*.java text\n*.groovy text\n*.scala text\n*.clj text\n*.txt text\n*.md text\n\n# Denote all files that are truly binary and should not be modified.\n*.png binary\n*.jpg binary\n```", "NaN"], ["1276", "Re-submission of CachedThreadScheduler", "Joakim Bodin", "jbripley", "05/30/14, 04:27:39 PM", "Merged in the latest from the master branch and refactored some internals in CachedThreadScheduler to better match the latest `Scheduler` changes. Aimed at solving #1140", "NaN"], ["1281", "Reduce Subscription Object Allocation", "Ben Christensen", "benjchristensen", "05/29/14, 10:21:47 PM", "### Changes\n- rewrite of `CompositeSubscription` and added `ChainedSubscription`\n- significant reduction in object allocations\n- details on research available at https://github.com/Netflix/RxJava/issues/1204\n##### Atomic State Machine -> Mutation & Locks\n\nThe `CompositeSubscription` implementation was changed from using an atomic state machine to using locks. The state machine requires immutable `State` that is swapped using CAS. This means an object allocation is needed each time.\n\nIt now uses locks to protect mutable state so very few objects are created.\n##### ChainedSubscription\n\nThe `CompositeSubscription` requires support of randomly removing a `Subscription` via the `remove` method. The `Subscriber` type does not expose this so can be optimized. There is now a `ChainedSubscription` that is used by `Subscriber` instead. This allows using a `LinkedList` or `ArrayList` rather than `HashSet` as random access is never needed. This provides a slight performance boost and reduces memory usage (1 minute test shows 16.5GB allocation for `Composite` versus 14.4GC for `Chained`).\n### Allocation Comparison\n\nThis shows Java Flight Recorder output from master without these changes:\n\n![master-without-changing-compositesubscription](https://cloud.githubusercontent.com/assets/813492/3122035/66ea4e22-e762-11e3-8915-5aead429e120.png)\n\nThis shows object allocation after changing `CompositeSubscription`:\n\n![master-with-new-compositesubscription ong](https://cloud.githubusercontent.com/assets/813492/3122195/9f3641bc-e764-11e3-930f-845efc99b84a.png)\n### Throughput Comparison\n\nTesting this code:\n\n``` java\n    public void mapTransformation(UseCaseInput input) throws InterruptedException {\n        input.observable.map(i -> {\n            return String.valueOf(i);\n\n        }).map(i -> {\n            return Integer.parseInt(i);\n        }).subscribe(input.observer);\n        input.awaitCompletion();\n    }\n```\n##### Rx 0.16.1\n\n```\nRun: 10 - 2,879,355 ops/sec \nRun: 11 - 3,236,245 ops/sec \nRun: 12 - 4,468,275 ops/sec \nRun: 13 - 3,237,293 ops/sec \nRun: 14 - 4,683,840 ops/sec \n```\n##### Rx 0.17.6 - using OnSubscribeFunc\n\n```\nRun: 10 - 3,621,876 ops/sec \nRun: 11 - 6,702,412 ops/sec \nRun: 12 - 7,401,924 ops/sec \nRun: 13 - 6,653,359 ops/sec \nRun: 14 - 5,834,305 ops/sec \n```\n##### Rx 0.17.6 - using OnSubscribe\n\n```\nRun: 10 - 3,320,053 ops/sec \nRun: 11 - 4,520,795 ops/sec \nRun: 12 - 7,107,320 ops/sec \nRun: 13 - 5,089,058 ops/sec \nRun: 14 - 5,534,034 ops/sec \n\nRun: 10 - 4,930,966 ops/sec \nRun: 11 - 6,119,951 ops/sec \nRun: 12 - 7,062,146 ops/sec \nRun: 13 - 6,514,657 ops/sec \nRun: 14 - 6,369,426 ops/sec \n```\n##### Rx 0.18.3 - using OnSubscribe\n\n```\nRun: 10 - 4,178,854 ops/sec \nRun: 11 - 4,446,420 ops/sec \nRun: 12 - 5,458,515 ops/sec \nRun: 13 - 8,006,405 ops/sec \nRun: 14 - 7,849,293 ops/sec \n\nRun: 10 - 4,145,936 ops/sec \nRun: 11 - 6,553,079 ops/sec \nRun: 12 - 7,645,259 ops/sec \nRun: 13 - 7,385,524 ops/sec \nRun: 14 - 7,830,853 ops/sec \n```\n##### Rx 0.19 master - CompositeSubscription state machine\n\n```\nRun: 10 - 10,576,302 ops/sec \nRun: 11 - 10,518,786 ops/sec \nRun: 12 - 10,554,646 ops/sec \nRun: 13 - 10,314,063 ops/sec \nRun: 14 - 10,666,439 ops/sec \n```\n##### Rx 0.19 master - CompositeSubscription with synchronized HashSet\n\n```\nRun: 10 - 9,949,060 ops/sec \nRun: 11 - 10,122,379 ops/sec \nRun: 12 - 10,018,032 ops/sec \nRun: 13 - 10,072,522 ops/sec \nRun: 14 - 10,132,636 ops/sec \n```\n##### Rx 0.19 master - ChainedSubscription with synchronized ArrayList\n\n```\nRun: 10 - 11,086,351 ops/sec \nRun: 11 - 10,932,426 ops/sec \nRun: 12 - 11,002,431 ops/sec \nRun: 13 - 10,888,620 ops/sec \nRun: 14 - 11,157,227 ops/sec \n\nRun: 10 - 9,371,192 ops/sec \nRun: 11 - 9,829,169 ops/sec \nRun: 12 - 10,139,005 ops/sec \nRun: 13 - 10,099,785 ops/sec \nRun: 14 - 10,017,631 ops/sec \n```\n##### Rx 0.19 master - ChainedSubscription with synchronized LinkedList\n\n```\nRun: 10 - 10,619,431 ops/sec \nRun: 11 - 11,063,293 ops/sec \nRun: 12 - 11,001,463 ops/sec \nRun: 13 - 11,054,243 ops/sec \nRun: 14 - 10,898,826 ops/sec \n\nRun: 10 - 10,075,465 ops/sec \nRun: 11 - 9,780,716 ops/sec \nRun: 12 - 9,885,134 ops/sec \nRun: 13 - 9,584,143 ops/sec \nRun: 14 - 10,000,700 ops/sec \n```", "NaN"], ["1282", "utility function for creating observables for closeable resources", "George Campbell", "abersnaze", "07/08/14, 07:58:44 PM", "#1199 the answer to the issue was nagging at me when I tried to recommend it recently.  I think @zsxwing's solution was ok but would fail if there were repeated subscriptions to the observable returned.  I created a utility function on StringObservable to make it easier to use `using()` for objects that implement the `AutoCloseable` interface.\n\nPS. I made a breaking change to arguments of `join(Observable<Object>)` to `join(Observable<String>)` and added a `Observable<String> toString(Observable<Object>)` to make up for it.\n\nPPS. I made a `UnsafeFunc0<R>` scoped to this class but I would like to have `UnsafeFunc<N>` in the rx.functions packages and have `Func<N>` extends `UnsafeFunc<N>`.   Makes it clear to the compiler that we don't expect the code the user's are giving us to always work. This also helps the users because they don't have to always fill their closures with try catch blocks\n\n```\n() -> new FileReader(file)\n```\n\nvs.\n\n```\n() -> {\n    try {\n        return new FileReader(file);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n```", "NaN"], ["1283", "Reduce Subscription Object Allocation", "Ben Christensen", "benjchristensen", "05/29/14, 10:22:53 PM", "- significant reduction in object allocations\n- details on research available at https://github.com/Netflix/RxJava/issues/1204", "NaN"], ["1284", "Manual merge of Lock-free, MPSC-queue based", "Ben Christensen", "benjchristensen", "05/29/14, 10:53:31 PM", "Pulling in the MPSC queue from https://github.com/Netflix/RxJava/pull/1235. Leaving out the SerializedObserver change until further analysis. Getting this data structure in as we likely want to use it in other places.\n\nMoved it into rx.internal.util and added a README so it is very clear this is an internal package and not part of the public API.", "NaN"], ["1286", "Rename some Operator* classes to OnSubscribe* as per #1270", "Dave Moten", "davidmoten", "05/30/14, 04:08:39 PM", "See discussion in issue #1270. \n\nNumerous classes in the `rx.operator` package are not implementations of `Operator` but are actually implementations of `OnSubscribe`. The classes have been renamed in this pull request.\n\nExcuse me not squashing commits, looked complicated after doing a pull from upstream in the middle.", "NaN"], ["1287", "ReplaySubject remove replayState CHM and related SubjectObserver changes", "David Karnok", "akarnokd", "05/30/14, 04:40:10 PM", "For issue #1204\n\nThis change should help avoid CHM garbage (although boxed Integers will still fly around). In addition, I moved the NotificationLite around to make room for the index. I've also removed the callback onAdd in PublishSubject because it was unnecessary.", "NaN"], ["1288", "Ensure StringObservable.from() does not perform unnecessary read ", "Dave Moten", "davidmoten", "05/30/14, 04:07:43 PM", "An extra check is useful to check for unsubscription because as is even `StringObservable.from(InputStream).first()` performs two reads and the second read may block. \n\nAdded another check just before the `InputStream.read()` and simplified the initialization of `n`.", "NaN"], ["1289", "Schedulers.from(Executor)", "Ben Christensen", "benjchristensen", "05/30/14, 04:48:53 PM", "As per decision at https://github.com/Netflix/RxJava/issues/1219#issuecomment-44454729", "NaN"], ["1290", "Upgrade to JMH 0.7.3", "Ben Christensen", "benjchristensen", "05/30/14, 04:57:01 PM", "As per https://github.com/Netflix/RxJava/issues/1205", "NaN"], ["1291", "Check unsubscribe within observable from future", "Matt Jacobs", "mattrjacobs", "05/30/14, 06:55:48 PM", "Right now, Observable.from(Future f) emits onError(CancellationException) when f starts out in a cancelled state. This change makes Observable.from(f) emit nothing in this case, and also when an unsubscribe occurs during a Future.get() that results in an Exception.", "NaN"], ["1293", "Fix and Update JMH Perf Tests", "Ben Christensen", "benjchristensen", "05/30/14, 06:55:02 PM", "- The tests were wrong and re-using a single Subscriber instance which meant they weren't really testing much.\n- Same with the CountDownLatch which meant they weren't waiting if async.\n- Added several SerializePerf and PerfTransform tests", "NaN"], ["1294", "rx.operators -> rx.internal.operators", "Ben Christensen", "benjchristensen", "05/30/14, 07:05:14 PM", "Move `rx.operators` to `rx.internal.operators` for clarity that these can change at any time and are not part of the public API.\n\nDiscussed at https://github.com/Netflix/RxJava/issues/1270#issuecomment-44668606", "NaN"], ["1295", "Change `void accept` to `boolean accept`", "Ben Christensen", "benjchristensen", "05/30/14, 09:14:09 PM", "As per a change @akarnokd did elsewhere with `accept2` method.", "NaN"], ["1296", "Move re-used internal Scheduler classes to their own package", "Joakim Bodin", "jbripley", "05/30/14, 11:56:54 PM", "As discussed in #1294", "NaN"], ["1297", "[RxScala] rxjava-scalaz: providing some type class instances.", "Shingo Omura", "everpeace", "06/25/14, 05:11:37 PM", "Introduced 'rxjava-scalaz' project. This project provides some type class instances for Observable.\n- _Monoid_: <br/>Observable obviously forms a monoid in terms of concatenation.\n- _Functor, Applicative, Monad, MonadPlus_: <br/>Observable can be a Stream-like Monad and can be MonadPlus as well as Monoid.\n- _Traverse, Foldable_: <br/>Observable can be Stream-like traversable.  Please note that the operations for the instance is blocking calls.\n- etc.\n\nAbout testing, property based tests are applied by Scalaz's ScalaCheck binding.\nFor getting started, please refer to rx.java.scala.scalaz.examples.RxScalazDemo, or README.md.\n### Sample Usages\n\n``` scala\nimport scalaz._, Scalaz._\nimport rx.lang.scala.Observable\nimport rx.lang.scala.scalaz._\n\nObservable.items(1, 2) |+| Observable.items(3, 4)               // === Observable.items(1 2 3 4)\nObservable.items(1, 2) \u2218 {_ + 1}                                // === Observable.items(2, 3)\n(Observable.items(1, 2) |@| Observable.items(3, 4)) {_ + _}     // === Observable.items(4, 5, 5, 6)\n1.\u03b7[Observable]                                                 // === Observable.items(1)\n(Observable.items(3) >>= {(i: Int) => Observable.items(i + 1)}) // === Observable.items(4)\n```\n\n_My original proposal is #1167_", "NaN"], ["1298", "Remove Bad Perf Test", "Ben Christensen", "benjchristensen", "05/31/14, 05:23:14 AM", "- this just stresses scheduling and at this throughput creates massive garbage and tests the wrong thing", "NaN"], ["1301", "RxScala: Add convenience method for adding unsubscription callback", "Joakim Bodin", "jbripley", "06/01/14, 03:04:10 PM", "Implements enhancement detailed in #1258. Now with less git screw ups.", "NaN"], ["1302", "improve variable names in OperatorGroupBy", "Dave Moten", "davidmoten", "06/02/14, 06:30:53 PM", "renamed `childObserver` to `child` as is now a `Subscriber`, `gps` to `group`,`_gps` to `_group` (gps implies multiple but is not).", "NaN"], ["1304", "Add flatMap and concatMap to RxScala", "Shixiong Zhu", "zsxwing", "06/02/14, 04:01:44 PM", "For #1251\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1306", "Hooked RxJavaPlugins errorHandler up within all operators that swallow onErrors", "Matt Jacobs", "mattrjacobs", "06/02/14, 11:53:10 PM", "Otherwise, the only onErrors visible to RxJavaPlugins.errorHandler plugin are the ones which propagate all the way to SafeSubscriber.", "NaN"], ["1307", "testNotificationDelay - Attempt at determinism", "Ben Christensen", "benjchristensen", "06/02/14, 10:36:11 PM", "Trying to make this deterministic ... I think it was possible for scheduling in the Executor to cause different threads to be used, even when queueing happened. This forces the same thread to be used as it is different Executors.", "NaN"], ["1309", "Hide ChainedSubscription/SubscriptionList from Public API", "Ben Christensen", "benjchristensen", "06/03/14, 04:08:45 PM", "Instead of adding this type to the public API, it hides it as an internal implementation detail and does not expose it via the `Subscriber` constructor.\n\nIf we want to expose it later we can figure out a proper name and do so.\n\nThis also changes operator implementations to not inject a `SubscriptionList` but instead just create the `Subscriber` and use it directly.", "NaN"], ["1311", "Tiny integration test change", "Mingtao Zhang", "MagIciaNGTAO", "06/04/14, 04:38:31 PM", "It's a tiny change.\n\nI've been following this project for a while as a hobby, also want to contribute to it. \n\nCurrently I am going through test cases to learn. Found some tiny problems as we are testing \"concat\", we should care not only the total number of elements, but also the sequences.\n\nCreating this request mainly want to make sure I am writing/commiting code to the correct place.\n\nLet me know if there is any problem.\n\nBest Regards,\nMingtao", "NaN"], ["1316", "Add the rest operators to RxScala", "Shixiong Zhu", "zsxwing", "06/08/14, 03:41:20 PM", "This PR added the rest operators to RxScala. However, I think some operators in rxjava-math, rxjava-string , such as `min`, `max`, `average`, are worth to add to RxScala. What do you think? @headinthebox, @samuelgruetter", "NaN"], ["1321", "Ensuring Runnables posted with delay to a Handler are removed when unsub...", "David Marques", "dpsm", "06/12/14, 04:33:42 PM", "...scribed.\n\nThis patch ensures the delayed runnables posted to a Handler are properly\nremoved when Subscription.unsubscribe() is called on the Observable.\n\nThe original code returns the subscription from schedule() but is not used\nby the callers who instead add the Worker itself as a subsciption.\n\nSigned-off-by: David Marques dpsmarques@gmail.com", "NaN"], ["1324", "TrampolineScheduler & Unsubscribe", "Ben Christensen", "benjchristensen", "06/04/14, 11:09:38 PM", "Unsubscribing should prevent new additions to a Worker, but not prevent already scheduled work, and definitely not affect other Workers using the same thread (by modifying the ThreadLocal as it was doing).\n\nSee the unit test for details of how unsubscribing 1 Worker could prevent work from being done on a completely separate Worker.", "NaN"], ["1327", "Join patterns extension for 4..9 and N arity joins.", "David Karnok", "akarnokd", "06/12/14, 04:43:23 PM", "Issue #1318\n\nI made some potential breaking changes:\n- made classes final\n- made most methods protected or package private", "NaN"], ["1332", "IOSSchedulers for RoboVM", "Ashley", "ashleyj", "06/25/14, 05:11:28 PM", "Added support for IOSchedulers for RoboVM\n\nI haven't added unit tests as \n1) they can't be automated\n2) they require the simulator\nIt sucks, I know and I'm working on a way to automate this.\n\nApologies for the double PR -- had to rebranch", "NaN"], ["1335", "Bump build tools to 19.1 and android plugin to 0.11", "Matthias K\u00e4ppler", "mttkay", "06/12/14, 04:44:41 PM", "This is to make the project compatible with Android Studio 0.6.x (the latest release)", "NaN"], ["1336", "RxScala: Add the rest missing methods to BlockingObservable", "Shixiong Zhu", "zsxwing", "06/16/14, 11:00:55 PM", "Some comments about this PR:\n- Changed the constructor from `BlockingObservable[+T] private[scala] (val asJava: rx.observables.BlockingObservable[_ <: T])` to `BlockingObservable[+T] private[scala] (val o: Observable[T])` so that we can implement logic in `BlockingObservable`.\n- Avoided to use `toIterable` to implement `***Option` and `***OrElse` because if some exception happens, we can not unsubscribe the underlying `Observable` by `Iterable` at once.\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1337", "Make Future receive NoSuchElementException when the BlockingObservable is empty", "Shixiong Zhu", "zsxwing", "06/12/14, 04:48:13 PM", "Now `Future.get` will return `null` if there is a single `null` in the BlockingObservable, or it is empty. People cannot distinguish between these two cases.\n\nThis PR has 2 breaking changes:\n- Throw an `NoSuchElementException` rather than returning `null` when the BlockingObservable is empty.\n- Change the exception from `IllegalStateException` to `IllegalArgumentException` when the BlockingObservable emits more than one items. This is because I used `single` directly.", "NaN"], ["1345", "RxScala: Simplify doOnCompleted/Terminate, finallyDo callback usage", "Joakim Bodin", "jbripley", "06/12/14, 04:53:58 PM", "As mentioned in #1342", "NaN"], ["1347", "Allow use of the returned subscription to cancel periodic scheduling", "Samuel Tardieu", "samueltardieu", "06/12/14, 04:31:06 PM", "The documentation for schedulePeriodically indicates that the returned\nsubscription can be used to unsubscribe from the periodic action, or to\nunschedule it if it has not been scheduled yet. That was the case only\nbefore the first action took place, and it was then impossible to\nunsubscribe using the given subscription, although unsubscribing the\nworker did work.\n\nThis fixes #1344.", "NaN"], ["1350", "Baseline Performance Tests", "Ben Christensen", "benjchristensen", "06/11/14, 02:50:30 AM", "Start of suite of general performance tests for comparing overall changes.", "NaN"], ["1355", "Don't add the subscriber to the manager if it unsubscribed during the on...", "David Karnok", "akarnokd", "06/12/14, 04:29:48 PM", "...Start call\n\nThis may happen, for example, when subscribing to a ReplaySubject containing some elements and taking fewer elements than available. In the original, the logic opened a small window where the SubjectSubscriber could get an onNext event even if the actual Subscriber was already unsubscribed at that point.", "NaN"], ["1357", "MergeWith, ConcatWith, AmbWith", "Ben Christensen", "benjchristensen", "06/12/14, 05:34:41 PM", "Single-arity instance versions of merge, concat and amb.\nSince we can't use the `merge`/`concat`/`amb` names on both static and instance methods, these have the `With` suffix, which actually reads quite well.\n\n``` java\no.mergeWith(o2).subscribe(ts);\no.concatWith(o2).subscribe(ts);\no.ambWith(o2).subscribe(ts);\n```\n\nIf we feel the need for more arities fine, but I wanted to start simple.\n\nThis originated from discussions with @headinthebox and over a year of wanting instance methods for `merge`.", "NaN"], ["1359", "Fixed padding of the integer and node classes.", "David Karnok", "akarnokd", "06/13/14, 04:16:05 PM", "Added proper padding of MpscLinkedQueue and PaddedAtomicInteger, based on Netty's implementation.\n\nNote that each padded class now occupies 256 bytes (which translates to either 2 or 4 cache lines) to avoid false sharing in both before and after the actual value and to avoid adjacent cache line fetch effects.\n\nFor issue #1310 ", "NaN"], ["1361", "Fix a race condition if queued actions have been handled already", "Samuel Tardieu", "samueltardieu", "06/16/14, 11:04:01 PM", "This should fix #1354.\n\nCc @Bananeweizen @akarnokd", "NaN"], ["1362", "RxScala: Fix #1340 and #1343", "Shixiong Zhu", "zsxwing", "06/16/14, 10:59:43 PM", "- Implement `create` for #1340\n- Remove `/*XXX*/` for #1343\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1367", "Fix the bug that 'flatMap' swallows OnErrorNotImplementedException", "Shixiong Zhu", "zsxwing", "06/21/14, 02:25:24 PM", "Fixed #1365\nNot sure if any other place will swallow `OnErrorNotImplementedException` or the fatal errors.", "NaN"], ["1369", "DebugHook got miswired before", "Matt Jacobs", "mattrjacobs", "06/17/14, 07:20:17 PM", "This was throwing ClassCastExceptions when used.  Now it works", "NaN"], ["1374", "Fix head/tail false sharing issues", "Nitsan Wakart", "nitsanw", "06/21/14, 02:22:16 PM", "See discussion in issue #1310 ", "NaN"], ["1375", "RxScala: Add idiomatic toXXX methods", "Shixiong Zhu", "zsxwing", "06/23/14, 03:58:08 PM", "Suggested by @headinthebox in https://github.com/Netflix/RxJava/pull/1336#issuecomment-46118339\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1376", "Revision of JMH Tests", "Ben Christensen", "benjchristensen", "06/23/14, 09:48:13 PM", "This updates all perf testing to use only JMH. I tried to get all of them to follow a common pattern, and to comply with examples at https://github.com/nitsanw/jmh-samples/blob/master/src/main/java/org/openjdk/jmh/samples/ by @nitsanw. (@nitsanw if you're willing to take a look at this and confirm or correct them, I'd appreciate that).\n\nI am doing this in 0.19 so that work on 0.20 has a common set of perf tests to use for comparison.", "NaN"], ["1378", "BugFix: Pivot Concurrency", "Ben Christensen", "benjchristensen", "06/24/14, 02:45:50 AM", "It wasn't serializing the `onNext`.", "NaN"], ["1379", "Parallel Operator Rewrite", "Ben Christensen", "benjchristensen", "06/24/14, 02:46:08 AM", "A rewrite of the `parallel` operator that is more efficient by not using `groupBy` and ready to support backpressure.", "NaN"], ["1380", "Variety of Fixes", "Ben Christensen", "benjchristensen", "06/24/14, 03:01:58 AM", "... found while working on backpressure.", "NaN"], ["1387", "Upgrade to JMH 0.9", "Ben Christensen", "benjchristensen", "06/25/14, 05:35:34 PM", "NaN", "NaN"], ["1388", "CompositeException stops mutating nested Exceptions", "Matt Jacobs", "mattrjacobs", "06/25/14, 11:29:26 PM", "Instead, it aggregates them at print-time. Since nothing is being mutated, there's no chance of accidentally creating a cycle in the Exception chain.  We ran into this in production very intermittently and had to add handling any time we were touching the Exception chain.", "NaN"], ["1393", "Add cache(int capacity) to Observable", "G\u00e1bor Lipt\u00e1k", "gliptak", "07/22/14, 05:00:40 AM", "Proposed patch for #1303", "NaN"], ["1394", "Gradle Builds: Change provided to testCompile", "G\u00e1bor Lipt\u00e1k", "gliptak", "07/10/14, 04:11:12 PM", "Gradle now generates correct eclipse dependencies", "NaN"], ["1396", "RxScala: Fix the compiler warnings", "Shixiong Zhu", "zsxwing", "07/02/14, 04:34:18 PM", "This PR fixed the annoying warnings in RxScala, include replacing `toBlockingObservable` with `toBlocking` and adding language.\\* imports.\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1397", "Adding the hooks unsafeSubscribe", "George Campbell", "abersnaze", "07/02/14, 04:33:36 PM", "by making the execution and error handling exactly same as safe version without the safety checks.", "NaN"], ["1398", "RxScala: Use currying to improve type inference", "Shixiong Zhu", "zsxwing", "07/08/14, 07:41:13 PM", "As per discussion in #1392.\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1399", "Update Perf Tests", "Ben Christensen", "benjchristensen", "07/02/14, 04:46:02 PM", "matching with work being done for 0.20 to allow comparisons", "NaN"], ["1400", "Internal Data Structures", "Ben Christensen", "benjchristensen", "07/02/14, 05:45:32 PM", "Various data structures to allow performance improvements.\nI am committing these separately from the code that uses it to keep the pull requests simpler.\nNothing in RxJava depends on these classes in this commit.", "NaN"], ["1401", "OnError while emitting onNext value: object.toString", null, "samhendley", "07/07/14, 09:24:15 PM", "```\n  public OnNextValue(Object value) {\n        super(\"OnError while emitting onNext value: \" + value);\n        this.value = value;\n    }\n```\n\nI know this is probably a helpful error message in some cases but this can be a really costly operation when an objects toString is an expensive call or contains alot of output. I don't think we should be printing this in any case but if so it should be on demand (overload of getMessage()) rather than eagerly.\n\nIn my case it is causing a toString of a large context object that is normally only used for debugging purposes which makes the exception logs hard to use and they are rolling over the log files very quickly.\n\nThere is an added danger that if there is a bug in the toString method it will cause inconsistent exception creation. If the object throws an exception while rendering a string it will actually end up not seeing the real exception.", "NaN"], ["1406", "Kotlin M8", "Mario Arias", "MarioAriasC", "07/07/14, 04:58:37 PM", "- Update to Kotlin milestone 8, \n- Some reformat on test \n- Replacing deprecated method calls ", "NaN"], ["1409", "Avoiding OperatorObserveOn from calling subscriber.onNext(..) after unsu...", "David Marques", "dpsm", "07/07/14, 06:54:01 PM", "...bscribe().\n\nThe OperatorObserveOn operator uses a scheduler to cancel subscriptions as well\nas to deliver the objects passing through it's onNext(..) in the right context.\n\nCalling unsubscribe will schedule the actual unsubscription while not making sure\nthat the child subscriber will no longer receive calls to onNext(..) after\nunsubscribe() returns.\n\nThis fix makes sure that after unsubscribe() returns no more onNext(..) calls will be\nmade on the child subscribers.\n\nSigned-off-by: David Marques dpsmarques@gmail.com", "NaN"], ["1412", "Backpressure & 0.20.0-RC1", "Ben Christensen", "benjchristensen", "07/08/14, 12:05:21 AM", "This is a functioning implementation of backpressure. Of the major unbounded queue operators in 0.19, this implements `observeOn` and `merge` but not yet `zip`. \n### New Signatures\n\n``` java\npublic interface Producer {\n    public void request(int n);\n}\n```\n\n``` java\npublic abstract class Subscriber<T> implements Observer<T>, Subscription {\n\n    /**\n     * Optionally called from `Observable.OnSubscribe`.\n     */\n    public final void setProducer(Producer producer);\n\n    /**\n     * Allow implementing classes to capture, decorate or override the `Producer` without affecting the `Subscriber` logic.\n     */\n    protected Producer onSetProducer(Producer producer);\n\n    public final void request(int n);\n}\n```", "NaN"], ["1414", "Merge Fixes", "Ben Christensen", "benjchristensen", "07/08/14, 05:47:28 AM", "A handful of fixes, particularly one that could cause non-deterministic missing data.", "NaN"], ["1417", "Proposal: Subscriber.onStart", "Ben Christensen", "benjchristensen", "07/08/14, 10:46:52 PM", "This is a proposal derived from conversations with @headinthebox to use `Subscriber.onStart` rather than constructor overloads as the mechanism for allowing `request(n)` to be called to operationally start backpressure (or do anything else at the start of a stream).\n\nThe idea is that it is at the start the same as `onError` or `onCompleted` are terminal events. It will always be called.\n\nUsage for subscribing is like this:\n\n``` java\n        Observable.from(1, 2, 3, 4).take(2).subscribe(new Subscriber<Integer>() {\n\n            @Override\n            public void onStart() {\n                request(1);\n            }\n\n            @Override\n            public void onCompleted() {\n\n            }\n\n            @Override\n            public void onError(Throwable e) {\n\n            }\n\n            @Override\n            public void onNext(Integer t) {\n                System.out.println(t);\n                request(1);\n            }\n\n        });\n```\n\nor when writing an `Operator` via `lift`:\n\n``` java\n        Observable.from(1, 2, 3, 4).lift(new Operator<Integer, Integer>() {\n\n            @Override\n            public Subscriber<? super Integer> call(final Subscriber<? super Integer> child) {\n                return new Subscriber<Integer>() {\n\n                    @Override\n                    public void onStart() {\n                        request(1);\n                    }\n\n                    @Override\n                    public void onCompleted() {\n                        child.onCompleted();\n                    }\n\n                    @Override\n                    public void onError(Throwable e) {\n                        child.onError(e);\n                    }\n\n                    @Override\n                    public void onNext(Integer t) {\n                        System.out.println(t);\n                        child.onNext(t);\n                        request(1);\n                    }\n\n                };\n            }\n\n        }).subscribe();\n```\n\nBoth of these examples are requesting 1 item at a time.", "NaN"], ["1421", "Range backpressure concurrency & off-by-one bugfix", "David Karnok", "akarnokd", "07/10/14, 04:06:04 PM", "Bugs/deficiencies fixed:\n- reading of the volatile `requested` multiple times\n- `numLeft` calculated incorrectly if `start` was not 0\n- since `end` is an absolute index and `index` goes up to it, there is no need for `start`\n- `index` gets only updated by a single thread thanks to the barriers provided by the atomic `REQUESTED` updater, there is no need for volatile.\n- `numLeft` calculated incorrectly since `end` is an inclusive end index, thus the remaining count is +1\n- `completeOnFinish` was false if the exact remaining amount is requested.", "NaN"], ["1422", "Concurrency Fixes for RxRingBuffer & Merge", "Ben Christensen", "benjchristensen", "07/10/14, 10:04:23 PM", "Possible fix for #1420\n\nI was unable to exactly reproduce the issue, but was able to create a possibly related one. This fixes it.\nIt also simplifies the logic and code somewhat, at a possible small performance cost for these:\n\n```\nr.o.OperatorMergePerf.merge1SyncStreamOfN            1000  thrpt         5    59407.716     2073.945    ops/s\nr.o.OperatorMergePerf.merge1SyncStreamOfN         1000000  thrpt         5       66.557        2.693    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN           1000  thrpt         5       59.293        5.046    ops/s\n```", "NaN"], ["1423", "Changed producer interface to work with long instead of int", "Aubrey Tull", "stealthcode", "07/11/14, 02:42:05 AM", "Changing `int` to `long` in `Producer` implementations. ", "NaN"], ["1431", "CompositeException fix for Android", "Tomasz Rozbicki", "tomrozb", "07/21/14, 11:22:07 PM", "Fixes #1405\n- revert changes from f4ae92aa\n- remove duplicated causes in stack trace chain", "NaN"], ["1433", "Take 3", null, "headinthebox", "07/11/14, 04:49:56 PM", "Removed unneeded variance and replaced a few type variables in result types that don't matter with Any.\n\nUsed `@uncheckedVariance` in one place that I think is safe and correspond better with Java signature. which also just takes a `T`.\n\n```\ndef publish[R](selector: Observable[T] => Observable[R], initialValue: T @uncheckedVariance): Observable[R]\nublic final <R> Observable<R> publish(Func1<? super Observable<T>, ? extends Observable<R>> selector, final T initialValue) {\n```", "NaN"], ["1436", "Correct warnings", "G\u00e1bor Lipt\u00e1k", "gliptak", "07/21/14, 04:39:26 PM", "NaN", "NaN"], ["1440", "Micro-optimization by nulling out list", "Ben Christensen", "benjchristensen", "07/14/14, 08:40:39 PM", "A micro-optimization done as per discussion in https://github.com/Netflix/RxJava/issues/1292. It is questionable whether this will help, but if it can help Android memory pressure then it's worth it as it is a trivial change.", "NaN"], ["1442", "Merge Bug", "Ben Christensen", "benjchristensen", "07/15/14, 05:01:23 AM", "Working on https://github.com/Netflix/RxJava/issues/1420\n\nIn testing on prod this looks like it may solve it .... running longer term tests to confirm.", "NaN"], ["1443", "Infinite request with Long.MAX_VALUE instead of -1", "Ben Christensen", "benjchristensen", "07/15/14, 05:31:14 AM", "Migrating to this after discussions at https://github.com/reactive-streams/reactive-streams/issues/62", "NaN"], ["1446", "Zip with Backpressure Support", "Ben Christensen", "benjchristensen", "07/17/14, 07:51:49 PM", "This supports both upstream and downstream backpressure.", "NaN"], ["1448", "RxScala: Add Scala idiomatic methods", "Shixiong Zhu", "zsxwing", "07/16/14, 02:50:00 PM", "For #523\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1453", "New test case for takeWhile that currently fails", null, "spodila", "07/17/14, 08:05:45 PM", "Created a test case to verify the failing case of takeWhile() followed by toList() as mentioned in <a href=\"https://github.com/Netflix/RxJava/issues/1451\">Issue 1451</a>.", "NaN"], ["1454", "Fix issue #1451", "Shixiong Zhu", "zsxwing", "07/17/14, 08:05:37 PM", "Add `done` to make sure calling `doOnEachObserver` obey the Rx contract.", "NaN"], ["1456", "Removing onSetProducer from the API", "George Campbell", "abersnaze", "07/17/14, 09:35:07 PM", "NaN", "NaN"], ["1457", "MergeDelayError & OnErrorFlatMap w/ Merge", "Ben Christensen", "benjchristensen", "07/17/14, 09:07:31 PM", "NaN", "NaN"], ["1458", "Remove Pivot Operator", "Ben Christensen", "benjchristensen", "07/17/14, 09:29:48 PM", "as per https://github.com/Netflix/RxJava/issues/1402", "NaN"], ["1459", "Remove Subscriber.onSetProducer", "Ben Christensen", "benjchristensen", "07/17/14, 09:35:06 PM", "This is a manual merge of https://github.com/Netflix/RxJava/pull/1456\n\nRemoves the awkward `Subscriber.onSetProducer` API and makes `Subscriber.request` protected so it can't easily be misused.", "NaN"], ["1462", "Merge Perf Fix: Re-enable fast-path", "Ben Christensen", "benjchristensen", "07/18/14, 12:43:40 AM", "Fixes https://github.com/Netflix/RxJava/issues/1461", "NaN"], ["1463", "Merge Bug: Missing Emissions", "Ben Christensen", "benjchristensen", "07/18/14, 05:02:17 PM", "Notes and temporary fix using `synchronized` to achieve correctness until a proper solution can be found.\n\nThis code does not exhibit the issue when I do production testing. Without the two `synchronized` methods I get errors in prod that I've temporarily added to `BlockingOperatorToIterator` until this is fixed so it's visible.\n\n```\n/apps/tomcat/logs$ tail -f catalina.out |grep \"Timed out waiting for value\"\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\nTimed out waiting for value. File a bug at github.com/Netflix/RxJava\n```", "NaN"], ["1467", "Javadocs for cache operator", "Ben Christensen", "benjchristensen", "07/22/14, 05:27:49 AM", "NaN", "NaN"], ["1468", "RxScala: Update CompletenessTest.scala", "Shixiong Zhu", "zsxwing", "07/28/14, 07:09:14 PM", "Cleaned up `CompletenessTest.scala`.\n\n`onBackpressureBuffer` and `onBackpressureDrop` are missing in RxScala now. Wait until they are finalized in RxJava.\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1469", "ToList operator needs to ignore backpressure", "Matt Jacobs", "mattrjacobs", "07/22/14, 07:13:50 PM", "NaN", "NaN"], ["1472", "Add test of backpressure to OperatorAll", "Matt Jacobs", "mattrjacobs", "07/22/14, 08:46:07 PM", "NaN", "NaN"], ["1473", "OperatorAny needs to handle backpressure", "Matt Jacobs", "mattrjacobs", "07/22/14, 09:01:56 PM", "NaN", "NaN"], ["1474", "Ignore backpressure for OperatorToObservableSortedList", "Matt Jacobs", "mattrjacobs", "07/22/14, 09:24:24 PM", "NaN", "NaN"], ["1489", "Backpressure Fixes and Docs", "Ben Christensen", "benjchristensen", "07/23/14, 06:15:30 AM", "Docs for operators that don't support backpressure, particularly all the temporal operators.\n\nFixes for several that needed to request(1) or request(Long.MAX_VALUE).", "NaN"], ["1490", "non-deterministic timeouts on slow machines", "Ben Christensen", "benjchristensen", "07/23/14, 06:32:00 AM", "NaN", "NaN"], ["1491", "Concat Outer Backpressure", "Ben Christensen", "benjchristensen", "07/23/14, 06:50:50 AM", "Fixed https://github.com/Netflix/RxJava/issues/1481", "NaN"], ["1493", "Manual merge of retryWhen/repeatWhen", "Ben Christensen", "benjchristensen", "07/23/14, 05:37:24 PM", "Manual merge and rebase of https://github.com/Netflix/RxJava/pull/1470", "NaN"], ["1494", "zipWith", "Ben Christensen", "benjchristensen", "07/23/14, 05:41:22 PM", "Match the naming convention of `mergeWith`, `concatWith`, `ambWith` etc.", "NaN"], ["1495", "Upgrade to Quasar 0.6.0", "Ron Pressler", "pron", "07/23/14, 09:28:23 PM", "NaN", "NaN"], ["1496", "Change RxRingBuffer Queue Usage", "Ben Christensen", "benjchristensen", "07/23/14, 09:28:04 PM", "There are non-determinisitic failures in the `offer` behavior of the JCTools code that I don't understand yet, so reverting to `SynchronizedQueue` which does not show the problem. The performance hit is not huge, it's even better in some cases.\n\nThis should result in more object allocation though, so that needs to be tested (I'll do so along with Netflix production testing).", "NaN"], ["1497", "spsc ring buffer concurrency test", "Ben Christensen", "benjchristensen", "07/23/14, 10:56:30 PM", "NaN", "NaN"], ["1498", "non-deterministic testUserSubscriberUsingRequestAsync", "Ben Christensen", "benjchristensen", "07/23/14, 11:08:42 PM", "fix non-deterministic failures of BackpressureTests.testUserSubscriberUsingRequestAsync\n\nI was able to replicate the occasional failure by putting it in a tight loop. With these changes it no longer fails.", "NaN"], ["1499", "retrytest.iterativeBackoff", "Ben Christensen", "benjchristensen", "07/23/14, 11:25:04 PM", "Unable to replicate failure of this test ... but adding assertNoErrors so we can see an exception if it happens again.", "NaN"], ["1501", "blocking synchronous next", "Ben Christensen", "benjchristensen", "07/24/14, 07:54:59 AM", "Fixes https://github.com/Netflix/RxJava/issues/624", "NaN"], ["1504", "Eliminate duplication of List in toList", "Ben Christensen", "benjchristensen", "07/24/14, 07:54:46 AM", "Fixes https://github.com/Netflix/RxJava/issues/1218", "NaN"], ["1507", "BufferWithSize with Backpressure Support", "Shixiong Zhu", "zsxwing", "08/11/14, 10:19:11 PM", "For #1479", "NaN"], ["1513", "Revert to copying list in toList", "Ben Christensen", "benjchristensen", "07/24/14, 09:02:36 PM", "It is a breaking change to existing code to make it immutable, so reverting back to copying.", "NaN"], ["1515", "Support Subject Factory with Multicast", "Ben Christensen", "benjchristensen", "07/28/14, 04:10:19 PM", "This is a proposed change to allow using a `Subject` factory with `multicast` and for methods such as `publish()` and `replay()` to use the factory so that each time `ConnectableObservable.connect()` is invoked, a new `Subject` is created and used. Otherwise, an `Observable` sequence can not be reused.\n#### Use Case\n\n``` java\n        final AtomicInteger count = new AtomicInteger();\n        Observable<Integer> subject1 = Observable.just(10);\n        Observable<Integer> subject2 = Observable.just(20);\n        Observable<Integer> combined = Observable.combineLatest(subject1, subject2, (fst, snd) -> {\n            int i = count.incrementAndGet();\n            System.out.println((fst + i) + \" + \" + (snd + i));\n            return fst + snd;\n        }).publish().refCount();\n\n        combined.subscribe(\n                System.out::println,\n                t -> t.printStackTrace(),\n                () -> System.out.println(\"Completed\"));\n\n        combined.subscribe(\n                System.out::println,\n                t -> t.printStackTrace(),\n                () -> System.out.println(\"Completed\"));\n```\n\nOutput without these changes:\n\n```\n11 + 21\n30\nCompleted\nCompleted\n```\n\nOutput with changes:\n\n```\n11 + 21\n30\nCompleted\n12 + 22\n30\nCompleted\n```\n#### Test Case\n\n``` java\n    @Test\n    public void testConnectDisconnectConnectAndSubjectState() {\n        Observable<Integer> o1 = Observable.just(10);\n        Observable<Integer> o2 = Observable.just(20);\n        Observable<Integer> combined = Observable.combineLatest(o1, o2, new Func2<Integer, Integer, Integer>() {\n\n            @Override\n            public Integer call(Integer t1, Integer t2) {\n                return t1 + t2;\n            }\n\n        }).publish().refCount();\n\n        TestSubscriber<Integer> ts1 = new TestSubscriber<Integer>();\n        TestSubscriber<Integer> ts2 = new TestSubscriber<Integer>();\n\n        combined.subscribe(ts1);\n        combined.subscribe(ts2);\n\n        ts1.assertTerminalEvent();\n        ts1.assertNoErrors();\n        ts1.assertReceivedOnNext(Arrays.asList(30));\n\n        ts2.assertTerminalEvent();\n        ts2.assertNoErrors();\n        ts2.assertReceivedOnNext(Arrays.asList(30));\n    }\n```", "NaN"], ["1518", "Fix typos in javadoc comments.", "Sean O'Neil", "SeanPONeil", "07/25/14, 09:12:18 PM", "\"Recieve\" -> \"Receive\"", "NaN"], ["1519", "Remove unused param comments", "Ben Christensen", "benjchristensen", "07/25/14, 08:32:16 PM", "Fixed https://github.com/Netflix/RxJava/issues/1426", "NaN"], ["1520", "Fix non-deterministic test", "Ben Christensen", "benjchristensen", "07/25/14, 08:39:51 PM", "Fixes https://github.com/Netflix/RxJava/issues/1429", "NaN"], ["1521", "Fix toIterator Exception Handling", "Ben Christensen", "benjchristensen", "07/25/14, 09:10:22 PM", "Fixes https://github.com/Netflix/RxJava/issues/1450", "NaN"], ["1523", "Fix issue #1522", "Shixiong Zhu", "zsxwing", "07/29/14, 04:27:26 PM", "`TakeLast` should ignore other `request`s if it's requested with `Long.MAX_VALUE`. #1522", "NaN"], ["1524", "Bump to Robolectric 2.3, make samples build under Studio 0.8.+", "Matthias K\u00e4ppler", "mttkay", "07/29/14, 04:30:39 PM", "This should help get https://github.com/Netflix/RxJava/pull/1449 off the ground", "NaN"], ["1526", "Restore use of SpmcArrayQueue in RxRingBuffer", "Ben Christensen", "benjchristensen", "07/29/14, 12:41:30 AM", "- Modification of SpmcArrayQueue with fix from https://github.com/JCTools/JCTools/issues/21\n  - I expect updates to this code over time but wanted to move forward with a working solution for now\n- Restore RxRingBuffer to use SpmcArrayQueue\n  - this reduces object allocation significantly and increases performance in some use cases\n### Performance Diff\n#### 0.20.0-RC3\n\n```\n../gradlew benchmarks '-Pjmh=-f 1 -wi 5 -i 5 -r 2 .*rx.internal.RxRingBufferPerf.*'\n\nBenchmark                                            Mode   Samples        Score  Score error    Units\nr.i.RxRingBufferPerf.spmcCreateUseAndDestroy1       thrpt         5 33224158.580   399867.898    ops/s\nr.i.RxRingBufferPerf.spmcCreateUseAndDestroy1000    thrpt         5    73346.934      853.989    ops/s\nr.i.RxRingBufferPerf.spmcRingBufferAddRemove1       thrpt         5 22034846.226   579563.777    ops/s\nr.i.RxRingBufferPerf.spmcRingBufferAddRemove1000    thrpt         5    21612.517      567.086    ops/s\nr.i.RxRingBufferPerf.spscCreateUseAndDestroy1       thrpt         5 32277699.473  2481022.929    ops/s\nr.i.RxRingBufferPerf.spscCreateUseAndDestroy1000    thrpt         5    72782.657     3836.229    ops/s\nr.i.RxRingBufferPerf.spscRingBufferAddRemove1       thrpt         5 21625427.399   555584.413    ops/s\nr.i.RxRingBufferPerf.spscRingBufferAddRemove1000    thrpt         5    21588.532      875.871    ops/s\n```\n\n```\n../gradlew benchmarks '-Pjmh=-f 1 -wi 5 -i 5 -r 2 .*rx.operators.OperatorMergePerf.*'\n\nBenchmark                                          (size)   Mode   Samples        Score  Score error    Units\nr.o.OperatorMergePerf.merge1SyncStreamOfN               1  thrpt         5  5066495.356    73296.083    ops/s\nr.o.OperatorMergePerf.merge1SyncStreamOfN            1000  thrpt         5    55094.237     1067.519    ops/s\nr.o.OperatorMergePerf.merge1SyncStreamOfN         1000000  thrpt         5       57.981        1.324    ops/s\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN             1  thrpt         5    97273.839     9582.028    ops/s\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN          1000  thrpt         5        4.754        0.115    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1              1  thrpt         5  4384357.616   302930.385    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1            100  thrpt         5   278124.421    36626.222    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1           1000  thrpt         5    35179.120     1059.293    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN              1  thrpt         5  5383548.483   125915.654    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN           1000  thrpt         5       54.551        3.245    ops/s\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN           1  thrpt         5    66546.808    30474.772    ops/s\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN        1000  thrpt         5     2828.244      103.470    ops/s\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1         1  thrpt         5  5030721.519   181734.814    ops/s\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1      1000  thrpt         5    24489.183      759.520    ops/s\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1   1000000  thrpt         5       30.101        0.802    ops/s\n```\n\nMemory allocation capture with Java Flight Recorder while executing:\n\n```\n../gradlew benchmarks '-Pjmh=-f 1 -wi 5 -i 5 -r 20 .*rx.operators.OperatorMergePerf.mergeNAsyncStreamsOfN.*'\n```\n\n![object-allocation-with-linkedlist](https://cloud.githubusercontent.com/assets/813492/3727745/35c44dca-16a1-11e4-89c1-7a1c2475bcbb.png)\n#### with JCTools impl\n\n```\n../gradlew benchmarks '-Pjmh=-f 1 -wi 5 -i 5 -r 2 .*rx.internal.RxRingBufferPerf.*'\n\nBenchmark                                            Mode   Samples        Score  Score error    Units\nr.i.RxRingBufferPerf.spmcCreateUseAndDestroy1       thrpt         5 27028267.871  2547216.752    ops/s\nr.i.RxRingBufferPerf.spmcCreateUseAndDestroy1000    thrpt         5    78238.446     2539.165    ops/s\nr.i.RxRingBufferPerf.spmcRingBufferAddRemove1       thrpt         5 43396574.546   918454.062    ops/s\nr.i.RxRingBufferPerf.spmcRingBufferAddRemove1000    thrpt         5    64074.506      531.873    ops/s\nr.i.RxRingBufferPerf.spscCreateUseAndDestroy1       thrpt         5 27163028.506   506868.149    ops/s\nr.i.RxRingBufferPerf.spscCreateUseAndDestroy1000    thrpt         5    77472.474     2875.597    ops/s\nr.i.RxRingBufferPerf.spscRingBufferAddRemove1       thrpt         5 43309504.983   337590.502    ops/s\nr.i.RxRingBufferPerf.spscRingBufferAddRemove1000    thrpt         5    64140.916     1292.265    ops/s\n```\n\n```\n../gradlew benchmarks '-Pjmh=-f 1 -wi 5 -i 5 -r 2 .*rx.operators.OperatorMergePerf.*'\n\nBenchmark                                          (size)   Mode   Samples        Score  Score error    Units\nr.o.OperatorMergePerf.merge1SyncStreamOfN               1  thrpt         5  5146417.279   168011.480    ops/s\nr.o.OperatorMergePerf.merge1SyncStreamOfN            1000  thrpt         5    56640.224      789.709    ops/s\nr.o.OperatorMergePerf.merge1SyncStreamOfN         1000000  thrpt         5       60.610        1.022    ops/s\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN             1  thrpt         5    97759.963     1897.592    ops/s\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN          1000  thrpt         5        5.937        0.404    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1              1  thrpt         5  4511685.053   136414.240    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1            100  thrpt         5   285644.030     9325.626    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1           1000  thrpt         5    32789.901     1143.208    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN              1  thrpt         5  5415231.898   107538.428    ops/s\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN           1000  thrpt         5       55.918        0.660    ops/s\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN           1  thrpt         5    74341.892     3274.847    ops/s\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN        1000  thrpt         5     4138.087      329.935    ops/s\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1         1  thrpt         5  5026384.994   242183.595    ops/s\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1      1000  thrpt         5    24700.473      334.516    ops/s\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1   1000000  thrpt         5       30.458        0.603    ops/s\n```\n\nMemory allocation capture with Java Flight Recorder while executing:\n\n```\n../gradlew benchmarks '-Pjmh=-f 1 -wi 5 -i 5 -r 20 .*rx.operators.OperatorMergePerf.mergeNAsyncStreamsOfN.*'\n```\n\n![object-allocation-with-arrayqueue](https://cloud.githubusercontent.com/assets/813492/3727746/38de2d8c-16a1-11e4-93cd-32dba4497a5f.png)", "NaN"], ["1527", "Failing unit test for reduce, showing it does not implement backpressure correctly", "Matt Jacobs", "mattrjacobs", "07/29/14, 04:40:10 PM", "NaN", "NaN"], ["1528", "Add operators to create Observables from BroadcastReceiver (rebased)", "Yaroslav", "Yarikx", "07/29/14, 04:30:37 PM", "Rebase https://github.com/Netflix/RxJava/pull/1449 on the top of https://github.com/Netflix/RxJava/pull/1524\n\nAdd test for OperatorBroadcastRegister", "NaN"], ["1530", "Fix the unbounded check for merge", "Shixiong Zhu", "zsxwing", "07/29/14, 04:19:26 PM", "NaN", "NaN"], ["1533", "Amb + Backpressure", "Ben Christensen", "benjchristensen", "07/30/14, 04:31:18 PM", "Building on top of https://github.com/Netflix/RxJava/pull/1516", "NaN"], ["1534", "Concat Backpressure", "Ben Christensen", "benjchristensen", "07/30/14, 04:33:07 PM", "Route backpressure through the inner subscribers.\nFixes https://github.com/Netflix/RxJava/issues/1480", "NaN"], ["1537", "recursive scheduling in RxScala", "Georgi Khomeriki", "flatmap13", "08/08/14, 08:52:27 PM", "This PR adds a `scheduleRec` method to the `Scheduler.Worker` trait to make recursive scheduling more convenient in Scala. This issue is raised in #1348.", "NaN"], ["1545", "Make Android ViewObservable.input observe TextView instead of String", "Ron Shapiro", "ronshapiro", "08/14/14, 09:44:36 PM", "The previous version required `ViewObservable.input(TextView, boolean)` to emit just `String`s of the updated text, but not `CharSequence`s, which is the declared implementation of `TextView`'s `mText`. This still allows for similar functionality as before via: \n\n``` java\nViewObservable.input(myTextView, false).map((textView) -> textView.getText().toString())\n```\n\nIt is also flexible like `ViewObservable.clicks` in that it returns a reference to the `View`, which should make it more flexible for using it with other reactive methods.\n\nI held off from doing the same to `ViewObservable.input(CompoundButton, boolean)` but could do so if you think it would be valuable/more consistent.\n\nThis would be a breaking change. In order to make it not a breaking change, this method could be renamed and the initial method could `map` like the above snippet. Let me know if you think this is important and I'd be happy to make this change.", "NaN"], ["1548", "Adding backpressure to OnSubscribeRedo", "Aubrey Tull", "stealthcode", "08/11/14, 10:04:50 PM", "NaN", "NaN"], ["1552", "Fixing a bug and a potential for other concurrency issues.", "George Campbell", "abersnaze", "08/08/14, 04:54:21 AM", "Fix for #1542.\n\nthe root cause of the issue was this line of code where it was casting the notification list object to T.\n\n```\n        private T getRecentValue() {\n            return (T)value;\n        }\n```\n\nWhile I was in there I noticed that is was a race condition between calling `hasNext()` and `next()` on the `Iterator`.", "NaN"], ["1555", "RxScala: Add retryWhen/repeatWhen methods", "Joakim Bodin", "jbripley", "08/08/14, 04:53:05 AM", "- Add example usage of retryWhen/repeatWhen to RxScalaDemo", "NaN"], ["1557", "SwitchOnNext with backpressure support", "Shixiong Zhu", "zsxwing", "08/11/14, 10:12:47 PM", "#1482", "NaN"], ["1558", "mergeMap generics", "Ben Christensen", "benjchristensen", "08/08/14, 07:02:44 PM", "Fixes issue #1550", "NaN"], ["1559", "More consistent hooks for scheduler plugins.  This is a rework of #1514.", "Matt Jacobs", "mattrjacobs", "08/11/14, 09:18:44 PM", "- Deprecated RxJavaDefaultSchedulers and RxJavaDefaultSchedulersDefault (I think these names are confusing)\n- Added RxJavaSchedulersHook\n- Ability to override entire schedulers from scratch\n- Ability to decorate Action0 before submission to Scheduler\n\nThe main change from #1514 is the decoration of Action0 instead of Runnable.  Action0 is an improvement as all Schedulers must handle these, whereas not all Schedulers handle Runnables.", "NaN"], ["1560", "flatMap overloads", "Ben Christensen", "benjchristensen", "08/08/14, 07:32:55 PM", "- migrate mapPair to use actual merge instead of reimplementing it\n- deprecate mergeMap\n\nDone during API review with @headinthebox", "NaN"], ["1561", "Remove Variance on Defer", "Ben Christensen", "benjchristensen", "08/08/14, 10:01:18 PM", "See https://github.com/Netflix/RxJava/issues/1157 for painful background.", "NaN"], ["1562", "TakeLastTimed with backpressure support", "Shixiong Zhu", "zsxwing", "08/11/14, 10:09:59 PM", "Implemented #1488. I moved `OperatorTakeLast.QueueProducer` to `TakeLastQueueProducer` to reuse it.", "NaN"], ["1564", "RxScala: Fix errors in Completeness.scala and also improve it", "Shixiong Zhu", "zsxwing", "08/11/14, 10:07:00 PM", "- Fixed some errors in CompletenessTest.scala and improve it.\n- Fixed the error of `defer` for #1561\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1565", "Fixing Kotlin Defer", "Ben Christensen", "benjchristensen", "08/12/14, 12:33:20 AM", "Broke this with https://github.com/Netflix/RxJava/pull/1561", "NaN"], ["1567", "groupBy with element selector", "Ben Christensen", "benjchristensen", "08/12/14, 04:11:12 AM", "Fixes https://github.com/Netflix/RxJava/issues/1554", "NaN"], ["1568", "Compose/Transformer", "Ben Christensen", "benjchristensen", "08/12/14, 05:20:20 AM", "See https://github.com/Netflix/RxJava/issues/1416 for discussion that led to this.\n\nThis does not have co/contra-variance which needs to be figured out.", "NaN"], ["1569", "Compose/Transform Covariance", "Ben Christensen", "benjchristensen", "08/14/14, 05:54:09 AM", "Failing test while exploring generic variance for https://github.com/Netflix/RxJava/issues/1416\n\nCode like this makes these generics work:\n\n``` java\n    @Test\n    public void testCovarianceOfCompose() {\n        Observable<HorrorMovie> movie = Observable.<HorrorMovie> from(new HorrorMovie());\n        movie.compose(new Transformer<Movie, Movie>() {\n\n            @Override\n            public Observable<? extends Movie> call(Observable<? super Movie> t1) {\n                return Observable.from(new Movie());\n            }\n\n        });\n    }\n\n    @Test\n    public void testCovarianceOfCompose2() {\n        Observable<Movie> movie = Observable.<Movie> from(new HorrorMovie());\n        movie.compose(new Transformer<Movie, Movie>() {\n\n            @Override\n            public Observable<? extends Movie> call(Observable<? super Movie> t1) {\n                return Observable.from(new HorrorMovie());\n            }\n\n        });\n    }\n```\n\nhowever, I couldn't get the `compose`/`Transformer` types to correctly work.\n\nAnyone else want to help figure out generics for this?\n\nSee https://github.com/Netflix/RxJava/blob/master/rxjava-core/src/main/java/rx/Observable.java#L195", "NaN"], ["1570", "Fix for mapcat, issue #1556", "Dave Ray", "daveray", "08/12/14, 03:52:09 PM", "Corrected mapcat to actually concat its results rather than merging.\nAdded warning to docstring thta this might not be ideal.\n\nAdded flatmap to cover map+merge case.", "NaN"], ["1572", "Remove Timeout in Blocking Iterator", "Ben Christensen", "benjchristensen", "08/12/14, 06:54:36 PM", "This was a temporary timeout to track down bugs.", "NaN"], ["1573", "Backpressure: parallel", "Ben Christensen", "benjchristensen", "08/12/14, 07:36:38 PM", "Fixes https://github.com/Netflix/RxJava/issues/1485", "NaN"], ["1575", "combineLatest with backpressure", "Ben Christensen", "benjchristensen", "08/14/14, 05:29:23 AM", "Implementation updated to support reactive pull: https://github.com/Netflix/RxJava/issues/1476", "NaN"], ["1576", "from(T) -> just(T)", "Ben Christensen", "benjchristensen", "08/14/14, 09:41:10 PM", "Deprecate the from(T) methods in favor of items(T)\n\nAs per discussion in https://github.com/Netflix/RxJava/issues/1563.", "NaN"], ["1577", "Fix the compose covariance", "Shixiong Zhu", "zsxwing", "08/14/14, 04:52:14 PM", "Changed the return type of `compose` from `Observable<? extends R>` to `Observable<R>`. The reason is that if returning `Observable<? extends R>`, the following codes won't work in Java:\n\n``` Java\n        Observable<String> o1 = Observable.from(\"s1\");\n        Observable<String> o2 = o1.compose(new Transformer<String, String>() {\n            @Override\n            public Observable<? extends String> call(Observable<? extends String> t1) {\n                return Observable.from(\"s2\");\n            }\n        });\n```\n\nwe have to write:\n\n``` Java\n        Observable<String> o1 = Observable.from(\"s1\");\n        Observable<? extends String> o2 = o1.compose(new Transformer<String, String>() {\n            @Override\n            public Observable<? extends String> call(Observable<? extends String> t1) {\n                return Observable.from(\"s2\");\n            }\n        });\n```\n\nBecause we cannot assign `Observable<? extends R>` to a `Observable<R>` variable, we should avoid to return `Observable<? extends R>`, otherwise the API will be inconvenient.", "NaN"], ["1581", "zip(Iterable) -> zipWith(Iterable)", "Ben Christensen", "benjchristensen", "08/14/14, 06:28:02 PM", "As per https://github.com/Netflix/RxJava/issues/1578", "NaN"], ["1582", "Deprecate GroupedObservable.from", "Ben Christensen", "benjchristensen", "08/14/14, 06:59:28 PM", "It was a bad solution. Use Observable.groupBy with element selector instead\n\nSee https://github.com/Netflix/RxJava/issues/1579", "NaN"], ["1583", "Redo/Repeat Backpressure", "Ben Christensen", "benjchristensen", "08/14/14, 07:57:13 PM", "Fix backpressure and memory leaks\n\nThis now works:\n\n``` java\n    public static void main(String[] args) {\n        Observable<Integer> o1 = Observable.from(1, 1).concatWith(Observable.just(-1).repeat());\n        Observable<Integer> o2 = Observable.from(2, 2, 2, 2);\n        Observable.zip(o1, o2, (a, b) -> a + b).forEach(System.out::println);\n    }\n```", "NaN"], ["1586", "RxScala: Observable.items(T*) -> Observable.just(T*)", "Joakim Bodin", "jbripley", "08/14/14, 11:00:47 PM", "NaN", "NaN"], ["1587", "RxScala: Switch mapped RxJava methods to non-deprecated versions", "Joakim Bodin", "jbripley", "08/14/14, 11:00:29 PM", "- Mark onErrorFlatMap/from(Iterable, Scheduler) as deprecated, since the RxJava versions will go away", "NaN"], ["1589", "Added doOnSubscribe() to Observable", "Danny Yuan", "g9yuayon", "08/15/14, 04:26:42 PM", "We often need to be notified when an Observable is unsubscribed, for cleaning up internal states, logging, metrics gathering, and etc. With this added method, users can save the effort of writing the similar boilerplate to register a listener for un-subscription events.", "NaN"], ["1592", "Decouple Dispose Function for Using", "Ben Christensen", "benjchristensen", "08/19/14, 03:26:21 AM", "As per discussion at https://github.com/Netflix/RxJava/issues/1466", "NaN"], ["1593", "doOnSubscribe", "Ben Christensen", "benjchristensen", "08/15/14, 07:24:47 PM", "NaN", "NaN"], ["1597", "reactivex.io: RxScala getting started examples", "Georgi Khomeriki", "flatmap13", "08/18/14, 04:07:57 PM", "This PR adds a new examples folder called `reactivex` to RxScala. The idea is to embed these examples directly from the repo in the reactivex.io website.\n\nContains (runnable) Scala versions of the examples used in [how to use](https://github.com/Netflix/RxJava/wiki/How-To-Use-RxJava). ", "NaN"], ["1598", "RxScala: Add mapping to RxJava doOnUnsubscribe", "Joakim Bodin", "jbripley", "08/18/14, 04:06:27 PM", "NaN", "NaN"], ["1599", "reuse existing methods", "Dave Moten", "davidmoten", "08/18/14, 04:07:01 PM", "This is a little cleanup of methods in Observable.java that could be reusing existing methods.", "NaN"], ["1600", "RxScala: JavaDoc fixes to not use code or link", "Joakim Bodin", "jbripley", "08/18/14, 04:06:13 PM", "NaN", "NaN"], ["1601", "RxScala: Change \"multicast\" to be consistent with RxJava", "Shixiong Zhu", "zsxwing", "08/18/14, 05:17:10 PM", "Since RxJava adds `ConnectableObservable<R> multicast(Func0<? extends Subject<? super T, ? extends R>> subjectFactory)`,  we can change `def multicast[R >: T](subject: rx.lang.scala.Subject[R])` to `def multicast[R >: T](subject: => rx.lang.scala.Subject[R])` in RxScala.\n\n/cc @headinthebox, @samuelgruetter\n/cc @benjchristensen considering this is a breaking change, please merge it before releasing 0.20 if possible.", "NaN"], ["1602", "Make retryWhen the same with the Scheduler as the retryWhen without the Scheduler", "George Campbell", "abersnaze", "08/18/14, 04:04:31 PM", "came up in #1580", "NaN"], ["1605", "RxScala: Update signatures of retryWhen/repeatWhen to match RxJava", "Joakim Bodin", "jbripley", "08/18/14, 04:33:54 PM", "NaN", "NaN"], ["1608", "Add missing window with time overload", "Dave Moten", "davidmoten", "08/19/14, 03:08:24 AM", "`Observable.window` is missing an overload, the one overload to rule them all (couldn't resist). \n\nThe missing overload is below and corresponds to the ability to customize every parameter associated with the window with time functionality.\n\n`public final Observable<Observable<T>> window(long timespan, long timeshift, TimeUnit unit, int count, Scheduler scheduler)`", "NaN"], ["1609", "RxScala: Add backpressure support", "Shixiong Zhu", "zsxwing", "08/19/14, 03:14:20 AM", "As per #1603.\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1610", "Deprecate Multicast without Factory", "Ben Christensen", "benjchristensen", "08/19/14, 03:31:00 AM", "This method is nuanced and generally causes broken behavior if the Observable is subscribed to more than once.", "NaN"], ["1611", "Deprecate Superfluous Methods with Scheduler Overload", "Ben Christensen", "benjchristensen", "08/19/14, 03:30:51 AM", "These should just use subscribeOn if scheduling is wanted.\n\nAs per https://github.com/Netflix/RxJava/issues/1580", "NaN"], ["1613", "Moving Netflix to ReactiveX", "Michael Nitschinger", "daschl", "08/19/14, 05:00:52 PM", "I fixed the README by hand and then did a replace search for Netflix/RxJava to ReactiveX/RxJava to replace github wiki and issue occurences.\n\nI did a eyeball sanity check so I hope things are good. My gut feeling says there are many more com.netflix occurences somewhere else, but it's a start to get it all back to \"normal\".", "NaN"], ["1615", "fix the usage of deprecated methods.", "George Campbell", "abersnaze", "08/19/14, 06:23:28 PM", "A completely non-breaking change to switch to using the non-deprecated versions of:\n- `using()`\n- `from()` to `just()`\n- `toBlockingObservable()` to `toBlocking()`", "NaN"], ["1621", "Deprecation Removal", "Ben Christensen", "benjchristensen", "08/21/14, 10:12:22 PM", "Removing all deprecated methods and types for 1.0 https://github.com/ReactiveX/RxJava/issues/1001", "NaN"], ["1623", "RxScala: Add more operators to match RxJava", "Shixiong Zhu", "zsxwing", "08/26/14, 04:46:56 PM", "including `window(span, shift, unit, count, scheduler)`, `cache(Int)`, `groupBy[K, V](keySelector: T => K, valueSelector: T => V)`, `compose`, `onBackpressureBuffer`, `onBackpressureDrop`, `collect` and `using`.\n\n/cc @headinthebox, @samuelgruetter", "NaN"], ["1625", "RxScala: Mark superfluous from/empty methods with scheduler parameter as...", "Joakim Bodin", "jbripley", "08/26/14, 04:46:32 PM", "... deprecated", "NaN"], ["1631", "Handle Fatal Exceptions", "Ben Christensen", "benjchristensen", "08/26/14, 04:46:18 PM", "They were being swallowed before this fix when doOn\\* operators were used.", "NaN"], ["1632", "Composite Exception - Circular Reference Handling", "Ben Christensen", "benjchristensen", "08/27/14, 03:53:05 PM", "The printStackTrace and getCause implementations have different approaches to handling circular references.\nIf on a JVM where printStackTrace is called directly, the full causal chain will always be printed. If on one such as Dalvik where getCause is invoked directly then it will cut the causal chain if it sees a duplicate.\n\nSee https://github.com/ReactiveX/RxJava/issues/1405", "NaN"], ["1635", "Optimize single BlockingObservable operations.", "Michael Nitschinger", "daschl", "08/27/14, 11:45:27 PM", "This changeset optimizes all blocking operations that just return a single\nvalue. The previous code used an iterator all the time, adding significant\nGC pressure with iterators and a backing LBQ.\n\nThe following numbers are from the added JMH tests just as a general\nmeasurement. The most boost is gained from small results and less\nGC pressure.\n\nBefore this change:\n\n```\nr.o.BlockingObservablePerf.benchFirst          1  thrpt         5  2839391.882    17771.079    ops/s\nr.o.BlockingObservablePerf.benchFirst       1000  thrpt         5  2046716.781    22884.125    ops/s\nr.o.BlockingObservablePerf.benchFirst    1000000  thrpt         5  2067456.792    15499.650    ops/s\nr.o.BlockingObservablePerf.benchLast           1  thrpt         5  2160081.041    21230.437    ops/s\nr.o.BlockingObservablePerf.benchLast        1000  thrpt         5    83270.845      871.836    ops/s\nr.o.BlockingObservablePerf.benchLast     1000000  thrpt         5      100.190        1.001    ops/s\nr.o.BlockingObservablePerf.benchSingle         1  thrpt         5  3702921.521   154008.164    ops/s\n```\n\nAfter this change:\n\n```\nr.o.BlockingObservablePerf.benchFirst          1  thrpt         5  6466732.996   191239.670    ops/s\nr.o.BlockingObservablePerf.benchFirst       1000  thrpt         5  3752276.751   135138.711    ops/s\nr.o.BlockingObservablePerf.benchFirst    1000000  thrpt         5  3840942.600    59305.202    ops/s\nr.o.BlockingObservablePerf.benchLast           1  thrpt         5  4110186.134    98795.733    ops/s\nr.o.BlockingObservablePerf.benchLast        1000  thrpt         5    84528.104     1710.853    ops/s\nr.o.BlockingObservablePerf.benchLast     1000000  thrpt         5       99.460        2.091    ops/s\nr.o.BlockingObservablePerf.benchSingle         1  thrpt         5 11897793.778   321260.803    ops/s\n```", "NaN"], ["1637", "Optimize single BlockingObservable operations", "Ben Christensen", "benjchristensen", "08/27/14, 11:37:54 PM", "Backport from 1.x to 0.20.x of #1635", "NaN"], ["1638", "Composite Exception - Circular Reference Handling", "Ben Christensen", "benjchristensen", "08/27/14, 11:50:37 PM", "Same change as https://github.com/ReactiveX/RxJava/pull/1632 against 0.20 for 1.x", "NaN"], ["1639", "doOnEach - Handle Fatal Exceptions", "Ben Christensen", "benjchristensen", "08/27/14, 11:52:47 PM", "Merging change from 0.20 into 1.x => https://github.com/ReactiveX/RxJava/pull/1631/files", "NaN"], ["1641", "RxScala: Fix infinite recursive onStart call in Subscriber", "Joakim Bodin", "jbripley", "08/30/14, 06:30:34 AM", "Without this fix, when subscribing using a `new Subscriber`, onStart would be called in an infinite loop. Giving a strack trace similar to this:\n\n```\njava.lang.StackOverflowError\n    at rx.lang.scala.SubscriberTests$$anon$1.onStart(SubscriberTests.scala:65)\n    at rx.lang.scala.Subscriber$$anon$1.onStart(Subscriber.scala:8)\n    at rx.lang.scala.Subscriber$class.onStart(Subscriber.scala:43)\n    at rx.lang.scala.SubscriberTests$$anon$1.onStart(SubscriberTests.scala:65)\n    at rx.lang.scala.Subscriber$$anon$1.onStart(Subscriber.scala:8)\n    at rx.lang.scala.Subscriber$class.onStart(Subscriber.scala:43)\n```", "NaN"], ["1644", "Nebula Build - Single Module", "Ben Christensen", "benjchristensen", "08/29/14, 09:44:52 PM", "NaN", "NaN"], ["1645", "Remove ParallelMerge", "Ben Christensen", "benjchristensen", "08/30/14, 06:17:17 AM", "Removing confusing operator before locked in stone with 1.0.0 Final", "NaN"], ["1646", "Deprecate ParallelMerge", "Ben Christensen", "benjchristensen", "08/30/14, 06:17:36 AM", "Removing in 1.0 as it is confusing and rarely useful.", "NaN"], ["1648", "Operator Scan Backpressure Fix", "Ben Christensen", "benjchristensen", "08/31/14, 06:17:46 PM", "Problem 1) The initial value was being emitted before subscription which caused issues with request/producer state, particularly if filter() was used to skip that initial value and then called request(1) before the real request had been sent.\nProblem 2) The initial value was not accounted for by the request so it was sending 1 more value than requested. It now modifies the request to account for it.\nProblem 3) Redo relied upon these nuances to work. I've fixed this by using a simpler implementation that just maintains state within a map function.", "NaN"], ["1651", "RxScala: Fix the problem that Subscriber.onStart isn't called", "Shixiong Zhu", "zsxwing", "08/31/14, 05:54:12 PM", "Just realized #1641 didn't fix the problem in `onStart`. This PR fixed it and added unit tests.\n\n/cc @jbripley, @headinthebox, @samuelgruetter", "NaN"], ["1652", "Operator Scan Backpressure Fix", "Ben Christensen", "benjchristensen", "09/01/14, 02:01:15 AM", "Problem 1) The initial value was being emitted before subscription which caused issues with request/producer state, particularly if filter() was used to skip that initial value and then called request(1) before the real request had been sent.\nProblem 2) The initial value was not accounted for by the request so it was sending 1 more value than requested. It now modifies the request to account for it.\nProblem 3) Redo relied upon these nuances to work. I've fixed this by using a simpler implementation that just maintains state within a map function.\n\nAlready merged and released in 0.20.x https://github.com/ReactiveX/RxJava/pull/1648", "NaN"], ["1656", "Make TakeUntil obey Rx serialization contract", "Shixiong Zhu", "zsxwing", "09/05/14, 10:29:34 PM", "`TakeUntil` didn't synchronize messages from different Observables.", "NaN"], ["1657", "Ignore furthur messages after entering terminate state", "Shixiong Zhu", "zsxwing", "09/05/14, 06:22:03 PM", "As per #1633", "NaN"], ["1659", "OperatorScan should check for MAX_VALUE on request", "Dave Moten", "davidmoten", "09/05/14, 06:15:52 PM", "A check for `n == Long.MAX_VALUE` is missing from the `Producer` implementation which opens up the possibility of passing through an unintended request for `Long.MAX_VALUE-1`.", "NaN"], ["1664", "StringObservable.split NPE fixes", "Dave Moten", "davidmoten", "09/04/14, 06:31:37 PM", "check for null values of leftOver in onCompleted and onError.\n\nAdded two failing unit tests that passed with fix.\n\n@benjchristensen I suppose should I make PR on RxJavaString as well? ", "NaN"], ["1665", "Fix Javadoc README link", "Logan Linn", "loganlinn", "09/04/14, 06:31:04 PM", "http://netflix.github.com/RxJava/javadoc/ gives 404. I presume this should point to http://reactivex.io/RxJava/javadoc/", "NaN"], ["1667", "Fix the bug that Switch doesn't propagate 'unsubscribe'", "Shixiong Zhu", "zsxwing", "09/05/14, 03:52:40 PM", "Found in #1666", "NaN"], ["1669", "Error Handling Unsubscribe and Terminal State", "Ben Christensen", "benjchristensen", "09/05/14, 09:35:32 PM", "This is related to work done in https://github.com/ReactiveX/RxJava/pull/1657", "NaN"], ["1672", "Merge 0.20.4 Fixes", "Ben Christensen", "benjchristensen", "09/05/14, 11:41:24 PM", "Merge fixes from 0.20.4 into 1.x", "NaN"], ["1683", "ObserveOn Error Handling", "Ben Christensen", "benjchristensen", "10/02/14, 10:29:30 PM", "Proposed solution for https://github.com/ReactiveX/RxJava/issues/1681 and https://github.com/ReactiveX/RxJava/issues/1680", "NaN"], ["1686", "Fix Rx serialization bug in takeUntil again and the concurrent issue in BufferUntilSubscriber", "Shixiong Zhu", "zsxwing", "10/02/14, 10:45:43 PM", "Sorry that #1656 is not a correct fix.", "NaN"], ["1687", "Don't allocate an empty ArrayList for each Observable.empty call", "Joakim Bodin", "jbripley", "10/01/14, 12:43:43 AM", "NaN", "NaN"], ["1695", "rewrite OnSubscribeRefCount to handle synchronous source", "Dave Moten", "davidmoten", "10/14/14, 04:55:44 PM", "Resubmitting this one having stuffed up the rebase.\n\nRewrite of `OnSubscribeRefCount` because original didn't handle synchronous source (#1688) and as far as I could see the original was fundamentally broken by this use case. Please note also includes a fix in `OperatorMulticast` where a null check was required. I've done the rewrite using locks rather than submit a lock-free version just to ensure that the approach is valid with the experts first.", "NaN"], ["1701", "Fix the compose generics", "Shixiong Zhu", "zsxwing", "10/02/14, 10:28:36 PM", "NaN", "NaN"], ["1705", "Issue #1642 Fix null-emitting combineLatest", "Eric Denman", "edenman", "10/02/14, 10:21:10 PM", "@benjchristensen ", "NaN"], ["1712", "Fixing regression in mergeDelayError", "Matt Jacobs", "mattrjacobs", "10/02/14, 10:14:28 PM", "NaN", "NaN"], ["1713", "Slightly cleaner code for onNext from buffer", "Ben Christensen", "benjchristensen", "10/02/14, 10:26:10 PM", "NaN", "NaN"], ["1714", "Merge 0.20.5 into 1.x", "Ben Christensen", "benjchristensen", "10/02/14, 10:56:16 PM", "Merge the following:\n- https://github.com/ReactiveX/RxJava/pull/1686 Fix Rx serialization bug in takeUntil again and the concurrent issue in BufferUntilSubscriber\n- https://github.com/ReactiveX/RxJava/pull/1701 Fix the compose generics\n- https://github.com/ReactiveX/RxJava/pull/1712 Fixing regression in mergeDelayError", "NaN"], ["1715", "Deprecate Parallel", "Ben Christensen", "benjchristensen", "10/02/14, 11:03:23 PM", "see https://github.com/ReactiveX/RxJava/issues/1673", "NaN"], ["1716", "Remove Observable.Parallel", "Ben Christensen", "benjchristensen", "10/02/14, 11:17:56 PM", "see https://github.com/ReactiveX/RxJava/issues/1673", "NaN"], ["1719", "Bug in the onBackpressure operators", "George Campbell", "abersnaze", "10/04/14, 04:26:02 AM", "The onBackpressure operators need to send `request(Long.MAX_VALUE)` on start.", "NaN"], ["1720", "Change repeatWhen and retryWhen signatures.", "George Campbell", "abersnaze", "10/04/14, 04:29:46 AM", "Add a shim to make it so the public api for repeatWhen and retryWhen don't expose Notification<?>\nhttps://github.com/ReactiveX/RxScala/pull/24", "NaN"], ["1721", "Bug in the onBackpressure operators", "George Campbell", "abersnaze", "10/04/14, 04:26:13 AM", "cherry pick from 1.0 #1719", "NaN"], ["1726", "Fix Merge: backpressure + scalarValueQueue don't play nicely ", "Ben Christensen", "benjchristensen", "10/06/14, 03:55:45 AM", "Manual merge of unit tests and fix by @dmgd for https://github.com/ReactiveX/RxJava/issues/1723 \n\nThank you @dmgd for debugging this as `merge` is very complicated code (unfortunately).", "NaN"], ["1727", "GroupBy/GroupByUntil Changes", "Ben Christensen", "benjchristensen", "10/06/14, 05:50:04 PM", "This is a proposed change to `groupBy` and `groupByUntil` that does the following:\n\n1) Eliminate `groupByUntil` and rolls that functionality into `groupBy`\n2) Adds support for reactive pull backpressure to `groupBy`\n3) Child `GroupedObservable`s can now be unsubscribed and they will be cleaned up and then new instances for the same key can be emitted, like `groupByUntil` worked, except that now instead of passing in a special durationSelector function, the child can be composed using `take`/`takeUntil`/etc to cause an unsubscribe.\n\nIf the previous non-obvious groupBy behavior is wanted, then instead of unsubscribing, it can be filtered to ignore all further data, which is what the old groupBy used to do when a child was unsubscribed.\n\nThe reason for these changes are:\n- Adding backpressure to `groupByUntil` was very difficult with its existing signature as the duration selector function effectively required a `GroupedObservable` being a `PublishSubject` which meant multicasting. In this specific case it may have been possible to do backpressure with the multicasting, but it would be difficult and non-obvious as generally multicasting means the stream is \"hot\" and reactive pull backpressure can't be applied.\n- The existing `groupBy` almost always confused people as to what would happen when they unsubscribed a child using `take` or `takeUntil`. It always surprised people that it meant all further data would be dropped but the key and group would not be garbage collected. Almost always on an infinite stream people determined they needed `groupByUntil`, but only after stumbling around. After speaking with @headinthebox about this briefly we had enough agreement to submit this proposal and discuss further.\n\nNow `groupBy` can behave by default as people expect with `unsubscribe` and support infinite streams, garbage collection, etc as well as backpressure.\n\nI will provide usage examples below.", "NaN"], ["1728", "ObserveOn Error Propagation", "Ben Christensen", "benjchristensen", "10/06/14, 08:26:51 PM", "onError was not being propagated if the child subscriber was backpressured (requested==0)\n\nThis fixes the second bug mentioned in https://github.com/ReactiveX/RxJava/issues/1717", "NaN"], ["1729", "CombineLatest: Request Up When Dropping Values", "Ben Christensen", "benjchristensen", "10/06/14, 08:26:59 PM", "combineLatest was not replacing requests when it dropped values during the first phase when waiting for all Observables to emit. \n\nThis fixes the first bug in https://github.com/ReactiveX/RxJava/issues/1717", "NaN"], ["1731", "Remove Unused Code", "Ben Christensen", "benjchristensen", "10/07/14, 11:04:18 PM", "Fixes https://github.com/ReactiveX/RxJava/issues/1525", "NaN"], ["1733", "Move To Proper Location", "Ben Christensen", "benjchristensen", "10/08/14, 12:03:45 AM", "Was accidentally committed in old rxjava-core src folder.", "NaN"], ["1736", "Fix TrampolineScheduler NullPointerException", "Ben Christensen", "benjchristensen", "10/10/14, 03:20:33 AM", "I tried for about 30 minutes to replicate the NPE reported in https://github.com/ReactiveX/RxJava/issues/1702 but couldn't.\nIt makes sense reading the code that an unsubscribe could trigger an NPE though so I'm fixing it as per recommendation of @DylanSale even though I can't replicate.\nI confirmed that the items are being put in the queue BEFORE the wip variable is incremented, so that concurrency seems okay.", "NaN"], ["1738", "Delay Operator with Reactive Pull Backpressure", "Ben Christensen", "benjchristensen", "10/10/14, 03:18:16 AM", "Updated the implementations to support reactive pull backpressure.\nFixes https://github.com/ReactiveX/RxJava/issues/1724", "NaN"], ["1739", "Fix Slow Non-deterministic Test", "Ben Christensen", "benjchristensen", "10/10/14, 03:18:07 AM", "Somehow I missed the Thread.sleep to force the scenario so most of the time this test would run very slow (or forever).\nI'm surprised the unit tests passed before... just random luck on thread scheduling.", "NaN"], ["1740", "longCount -> countLong", "Ben Christensen", "benjchristensen", "10/10/14, 03:23:47 AM", "Fixes https://github.com/ReactiveX/RxJava/issues/1684", "NaN"], ["1742", "EmptyObserver and TestObserver", "Ben Christensen", "benjchristensen", "10/10/14, 03:44:23 AM", "- Remove `EmptyObserver` as it was confusing compared to `Observers.empty()` (fixes #1741)\n- Make `TestObserver` not throw `OnErrorNotImplemented` if a delegate is not provided (fixes #1571)", "NaN"], ["1743", "Subject Error Handling", "Ben Christensen", "benjchristensen", "10/10/14, 04:29:43 AM", "Fixes https://github.com/ReactiveX/RxJava/issues/1685 by delaying errors that are caught until after all subscribers have a chance to receive the event.\n\nNote that this has a lot of code duplication to handle this across the Subject implementations. It may be worth abstracting this logic ... but right now I'm just doing what makes sense to fix this as the Subject abstractions are non-trivial.", "NaN"], ["1745", "SerializedSubject", "Ben Christensen", "benjchristensen", "10/10/14, 05:50:43 AM", "Proposal for a `SerializedSubject` type to simplify solution for multi-threaded emissions to a `Subject`.\n\nSee https://github.com/ReactiveX/RxJava/issues/1744", "NaN"], ["1746", "Fatal System.err Logs on Unhandled Exceptions", "Ben Christensen", "benjchristensen", "10/10/14, 05:42:10 AM", "If an exception is thrown on a thread then we can't do anything with it so will log out to System.err.\n\nFixes https://github.com/ReactiveX/RxJava/issues/1682 ScheduledAction Swallows Errors", "NaN"], ["1747", "Cleanup: final and utility classes", "David Karnok", "akarnokd", "10/10/14, 08:07:18 PM", "- Added `final` to utility classes.\n- Added private constructor to utility classes.", "NaN"], ["1749", "BufferUntilSubscriber EmptyObserver", "Ben Christensen", "benjchristensen", "10/11/14, 02:53:30 AM", "As per https://github.com/ReactiveX/RxJava/pull/1742/files#r18738531", "NaN"], ["1750", "Fix NPE when iterable is null", "Shixiong Zhu", "zsxwing", "10/13/14, 03:53:44 PM", "As per #1676, I prefer that throwing an NullPointerException in the constructor of `OnSubscribeFromIterable`. \n\nBTW, because https://github.com/ReactiveX/RxJava/blob/v1.0.0-rc.5/src/main/java/rx/internal/operators/OnSubscribeFromIterable.java#L43 does not return after `o.onCompleted();`, there is still a NPE bug here.", "NaN"], ["1751", "Removed unused imports and variables.", "David Karnok", "akarnokd", "10/13/14, 03:53:29 PM", "NaN", "NaN"], ["1752", "Added missing headers, removed unnecessary casts", "David Karnok", "akarnokd", "10/14/14, 04:40:40 PM", "NaN", "NaN"], ["1753", "Support Synchronous Source in OnSubscribeRefCount", "Ben Christensen", "benjchristensen", "10/14/14, 08:04:13 PM", "Merge of https://github.com/ReactiveX/RxJava/pull/1695 into 1.x branch.", "NaN"], ["1755", "OnSubscribeRefCount with Synchronous Support", "Ben Christensen", "benjchristensen", "10/15/14, 07:35:42 AM", "Redo of https://github.com/ReactiveX/RxJava/pull/1753 with fixes to unit tests.\n\nFixes https://github.com/ReactiveX/RxJava/issues/1688", "NaN"], ["1757", "Cleanup: added missing annotations, removed unnecesary annotations", "David Karnok", "akarnokd", "10/15/14, 03:38:45 PM", "plus fixed a few unnecessary casts I missed last time.", "NaN"], ["1761", "Issue #1642 Fix null-emitting combineLatest", "Eric Denman", "edenman", "10/16/14, 02:58:05 AM", "Same as https://github.com/ReactiveX/RxJava/pull/1705 but for the 0.20.\\* folks", "NaN"], ["1762", "Compose generics", "Vadim Spivak", "vadims", "10/18/14, 10:37:13 PM", "NaN", "NaN"], ["1763", "Combine RefCount Tests", "Ben Christensen", "benjchristensen", "10/16/14, 03:17:05 AM", "NaN", "NaN"], ["1764", "Cleanup RefCount Tests", "Ben Christensen", "benjchristensen", "10/16/14, 03:00:53 AM", "NaN", "NaN"], ["1765", "backpressure support in onErrorResumeNext* operators", "Neeraj Joshi", "neerajrj", "10/16/14, 04:44:00 AM", "set producer to allow back pressure signals to flow between parent and child", "NaN"], ["1766", "Unhandled errors go to UncaughtExceptionHandler", "Logan Johnson", "loganj", "10/16/14, 04:43:48 AM", "Rather than swallowing/logging errors, ScheduledAction now delivers them\nto the UncaughtExceptionHandler for the executing Thread. This gives\nclient applications control over the handling of errors that occur off\nof the calling Thread.", "NaN"], ["1767", "ExecutorScheduler delivers uncaught exceptions", "Logan Johnson", "loganj", "10/16/14, 05:54:38 AM", "Instead of swallowing unhandled errors, ExecutorScheduler delivers them\nto the executing thread's UncaughtExceptionHandler.\n\nThis addresses the same issue as ReactiveX/RxJava#1682, but for\nExecutorScheduler which does not used ScheduledAction.", "NaN"], ["1768", "OnErrorResume Backpressure Tests", "Ben Christensen", "benjchristensen", "10/16/14, 04:53:14 AM", "NaN", "NaN"], ["1771", "On error return backpressure", "Neeraj Joshi", "neerajrj", "10/16/14, 05:01:23 PM", "connect parent and child producers to allow backpressure signals to flow.", "NaN"], ["1775", "BlockingOperatorNextTest.testSingleSourceManyIterators fix", "David Karnok", "akarnokd", "10/18/14, 10:45:45 PM", "#1655", "NaN"], ["1776", "Observable.compose Generics", "Ben Christensen", "benjchristensen", "10/18/14, 10:37:13 PM", "Manual merge of https://github.com/ReactiveX/RxJava/pull/1762 with an extra unit test added.", "NaN"], ["1777", "Excluding things from the javadoc", "George Campbell", "abersnaze", "10/21/14, 04:47:50 PM", "For one of the sub issues in #1502.\n\nexclude rx.internal.\nexclude RxJavaErrorHandlerDefault by deleting it.", "NaN"], ["1778", "Change Transformer to Func1<Observable<T>, Observable<R>>", "Shixiong Zhu", "zsxwing", "10/20/14, 04:52:43 PM", "Less variance is better. I cannot find any bad case for this PR. Can someone help test it in Java 8 and Groovy?", "NaN"], ["1784", "Publish with Backpressure", "Ben Christensen", "benjchristensen", "10/23/14, 05:49:17 AM", "Implementation of `publish` with backpressure: https://github.com/ReactiveX/RxJava/issues/1732\n\nThis moves away from using the `multicast` operator and `PublishSubject` as per discussion in #1732 and #1779", "NaN"], ["1786", "Remove Multicast", "Ben Christensen", "benjchristensen", "10/23/14, 06:04:13 AM", "The implementation is still there as `replay` is still using it, but the public API is removed.\n\nSee https://github.com/ReactiveX/RxJava/issues/1779 for discussion.", "NaN"], ["1787", "Remove *withIndex Operators", "Ben Christensen", "benjchristensen", "10/23/14, 06:18:22 AM", "See https://github.com/ReactiveX/RxJava/issues/1782 -> Remove takeWhileWithIndex & skipWhileWithIndex", "NaN"], ["1788", "Remove PublishLast/InitialValue", "Ben Christensen", "benjchristensen", "10/24/14, 08:00:49 PM", "See https://github.com/ReactiveX/RxJava/issues/1785", "NaN"], ["1789", "GroupedObservable.from/create", "Ben Christensen", "benjchristensen", "10/23/14, 06:19:22 AM", "See https://github.com/ReactiveX/RxJava/issues/1668", "NaN"], ["1792", "Fix for #1791", "Alex Wenckus", "alexwen", "10/23/14, 09:48:29 PM", "Fixes #1791 \n\ndon't retry (subscribe) to source if child has unsubscribed.", "NaN"], ["1793", "Take/Redo Unsubscribe", "Ben Christensen", "benjchristensen", "10/23/14, 09:48:27 PM", "Do not do further work after unsubscribed.\n\nI added a fix to `take` on top of the change by @alexwen that fixes the source of the issue with `take`. It now unsubscribes before `onNext` so side-effects of `onNext` such as `request(n)` happen after `unsubscribe` and thus no further work will be scheduled.\n\nI left the changes to `OnSubscribeRedo` as they are a good safety net in case another operator has a similar issue as `take` (an easy bug to creep in) as it does no harm to `redo` to have the `isUnsubscribed` check going forward.\n\nFixes #1791.", "NaN"], ["1796", "Improve TestSubject Javadoc", "Ben Christensen", "benjchristensen", "10/24/14, 08:18:44 PM", "As per https://github.com/ReactiveX/RxJava/issues/1759", "NaN"], ["1802", "add hasObservers method to Subjects (#1772)", "Simon Basl\u00e9", "simonbasle", "10/28/14, 09:59:55 PM", "as per https://github.com/ReactiveX/RxJava/issues/1772\n\nSerializedSubject now keeps track of the actual Subject.\nBufferUntilSubscriber synchronizes on the state guard.", "NaN"], ["1803", "Print full classname (inner class support) and fix enum output", "Eric Denman", "edenman", "10/28/14, 04:42:43 PM", "@benjchristensen \n\n`Class.getSimpleName()` is empty for inner classes, leading to an error message that looks like this: \"OnError while emitting onNext value: .class\"\n\nAlso, `Enum.name()` is always safe and not expensive so we can use that when there's a failure emitting an enum value.", "NaN"], ["1806", "Remove Unnecessary Utilities", "Ben Christensen", "benjchristensen", "10/29/14, 08:09:49 PM", "Remove utility methods and classes as per https://github.com/ReactiveX/RxJava/issues/1799 and https://github.com/ReactiveX/RxJava/issues/1798", "NaN"], ["1808", "Fix the RxClojure project link.", "Jon Parise", "jparise", "10/29/14, 05:09:16 PM", "NaN", "NaN"], ["1809", "Remove Utility Functions from Public API", "Ben Christensen", "benjchristensen", "10/30/14, 02:25:17 AM", "Fixes https://github.com/ReactiveX/RxJava/issues/1797", "NaN"], ["1813", "Fix issue #1812 that zip may swallow requests", "Shixiong Zhu", "zsxwing", "10/31/14, 07:28:49 PM", "Fixed #1812", "NaN"], ["1817", "Fix Synchronous OnSubscribe Exception Skips Operators", "Ben Christensen", "benjchristensen", "11/02/14, 04:08:05 AM", "Fixes https://github.com/ReactiveX/RxJava/issues/1816", "NaN"], ["1819", "Fix Concat Breaks with Double onCompleted", "Ben Christensen", "benjchristensen", "11/02/14, 06:50:12 AM", "Fixes https://github.com/ReactiveX/RxJava/issues/1818", "NaN"], ["1827", "CacheThreadScheduler Evictor should Check Removal", "Alex Wenckus", "alexwen", "11/06/14, 07:05:16 AM", "Before unsubscribing the worker, the Evictor should check that it actually removed the worker from the queue.\n\nFIxes #1826 ", "NaN"], ["1829", "Fix Window by Count Unsubscribe Behavior", "Ben Christensen", "benjchristensen", "11/06/14, 06:07:05 AM", "This fixes https://github.com/ReactiveX/RxJava/issues/1546 where unsubscribes would occur prematurely for non-overlapping `window(size)` and would not unsubscribe at all for overlapping `window(size, skip)`.\n\nIt also reorganizes the `window` unit tests which were all combined in one file when the implementations are split across 4 files. This is now easier to understand and use.", "NaN"], ["1830", "Fix mergeDelayError Handling of Error in Parent Observable", "Ben Christensen", "benjchristensen", "11/06/14, 06:37:38 AM", "Fixes https://github.com/ReactiveX/RxJava/issues/313", "NaN"], ["1832", "Fix Take Early Unsubscription Causing Interrupts", "Ben Christensen", "benjchristensen", "11/08/14, 10:29:14 PM", "Fixes https://github.com/ReactiveX/RxJava/issues/1804\n\nThis is one approach to fixing #1804 that still works with the unit tests that `take` had been changed for originally.\n\nStill not sure if we should change the default behavior though to not interrupt a thread.", "NaN"], ["1833", "Fix Thread Safety for Unsubscribe of Window", "Ben Christensen", "benjchristensen", "11/08/14, 03:23:21 AM", "I'm using a separate variable so the volatile is only touching during window start/end and unsubscribe rather than every onNext.", "NaN"], ["1834", "Subject.toSerialized", "Ben Christensen", "benjchristensen", "11/09/14, 12:03:49 AM", "Adds toSerialized as discussed in https://github.com/ReactiveX/RxJava/issues/1748", "NaN"], ["1835", "Scan/Reduce with Seed Factory", "Ben Christensen", "benjchristensen", "11/08/14, 10:28:31 PM", "Adds overload with seed factory as per https://github.com/ReactiveX/RxJava/issues/1831", "NaN"], ["1836", "Reduce Ring Buffer Default Sizes (and lower for Android)", "Ben Christensen", "benjchristensen", "11/08/14, 10:27:47 PM", "- This adds platform dependent checks to lower the buffer sizes on Android to use less memory. It also reduces the normal defaults as perf testing showed we didn't need to be as high.\n- This adds System properties for overriding the defaults, `rx.ring-buffer.size` and `rx.indexed-ring-buffer.size`\n\nFixes https://github.com/ReactiveX/RxJava/issues/1820", "NaN"], ["1840", "Unsubscribe when thread is interrupted", "Roman Mazur", "roman-mazur", "01/21/15, 03:18:03 PM", "Originated from discussion #1804.\n\nI was considering to make it opt-in, but it would drastically increase number of methods in public API.\nWhat do you think?", "NaN"], ["1863", "Fix Concat Breaks with Double onCompleted", "George Campbell", "abersnaze", "11/11/14, 07:11:57 PM", "Fixes https://github.com/ReactiveX/RxJava/issues/1818 in the 0.20.x branch", "NaN"], ["1866", "Fix memory leak in bounded ReplaySubject due to retaining the node index", "David Karnok", "akarnokd", "11/15/14, 07:58:37 PM", "indefinitely once the Subscriber caught up.\n\nFor issue #1865.", "NaN"], ["1882", "Remove Unused Scheduler.parallelism", "Ben Christensen", "benjchristensen", "11/15/14, 02:06:41 PM", "Before hitting 1.0 removing this API as it is not used.", "NaN"], ["1884", "Fix Scan/Reduce/Collect Factory Ambiguity", "Ben Christensen", "benjchristensen", "11/15/14, 07:48:57 PM", "This puts the seed factory on `collect` and removes it from `scan` and `reduce` due to ambiguity.\nSee https://github.com/ReactiveX/RxJava/pull/1883 and https://github.com/ReactiveX/RxJava/issues/1881\n\nThe `collect` API was already very close so this fixes it to use a seed factory so the signature is now:\n\n``` java\npublic final <R> Observable<R> collect(Func0<R> stateFactory, final Action2<R, ? super T> collector) {\n```\n\nI remove the factory overloads for `scan` and `reduce` due to the issue in #1881 related to generics, type erasure and lambdas causing ambiguity and compilation failures.\n\nWe may want to add at least a `scan` impl in the future with a seed factory, but it will need a different name if we do such as `scanTo`. I don't want to do that now for 1.0 so we'll need to revisit that for 1.1 with more time to think about it.", "NaN"], ["1886", "Buffer with time and merge fix", "David Karnok", "akarnokd", "11/17/14, 05:48:54 PM", "Bug report #1867.\n\nI'm not sure if the wrong guard in merge contributed to this bug or not.", "NaN"], ["1893", "Fixed incorrect error merging.", "David Karnok", "akarnokd", "11/21/14, 12:19:20 PM", "The `wip` was decremented if the parent received an onError which prevented legitimate inner subscribers from delivering events.", "NaN"], ["1898", "Scheduled action no interrupt", "David Karnok", "akarnokd", "11/29/14, 08:05:06 PM", "At the end of the run, ScheduledAction unsubscribes itself which triggers a set of cleanup actions, and since it is also the way to cancel a running action, it calls future.cancel(true) as well which interrupts the task in the underlying executor framework. However, on a normal completion path, it is unnecessary to interrupt itself at the end of the run since it will complete anyway, and not to mention, it has some performance implications for short running tasks. The downside is the +4 bytes per ScheduledAction.", "NaN"], ["1901", "Fixed redo & groupBy backpressure management", "David Karnok", "akarnokd", "11/29/14, 05:06:48 AM", "Issue #1900 ", "NaN"], ["1903", "Fix TestScheduler Handling of Immediate vs Virtual Time", "Ben Christensen", "benjchristensen", "11/29/14, 05:51:17 AM", "Manual merge of https://github.com/ReactiveX/RxJava/pull/1790 by @ylecaillez", "NaN"], ["1904", "Fix the bug that Scan may request 0 when n is 1", "Shixiong Zhu", "zsxwing", "11/29/14, 09:20:02 PM", "`Scan` may request 0 when n is 1 and `request(0)` makes the source `Observable` do nothing. The unit test demonstrates this bug.", "NaN"], ["1905", "Beta & Experimental Annotations", "Ben Christensen", "benjchristensen", "11/29/14, 09:44:49 PM", "See https://github.com/ReactiveX/RxJava/issues/1824", "NaN"], ["1907", "Experimental: onBackpressureBlock", "Ben Christensen", "benjchristensen", "12/01/14, 11:42:22 PM", "An experimental implementation of `onBackpressureBlock`.\n\nAn open question is whether this should be allowed to block if running on a known eventloop such as `Schedulers.computation()` or should instead emit an error in that situation. ", "NaN"], ["1911", "Atomic operations JMH benchmarks", "David Karnok", "akarnokd", "12/01/14, 06:00:29 PM", "Created some JMH benchmarks for the typical volatile and atomic operations.", "NaN"], ["1912", "Fixed retry without backpressure & test function to support bp.", "David Karnok", "akarnokd", "12/01/14, 11:41:32 PM", "Fixes include:\n- do not decrement the client capacity if it is unbounded,\n- do not request 0,\n- propagate request count (n) instead of capacity + request (c + n),\n- FuncWithErrors to support backpressure; there was a non-zero chance the final succeding pair of onNexts would trigger a MissingBackpressureException.", "NaN"], ["1916", "Experimental onBackpressureBufferWithCapacity", "Ben Christensen", "benjchristensen", "12/02/14, 05:59:39 AM", "Manual merge of https://github.com/ReactiveX/RxJava/pull/1899\n- changed Func0<Void> to Action\n- added Beta markers", "NaN"], ["1918", "Revert \"Experimental onBackpressureBufferWithCapacity\"", "Ben Christensen", "benjchristensen", "12/02/14, 06:22:46 AM", "Reverts ReactiveX/RxJava#1916\n\nThis breaks unit tests all over for some reason. I completely missed it before merging as the unit tests related to `onBackpressureBuffer` themselves pass. It's elsewhere that things break. \n\nFrom what I can tell it is because `onBackpressureBuffer` is used in unit tests and those fail (often with timeouts or what appears to be infinite loops ... since my CPU pegs itself).", "NaN"], ["1922", "Set removeOnCancelPolicy on the threadpool if supported", "David Karnok", "akarnokd", "12/09/14, 04:02:28 AM", "This should solve the task retention problem of unused timeout tasks mentioned in #1919.\n\nI know Java 7+ ScheduledThreadPoolExecutor has the `setRemoveOnCancelPolicy` and I remember seeing it in Android although I can't tell from which API version.\n\nIn Java 6, this can't be solved without rewriting the entire scheduler or using a backported executor.", "NaN"], ["1926", "Move the codes out of the finally block", "Shixiong Zhu", "zsxwing", "12/09/14, 04:03:15 AM", "Found there were complex codes in the `finally` block. It's a bad practice because:\n- The `return` statement in the `finally` block will swallow the exception.\n- The codes in the finally block will continue to run even if any exception happens in the `try` block. If the `finally` block contains complex codes, they may continue to run for long time or throw an exception which will override the initial one. It will make us hard to debug and find the real problem.\n\nTherefore I moved them out of the `finally` block in this PR.", "NaN"], ["1928", "Add onBackpressureBuffer with capacity", "Galo Navarro", "srvaroa", "12/09/14, 04:04:45 AM", "The operator takes an optional capacity for the buffer and a callback\nthat will be invoked if the buffer fills up, along with a\nMissingBackpressureException in the Observable's onError.", "NaN"], ["1937", "Scheduler.Worker to be finally unsubscribed to avoid interference", "David Karnok", "akarnokd", "12/09/14, 04:23:34 AM", "... and leaks.", "NaN"], ["1938", "Any/All should not unsubscribe downstream.", "David Karnok", "akarnokd", "12/13/14, 06:53:11 PM", "Should fix issue #1935 \n\nWhen in doubt, see `take`.", "NaN"], ["1946", "AbstractOnSubscribe to help build Observables one onNext at a time.", "David Karnok", "akarnokd", "12/09/14, 05:26:28 PM", "Repost of #1931.", "NaN"], ["1947", "Fixed first emission racing with pre and post subscription.", "David Karnok", "akarnokd", "12/12/14, 03:32:45 AM", "There was a subtle race between the subscription and emission which delayed the delivery of the first emission if it happened between the pre- and post-subscription of a subscriber. The fix is the same logic used by the BehaviorSubject to avoid the same problem.", "NaN"], ["1950", "Add \"Subscriptions.unsubscribed\" to fix the 'isUnsubscribed' issue", "Shixiong Zhu", "zsxwing", "12/13/14, 06:59:18 PM", "As per #1943", "NaN"], ["1951", "Remove extraneous request(n) and onCompleted() calls when unsubscribed.", "George Campbell", "abersnaze", "12/12/14, 03:39:13 AM", "Added simple checks to make the best effort to not do anything after the down stream has unsubscribed.", "NaN"], ["1952", "Remove ActionSubscription", "Shixiong Zhu", "zsxwing", "12/12/14, 03:39:44 AM", "After adding `isUnsubscribed`, `BooleanSubscription` and `ActionSubscription` have the same behavior. So we can remove `ActionSubscription` to eliminate duplicate codes.", "NaN"], ["1953", "Fixed timer cast-to-int crash causing incorrect benchmark.", "David Karnok", "akarnokd", "12/12/14, 03:41:47 AM", "The perf benchmark uses a 1 millisecond timer to interfere with the serializing process. However, the original benchmark used `cast(Integer.class)` which just simply throws an error on a long value thus terminating the whole serialization process almost immediately. What gets measured is how fast can the whole process restarted to fail again.\n\nWith the fix, I get the following numbers:\n\n```\nBenchmark                                        (size)         Score  Score error\nr.o.OSP.noSerializationSingleThreaded                 1  15632242,955   576291,356\nr.o.OSP.noSerializationSingleThreaded              1000    143971,769     1129,048\nr.o.OSP.noSerializationSingleThreaded           1000000       153,444        8,286\nr.o.OSP.serializedSingleStream                        1   7249531,621   140827,908\nr.o.OSP.serializedSingleStream                     1000     52595,958     1845,084\nr.o.OSP.serializedSingleStream                  1000000        53,001        1,155\nr.o.OSP.serializedTwoStreamsHighlyContended           1    143335,868     3643,346\nr.o.OSP.serializedTwoStreamsHighlyContended        1000      3453,108       22,826\nr.o.OSP.serializedTwoStreamsHighlyContended     1000000         3,113        0,127\nr.o.OSP.serializedTwoStreamsOneFastOneSlow            1     99417,300     5162,370\nr.o.OSP.serializedTwoStreamsOneFastOneSlow         1000     14857,037     7131,489\nr.o.OSP.serializedTwoStreamsSlightlyContended         1     82621,317     1977,208\nr.o.OSP.serializedTwoStreamsSlightlyContended      1000         1,007        0,026\n```\n\nClearly, the serializedTwoStreamsSlightlyContended() shows that under a second, you can serialize two 1 millisecond sources.\n\nFor comparison with my latest endeavors, the custom WriterReaderPhaser + AtomicResizableArray + Fast-path queue drain with front check produces the following values:\n(Mode: thrpt, Samples: 5)\n\n```\nr.o.OSP.serializedSingleStream                        1   4702012,445    65485,925    64.86%\nr.o.OSP.serializedSingleStream                     1000     43189,631     1508,771    82.12%\nr.o.OSP.serializedSingleStream                  1000000        42,384        1,531    79.97%\nr.o.OSP.serializedTwoStreamsHighlyContended           1    138302,278     3530,496    96.45%\nr.o.OSP.serializedTwoStreamsHighlyContended        1000      3085,205      118,029    89.34%\nr.o.OSP.serializedTwoStreamsHighlyContended     1000000         3,284        0,555   105.49%\nr.o.OSP.serializedTwoStreamsOneFastOneSlow            1    100760,210     6614,699   101.35%\nr.o.OSP.serializedTwoStreamsOneFastOneSlow         1000      1464,140     1015,858     9.85%\nr.o.OSP.serializedTwoStreamsSlightlyContended         1     82823,995      835,143   102.44%\nr.o.OSP.serializedTwoStreamsSlightlyContended      1000         1,002        0,014\n```\n\nA specialized two-way only striped custom WriterReaderPhaser produces these:\n\n```\nr.o.OSP2.serializedSingleStream                        1  4551488,444   776149,420\nr.o.OSP2.serializedSingleStream                     1000    14567,954      246,157\nr.o.OSP2.serializedSingleStream                  1000000       14,358        0,574\nr.o.OSP2.serializedTwoStreamsHighlyContended           1   165429,534     1245,682\nr.o.OSP2.serializedTwoStreamsHighlyContended        1000     3383,878       62,534\nr.o.OSP2.serializedTwoStreamsHighlyContended     1000000        3,459        0,759\nr.o.OSP2.serializedTwoStreamsOneFastOneSlow            1   105104,317     1247,636\nr.o.OSP2.serializedTwoStreamsOneFastOneSlow         1000      265,691       90,654\nr.o.OSP2.serializedTwoStreamsSlightlyContended         1    82814,850     1824,645\nr.o.OSP2.serializedTwoStreamsSlightlyContended      1000        1,002        0,014\n```\n\nI'm not quite sure why `serializedTwoStreamsOneFastOneSlow` is so low in my versions. My guess is that since they are lock-free, the timer's thread ends up shoveling the events more frequently than in the synchronized case (because it can sleep).", "NaN"], ["1955", "OnBackpressureXXX: support for common drain manager & fix for former concurrency bugs", "David Karnok", "akarnokd", "02/03/15, 09:00:35 AM", "This is quite a complex operator with lots of cases.\n\nProperties:\n1) If there aren't any elements queued up and nothing is requested but terminal event received, emit terminal event and quit.\n2) If there are elements in the queue and a terminal flag, and at least the same amount is requested, deliver the events and the terminal event.\n3) If more was requested and more became available just after the loop and before the synchronized block, keep looping.\n3.a) If more was requested but nothing is available or nothing was requested and something is available: quit and let either the onNext or request do the subsequent drain.\n3.b) If elements and termination was produced but not requested: quit and let the request do the drain\n3.c) If termination was requested and no elements produced: loop , emit terminal event and quit.\n\nIn table form:\n\n```\nAvailable | Terminated | Requested | Action | Reason\n   yes         yes          yes       loop    can deliver available\n   yes         yes          false     quit    can't deliver available\n   yes         no           yes       loop    can deliver available\n   yes         no           no        quit    can't deliver available\n   no          yes          yes       loop    loop will deliver termination only and quit\n   no          yes          no        loop    loop will deliver termination only and quit\n   no          no           yes       quit    nothing to deliver\n   no          no           no        quit    nothing to deliver\n```", "NaN"], ["1957", "Fix 'request(0)' issue in Scan", "Shixiong Zhu", "zsxwing", "12/13/14, 07:03:25 PM", "#1904 didn't all cases.", "NaN"], ["1960", "doOnRequest", "Ben Christensen", "benjchristensen", "12/12/14, 07:00:06 AM", "Similar to doOnSubscribe, doOnNext, etc", "NaN"], ["1961", "Remove Request Batching in Merge", "Ben Christensen", "benjchristensen", "12/13/14, 06:18:16 PM", "Removing the batching until we can find a correct way to do it as per discussion at https://github.com/ReactiveX/RxJava/issues/1941#issuecomment-66734495\n\nThe performance impact of this change is seen here:\n\n```\nBenchmark                                          (size)   Mode   Samples          1.x    No Request Batching\nr.o.OperatorMergePerf.merge1SyncStreamOfN               1  thrpt         5  4585554.607    4666745.314 102%\nr.o.OperatorMergePerf.merge1SyncStreamOfN            1000  thrpt         5    51273.033      39922.246 78%\nr.o.OperatorMergePerf.merge1SyncStreamOfN         1000000  thrpt         5       47.515         37.634 79%\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN             1  thrpt         5    90901.735      93454.726 103%\nr.o.OperatorMergePerf.mergeNAsyncStreamsOfN          1000  thrpt         5        5.407          4.910 91%\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1              1  thrpt         5  4181618.767    4173322.551 100%\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1            100  thrpt         5   422193.599     408972.130 97%\nr.o.OperatorMergePerf.mergeNSyncStreamsOf1           1000  thrpt         5    36886.812      36448.978 99%\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN              1  thrpt         5  4815945.720    4887943.643 101%\nr.o.OperatorMergePerf.mergeNSyncStreamsOfN           1000  thrpt         5       43.926         39.027 89%\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN           1  thrpt         5    72578.046      70412.656 97%\nr.o.OperatorMergePerf.mergeTwoAsyncStreamsOfN        1000  thrpt         5     3260.024       3064.403 94%\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1         1  thrpt         5  4678858.201    4808504.588 103%\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1      1000  thrpt         5    34407.547      36364.476 106%\nr.o.OperatorMergePerf.oneStreamOfNthatMergesIn1   1000000  thrpt         5       31.312         32.261 103%\n```", "NaN"], ["1964", "Handle 0 or negative request in Buffer", "Shixiong Zhu", "zsxwing", "12/13/14, 07:03:43 PM", "If n == 0, buffer may emit a negative request.", "NaN"], ["1965", "Fix the issue that Sample doesn't call 'unsubscribe'", "Shixiong Zhu", "zsxwing", "12/15/14, 04:02:04 AM", "Fix #1958", "NaN"], ["1966", "Fix NPE when the key is null in GroupBy", "Shixiong Zhu", "zsxwing", "12/13/14, 07:04:44 PM", "Fix the issue that when the key is null, groupby will throw NPE.", "NaN"], ["1967", "Fix the issue that GroupBy may not call 'unsubscribe'", "Shixiong Zhu", "zsxwing", "12/17/14, 08:55:27 PM", "NaN", "NaN"], ["1968", "Upgrade to Gradle 2.2", "Justin Ryan", "quidryan", "12/13/14, 06:22:57 PM", "NaN", "NaN"], ["1973", "Fixed test issuing non-serialized messages to the subject.", "David Karnok", "akarnokd", "12/16/14, 04:26:34 AM", "Should resolve the test failure of #1972 .\n\nWhen the main part of the test succeded, an onCompleted was sent out from the main thread which was not serialized in respect to the onNext(1) issued from the worker thread, therefore, two replay was attempted sometimes. At first the caughtUp was seen false, the replay was entered but the next instruction cleared the index causing the IllegalStateException.", "NaN"], ["2052", "OperatorDoOnRequest.ParentSubscriber should be static class", "Dave Moten", "davidmoten", "12/24/14, 04:54:16 AM", "minor fix this. `OperatorDoOnRequest.ParentSubscriber` does not require access to the state or methods of its surrounding class thus can be static.", "NaN"], ["2053", "Fixed wrong bounded ReplaySubject use in test.", "David Karnok", "akarnokd", "12/18/14, 10:16:26 PM", "Same issue as before.", "NaN"], ["2091", "Added Operator switchIfEmpty", "Alex Wenckus", "alexwen", "02/03/15, 08:48:13 AM", "Like defaultIfEmpty but subscribes to and emits the items in an Observable if the source is empty.\n\nFixes #1878 ", "NaN"], ["2156", "Fix the issue that map may swallow fatal exceptions", "Shixiong Zhu", "zsxwing", "12/24/14, 04:53:30 AM", "The issue was reported by @mofleury in https://github.com/ReactiveX/RxJava/pull/1367#issuecomment-67783532", "NaN"], ["2237", "Make Publish Operator Release RingBuffer", "Ben Christensen", "benjchristensen", "12/24/14, 05:30:28 AM", "It was retaining the RxRingBuffer reference between subscribes which meant it was never released to the object pool.\n\nAs per discussion in #2189 there are other issues in the `OperatorPublish` implementation but those will be fixed later. This PR is just for fixing the issue related to use of RxRingBuffer. ", "NaN"], ["2238", "Fix the bug that cache doesn't unsubscribe the source Observable when th...", "Shixiong Zhu", "zsxwing", "01/21/15, 02:29:47 PM", "...e source is terminated\n\nFix #2191 ", "NaN"], ["2244", "OperatorTakeLast add check for isUnsubscribed to fast path", "Dave Moten", "davidmoten", "01/19/15, 06:43:31 AM", "Went looking for a bug that wasn't a bug but found this anyway.  `OperatorTakeLast` doesn't check `subscriber.isUnsubscribed()` while emitting its queued events so I added a failing unit test and the fix.", "NaN"], ["2332", "Operator retry test fix attempt", "David Karnok", "akarnokd", "01/19/15, 06:17:43 AM", "Maybe the error function was not emitting events properly.", "NaN"], ["2335", "A set of stateless operators that don't need to be instantiated", "David Karnok", "akarnokd", "01/21/15, 12:00:33 PM", "for `lift()` all the time.", "NaN"], ["2447", "Fail early if a null subscription is added to a CompositeSubscription.", "Jason Neufeld", "jnlopar", "01/21/15, 12:20:00 PM", "Otherwise, it'll just fail late when unsubscribing, which is much harder to trace.\n\nI discovered this while writing  a unit test, when I didn't properly mock out a method to return a valid Observable. Seems like it would be more likely to happen in test code than production, but still could be a stumbling block that's hard to track down if there's a bug in app logic adding a null subscription.", "NaN"], ["2455", "Fix for #2191 - OperatorMulticast fails to unsubscribe from source", null, "duncani", "01/21/15, 10:53:00 AM", "OperatorMulticast fails to unsubscribe from source. #2191 ", "NaN"], ["2465", "ScheduledExecutorService: call purge periodically on JDK 6 to avoid", "David Karnok", "akarnokd", "01/28/15, 08:42:11 AM", "cancelled task-retention.\n\nFirst debated in #1922, see also #1919.\n\nWe may want to discuss the naming of system parameters. I chose these so RxJava 2.0 specific properties may be trivially separated:\n\n`io.reactivex.rxjava.scheduler.jdk6.purge-frequency-millis`\nSpecifies the purge frequency in milliseconds. Default is 1000.\n\n`io.reactivex.rxjava.scheduler.jdk6.purge-force`\nForces the use of the purge (if set to true) even if the setRemoveOnCancelPolicy is supported. The benefit is that removing cancelled tasks now runs on a different thread so the main pool thread doesn't waste time on them. The drawback is the retention window can be still to large.\n\nDo we have a wiki page where such parameters are listed?", "NaN"], ["2469", "Remove the execute permission from source files", "Shixiong Zhu", "zsxwing", "01/20/15, 02:30:28 PM", "NaN", "NaN"], ["2470", "Subject state information methods & bounded ReplaySubject termination", "David Karnok", "akarnokd", "01/28/15, 02:47:54 PM", "fix.\n\nThis PR aims to support the requests in #2331 and #1897 by adding methods to the (final) subject classes that let developers access in-flight state in a snapshot fashion. \n\nThis may be considered safe API change because all subject classes were final already so adding extra methods won't break anyone's code (and we will be careful with our Observable in the future).\n- `NotificationLite` is now extended with two missing value checks: isNull and isNext.\n- Each subject has `hasCompleted`, `hasThrowable` and `getThrowable` methods, however, I can't add them to `Subject` because that would be an incompatible API change.\n- Where applicable, `getValue` and `getThrowable` return `null` instead of throwing exceptions so users are encouraged to call hasXXX methods beforehand.\n- There was a chaining bug in the bounded ReplaySubject: because the terminal value was added after a potential pruning, the node links could get broken and concurrent replays might not have seen the terminal value.\n- Since `ReplaySubject` can have multiple values, I've added `size()`, `hasAnyValue()` (isEmpty is taken) and `getValues()` methods to make a snapshot of the current buffer contents whether or not the `ReplaySubject` has terminated (the usual toList() would wait until the subject has terminated). \n- The unrelated `OperatorMergeTest.testConcurrency` hangs for me for some reason without activity (either a buffer bug or a merge bug is in play there). I've added a timeout so it doesn't stop the other tests.", "NaN"], ["2471", "Fixes NPEs reported in ReactiveX#1702 by synchronizing queue.", "Jason Neufeld", "jnlopar", "01/23/15, 05:43:38 PM", "Also adds a unit test for regression.\n\nIt appears there is a potential race condition if something adds to/removes from the PQ while it's _inside_ the 'poll' operation, which is where the exceptions in #1702 seem to have actually come from. Therefore, the initial null check didn't really address the original problem. The test here seems to reliably recreate those conditions.\n\nI considered using a PriorityBlockingQueue instead of synchronized, but since the isEmpty and poll calls should not allow something to interleave between them and access the queue, a synchronized block seemed wiser here.", "NaN"], ["2474", "MergeTest.testConcurrency timeout to let other tests run", "David Karnok", "akarnokd", "01/21/15, 11:53:53 AM", "NaN", "NaN"], ["2475", "SynchronousQueue.clone fix", "David Karnok", "akarnokd", "01/21/15, 12:20:30 PM", "Fixes #1756.", "NaN"], ["2476", "Fixed off-by-one error and value-drop in the window operator.", "David Karnok", "akarnokd", "01/21/15, 02:08:20 PM", "Fixes #2290.", "NaN"], ["2477", "Backpressure tests fix0121", "David Karnok", "akarnokd", "01/21/15, 02:02:56 PM", "- Increased the limits of `testMergeAsyncThenObserveOn`\n- Fixed `testOnBackpressureDrop` because in case there was no drop at all, the last value would be NUM - 1.\n- Changed `SLOW_PASS_THRU` to perform non-trivial work that can't be optimized away by JIT.", "NaN"], ["2478", "RefCountAsync: adjusted time values as 1 ms is unreliable", "David Karnok", "akarnokd", "01/21/15, 02:28:58 PM", "Because of the 1 ms interval, it is possible a single source value might get emitted but not reach the output.", "NaN"], ["2482", "Merge: fixed hangs & missed scalar emissions", "David Karnok", "akarnokd", "01/28/15, 07:33:46 AM", "I think I hunted down the bug that was causing missed value emission if scalar source such as `just()` was involved. This either manifested as completion without a value or non-completion because the missing scalar value would sit in the queue and prevented onCompleted from draining. (I've also fixed some visibility issues which might had an effect in this.)\n\nIn addition, I've discovered a good practice for spuriously failing tests: I create a new `@Test`method with a loop in it, calling the original test method. This way, the original is not disturbed and the likelihood of failure is increased by the looping test.\n\nSince the whole `merge`operator is quite complicated, I can't be 100% certain this works despite local tests passing.\n\nSee also #2480, #2466 and #1941.", "NaN"], ["2493", "Operator TakeUntil with predicate", "David Karnok", "akarnokd", "02/04/15, 05:47:21 AM", "Take values and check the condition after the value is emitted.\n\nFor enhancement request #1649.", "NaN"], ["2540", "Merge with max concurrency now supports backpressure.", "David Karnok", "akarnokd", "01/29/15, 09:59:44 AM", "See #2291", "NaN"], ["2543", "OperatorMerge handle request overflow", "Dave Moten", "davidmoten", "01/28/15, 10:30:51 AM", "Calling \n\n``` java\nrequest(2);\nrequest(Long.MAX_VALUE-1);\n```\n\nhangs `OperatorMerge` because the internal requested count overflows and becomes negative. \n\nThis PR adds fix and unit test.\n\nI imagine this will be in other operators as well. I'll have a hunt around.", "NaN"], ["2547", "Warnings cleanup", "Dave Moten", "davidmoten", "01/28/15, 08:03:21 AM", "more cleanup:\n- removed unnecessary imports\n- added missing generic types\n- added SuppressWarning annotations ", "NaN"], ["2548", "Subscriber.request should throw exception if negative request made", "Dave Moten", "davidmoten", "01/28/15, 11:00:57 AM", "As per discussion in #1956 and #2545, making a call to `Subscriber.request(n)` with negative n should throw an `IllegalArgumentException`.\n\nIncludes unit test.", "NaN"], ["2550", "Subscriber.onStart requests should be additive (and check for overflow)", "Dave Moten", "davidmoten", "01/28/15, 12:21:35 PM", "As per discussion in #2544.", "NaN"], ["2552", "Publish: fixed incorrect subscriber requested accounting", "David Karnok", "akarnokd", "01/31/15, 04:53:15 PM", "Reported in a [rxjava group](https://groups.google.com/forum/#!topic/rxjava/iOA_wl-fReI) post.\n\nThe shared emissioncounter subtracted from all subscribers accounting made late coming subscribers appear to have received the same amount of events.", "NaN"], ["2553", "RxRingBuffer with synchronization", "David Karnok", "akarnokd", "01/28/15, 08:27:38 PM", "Changed RxRingBuffer to use synchronized blocks for correctness. We are relying here upon biased locking and lock-elision. It gets pretty close to the baseline\n\nBenchmark:\n\n```\nBenchmark              (size)        1.x   |    PR#2333  |    this   \n1SyncStreamOfN              1  3779678,748 | 3767936,028 | 3775157,195\n1SyncStreamOfN           1000    21250,675 |   18530,542 |   20759,900\n1SyncStreamOfN        1000000       20,406 |      17,712 |      19,768\nNAsyncStreamsOfN            1   115390,116 |  115629,480 |  113859,532\nNAsyncStreamsOfN         1000        2,579 |       2,546 |       2,435\nNSyncStreamsOf1             1  3543551,254 | 3602242,709 | 3539162,675\nNSyncStreamsOf1           100   299166,910 |  301703,721 |  302642,458\nNSyncStreamsOf1          1000    28404,751 |   28420,833 |   28030,881\nNSyncStreamsOfN             1  4054571,577 | 4003156,953 | 4061124,105\nNSyncStreamsOfN          1000       24,324 |      20,601 |      23,137\nTwoAsyncStreamsOfN          1    85846,727 |   85682,983 |   86691,331\nTwoAsyncStreamsOfN       1000     1823,137 |    1889,458 |    1761,977\nreamOfNthatMergesIn1        1  3724179,351 | 3725068,220 | 3715637,985\nreamOfNthatMergesIn1     1000    19051,928 |   19392,595 |   19487,059\nreamOfNthatMergesIn1  1000000       18,265 |      18,069 |      18,102\n```\n\nChanges (in respect of 1.x):\n- using SpscArrayQueue, removed look-ahead and null check\n- using peek to check for emptyness in certain positions\n- using short-as-possible synchronization blocks", "NaN"], ["2559", "OnSubscribeFromIterable - add request overflow check ", "Dave Moten", "davidmoten", "01/30/15, 11:14:47 AM", "A subscriber like so provokes a hang from `OnSubscribeFromIterable` due to overflow to negative of requested field:\n\n``` java\n    @Override\n    public void onStart() {\n        request(2);\n    }\n\n    @Override\n    public void onNext(Integer t) {\n        request(Long.MAX_VALUE-1);\n    }\n```\n\nI've moved the `getAndAddRequest` method that does the overflow check to a new `rx.internal.operators.Util` class that is also now used by the request overflow check in `OperatorMerge`.\n\nOf course there are plenty more of these to be done. I propose to do them bit by bit.", "NaN"], ["2561", "Updating queue code from JCTools", "David Karnok", "akarnokd", "01/31/15, 04:39:10 PM", "Rebased onto master.", "NaN"], ["2563", "Retry backpressure test: split error conditions into separate test lines.", "David Karnok", "akarnokd", "01/30/15, 09:43:28 AM", "To discover the actual problem for issue #2560.", "NaN"], ["2565", "Obstruction detection in tests.", "David Karnok", "akarnokd", "01/30/15, 09:39:01 AM", "To make sure tests don't hang the computation scheduler.", "NaN"], ["2566", "CombineLatest: fixed concurrent requestUpTo yielding -1 requests", "David Karnok", "akarnokd", "01/31/15, 04:48:54 PM", "sometimes.\n\nDiscovered in #2560.", "NaN"], ["2567", "RefCount: disconnect all if upstream terminates", "David Karnok", "akarnokd", "02/04/15, 05:47:53 AM", "This should fix the problem in #2564. @davidmoten I hope you can review the changes and implications.\n\nThe particular issue was caused by the refCount unable to unsubscribe from upstream in case the current client count was greater than 1. If the upstream sent an error and each client had a retry() in its chain, the retry would immediately resubscribe, thus the refCount would see only a 2 -> 1 -> 2 change in sequence as errors are dispatched sequentially. In the change, each client is wrapped and a termination event triggers the refcount to become 0 atomically and unsubscribes the upstream. When each client then call disconnect, that becomes a no-op.", "NaN"], ["2572", "Give more time to certain concurrency tests.", "David Karnok", "akarnokd", "01/30/15, 11:09:04 AM", "On my Windows machine, I've virtualized an Ubuntu machine and adjusted some tests according to the time it takes on this \"slow machine\".", "NaN"], ["2574", "SizeEviction test needs to return false ", "Jalandip Lepcha", "jalandip", "01/31/15, 02:52:51 AM", "When a replay subject with size and time eviction policy is used then any observer that subscribes after some events are already pushed will not get those older events. \nThis is because if an observable is not yet terminated then on subscription by any new observer the check for event validity fails on the Size Eviction policy hence that event is dropped and not pushed to the new subscriber.\n\nRelevant call stack:\n   {{{\n\n```\n TimeOnAdd.call\n     BoundedState.replayObserverFromIndexTest\n        BoundedState.replayObserverFromIndexTest\n             PairEvictionPolicy.test\n}}}\n```\n\nTest Case: \n- add test case for this use case, Fails if without changes.", "NaN"], ["2575", "subscribeOn drops the subscriptions returned from the scheduler.", "George Campbell", "abersnaze", "01/31/15, 04:44:17 PM", "@mattrjacobs noticed that the unsubscribe from timeouts of Hystrix commands was not being propagated across the subscribeOn.\n\nhttps://github.com/Netflix/Hystrix/issues/354", "NaN"], ["2578", "Revert \"subscribeOn drops the subscriptions returned from the scheduler....", "David Karnok", "akarnokd", "01/31/15, 10:42:25 PM", "Reverts ReactiveX/RxJava#2575\n\nAt best, the change is a no-op if the Scheduler.Worker conforms the requirements by tracking all tasks.", "NaN"], ["2580", "Allow configuring the maximum number of computation scheduler threads", "David Karnok", "akarnokd", "02/11/15, 07:41:08 PM", "This change allows limiting the number of computation threads to 1 .. availableProcessors.", "NaN"], ["2583", "Added perf tests for various container-like subscriptions", "David Karnok", "akarnokd", "02/03/15, 08:12:48 AM", "Subscription perf tests with JMH.\n\n```\ngradlew benchmarks \"-Pjmh=-f 1 -tu s -bm thrpt -wi 10 -i 10 -r 1 rx.subscriptions.*Perf.*\"\n```\n\n[Perf run](https://gist.github.com/akarnokd/9b493209fc27c858b85a) took 90 minutes on my i7 4770k, JDK 1.8u31, Windows 7 x64.", "NaN"], ["2585", "Operator: switchIfEmpty", "David Karnok", "akarnokd", "02/03/15, 08:48:12 AM", "Changes to #2091", "NaN"], ["2589", "Repeat/retry: fixed unbounded downstream requesting above Long.MAX_VALUE", "David Karnok", "akarnokd", "02/03/15, 09:11:55 PM", "Reported in #2587.", "NaN"], ["2590", "Zip: fixed unbounded downstream requesting above Long.MAX_VALUE", "David Karnok", "akarnokd", "02/03/15, 09:10:53 PM", "Should fix issue reported in #2588.\n\nPs. What are the odds two bug reports issued so close to each other have the same cause and same fix? @davidmoten the `BackpressureUtils` was a fantastic idea.", "NaN"], ["2591", "Changed the naming of the NewThreadWorker's system parameters", "David Karnok", "akarnokd", "02/03/15, 08:56:40 PM", "Changed the parameter naming as per [discussed](https://github.com/ReactiveX/RxJava/pull/2465#discussion_r24035981).", "NaN"], ["2593", "Zip: emit onCompleted without waiting for request + avoid re-reading fields", "David Karnok", "akarnokd", "02/04/15, 05:50:22 AM", "Could also fix #2588 but can't be sure because the test created from the example app works for me.", "NaN"], ["2594", "Revert Behavior Change in TestSubscriber.awaitTerminalEvent", "Ben Christensen", "benjchristensen", "02/04/15, 05:59:50 AM", "Reverts change made at https://github.com/ReactiveX/RxJava/pull/2332/files#diff-fbed6a16f49022fd2b10f45fd6dd015bR230\n\nSee discussion at https://github.com/ReactiveX/RxJava/issues/2549#issuecomment-72783738\n\nThe Javadoc for this method clearly states that it will wait until completion or timeout. It does not say it will throw an exception on timeout, so we can not start throwing as that is a behavioral change.", "NaN"], ["2595", "Gradle & Travis Release Config", "Ben Christensen", "benjchristensen", "02/04/15, 06:36:43 AM", "Configuring Travis for build and release. This was tested at https://github.com/ReactiveX/BuildInfrastructure", "NaN"], ["2601", "Added common Exceptions.throwIfAny to throw a collection of exceptions", "David Karnok", "akarnokd", "02/11/15, 07:46:16 PM", "Tried to be as flexible with the error text as possible.", "NaN"], ["2607", "OnSubscribeRefCount - improve comments", "Dave Moten", "davidmoten", "02/06/15, 11:14:23 AM", "As mentioned in #2567, improve the comments ", "NaN"], ["2609", "Fixed comment and missing value", "David Karnok", "akarnokd", "02/05/15, 12:10:33 PM", "Syntax error in build.gradle prevents PRs to be verified.", "NaN"], ["2610", "Build at least as if it was a pull request.", "David Karnok", "akarnokd", "02/05/15, 12:40:04 PM", "NaN", "NaN"], ["2622", "Changed Observable.empty() into a stateless constant observable.", "David Karnok", "akarnokd", "02/06/15, 11:31:30 AM", "Empty was always stateless so creating a new instance all the time (especially through a `from(Iterable)`) is wasteful. Besides, `onCompleted` events don't have to be backpressured.\n\nShould enable identity based optimizations discussed in #1653.", "NaN"], ["2627", "FlatMap overloads with maximum concurrency parameter", "David Karnok", "akarnokd", "02/11/15, 09:37:27 PM", "For issue #2626.\n\nThere is no point in adding maxConcurrent to flatMapIterable because each iterable is subscribed to sequentially and run to completion.", "NaN"], ["2628", "Make travis run a proper build.", "David Karnok", "akarnokd", "02/06/15, 09:01:18 AM", "Master doesn't build because the lack of parameter for gradlew.", "NaN"], ["2630", "Cast back Observer to Subscriber if passed to subscribe(Observer)", "David Karnok", "akarnokd", "02/06/15, 11:55:38 AM", "Rebased #2600.", "NaN"], ["2632", "Implement hook to render specific types in OnNextValue", "Simon Basl\u00e9", "simonbasle", "03/17/15, 04:24:06 PM", "as discussed in #2468, allow implementations of RxJavaErrorHandler to define a rendering behavior for safe and known types to be rendered in the stacktrace of OnNextValue.", "NaN"], ["2642", "Fix a potential memory leak in schedulePeriodically", "Shixiong Zhu", "zsxwing", "02/10/15, 07:57:55 AM", "There is a potential memory leak in `schedulePeriodically` that may keep a reference to `action` after `unsubscribe`. \n\nBecause `mas.set` is called after `schedule`,  it may replace a new Subscription (created in `recursiveAction`) with the old one. Therefore, `unsubscribe` won't be able to unsubscribe the new Subscription and will keep the reference to `action` until the period time elapses.\n\nThis PR fixed it by calling `mas.set` before `schedule`.", "NaN"], ["2644", "Missing Unsafe class yields NoClassDefFoundError", "Jaroslav Tulach", "jtulach", "02/11/15, 02:07:43 AM", "Missing Unsafe class yields NoClassDefFoundError so checking for Exception is not really appropriate. Let's catch all throwables.", "NaN"], ["2648", "TakeWhile: don't unsubscribe downstream.", "David Karnok", "akarnokd", "02/11/15, 09:12:39 PM", "Fixes #2647 issue with TakeWhile.", "NaN"], ["2655", "SwitchOnNext: fix upstream producer replacing the ops own producer", "David Karnok", "akarnokd", "02/16/15, 01:30:53 PM", "Fix for issue #2654.\n\nBy calling the `super(child)` in SwitchSubscriber's constructor, the upstream's merge producer overwrote the producer placed by the SwitchOnNext operator thus any downstream request went into the upstream an not into the currently active observable.", "NaN"], ["2759", "Observable.using should use unsafeSubscribe and enable eager disposal", "Dave Moten", "davidmoten", "02/21/15, 04:44:56 AM", "See #2604 where it was discovered that `Observable.using` used `subscribe` instead of `unsafeSubscribe` which provoked a race condition leading to an IllegalArgumentException from the merge operator.\n\nThis PR uses `unsafeSubscribe` and adds an overload for `using` to optionally dispose of resources eagerly (just before completion or error). The use case for this is a _synchronous_ observable where a downstream operation wants to reuse a resource (but because the observable is synchronous the resource cannot get disposed till the downstream completes).\n\nUnit tests included.", "NaN"], ["2760", "Operator: WithLatestFrom", "David Karnok", "akarnokd", "02/21/15, 04:53:18 AM", "Named after RxJS, for issue #405", "NaN"], ["2762", "Optimized isUnsubscribed check", "David Karnok", "akarnokd", "02/21/15, 04:46:28 AM", "Extracted isUnsubscribed optimization from #2603.\n\n```\nBenchmark                                   (size)   Mode   Samples          1.x        2603    \nr.s.ComputationSchedulerPerf.observeOn           1  thrpt         5   104110.926  104707.286\nr.s.ComputationSchedulerPerf.observeOn          10  thrpt         5   100723.402  105825.148\nr.s.ComputationSchedulerPerf.observeOn         100  thrpt         5    24609.763   65571.461\nr.s.ComputationSchedulerPerf.observeOn        1000  thrpt         5     3212.434   13020.027\nr.s.ComputationSchedulerPerf.observeOn       10000  thrpt         5      955.002    1555.493  \nr.s.ComputationSchedulerPerf.observeOn      100000  thrpt         5       96.628     160.218  \nr.s.ComputationSchedulerPerf.observeOn     1000000  thrpt         5        9.508      16.559  \nr.s.ComputationSchedulerPerf.subscribeOn         1  thrpt         5   114212.000  114485.516  \nr.s.ComputationSchedulerPerf.subscribeOn        10  thrpt         5   112376.809  112270.024  \nr.s.ComputationSchedulerPerf.subscribeOn       100  thrpt         5    88433.002  104240.739  \nr.s.ComputationSchedulerPerf.subscribeOn      1000  thrpt         5    31503.640   64446.984  \nr.s.ComputationSchedulerPerf.subscribeOn     10000  thrpt         5     3932.988    8200.048\nr.s.ComputationSchedulerPerf.subscribeOn    100000  thrpt         5      437.626    1439.069\nr.s.ComputationSchedulerPerf.subscribeOn   1000000  thrpt         5       43.104     146.385\n```", "NaN"], ["2767", "Optimized scalar observeOn/subscribeOn", "David Karnok", "akarnokd", "02/24/15, 05:51:55 PM", "Redone #2603.\n\nRun on i7 920, 2.6GHz, Windows 7 x64, JDK 1.8u31\n\n```\nBenchmark      (size)       this   Score error       1.x   Score error\nobserveOn           1  160377,408     3091,205  140913,081     7097,415\nobserveOn          10  132990,049     1477,661  125288,149    14304,259\nobserveOn         100   43701,203     2342,570   43840,921      944,682\nobserveOn        1000   11603,952     2377,205   11400,340     1400,628\nobserveOn        2000    6769,716      220,476    6853,283       71,276\nobserveOn        3000    4753,876      326,497    4741,108      120,612\nobserveOn        4000    3616,782      212,285    3632,433      433,754\nobserveOn       10000    1544,141       28,796    1548,504       61,419\nobserveOn      100000     149,573       14,974     150,924        8,331\nobserveOn     1000000      14,909        2,079      13,658        7,702\nsubscribeOn         1  160639,801    16463,799  156911,862     2463,637\nsubscribeOn        10  148883,172     6885,684  151514,397     9425,348\nsubscribeOn       100  133756,358     3329,421  133327,933     3479,124\nsubscribeOn      1000   56411,785    22525,962   52902,999    19948,305\nsubscribeOn      2000   35471,110    12240,514   34272,374    16515,454\nsubscribeOn      3000   25868,564     2755,244   26291,293     2435,165\nsubscribeOn      4000   20453,512     2996,777   19598,400     4643,195\nsubscribeOn     10000    8817,797      465,195    5389,428      272,784\nsubscribeOn    100000     958,665       22,157     900,036      320,547\nsubscribeOn   1000000      91,606        2,462      91,396        3,407\n```\n\nNote that since the tests create a lot of garbage, some perf numbers have quite some error margin: some appear to be faster with this PR while others appear to be slower, even if they are not affected by the changes.", "NaN"], ["2769", "OperatorCombineLatest request overflow check", "Dave Moten", "davidmoten", "02/23/15, 11:56:26 PM", "Use `BackpressureUtils.getAndAddRequest(requested, n)` instead of  `requested.getAndAdd(n)` so that an overflow check takes place. ", "NaN"], ["2770", "OperatorOnBackpressureDrop request overflow check", "Dave Moten", "davidmoten", "02/24/15, 07:16:59 AM", "Use `BackpressureUtils.getAndAddRequest(requested, n)` instead of `requested.getAndAdd(n)` so that an overflow check takes place. Includes a unit test that failed on original code (but passes with this PR).", "NaN"], ["2771", "OnSubscribeRange request overflow check", "Dave Moten", "davidmoten", "02/24/15, 11:16:37 AM", "One more:\n\nUse `BackpressureUtils.getAndAddRequest(requested, n)` instead of `requested.getAndAdd(n)` so that an overflow check takes place. Includes a unit test that failed on original code (but passes with this PR).", "NaN"], ["2776", "issue-2764: add new operator onBackpressureDrop(Action1 onDrop)", "Steven Zhen Wu", "stevenzwu", "03/04/15, 09:55:55 PM", "NaN", "NaN"], ["2777", "fix several typos", "Steven Zhen Wu", "stevenzwu", "03/03/15, 12:02:41 PM", "NaN", "NaN"], ["2779", "OperatorMulticast.connect(connection) should not return null", "Dave Moten", "davidmoten", "03/02/15, 07:41:24 AM", "See discussion in  #2774 \n\nChanges include \n- fix for #2774 just for `OperatorMulticast` (will do `OperatorPublish` in another PR once have sorted this one out)\n- made fields private that had default visibility\n- renamed `OnSubscribeMulticastTest` to `OperatorMulticastTest`\n- addressed a possible race condition that could provoke an IAE when `Observable.subscribe(sub)` is called with sub=null (unsubscription occurs between L144 and L145 on old code).", "NaN"], ["2788", "Fix the bug that 'publish' will cache items when no subscriber", "Shixiong Zhu", "zsxwing", "03/04/15, 09:54:42 PM", "Fixed #2775 and #2596", "NaN"], ["2804", "ObserveOn throughput enhancements", "David Karnok", "akarnokd", "03/06/15, 08:45:29 PM", "Squashed commits of #2773.\n\n---\n\nFurther optimizations to `observeOn`.\n- Using SpscArrayQueue directly in observeOn instead of `RingBuffer` to avoid the synchronization block\n- Split tracking structure to serial (SubscriptionList) and timed (CompositeSubscription) in `EventLoopsScheduler` which improves the sequential scheduling performance because a completing task's subscription will be most likely the first item in the underlying LinkedList.\n\nBenchmark: (i7 920, Window 7 x64, Java 1.8u31, 5x1s warmup, 5x5s iteration)\n\n```\nBenchmark      (size)         1.x    1.x error      this PR   this error\nobserveOn           1  162326,012     2458,085   166536,559     3154,174\nobserveOn          10  132471,205     1857,434   142517,407     3734,424 ++\nobserveOn         100   43282,527     2145,910   112238,179     2270,103 ++\nobserveOn        1000   11779,482      173,370    25726,564      309,193 ++\nobserveOn        2000    6756,211       89,196    12123,276      276,470 ++\nobserveOn        3000    4736,893      253,796     9342,673      263,667 ++\nobserveOn        4000    3661,874       51,359     7346,015      123,049 ++\nobserveOn       10000    1519,282      108,503     1546,547       21,885\nobserveOn      100000     151,193        2,569      156,160        1,974\nobserveOn     1000000      15,373        1,310       15,660        0,153\nsubscribeOn         1  161290,037     2867,882   164952,259      797,408\nsubscribeOn        10  151842,821     2448,734   147906,491     4373,682\nsubscribeOn       100  136418,065     1773,558   136889,052     2362,203\nsubscribeOn      1000   58389,066     4559,030    59482,225     1372,692\nsubscribeOn      2000   34089,152     9318,205    36581,203     1264,100\nsubscribeOn      3000   26712,331     1265,442    26519,320     1319,293\nsubscribeOn      4000   20118,326     2018,439    20163,395      839,709\nsubscribeOn     10000    8914,213      677,164     9059,934      200,158\nsubscribeOn    100000     958,038       43,349      965,663       60,708\nsubscribeOn   1000000      91,849        2,148       92,706        1,202\n```\n\nNotes:\n- At `size = 1`, the throughput varies in a +/- 3000 range on each run, and since the changes don't touch the scalar optimization, there is no real improvement there.\n- At `size = 10.000` my system reached either the cache capacity or the OS scheduler's time resolution so there no improvement there on.\n- At `size = 100.000` and `size = 1.000.000` the throughput doubles if I introduce some extra delay (i.e., via sleep(1) or some extra work).\n- The benchmark generates a lot of garbage due to boxing: switching to a constant emitter increases the throughput `subscribeOn(1.000.000)` from 91 to 136. \n\nSince it conflicts with #2772 anyway, this is PR is to let others verify the optimizations actually work on other OSes, because on my Windows, I sometimes get significant variance in the throughput during iterations. Increased iteration time may be required as well.", "NaN"], ["2807", "Corrected all Java interfaces declarations", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "03/17/15, 04:22:06 PM", "Just little Java syntax fix for interfaces\n\nI checked all interfaces in RxJava.\n\n@benjchristensen I can add and configure `Checkstyle` gradle plugin for RxJava if you don't mind, mm? ", "NaN"], ["2809", "Fixed takeUntil not unsubscribing from either of the observables in case", "David Karnok", "akarnokd", "03/06/15, 08:51:11 PM", "of a terminal condition.\n\nThis issue came up in [a group discussion](https://groups.google.com/forum/#!topic/rxjava/sF2hy5sV5ck) (but is unrelated to the actual problem there). The problem was that takeUntil was unsafeSubscribed to, there was no one to terminate either the main or the other observable on a terminal condition, leaving the connection to upstream active indefinitely.", "NaN"], ["2814", "Operator Publish full rewrite", "David Karnok", "akarnokd", "04/30/15, 05:04:30 AM", "Complete rewrite of `publish()` and fixed bugs of #2810 and #2803.", "NaN"], ["2817", "Fix for non-deterministic: testOnBackpressureDropWithAction", "David Karnok", "akarnokd", "03/11/15, 03:47:08 PM", "It is possible the synchronized block inside RxRingBuffer blocks out the firehose thread long enough that there will be enough requests cumulating up and no values have to be dropped. The change increases the taken value count and should decrease the likelihood of such no-drop situation.", "NaN"], ["2818", "Small fix for the getValue javadoc in AsyncSubject and BehaviorSubject", "David Karnok", "akarnokd", "03/12/15, 09:41:37 AM", "NaN", "NaN"], ["2820", "Backpressure for window(size)", "David Karnok", "akarnokd", "04/30/15, 05:23:57 AM", "Changes to the `window(size)` operator to respect the backpressure on its _outer_ Observable: asking for 1 window will request `size` values from upstream. \n\nBackpressure is ignored on the inner Observable for now, partially because the `BufferUntilSubscriber` doesn't support it, partially because coordinating the inner requests with the outer requests needs more thoughts. The problem is that the outer has to request at least 1 element from upstream in order to open the window, but the inner subscriber may not want that single element just yet or would request more than the remaining window size and it would trigger new windows whose value it can't receive but would overflow the next window's observers.\n\n`window(size, skip)` is not changed as I need to think about it more.", "NaN"], ["2823", "Enable maven central sync via bintray", "Rob Spieldenner", "rspieldenner", "03/17/15, 04:20:14 PM", "NaN", "NaN"], ["2825", "Fixed javadoc for Observable.repeat() method", "Roman Romanchuk", "fatroom", "03/18/15, 08:01:11 PM", "Removed wrong link inside of JavaDoc for Observable.repeat() method", "NaN"], ["2831", "testOnBackpressureDropWithAction restored original test count", "David Karnok", "akarnokd", "03/17/15, 05:37:24 PM", "Not for merge. Diagnosing travis build failure.", "NaN"], ["2837", "Fixed a non-deterministic test and a few scheduler leaks.", "David Karnok", "akarnokd", "03/18/15, 05:36:07 PM", "NaN", "NaN"], ["2838", "Fix typo in OnSubscribe interface's Javadoc", "Avram Lyon", "avram", "03/19/15, 07:37:58 AM", "NaN", "NaN"], ["2845", "Fix for repeat: wrong target of request", "David Karnok", "akarnokd", "03/25/15, 03:55:11 PM", "Fixes #2844.", "NaN"], ["2851", "Add 'request(Long.MAX_VALUE)' in 'onStart' to fix the backpressure issue of debounce", "Shixiong Zhu", "zsxwing", "04/02/15, 04:24:48 PM", "Fixed #2850.\n\nThe issue is because OperatorDebounceWithTime will swallow values but not request more items. Just add `request(Long.MAX_VALUE)` since it doesn't support backpressure.", "NaN"], ["2852", "Change retryWhen to eagerly ignore an error'd source's subsequent events", "David Karnok", "akarnokd", "04/02/15, 06:41:39 PM", "Fixes both issue #2826 and [this StackOverflow](http://stackoverflow.com/questions/29324886/retrywhen-operator-never-retries) problem.", "NaN"], ["2854", "Fixes wrong request accounting in AbstractOnSubscribe", "David Karnok", "akarnokd", "04/07/15, 05:14:21 PM", "Fixes #2853.", "NaN"], ["2859", "OperatorDoOnRequest should unsubscribe from upstream", "Dave Moten", "davidmoten", "04/07/15, 09:35:03 AM", "When `Observable.doOnRequest` is used it does not pass unsubscription upstream. This PR fixes that and also adds a unit test of the base functionality for `doOnRequest` (no unit tests were present for this operator at all).", "NaN"], ["2860", "OperatorSingle should request exactly what it needs", "Dave Moten", "davidmoten", "04/07/15, 05:15:15 PM", "I noticed that `observable.single().subscribe()` requested `Long.MAX_VALUE` from `observable` which is more than it needs to come up with one item or an error. This PR sets a `Producer` for `OperatorSingle` so that it requests no more or less than it needs.", "NaN"], ["2861", "Ensure OperatorZipTest.testZipRace does not fail on slower machines", "Dave Moten", "davidmoten", "04/08/15, 06:39:46 AM", "The test `OperatorZipTest.testZipRace` fails every time on my pretty fast desktop due to not achieving the desired number of iterations within the timeout. It also fails every time on my slow laptop. This PR adds a time limit for the iterations of one second less than the test timeout so that the test will fail if a zip hangs but not if the machine is slow.", "NaN"], ["2862", "Cleanup warnings in test source", "Dave Moten", "davidmoten", "04/09/15, 06:27:42 AM", "Made changes to test source to avoid or suppress these warnings:\n- raw types \n- unused imports\n- unused variables", "NaN"], ["2864", "IndexedRingBuffer.getInstance can infer type", "Dave Moten", "davidmoten", "04/09/15, 06:22:01 AM", "Added type to IndexedRingBuffer.POOL (to get rid of raw types warning) and changed signature of `IndexedRingBuffer.getInstance` so that it infers type. Means that 13 `unchecked` warnings in the code base can be removed.", "NaN"], ["2866", "Use simpler naming in Action1, Func1 to assist IDEs", "Dave Moten", "davidmoten", "04/09/15, 01:33:10 PM", "Use simpler naming in `Action1`, `Func1` because is used as a default for IDEs when generating implementing methods. For instance,  in Eclipse when auto-generating the implementing methods for an `Action1` I get by default:\n\n``` java\nnew Action1<Integer>() {\n\n    @Override\n    public void call(Integer t1) {\n         //TODO auto-generated\n    }\n}\n```\n\nI can't count the number of times I've removed the trailing 1 from the parameter before continuing and I'd appreciate not having to do it! (unfortunately I can't use Java 8 lambdas in all my code).\n\nI'd also be open to a name other than `t` like `value` but would be happy just to see the 1 go.", "NaN"], ["2867", "More warnings cleanup", "Dave Moten", "davidmoten", "04/09/15, 12:22:07 PM", "- removed unused constructors that were the subject of varargs warnings\n- removed unused import\n\nI think that cleans up all java source warnings (not including javadoc issues).", "NaN"], ["2868", "Fixed reentrancy issue with the error producer.", "David Karnok", "akarnokd", "04/09/15, 12:16:02 PM", "Should fix the test recent test failures.", "NaN"], ["2871", "Use explicit versioning for gradle-rxjava-project-plugin", "Dave Moten", "davidmoten", "05/13/15, 06:06:52 PM", "When a release is created the tagged version should build deterministically at any time. The wildcard dependency on `gradle-rxjava-project-plugin` in `build.gradle` means this will not be the case. This PR sets the version at 2.2.3 (the latest on Maven Central). ", "NaN"], ["2872", "Use the correct accounts for sonatype sync", "Rob Spieldenner", "rspieldenner", "05/13/15, 06:04:23 PM", "NaN", "NaN"], ["2875", "Fix: NPE in requestFromChild method.", "David Karnok", "akarnokd", "04/14/15, 10:26:57 AM", "Fixes NPE reported in #2874.", "NaN"], ["2880", "Use singleton reduction functions in count and countLong", "Dave Moten", "davidmoten", "04/21/15, 11:12:23 AM", "Every call to Observable.count() and countLong() instantiated a new Func2 which I have now made a singleton in the interests of minimizing GC pressure. \n\nCan anyone in the know confirm for me that there is GC benefit from this one because I assume a sophisticated enough compiler could replace the new Func2 call with a singleton during its optimizations.\n\nIf this one is worthwhile then there are heaps more of these in `Observable.java` and possibly elsewhere.", "NaN"], ["2882", "OperatorScan - don't call onNext after onError is called", "Dave Moten", "davidmoten", "04/16/15, 06:25:00 AM", "title says it all", "NaN"], ["2883", "Proposal: standardized Subject state-peeking methods.", "David Karnok", "akarnokd", "04/29/15, 05:36:14 AM", "This PR modifies the `Subject` class to host the union of the state-peeking methods of the various `Subject` implementations and fixes the inconsistent behavior of `ReplaySubject.getValues(T[])`.\n\nThe changes enable the `SerializedSubject` to relay such state-peeking method calls into the wrapped subject and allows future `Subject` wrappers to do the same (#2458).", "NaN"], ["2892", "Fix Observable.range race condition", "Dave Moten", "davidmoten", "04/20/15, 05:21:20 AM", "In `RangeProducer` if the first two requests come concurrently and are both for `Long.MAX_VALUE` then there is a possible race condition where the fast path is started twice thus emitting some or all elements twice.\n\nThis PR fixes the race by only allowing the fast path if the current request count is 0 (using `compareAndSet`).", "NaN"], ["2894", "Concat: fixed reentrancy problem in completeInner", "David Karnok", "akarnokd", "04/21/15, 07:16:54 AM", "Fixes issue #2890.", "NaN"], ["2895", "Fix Observable.from(Iterable) race condition", "Dave Moten", "davidmoten", "04/20/15, 08:24:02 AM", "In `IterableProducer` if the first two requests come concurrently and are both for `Long.MAX_VALUE` then there is a possible race condition where the fast path is started twice thus emitting some or all elements twice.\n\nThis PR fixes the race by only allowing the fast path if the current request count is 0 (using `compareAndSet`).", "NaN"], ["2897", "Fix for overlapping windows. ", "Alex Wenckus", "alexwen", "04/21/15, 03:58:22 PM", "Source was emitting t multiple times while holding queue.\n\nFixes #2896", "NaN"], ["2898", "Observable.range - add unit test for eager completion on empty", "Dave Moten", "davidmoten", "04/21/15, 06:34:43 AM", "As per discussion in #2884, it turns out that `range` does emit `onComplete` even when zero is requested because `Observable.range` does not use `OperatorRange` when the count is zero but rather returns an `Observable.empty()`. This PR adds a unit test confirming this fact.", "NaN"], ["2899", "Observable.from(empty) to emit onComplete even when 0 requested", "Dave Moten", "davidmoten", "04/21/15, 06:39:55 AM", "As per discussion in #2884, `Observable.from(iterable)` is preferred to emit `onCompleted` when `iterable` is empty even when nothing has been requested.\n\nThis PR adds a check on `iterator.hasNext` before the `Producer` is assigned and emits `onCompleted` immediately if `hasNext` returns false.\n\nIncludes unit test that failed on existing code base.", "NaN"], ["2901", "Operators toList and toSortedList now support backpressure", "David Karnok", "akarnokd", "04/29/15, 05:42:37 AM", "Added support for backpressure in `toList` and `toSortedList`: they emit their buffered content only when downstream actually requested it.\n\nFew other notes:\n- Added overload to `toSortedList` taking a `initialCapacity` argument which should help reduce the number of times the buffer needs to be resized.\n- The Func2 parameter of `toSortedList` is now wrapped once per operator instead of once per subscriber.\n- Using non-final list buffers which are set to null on completion to not hold onto the buffer.\n- `toSortedList`now returns a modifiable `ArrayList`: since it is a handoff procedure, there is no value in forcing a non-modification constraint on the emitted list (similar to `toList` even before this PR).", "NaN"], ["2902", "Prevent ExceptionsTest from hanging when testing stack overflow", "Dave Moten", "davidmoten", "04/21/15, 11:34:44 AM", "On my i5 laptop `ExceptionsTest.testStackOverflowIsThrow` hangs. This PR changes the test so that it confirms that significant stack depth occurs and in another test ensures that the fatal `StackOverflowError` is thrown by `subscribe` when it occurs in `onNext`.\n\nI also removed some unused code from the original test and some extra subscriptions that didn't seem to serve a particular function.", "NaN"], ["2904", "TakeLast - add request overflow check", "Dave Moten", "davidmoten", "04/22/15, 06:30:06 AM", "Added request overflow check to `TakeLastQueueProducer` and associated unit test (that failed on existing code base).", "NaN"], ["2905", "Use singleton Operators where we can", "Dave Moten", "davidmoten", "04/23/15, 08:15:01 AM", "To reduce GC pressure use singleton `Operator`s for `Observable.single`, `distinct`, `distinctUntilChanged`,  `onBackpressureBuffer`,  `isEmpty`.", "NaN"], ["2907", "Fixed schedule race and task retention with ExecutorScheduler.", "David Karnok", "akarnokd", "05/13/15, 05:56:16 PM", "Fixes a race condition with the timed schedule (first potentially overwriting the result of the untimed schedule in mas) and a scheduled task retention problem due to not tracking those.", "NaN"], ["2909", "Fix the drainer to check if the queue is empty before quitting.", "David Karnok", "akarnokd", "04/23/15, 09:15:01 AM", "Reported in #2908. The bug is on line [113](https://github.com/ReactiveX/RxJava/blob/5ac4448873c09cd806ae73a37727a299cbaee2ba/src/test/java/rx/internal/util/RxRingBufferWithoutUnsafeTest.java#L113). If the drainer is delayed after a poll returning null and the emitter producing & terminating before the getCount(), the queue is non empty but the drainer quits and hence the value difference. It comes up almost always if you put a sleep before L113.", "NaN"], ["2911", "OperatorPublish benchmark", "David Karnok", "akarnokd", "04/23/15, 02:01:47 PM", "Benchmarks the behavior of `publish()` in face of number of child subscribers, batching effect in request(), length of the source and whether or not each child observes values on a separate thread.\n\n [Benchmark results](https://gist.github.com/akarnokd/cccc31312125d8636d3d)\n\nRemarks:\n- With no subscribers, the operator seems to fill its queue and then do nothing unless someone subscribes. There is no test to check for this behavior so it might be a bug or a feature.\n- In async mode, the benchmark threw `MissingBackpressureException` a lot of times which can happen with a single subscriber as well, so it might be some concurrency bug in the operator.", "NaN"], ["2912", "Fix the performance degradation due to different schedule execution and", "David Karnok", "akarnokd", "04/30/15, 05:26:35 AM", "SubscriptionList.add() and thread unparking.\n\nThis PR partially reverts some changes from earlier scheduler optimizations and fixes a case where if multiple concurrent schedule() calls happen, the order in the SubscriptionList might be different from the actual execution order which degrades performance on task termination due to remove() being O(n).\n\nThis might be the source of degradation in #2857 as well.\n\nI'll post the `ComputationSchedulerPerf` results later.", "NaN"], ["2914", "Optimization - use OperatorTakeLastOne for takeLast(1)", "Dave Moten", "davidmoten", "04/25/15, 08:04:06 AM", "This is an optimization for `takeLast` when called with parameter 1. Using `OperatorTakeLast` carries unnecessary overhead for the `takeLast(1)` case and a decent throughput improvement (x2) for streams of 100 elements or more is seen in the benchmarks below.\n\n`takeLast(1)` is used by the following operators which will also demonstrate a throughput improvement:\n- `last`, `lastOrDefault`\n- `reduce`\n- `collect`\n- `count`, `countLong`\n\nBenchmarks comparing using the new `OperatorTakeLastOne` and `OperatorTakeLast`:\n\n```\nBenchmark                                                        Mode   Samples        Score  Score error    Units\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLastOne_Few     thrpt         5  2235516.141   129091.019    ops/s\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLastOne_Many    thrpt         5      103.980        9.233    ops/s\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLastOne_Some    thrpt         5   984689.481    48560.897    ops/s\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLast_Few        thrpt         5  2187421.223    93550.379    ops/s\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLast_Many       thrpt         5       54.575        2.054    ops/s\nr.o.OperatorTakeLastOnePerf.takeLastOneUsingTakeLast_Some       thrpt         5   466892.497     9267.405    ops/s\n\n```", "NaN"], ["2915", "Observable.ignoreElements - optimize ", "Dave Moten", "davidmoten", "04/27/15, 06:18:38 AM", "As suggested by @akarnokd, instead of `filter(alwaysFalse)` use a custom operator and a singleton instance of it.\n\nAlso snuck in the removal of an unused import from `OperatorTakeLastOneTest.java`.", "NaN"], ["2921", "OperatorObserveOn - handle request overflow correctly", "Dave Moten", "davidmoten", "04/29/15, 07:57:34 AM", "Use `BackpressureUtils.getAndAddRequest` in the `Producer` in `OperatorObserveOn`.\n\nIncludes unit test that failed on codebase before this change.", "NaN"], ["2923", "OnBackpressureLatest: Non-blocking version of the toBlocking().latest() operator.", "David Karnok", "akarnokd", "05/13/15, 09:24:05 PM", "This is essentially the pair of the `OnBackpressureDrop`. While `OnBackpressureDrop` emits the first value requested and then drops the rest, `OnBackpressureLatest` drops values but the latest and emits that when requested. One can also think of this operator as a sample with backpressure.\n\nOne mentionable property is that since it holds onto the very last value, downstream has to request at least one to receive `onCompleted()`.", "NaN"], ["2928", "Merge and MergeMaxConcurrent unified and rewritten", "David Karnok", "akarnokd", "07/14/15, 06:50:59 PM", "I've rewritten `merge` and `mergeMaxConcurrent` together from scratch.\n- Added experimental `maxConcurrent` overloads to the array-merge and the mergeDelayError\n- Fixed `OperatorMapNotification` beause it disregarded backpressure on its terminal emissions.\n- While debugging some merge test failures, I've encountered a bug in OperatorPublish with the same underlying logical error (see comment) and fixed it here.\n- Accidentally introduced a few tabs, therefore, I went in and replaced all tabs with spaces.\n- I've changed `OperatorMergeTest.shouldNotCompleteIfThereArePendingScalarSynchronousEmissionsWhenTheLastInnerSubscriberCompletes` because it is legal to get onCompleted without any request.", "NaN"], ["2929", "OperatorObserveOn onComplete can be emitted despite onError being called", "Dave Moten", "davidmoten", "05/13/15, 05:22:33 PM", "This is a fix for a race condition in `OperatorObserveOn` where if thread A gets to L164 and thread B starts the pollQueue loop then it will act as if the stream had completed normally instead of with an error. \n\nThe effect is that a stream could appear to complete normally when in fact an error had occurred.\n\nUsing two boolean volatiles `completed` and `failed` that as a pair were not atomically updated/read exposed us to this race condition. \n\nThe fix is to use a single volatile integer `status` to represent the  states ACTIVE, COMPLETED, ERRORED to replace `completed` and `failed`.", "NaN"], ["2934", "Fix termination race condition in OperatorPublish.dispatch", "David Karnok", "akarnokd", "05/06/15, 06:35:22 AM", "Fixes the cause of #2933.", "NaN"], ["2936", "Fix TestSubject bug", "Jacek Marchwicki", "jacek-marchwicki", "05/07/15, 06:53:48 AM", "## Info\n\nProblem is in TestSubject.onNext()\nwhen is called on current time that is not 0 it will be delayed by current time.\ncalling TestSubject.onNext() should execute immediately.\n## Tests\n- TestSubjectTest.testObserverPropagateValueAfterTriggeringActions - represent already working behavior\n- TestSubjectTest.testObserverPropagateValueInFutureTimeAfterTriggeringActions - represent a bug that is fixed by this commit", "NaN"], ["2937", "Add code quality plugins to build.gradle (jacoco, findbugs)", "Dave Moten", "davidmoten", "05/13/15, 05:07:47 PM", "This is one thing I've missed for a while so I figured out how to get gradle to provide them. This PR enables production of Jacoco coverage reports and Findbugs reports as html in the build directory. It doesn't happen by default, the plugins are run like this (instructions in comments in `build.gradle`):\n\nTo run Findbugs:\n`./gradlew check`\n\nTo run Jacoco test coverage:\n`./gradlew test jacocoTestReport`\n\nTo run Jacoco on a single test:\n`./gradlew -Dtest.single=OperatorRetry test jacocoTestReport`\n\nThen open up the reports in `build/reports`.", "NaN"], ["2938", "Fixed Observable.combineLatest overflow bug on Android", "Jacek Marchwicki", "jacek-marchwicki", "05/07/15, 11:23:03 AM", "RxRingBuffer size is not a constant and on Android is\nless then 128 (16). So it causing silent issues when\nthere were given 16 < Observers < 128.", "NaN"], ["2939", "publish: Fix another race between terminalEvent and the queue being empty.", "David Karnok", "akarnokd", "05/08/15, 09:14:30 PM", "Yet another fix to the race condition in publish().", "NaN"], ["2940", "Remove unnecessary localHasValue check", "Tomasz Rozbicki", "tomrozb", "05/09/15, 02:42:08 PM", "Due to !hasValue check (line 120), localHasValue field is always true", "NaN"], ["2948", "More assertions for TestSubscriber", "David Karnok", "akarnokd", "05/19/15, 04:25:33 PM", "Additional asserts for TestSubscriber and the option to specify the initial request via a constructor.", "NaN"], ["2949", "Remove findbugs+jacoco from build.gradle", "Dave Moten", "davidmoten", "05/14/15, 12:38:44 PM", "Apologies for the PR that added these to build.gradle. My claim that they were not run by default was wrong (`./gradlew build` runs them). Let's remove till I figure out how to do this properly.", "NaN"], ["2950", "OperatorGroupBy - check for request overflow and don't decrement when at Long.MAX_VALUE", "Dave Moten", "davidmoten", "05/15/15, 06:38:39 AM", "Added request overflow check to `OperatorGroupBy` (using `BackpressureUtils`) and prevented `requested` counters from being decremented if they were at `Long.MAX_VALUE`.\n\nIncludes unit test that failed on current codebase.", "NaN"], ["2951", "OperatorConcat - prevent request overflow and fix race condition", "Dave Moten", "davidmoten", "05/15/15, 08:12:57 AM", "Used `BackpressureUtils` to prevent request overflow and added an `n > 0` check for requests to ensure that `subscribeNext` is not called concurrently (race condition).\n\nNo unit tests written. Let me know if you think worth the effort.", "NaN"], ["2956", "OperatorObserveOn should not request more after child is unsubscribed", "Dave Moten", "davidmoten", "05/16/15, 11:45:47 AM", "In existing code if unsubscription happens immediately after a `child.onNext` call from `pollQueue` then the number of emissions made in the loop will be requested of upstream despite `child` being unsubscribed.\n\nThis PR adds a local variable `isUnsubscribed` and when set to true no further requests will be made.\n\nThis PR includes a unit test that failed on the existing codebase.", "NaN"], ["2960", "fix OperatorConcat race condition where request lost", "Dave Moten", "davidmoten", "05/27/15, 11:41:02 AM", "If a request arrives while `ConcatInnerSubscriber` is being constructed ([L199-201](https://github.com/ReactiveX/RxJava/blob/bad4d40a7b59cb443c3cb19d00ab80000e017a5f/src/main/java/rx/internal/operators/OperatorConcat.java#L199-L201)) then that additional request does not induce a request from the subscriber and could stall the stream. The fix is not to pass `requested` value in the constructor but to call `ConcatInnerSubscriber.requestMore` with `requested` only once `currentSubscriber` is set.", "NaN"], ["2961", "fix Amb backpressure bug", "Dave Moten", "davidmoten", "05/26/15, 07:30:09 AM", "The Amb operator has a backpressure bug:\n- if `m` requests were made before the first emission then `m` subscriptions were started on each source observable. We only want once subscription on each.\n\nThis PR adds fix code to  `OnSubscribeAmb` and two unit tests.", "NaN"], ["2963", "Set of standard producers and updated queue implementations with some", "David Karnok", "akarnokd", "05/19/15, 06:52:14 PM", "platform-safe variants.", "NaN"], ["2966", "The usual anally-retentive javadoc edits.", "David Gross", "DavidMGross", "05/20/15, 06:55:01 AM", "NaN", "NaN"], ["2969", "Operator cache() now supports backpressure", "David Karnok", "akarnokd", "06/17/15, 12:12:57 PM", "I've removed the controversial features and made the backing CachedObservable internal.\n\nRelated issue #1483.", "NaN"], ["2970", "Deprecated onBackpressureBlock", "David Karnok", "akarnokd", "06/17/15, 11:58:21 AM", "See #2799 for reasons to deprecate.", "NaN"], ["2972", "Fixed window(time) to work properly with unsubscription, added", "David Karnok", "akarnokd", "06/17/15, 11:57:42 AM", "backpressure support to window(size, skip).\n\nSee #1880.", "NaN"], ["2975", "Deprecate and rename two timer overloads to interval", "George Campbell", "abersnaze", "06/17/15, 12:00:16 PM", "The existing six methods below didn't make sense and caused some confusion.\n\n```\ntimer(delay, timeUnit[, scheduler]);  --> emits 0 after delay and completes\ntimer(delay, period, timeUnit[, scheduler]); --> emits 0 after delay and then i++ after every period forever\ninterval(period, timeUnit[, schduler); --> emits i++ after every period forever\n```\n\nI felt that the middle method acted more like the third method `interval` than first method `timer`.  This PR is to make this change.\n\n```\n timer(delay, timeUnit[, scheduler]);  --> emits 0 after delay and completes\n+@Deprecated\n timer(delay, period, timeUnit[, scheduler]); --> emits 0 after delay and then i++ after every period forever\n+interval(delay, period, timeUnit[, scheduler]); --> emits 0 after delay and then i++ after every period forever\n interval(period, timeUnit[, schduler); --> emits i++ after every period forever\n```\n\nPS: yes, I understand that we can't delete the deprecated timer method.\n@davgross and if this PR is merged will have to change the images.", "NaN"], ["2982", "TestSubscriber - add factory methods", "Dave Moten", "davidmoten", "06/17/15, 12:02:00 PM", "Since we use this so much I've added factory methods so we can infer types. \n\nInstead of \n\n``` java\nTestSubscriber<Integer> ts = new TestSubscriber<Integer>();\n```\n\nWe can write\n\n``` java\nTestSubscriber<Integer> ts = TestSubscriber.create();\n```\n\nI changed the tests in `OnSubscribeRangeTest` to demo the usage.", "NaN"], ["2983", "Fixed multiple calls to onStart.", "David Karnok", "akarnokd", "06/17/15, 11:56:38 AM", "Started investigating multiple calls to onStart based on #2979 and found a bunch, but since onStart can be overridden, I might have missed cases. In addition, I've found a single place where a producer is set twice on a subscriber but again, many other places may exist.", "NaN"], ["2985", "improve OperatorSerializeTest.testMultiThreadedWithNPEinMiddle ", "Dave Moten", "davidmoten", "05/27/15, 02:12:28 PM", "to address #2870, have made it much more improbable that the error emission is the last thread to complete by only failing the test if the error emission is the last for `n` repeats. I chose `n` = 3 to keep the runtime low (average <2s).", "NaN"], ["2986", "OperatorAll  - implement backpressure and include last value in exception cause", "Dave Moten", "davidmoten", "05/28/15, 10:28:35 AM", "Implemented backpressure using `SingleDelayedProducer` (thanks @akarnokd) and while I was there ensured that the last value is in the exception cause when the predicate throws an exception.", "NaN"], ["2987", "fix skip() race condition and request overflow", "Dave Moten", "davidmoten", "05/28/15, 12:17:49 PM", "`OperatorSkip` suffered from this race condition:\n\nSuppose we wanted to skip 5 elements, then\n- two concurrent requests of say 1 between onStart request of 0 and first emission would request 1+ (5-0) and 1 + (5-0) elements = 12 elements. To deliver the two requested we only need 7 from upstream so we have overrequested.\n\nIt also lacked protection from request overflow.\n\nTwo unit tests have been added that failed on previous code and now pass.", "NaN"], ["2988", "Operator exists() - implement backpressure and include last value in exception cause", "Dave Moten", "davidmoten", "05/29/15, 06:22:14 AM", "Implemented backpressure using `SingleDelayedProducer`  and while I was there ensured that the last value is in the exception cause when the predicate throws an exception.", "NaN"], ["2989", "prevent take() from requesting more than needed", "Dave Moten", "davidmoten", "05/29/15, 08:05:53 AM", "The `request` method used logic that could overrequest upstream if multiple small requests were made before the next item arrived.\n\nAdded a unit test that failed on previous code.", "NaN"], ["2990", "Improve Subscriber readability", "Dave Moten", "davidmoten", "06/09/15, 09:28:53 PM", "The `Subscriber` class is something I encounter frequently when debug stepping through code and is hard to read. This PR improves the names of variables and makes the `request` method more readable in particular by moving some code off into another method. \n\nI've also put in a `return` straight after the `addToRequested(n)` call so that we don't need to make an unnecessary test of `producerToRequestFrom != null`. Very minor saving I'm sure but why not.\n\nJavadoc is still missing and I thought to leave that for another PR (because it will require a bit more thought).", "NaN"], ["2991", "takeUntil(predicate) - include last value in error cause", "Dave Moten", "davidmoten", "05/30/15, 07:45:48 AM", "As per title, unit test included.", "NaN"], ["2992", "Fix value rendering in error last cause for primitive types", "Dave Moten", "davidmoten", "05/30/15, 07:49:05 AM", "When an error occurs some `Operator`s (like `map`) include the value in the exception cause to help debugging. The intent is that for the 9 primitive types (int/Integer, double/Double, byte/Byte, char/Character etc) we render the value using `value.toString` but the test for being a primitive does not work because `.isPrimitive` always returns false (primitives have always been autoboxed by the time they get here).\n\nThe fix is to create a lazy loaded singleton set of the primitive classes (Integer.class, Double.class, etc) and check for membership in that set.\n\nUnit tests included for each primitive type.", "NaN"], ["2993", "takeWhile(predicate) - include last value in error cause", "Dave Moten", "davidmoten", "05/30/15, 08:25:40 AM", "As per title, unit test included.", "NaN"], ["2995", "switchOnNext - ensure initial requests additive and fix request overflow", "Dave Moten", "davidmoten", "06/17/15, 12:11:16 PM", "`OperatorSwitch` didn't record the total of requests before first inner subscription occurring and had problems with request overflow. \n\nIncludes 4 unit tests that failed on the original code.", "NaN"], ["2996", "switchIfEmpty - fix backpressure bug and lost requests", "Dave Moten", "davidmoten", "06/01/15, 10:19:39 AM", "`OperatorSwitchIfEmpty` suffered from these conditions:\n- Backpressure was not enabled for the source observable (as opposed to the altenate) because `setProducer` called `super.setProducer` instead of `child.setProducer`\n- Requests could be lost\n\nBot the of the above problems are solved by using `ProducerArbiter` from @akarnokd.\n\nIncluded two unit tests that failed on previous code.", "NaN"], ["2997", "Fix retry() race conditions", "Dave Moten", "davidmoten", "06/17/15, 12:14:39 PM", "This is the continuation of #2930 with a rebased PR.\n\nThere are sporadic testing failures with this PR so not ready for merge. I'll note some failures with this one soon.", "NaN"], ["2999", "Fix a wrong assertion in assertError", "Shixiong Zhu", "zsxwing", "06/02/15, 09:04:20 AM", "NaN", "NaN"], ["3000", "Replace the Java 7 AssertionError(message, cause) with initCause", "Shixiong Zhu", "zsxwing", "06/02/15, 08:01:23 PM", "`AssertionError(message, cause)` is a Java 7 API. This PR uses RuntimeException to replace it, just like `assertNoErrors`.", "NaN"], ["3001", "use Subscribers.from()", "Dave Moten", "davidmoten", "06/03/15, 06:24:49 AM", "minor simplification in `OperatorDelayWithSelector` and `OperatorMulticast`", "NaN"], ["3009", "Observable.from(iterable) - ensure it.hasNext() is not called unnecessarily #3006", "Dave Moten", "davidmoten", "06/09/15, 07:38:35 AM", "This PR is a fix for #3006.\n\nEnsured `it.hasNext()` not called more often than required especially when unsubscription happens before completion.\n\nAdded two unit tests (one for fast path and the other for backpressure) that failed on previous codebase.", "NaN"], ["3012", "rx.Single", "Ben Christensen", "benjchristensen", "06/10/15, 07:35:43 PM", "Adds `rx.Single` as an \"Observable Future\" for representing work with a single return value.\n\nSee https://github.com/ReactiveX/RxJava/issues/1594 rx.Future/Task/Async/Single\n\nThis provides a type similar to `Future` in that it represents a scalar unit of work, but it is lazy like an `Observable` and many `Single`s can be combined into an `Observable` stream. Note how `Single.zip` returns `Single<R>` whereas `Single.merge` returns `Observable<R>`.\n\nExamples of using this class:\n\n``` java\nimport rx.Observable;\nimport rx.Single;\n\npublic class TaskExamples {\n\n    public static void main(String... args) {\n        // scalar synchronous value\n        Single<String> t1 = Single.create(t -> {\n            t.onSuccess(\"Hello World!\");\n        });\n\n        // scalar synchronous value using helper method\n        Single<Integer> t2 = Single.just(1);\n\n        // synchronous error\n        Single<String> error = Single.create(t -> {\n            t.onError(new RuntimeException(\"failed!\"));\n        });\n\n        // executing\n        t1.subscribe(System.out::println);\n        t2.subscribe(System.out::println);\n        error.subscribe(System.out::println, e -> System.out.println(e.getMessage()));\n\n        // scalar Singles for request/response like a Future\n        getData(1).subscribe(System.out::println);\n\n        // combining Tasks into another Task\n        Single<String> zipped = Single.zip(t1, t2, (a, b) -> a + \" -- \" + b);\n\n        // combining Singles into an Observable stream\n        Observable<String> merged = Single.merge(t1, t2.map(String::valueOf), getData(3));\n        Observable<String> mergeWith = t1.mergeWith(t2.map(String::valueOf));\n\n        zipped.subscribe(v -> System.out.println(\"zipped => \" + v));\n        merged.subscribe(v -> System.out.println(\"merged => \" + v));\n        mergeWith.subscribe(v -> System.out.println(\"mergeWith => \" + v));\n    }\n\n    /**\n     * Example of an async scalar execution using Single.create\n     * <p>\n     * This shows the lazy, idiomatic approach for Rx exactly like an Observable except scalar.\n     *\n     * @param arg\n     * @return\n     */\n    public static Single<String> getData(int arg) {\n        return Single.create(s -> {\n            new Thread(() -> {\n                try {\n                    Thread.sleep(500);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                // deliver value\n                    s.onSuccess(\"Data=\" + arg);\n                }).start();\n        });\n    }\n\n}\n```", "NaN"], ["3018", "TestSubscriber - fix awaitTerminalEventAndUnsubscribeOnTimeout", "Dave Moten", "davidmoten", "06/17/15, 11:57:30 AM", "The method `TestSubscriber.awaitTerminalEventAndUnsubscribeOnTimeout` did not unsubscribe on timeout. This PR fixes it.", "NaN"], ["3019", "Javadoc improvements for new Single class", "David Gross", "DavidMGross", "06/12/15, 04:33:44 PM", "NaN", "NaN"], ["3023", "ConnectableObservable autoConnect operator", "David Karnok", "akarnokd", "07/14/15, 04:50:06 PM", "There is a need for auto-connection capability for an arbitrary ConnectableObservable similar to how it is possible now to use cache() as an auto-connected unbounded replay.\n\nThe new `autoConnect()` method let's specify the number of `Subscriber`s required for the real connection to happen and also offers the ability to receive the connection `Subscription`.\n\nI've also updated the parameter name of `cache(int)` to reflect it is a capacity hint and not a bound.", "NaN"], ["3028", "Delay: error cut ahead was not properly serialized", "David Karnok", "akarnokd", "06/22/15, 09:05:03 AM", "Originally, the error through `delay` was emitted directly to the child without serializing in respect of an in-flight `onNext()`. This change schedules the error on the worker with no delay which ensures proper serialization. (The alternative would be to wrap the child into a `SerializedSubscriber`, however, that wouldn't immediately cancel any in-flight onNext schedules.)", "NaN"], ["3029", "Replaced tabs with spaces for good.", "David Karnok", "akarnokd", "06/18/15, 09:40:18 AM", "Somehow, every second rebase I do I get this tab-space conversion which pollutes my PRs. ", "NaN"], ["3031", "Fix OperatorFlatMapPerf.flatMapIntPassthruAsync Perf Test", "Ben Christensen", "benjchristensen", "06/18/15, 06:48:55 PM", "This test was reported broken in https://github.com/ReactiveX/RxJava/pull/2928#issuecomment-113229698\n\nFixing by adding the use of LatchedObserver.\n\nPreviously broken test results:\n\n```\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync         1  thrpt         5   363615.622   115041.519    ops/s\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync      1000  thrpt         5      350.204      125.773    ops/s\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync   1000000  thrpt         5        0.319        0.184    ops/s\n```\n\nFixed results:\n\n```\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync         1  thrpt         5   102109.681     8709.920    ops/s\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync      1000  thrpt         5      403.071      130.651    ops/s\nr.o.OperatorFlatMapPerf.flatMapIntPassthruAsync   1000000  thrpt         5        0.355        0.070    ops/s\n```", "NaN"], ["3033", "takeLast() javadoc fixes, standardize parameter names (count instead of num)", "Dave Moten", "davidmoten", "06/22/15, 09:04:07 AM", "This PR includes these changes:\n- standardized parameter names for `take`, `takeLast`, `skip`, `limit` to use `count` instead of `num`\n- enhanced the javadoc for `takeLast` so it is clear for all overrides that if the observable contains less than `count` items then all will be emitted.\n- improved the exception message thrown by `OperatorTakeLast` when `count` <0\n\nAddresses #3027", "NaN"], ["3034", "Instantiate EMPTY lazily", "Dave Moten", "davidmoten", "06/19/15, 06:28:46 AM", "The singleton `EMPTY` returned by `Observable.empty()` can be instantiated lazily because it is not always required.", "NaN"], ["3039", "Window with Observable: fixed unsubscription and behavior", "David Karnok", "akarnokd", "07/14/15, 04:39:32 PM", "Fixed unsubscription propagation of two Window variants (boundary, start-end).\n\nIn addition, there was a discrepancy reported on [StackOverflow](http://stackoverflow.com/questions/30963993/rxjava-window-buffer-overload-questions-incompatibility-with-rx-net) regarding the factory-boundary version. In Rx.NET, the factory is called whenever the previous boundary observable has produced a value. I.e., instead of a series of `onNexts` from the same `Observable`, it uses a series of `Observable`s with a single `onNext` emission as a boundary indicator.", "NaN"], ["3042", "add backpressure support for defaultIfEmpty() ", "Dave Moten", "davidmoten", "06/23/15, 07:03:39 AM", "When looking at implementing backpressure support for `defaultIfEmpty` the obvious strategy is to reuse `switchIfEmpty` and get rid of `OperatorDefaultIfEmpty`. That's what this PR does.\n\nThere is a little bit of overhead with using `Observable.from(Arrays.asList(defaultValue))` as the alternate observable. Might be nice to have a version of `Observable.just(item)` that supports backpressure to use in its place (you've mentioned this before @akarnokd). ", "NaN"], ["3043", "TestSubscriber javadoc cleanup", "Dave Moten", "davidmoten", "06/23/15, 07:01:07 AM", "- standardize on `Asserts that` and `Returns`\n- fix tenses and wordings", "NaN"], ["3045", "ElementAt request management enhanced", "David Karnok", "akarnokd", "07/14/15, 04:38:21 PM", "Based on #3014 \n\nThe operator can request up to Long.MAX_VALUE because it will only ever return a single value. If there are fewer elements, the onCompleted() will be triggered anyway. If there are more elements, the unsubscribe() will stop the sequence at the index.", "NaN"], ["3047", "Operator replay() now supports backpressure", "David Karnok", "akarnokd", "07/14/15, 04:35:53 PM", "I've added backpressure support to the replay() operator(s).\n\nRelated issue: #1487", "NaN"], ["3048", "CompositeException extra NPE protection", "David Karnok", "akarnokd", "07/14/15, 04:29:18 PM", "`CompositeException` won't crash if it received null by some means. A `null` collection or `null` collection item is replaced by a `NullPointerException` instance.\n\nSee also: #3046.", "NaN"], ["3049", "single: add toSingle method to Observable", "Lalit Maganti", "LalitMaganti", "06/24/15, 07:52:28 PM", "- closes ReactiveX/RxJava#3038\n- this method allows an observable which is guaranteed to return exactly one\n  item to be converted to a Single\n- NOTE: the semantics of this function are very similar to that of single\n- i.e. errors are passed through, more than one item results in an\n  IllegalArgumentException, completion without emission results in a\n  NoSuchElementException and exactly one item is passed through the onSuccess\n  method of SingleSubscriber", "NaN"], ["3052", "Reduce test failure likelihood of testMultiThreadedWithNPEinMiddle", "David Karnok", "akarnokd", "06/24/15, 11:45:26 AM", "Factored out the NPE before the thread creation as it can take several milliseconds and other values can just slip through.", "NaN"], ["3055", "toSingle() should use unsafeSubscribe", "Dave Moten", "davidmoten", "07/14/15, 04:25:00 PM", "As per my comment in #3049, `Observable.toSingle` should use `unsafeSubscribe` internally.\n\nThis PR includes a unit test that failed on previous code.", "NaN"], ["3058", "add and improve javadoc in Subscriber", "Dave Moten", "davidmoten", "07/14/15, 04:23:43 PM", "This PR \n- adds missing javadoc to the `Subscriber(Subscriber)` constructor\n- improves (hopefully!) the javadoc for the constructor `Subscriber(Subscriber,boolean)`\n- adds missing javadoc for `setProducer`", "NaN"], ["3065", "add Subscribers.wrap", "Dave Moten", "davidmoten", "07/14/15, 04:17:59 PM", "Add utility method to `Subscribers` to perform this common use case:\n\nNaming briefly discussed in #3057.\n\n``` java\nnew Subscriber<T>(subscriber) {\n\n    @Override\n    public void onCompleted() {\n        subscriber.onCompleted();\n    }\n\n    @Override\n    public void onError(Throwable e) {\n        subscriber.onError(e);\n    }\n\n    @Override\n    public void onNext(T t) {\n        subscriber.onNext(t);\n    }\n\n};\n```", "NaN"], ["3069", "Improve toSingle() javadoc (diagram, see also, since-annotation)", "David Gross", "DavidMGross", "07/13/15, 09:03:41 PM", "NaN", "NaN"], ["3077", "Add \"since\" annotations to javadocs for new Experimental/Beta methods", "David Gross", "DavidMGross", "07/23/15, 01:12:19 PM", "NaN", "NaN"], ["3078", "switchOnNext() - fix lost requests race condition ", "Dave Moten", "davidmoten", "08/12/15, 08:01:18 PM", "As per #3073 a race condition in `OperatorSwitch` means that requests can be lost. This PR uses `ProducerArbiter` to ensure all unfulfilled requests are carried through to the next `Observable`.\n\nI also changed `InnerSubscriber` to be a static class as opposed to an inner class just to decouple it from surrounding state. ", "NaN"], ["3079", "fix forEach javadoc", "Dave Moten", "davidmoten", "07/23/15, 01:11:02 PM", "`Observable.forEach` javadoc suffered from a bit of copy-and-paste and neglected to mention the possible throw of `OnErrorNotImplementedException`.\n\nAlso added a couple of unit tests.", "NaN"], ["3081", "Revert of cache/replay", "George Campbell", "abersnaze", "07/20/15, 04:57:13 PM", "#3076. I did revert commit of the PR that added back pressure support to the cache operator and ran a canary.  Our production systems seem stable now even with the new merge.", "NaN"], ["3082", "Observable.x(ConversionFunc) to allow extensions to Observables", "Aubrey Tull", "stealthcode", "08/07/15, 07:58:56 PM", "NaN", "NaN"], ["3085", "break tests as approach timeout so that don't fail on slow machines", "Dave Moten", "davidmoten", "07/23/15, 01:08:44 PM", "These tests were giving me regular failures on my slow laptop:\n- `OperatorMergeMaxConcurrentTest.testSimpleOneLessAsync`\n- `BackpressureTests.testOnBackpressureDrop`\n\nThey both loop repeatedly looking for failure or lockup. If the machine running the tests isn't fast enough then the tests timeout before reaching the desired number of loops. This PR adds a break to the tests when the loop has run for 9 seconds (timeout is 10 seconds).", "NaN"], ["3086", "improve ExecutorSchedulerTest.testOnBackpressureDrop", "Dave Moten", "davidmoten", "07/23/15, 01:07:48 PM", "This test fails for me occasionally on my slow laptop when full test suite run because work is scheduled for only 1ms in the future. I've decreased the probability of this one failing by changing the schedule to 50ms in the future.", "NaN"], ["3091", "Fix autoConnect calling onStart twice.", "David Karnok", "akarnokd", "07/20/15, 05:15:07 PM", "Forgot to add the wrapping.", "NaN"], ["3092", "Single.toObservable", "Ben Christensen", "benjchristensen", "07/20/15, 05:15:16 PM", "Adding `Single.toObservable` as companion to `Observable.toSingle`.", "NaN"], ["3093", "Fix request != 0 checking in the scalar paths of merge()", "David Karnok", "akarnokd", "07/20/15, 09:21:16 PM", "Requested amount could reach zero between the first check and entering the synchronized block where it has to be re-read in order to verify the scalar emission can really happen at that point; the new `testMergeAsyncThenObserveOnLoop` test failed with `MissingBackpressureException` after ~20 rounds on my i7 4770K.\n\nThis might or might not relate to the canary failure; if combined with retry(), it could have failed over and over, but I'm not sure where the worker retention might have happened.", "NaN"], ["3101", "Fix take swallowing exception if thrown by exactly the nth onNext call to it.", "David Karnok", "akarnokd", "07/24/15, 09:39:39 AM", "Fixes the case uncovered by #3095.", "NaN"], ["3103", "materialize() - add backpressure support", "Dave Moten", "davidmoten", "08/06/15, 08:26:09 AM", "As mentioned in #3098 the existing version of  `materialize` could deliver one more event than requested being the termination event (completion or error).\n\nThis PR ensures that a termination event is buffered till requested.", "NaN"], ["3104", "Fix SynchronizedQueue.equals", "Dave Moten", "davidmoten", "08/12/15, 07:37:47 PM", "Courtesy of findBugs, `SynchronizedQueue.equals()` is improperly implemented. I used Eclipse to generate a new `equals()` method based on the `list` field.\n\nThe existing code would even have failed to return true when testing queue equality with itself.\n\nI don't think this is causing problems anywhere but this PR will ensure that it doesn't cause a problem in the future.", "NaN"], ["3108", "remove OperatorOnErrorFlatMap because unused", "Dave Moten", "davidmoten", "07/24/15, 08:20:11 AM", "as per issue #3106, this PR removes `OperatorOnErrorFlatMap` because it is unused.", "NaN"], ["3109", "Unit tests and cleanup of JCTools' queues.", "David Karnok", "akarnokd", "07/24/15, 09:38:54 AM", "Increased test coverage of JCTools' queues and unsafe activities. Fixed inconsistencies in the queues.", "NaN"], ["3110", "Test coverage of rx.functions utility methods.", "David Karnok", "akarnokd", "07/24/15, 10:39:31 AM", "Since these are public API methods, their expected behavior needs to be verified.", "NaN"], ["3112", "Observers package test coverage and fixes.", "David Karnok", "akarnokd", "08/12/15, 07:48:53 PM", "This includes a rewrite of `SerializedObserver` to have a more cleaner exception semantics.\n\nThe `TestSubscriberTest` can be improved further but I've run out of time for today.", "NaN"], ["3116", "cache() now supports backpressure (again)", "David Karnok", "akarnokd", "07/27/15, 06:49:27 AM", "Implemented backpressure for cache() again and applied the hardenings as well.", "NaN"], ["3117", "Operator replay() now supports backpressure (again)", "David Karnok", "akarnokd", "07/27/15, 06:49:39 AM", "And applied the hardenings as well.", "NaN"], ["3118", "Implementing the SyncOnSubscribe", "Aubrey Tull", "stealthcode", "09/01/15, 07:13:16 PM", "This is useful for creating an observable that reads from a data source in a synchronous manner. This is a rewrite of the `AbstractOnSubscribe` experimental class based on the ideas in #3003.", "NaN"], ["3120", "No InterruptedException with synchronous BlockingObservable", "Yuya Tanaka", "ypresto", "07/30/15, 07:17:02 AM", "I'm using Observable for backport of Java 8's java.util.stream (i.e. [no more loops](http://www.deadcoderising.com/java-8-no-more-loops/)) for Android project.\n\n``` java\nList<Foo> list2 = Observable.from(list)\n        .map(...)\n        .filter(...)\n        .toList().toBlocking().single()\n```\n\nBut it sometimes emits InterruptedException at BlockingObservable.\nhttps://github.com/ReactiveX/RxJava/issues/1804#issuecomment-61396523\n\nAs the BlocingObservable is placed in map() of another observable with `subscribeOn(Schedulers.io())`, and it is unsubscribed from main thread, perhaps Future.cancel(true) is called on unsubscribing. (#1914)\n\nThis PR allows BlockingObsevable not to be interrupted when source observable emits synchronously, by checking current latch or queue state before awaiting for them.", "NaN"], ["3121", "Improve performance of NewThreadWorker, disable search for setRemoveOnCancelPolicy() on Android API < 21", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "08/01/15, 10:58:18 AM", "Resolves #3119.\n\nThis PR adds methods for detecting Android API Version and disables `NewThreadWorker.tryEnableCancelPolicy()` on Android API < 21 which has significant performance cost on Android.\n\nPR also improves performance of `NewThreadWorker.tryEnableCancelPolicy()` via caching Reflection.", "NaN"], ["3123", "Remove redundant type parameter in EmptyAction", "Jacek Rz", "jacek-rzrz", "08/12/15, 07:38:31 PM", "There is one too many.", "NaN"], ["3129", "Fix retry with predicate ignoring backpressure.", "David Karnok", "akarnokd", "08/06/15, 08:24:54 AM", "Apparently, we forgot about this operator. The backpressure handling is a trivial case with `ProducerArbiter`. I've also fixed some apparent code indentation error.\n\nOriginally reported in #3128 with a test case which I didn't include due to its lengthy nature; however, I did run the test manually and both passed after the fix.", "NaN"], ["3137", "FromIterable overhead reduction.", "David Karnok", "akarnokd", "08/12/15, 08:11:15 PM", "Some restructuring reduces the overhead of operators:\n- extending `AtomicLong` gives access to atomic intrinsics for the request accounting\n- loading the final fields into local variables prevents them from being reloaded from cache due to the atomics around them\n- request() is hot but generally too large due to the fastpath/slowpath fit and JIT may not want to pick it up early. By refactoring the two paths into two separate methods, it becomes inline friendly for the either of the paths.\n\nBenchmark results on my i7 4770K, Windows 7 x64, Java 8u51:\n\n![image](https://cloud.githubusercontent.com/assets/1269832/9147979/50438994-3d70-11e5-8e17-1af9b23c8506.png)\n\nThe benchmark from #3118 gives this result:\n\n![image](https://cloud.githubusercontent.com/assets/1269832/9148013/f49effa0-3d70-11e5-9d66-346bfaba6daa.png)", "NaN"], ["3138", "Range overhead reduction.", "David Karnok", "akarnokd", "08/12/15, 08:14:31 PM", "Applied some refactorings and local variable usage to reduce the overhead.\n\nFew observations:\n- Having too many local variables may cause register spill, even on x64 which makes some `size` benchmark faster while other slower.\n- The observeOn benchmarks are quite hectic because of receiving thread migration caused by the round-robin worker assignment. It affects the benchmarks with 1 or 1000 elements in the stream.\n- Note that the previous `OperatorRangePerf` `size = 1` measured the speed of `just` due to the optimization of `range()`. The updated perf now instantiates the `OnSubscribeRange`.\n- Note that the `observeOn` benchmark with `size = 1` run the `just()` as well.\n\nBenchmark comparison (i7 4770K, Windows 7 x64, Java 8u51)\n![image](https://cloud.githubusercontent.com/assets/1269832/9153053/5f501902-3e42-11e5-85ea-8ff1f6725c08.png)", "NaN"], ["3141", "Improved Scheduler.Worker memory leak detection", "David Karnok", "akarnokd", "08/09/15, 09:43:01 AM", "The former Executor-based check instantiated the wrong worker. In addition, I've refactored the common parts, added check for periodic task retention (after the first round) and added the checks to computation scheduler test as well.", "NaN"], ["3142", "Remove redundant final modifier from static method in Actions", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "08/12/15, 09:46:43 PM", "NaN", "NaN"], ["3143", "Fix for BackpressureUtils method javadoc", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "08/12/15, 12:02:59 PM", "NaN", "NaN"], ["3144", "Remove redundant cast in Exceptions", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "08/12/15, 07:35:27 PM", "NaN", "NaN"], ["3147", "Remove unnecessary static modifier", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "08/12/15, 07:36:29 PM", "P.S. \n@benjchristensen @akarnokd sorry for large amount of simple pull requests, I'm doing full code review of RxJava sources http://artemzin.com/blog/rxjava-code-review-part-1/ and I'll create PRs and issues during this review.\n\nI'll try to group changes by themes so it will be easy to review them. Looks like this adventure is going to be part of #3145!", "NaN"], ["3149", "Scheduler shutdown capability", "David Karnok", "akarnokd", "10/01/15, 06:49:09 PM", "Repost of #3022.", "NaN"], ["3150", "Window operators now support backpressure in the inner observable.", "David Karnok", "akarnokd", "11/23/15, 11:17:18 PM", "Repost of #3050.", "NaN"], ["3154", "Add Observable.fromCallable() as a companion for Observable.defer()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "09/04/15, 09:19:11 PM", "Yep, this is a new operator.\n\nMotivation? `Observable.defer()` requires function that returns `Observable<T>` when usually we don't want to create `Observable<T>` manually, we just want to defer execution of some function.\n\nLike this:\n\n``` java\nObservable\n  .fromCallable(() -> someFunc())\n  .subscribeOn(...)\n  ...\n```\n\nInstead of this:\n\n``` java\nObservable\n  .defer(() -> Observable.just(someFunc()))\n  .subscribeOn(...)\n  ...\n```\n\nAnd more important case with deferring code that throws checked exceptions:\n\n``` java\nObservable\n  .fromCallable(() -> {\n    Value value = ...;\n    // some code\n    return value;\n  })\n .subscribeOn(...)\n ...\n```\n\nInstead of this:\n\n``` java\nObservable\n  .defer(() -> {\n    try {\n      Value value = ...;\n       // some code that throws checked exceptions\n      return Observable.just(value);\n    } catch (Exception e) {\n      return Observable.error(e);\n    }\n  })\n .subscribeOn(...)\n ...\n```\n\nI'd use name `defer` but both methods will have same type erasure (`Func0<Observable>` and `Func0<T>`), so I had to use a different name.\n\nQuestions:\n1. Useful or not? For me \u2014 deferring some function call is a common task.\n2. Naming.\n\nIf the decision about this operator will be positive \u2014 I'll add javadoc to this PR and then create separate PR for `Single.fromCallable()`.", "NaN"], ["3155", "SafeSubscriber - report onCompleted unsubscribe error to RxJavaPlugin ", "Dave Moten", "davidmoten", "08/24/15, 09:17:29 PM", "Discussed in #2464, when an observable emits `onCompleted` but `unsubscribe` in `SafeSubscriber` throws then the error should be reported to the `RxJavaPlugin` error handler and if that fails a stack trace is written to `System.err`.", "NaN"], ["3167", "Fixed negative request due to unsubscription of a large requester", "David Karnok", "akarnokd", "08/24/15, 09:18:56 PM", "Reported in #3166 \n\nWhat happened is that if there are multiple subscribers, one with larger requests than the others and it unsubscribed early, the new max request of the others then became smaller than before which yielded a negative difference and thus a negative request.", "NaN"], ["3169", "Merge can now operate in horizontally unbounded mode.", "David Karnok", "akarnokd", "11/10/15, 09:39:27 PM", "Resolves #3156 \n\nNote that since the default merge operation is unbounded, this change could lead to an excessive memory usage when flatMapping fast sources. Note that the pre 1.0.13 version did this albeit on a slighty slower path.\n\nThe change also affects the scalar optimization as well. Pre 1.0.13 implicitly limited the concurrency level to RxRingBuffer.SIZE when scalars were received. This version now fills the queue up to the concurrency level.\n\nFor 2.0, I suggest having a bounded behavior by default and require the developer to specify Integer.MAX_VALUE to go for the unbounded behavior so he/she knows about the consequences.", "NaN"], ["3171", "Scan backpressure and first emission fix", "David Karnok", "akarnokd", "08/28/15, 05:27:44 PM", "Fixes #3168\n\nIf there is no initial value, there is no need to manipulate the request amounts.\n\nIf there is an initial value, we must do a full emitter-loop with value queueing because now the downstream request can race with the first onNext or the setting of the upstream producer. The downside is the increased overhead which should be reduced when the spsc unbounded queues get merged.", "NaN"], ["3172", "RS dependency, some basic Observable/Observer methods.", "David Karnok", "akarnokd", "08/25/15, 07:00:11 AM", "- Added compile dependency for reactive-streams.\n- Added some basic methods to Observable.\n\nAs long as the project defaults to 1.x, the create PR webpage will take a long time to render because it tries to compare a small branch 2.x against the huge 1.x branch with lots of 'deleted' content. A separate project would be much simpler to operate.", "NaN"], ["3174", "Blocking subscribe methods for convenience", "David Karnok", "akarnokd", "10/08/15, 04:45:44 PM", "Mirroring some `Observable.subscribe` methods on `BlockingObservable`.\n\nRelated discussion: #3063.", "NaN"], ["3175", "Some safe queue implementations", "David Karnok", "akarnokd", "08/21/15, 08:36:42 PM", "Spsc:\n- power-of-2 array\n- exact capacity array\n- linked array\n\nMpsc:\n- linked", "NaN"], ["3177", "BackpressureUtils capped add/multiply methods + tests", "David Karnok", "akarnokd", "08/24/15, 09:17:53 PM", "Common methods to add and multiply longs and cap the result at Long.MAX_VALUE in case of an overflow.", "NaN"], ["3181", "MapNotification producer NPE fix", "David Karnok", "akarnokd", "08/24/15, 09:19:08 PM", "Fixed the NPE reported in #3180.", "NaN"], ["3183", "Refactored exception reporting of most operators.", "David Karnok", "akarnokd", "08/28/15, 06:43:38 PM", "Added two convenient methods to `Exceptions` which either throws a fatal exception or reports it with our without the causing value to an Observer.", "NaN"], ["3185", "PublishSubject, AsyncSubject and a few helper classes", "David Karnok", "akarnokd", "08/25/15, 01:47:30 PM", "We can use `Publisher` directly and no need for `OnSubscribe`. `Operator` is still quite a convenience.", "NaN"], ["3186", "Disposable interface and a bunch of general resource containers.", "David Karnok", "akarnokd", "08/25/15, 02:59:30 PM", "Mostly internal addition plus the public `Disposable` interface.\n\nNaming of packages and classes can be changed at any time if one wishes...", "NaN"], ["3188", "Schedulers (a few) + API, slight modifications to other classes,", "David Karnok", "akarnokd", "08/26/15, 06:58:42 AM", "incomplete.\n\nThis PR has a few TODO questions that require decisions.", "NaN"], ["3189", "Added a bunch of basic event sources and helper Subscription", "David Karnok", "akarnokd", "08/26/15, 07:52:17 AM", "implementations.", "NaN"], ["3190", "Basic Subscribers and plugin class", "David Karnok", "akarnokd", "08/26/15, 09:41:31 AM", "- SafeSubscriber\n- SerializedSubscriber\n- RxJavaPlugins (partial)", "NaN"], ["3191", "Operators map and flatMap", "David Karnok", "akarnokd", "08/26/15, 10:17:25 AM", "With all `flatMap`, `merge` and `mergeDelayError` overloads.", "NaN"], ["3193", "ConnectableObservable and autoConnect", "David Karnok", "akarnokd", "08/26/15, 10:44:04 AM", "`refCount` will come later, although its behavior is sometimes surprising to developers: it disconnects and reconnects in certain use pattern. The alternative is to use `autoConnect(n, connectionConsumer)` which lets the developer explicitly disconnect.", "NaN"], ["3194", "Operators of take (untimed), plugin error reporting fix for other", "David Karnok", "akarnokd", "08/26/15, 11:18:18 AM", "operators", "NaN"], ["3195", "Operators of skip (untimed), filter; fix to takeUntil", "David Karnok", "akarnokd", "08/26/15, 11:41:34 AM", "In `takeUntil`, the other source may emit an `onError` before the main source sets a subscription. The fix makes sure if other is first, it sets an empty subscription before emitting the error (this is an RS specific thing, doesn't affect 1.x).", "NaN"], ["3196", "The skips and filter operators added to Observable", "David Karnok", "akarnokd", "08/26/15, 11:54:24 AM", "Forgot to add them in the previous PR.", "NaN"], ["3197", "Operator toList and toSortedList", "David Karnok", "akarnokd", "08/26/15, 12:33:14 PM", "`toSortedList` is implemented with `toList().map()`.", "NaN"], ["3198", "Operators publish, replay and cache.", "David Karnok", "akarnokd", "08/26/15, 02:56:41 PM", "I'm not 100% certain about the the timing of the onSubscribe() calls inside the operators; I'll have a second run over them once the tests are also added.", "NaN"], ["3199", "Operators all, any, count, elementAt, single", "David Karnok", "akarnokd", "08/26/15, 05:26:37 PM", "- isEmpty == any(v -> true)", "NaN"], ["3200", "All standard schedulers ported and cleaned up.", "David Karnok", "akarnokd", "08/26/15, 07:38:17 PM", "- updated RxJavaPlugins and added decorator calls to the Schedulers.", "NaN"], ["3202", "Operators observeOn, subscribeOn and unsubscribeOn", "David Karnok", "akarnokd", "08/26/15, 09:57:31 PM", "Few considerations:\n- Added an option to specify if `subscribeOn` should also request on the same worker or not. If not, the consumer thread may freely grab the producer and thus reduce the inter-thread communication.\n- The scheduling of the subscription in `subscribeOn` now can't be cancelled because in RS, the indication of 'subscription' is to call `onSubscribe` on the proper thread. Since the `Subscriber` can't call cancel until it receives the subscription through `onSubscribe` the time it receives the subscription there is no point in cancelling the operation.\n- Added two parametrization option to `observeOn`: the ability to delay the error after all the `onNext` events and the ability to specify the buffer size. Since many get surprised by the 1.x behavior, this should help the situation and also makes it possible to avoid wrapping/materializing the sequence. The second ability should help with fine tuning a particular sequence independent to the other sequences.\n- I've padded away (since the `@Contended` annotation is not standard) the request and wip counters in `observeOn`. If unpadded, they bash each other constantly and I've experienced 15-20% throughput loss.", "NaN"], ["3203", "Implemented the AsyncOnSubscribe", "Aubrey Tull", "stealthcode", "09/11/15, 07:26:13 PM", "This includes the first functioning unit tests. This still has a few iterations to go but opening PR for review.", "NaN"], ["3204", "Operator concatMap and related convenience methods", "David Karnok", "akarnokd", "08/27/15, 08:26:20 AM", "This includes\n- concatMap\n- concat\n- startWith\n- endWith\n- concatWith\n- mergeWith (via merge)", "NaN"], ["3205", "Lambda-based subscribe and lifecycle tracking methods", "David Karnok", "akarnokd", "08/27/15, 09:19:02 AM", "- forEachWhile that allows stopping the stream from within the onNext callback by returning false.\n\nThe lambda subscribe()s return a Disposable so they can be asynchronously cancelled.", "NaN"], ["3206", "TestSubscriber implemented", "David Karnok", "akarnokd", "08/27/15, 11:23:28 AM", "- internal `EmptySubscriber`", "NaN"], ["3207", "Some Repeat + Retry methods, fix to SubscriptionArbiter.", "David Karnok", "akarnokd", "08/27/15, 12:48:22 PM", "I'll post the `retryWhen` and `repeatWhen` separately.", "NaN"], ["3208", "Operators interval and intervalRange", "David Karnok", "akarnokd", "08/27/15, 01:35:17 PM", "`intervalRange` helps when one needs a fixed amount of timed values and wants to avoid map+take overhead.", "NaN"], ["3209", "Operators onBackpressure(Drop|Buffer|Latest)", "David Karnok", "akarnokd", "08/27/15, 02:41:30 PM", "There won't be `onBackpressureBlock` although it can work with `subscribeOn(scheduler, false)` since that won't schedule the request behind the blocked emission.\n\nOperator `onBackpressureBuffer` has now a `delayError` option; I'd like to give the developer the option on this one. Naturally, the default is false.", "NaN"], ["3212", "Operator groupBy", "David Karnok", "akarnokd", "08/27/15, 07:08:46 PM", "This default implementation supports backpressure but doesn't coordinate the group requests with the main requests in any way. \n\nThis means, for example, that given a million element source and a constant true key selector will queue up all million elements until a single subscriber consumes them.\n\nThe 1.x version had some coordination and all sorts of group management logic which I don't understand. I'll revisit this operator later.", "NaN"], ["3214", "Fix to Notification equals method.", "Michael Wright", "wrightm", "08/28/15, 05:30:48 PM", "The Notification method was missing a check to hasValue and hasThrowable. This allowed for a null value onNext Notification to equal an Object notification. A similar bug for onError Notification events also existed.", "NaN"], ["3215", "Operator zip plus Function3..Function9.", "David Karnok", "akarnokd", "08/27/15, 09:13:31 PM", "FunctionX extends Function<Object[], R> and the default method for it unpacks the array.", "NaN"], ["3220", "Strenghtening flatMap against misbehaving sources, TestSubscriber +", "David Karnok", "akarnokd", "08/28/15, 07:54:40 AM", "methods.", "NaN"], ["3222", "Operator WithLatestFrom, PublishLift to help with operator fusing,", "David Karnok", "akarnokd", "08/28/15, 09:55:20 AM", "SubscriptionHelper for common validation logic.\n\nThe SubscriptionHelper's methods are not yet applied to former operators.", "NaN"], ["3223", "Fixes to classes, convenience operators mostly.", "David Karnok", "akarnokd", "08/28/15, 11:43:24 AM", "Also corrected the naming of one-shot timer and fixed-period interval", "NaN"], ["3224", "Operator distinct, timeInterval, common Timed container.", "David Karnok", "akarnokd", "08/28/15, 01:11:20 PM", "Instead of having `Timestamped` and `TimeInterval` with the same structure, let's have just a single one: `Timed`.\n\n`distinctUntilChanged` is implemented via special `distinct`.", "NaN"], ["3225", "Operations doOnX.", "David Karnok", "akarnokd", "08/28/15, 01:42:48 PM", "The various doOnXXX operator overloads + range(scheduler) + repeat(scheduler).", "NaN"], ["3226", "Operator collect, toMap and toMultimap based on it.", "David Karnok", "akarnokd", "08/28/15, 02:08:25 PM", "I know `toList` can be also implemented this way but its frequent use makes it eligible for a custom operator.", "NaN"], ["3227", "collect: javac is unable to select the right overload for some reason", "David Karnok", "akarnokd", "08/28/15, 02:28:49 PM", "javac is unable to select the right overload for some reason", "NaN"], ["3228", "ConditionalSubscriber to help fusing filter-like operators into", "David Karnok", "akarnokd", "08/28/15, 04:46:32 PM", "emission/drain loops.\n\nThis may help with operators that call request(1) to replenish a dropped value (filter for example).\n\nI've only implemented this with the array-source and with a lot of code duplication. I'll think about how to reduce this duplication via inheritance or with lambdas (which might negate the benefit).", "NaN"], ["3229", "Operator sample with time or with another publisher", "David Karnok", "akarnokd", "08/28/15, 05:59:28 PM", "I'd like to state that I try to use `Publisher` as much as possible: this adds the benefit that RxJava can use someone else's publisher without the explicit need to wrap it into an `Observable` all the time.", "NaN"], ["3230", "Operato switchIfEmpty, defaultIfEmpty", "David Karnok", "akarnokd", "08/28/15, 06:29:55 PM", "NaN", "NaN"], ["3231", "Operator takeLast time + size, skipLast time", "David Karnok", "akarnokd", "08/28/15, 08:06:59 PM", "- bufferSize +delayError options, as usual by now", "NaN"], ["3232", "Operators first, last, multi-offer for SpscLinkedArrayQueue", "David Karnok", "akarnokd", "08/28/15, 08:42:48 PM", "The multi-offer helps with the timed skipLast. By offering two at once, the drain won't loop until the second value arrives.", "NaN"], ["3234", "Operator switchMap, switchOnNext, added missing merge and concat", "David Karnok", "akarnokd", "08/29/15, 12:28:57 AM", "overloads, some refactorings", "NaN"], ["3235", "Operator amb, ambWith", "David Karnok", "akarnokd", "08/29/15, 08:20:41 AM", "Very similar to zip in terms of structure.", "NaN"], ["3237", "Operators onErrorReturn, onErrorResumeNext, onExceptionResumeNext", "David Karnok", "akarnokd", "08/29/15, 10:18:38 AM", "- onErrorReturnValue", "NaN"], ["3238", "Operator retryWhen, repeatWhen; Notification", "David Karnok", "akarnokd", "08/29/15, 12:21:46 PM", "- a fix to OperatorOnErrorNext", "NaN"], ["3239", "Operator takeWhile", "David Karnok", "akarnokd", "08/29/15, 12:40:39 PM", "- a small correction to ConditionalSubscriber: the default onNext removed to avoid bad usage (i.e., not requesting if not accepted).", "NaN"], ["3240", "Operator sequenceEqual", "David Karnok", "akarnokd", "08/29/15, 02:00:45 PM", "Inlined (no zipping and wrapping like in 1.x)", "NaN"], ["3241", "Operator combineLatest", "David Karnok", "akarnokd", "08/29/15, 05:10:49 PM", "- Some minor internal refactorings in `Observable`.", "NaN"], ["3242", "Operator using, some internal refactorings.", "David Karnok", "akarnokd", "08/29/15, 05:49:57 PM", "EmptySubscriber convenience method to reduce boilerplate.", "NaN"], ["3243", "Operator materialize, dematerialize, minor notification fix.", "David Karnok", "akarnokd", "08/29/15, 06:21:04 PM", "`Optional.ofNullable` returns an empty instance, not a null-containing one.", "NaN"], ["3244", "Operators delay, delaySubscription, share.", "David Karnok", "akarnokd", "08/29/15, 07:02:07 PM", "The `delaySubscription` is implemented via composition.", "NaN"], ["3245", "BlockingObservable, next, latest, mostRecent, first, last, single,", "David Karnok", "akarnokd", "08/29/15, 09:45:50 PM", "subscribe, stream, forEach, iterator\n\nNow it extends both Publisher and Iterable directly.", "NaN"], ["3246", "Operator refCount", "David Karnok", "akarnokd", "08/29/15, 10:06:51 PM", "Converted nicely.", "NaN"], ["3247", "UnicastSubject, onBackpressureBuffer-like behavior for a single", "David Karnok", "akarnokd", "08/29/15, 11:19:37 PM", "subscriber only.\n\nShould be the official API replacement of BufferUntilSubscriber.", "NaN"], ["3248", "Operators buffer: size, time, size + time", "David Karnok", "akarnokd", "08/30/15, 11:38:24 AM", "The boundary version will come next.", "NaN"], ["3250", "Operator buffer with boundary and open-close, fixes to the timed", "David Karnok", "akarnokd", "08/30/15, 04:40:15 PM", "variants. \n\nAdded `QueueDrain` and `QueueDrainSubscriber` for common queue-drain\noperations. Not applied outside the `buffer()`s as of now.", "NaN"], ["3251", "Window with count, count + skip.", "David Karnok", "akarnokd", "08/30/15, 05:53:17 PM", "Luckily, there is no need to count the emission per subject but just use\narithmetic.", "NaN"], ["3253", "Operator window timespan, timespan + count, timespan + timeskip", "David Karnok", "akarnokd", "08/30/15, 10:37:28 PM", "The timed buffer and window operators are quite complicated in terms of\nconcurrency. I'm not sure if all corner cases are covered.", "NaN"], ["3254", "Operator debounce (time, selector), throttleWithTimeout (alias)", "David Karnok", "akarnokd", "08/31/15, 08:19:25 AM", "(Taking a break from `window()` operators.)", "NaN"], ["3255", "Operator scan, reduce. Fixes to TestSubscriber async behavior.", "David Karnok", "akarnokd", "08/31/15, 10:30:31 AM", "TestSubscriber now does asynchronous requests and cancellation.", "NaN"], ["3256", "Fixed debounce behavior, added throttleFirst, throttleLast alias", "David Karnok", "akarnokd", "08/31/15, 11:47:17 AM", "I've implemented the wrong debounce logic in #3254 .", "NaN"], ["3257", "Operator timeout, onBackpressureBuffer(onOverflow), fixes to parameter", "David Karnok", "akarnokd", "08/31/15, 03:00:29 PM", "types.\n- FullArbiter and FullArbiterSubscriber to work with total-ordered notifications across sources.\n\nI've also sorted `Observable` members.", "NaN"], ["3258", "ReplaySubject", "David Karnok", "akarnokd", "08/31/15, 07:55:36 PM", "Has full backpressure support (replays as many elements as requested).", "NaN"], ["3259", "RxJavaPlugins extended with handler registration and reset support", "David Karnok", "akarnokd", "08/31/15, 08:38:13 PM", "NaN", "NaN"], ["3260", "BehaviorSubject", "David Karnok", "akarnokd", "08/31/15, 10:52:06 PM", "The continuous delivery guarantee and the no-duplication requirement makes it necessary to read/write an index and object values together. I've implemented this with another synchronized block. The alternatives are:\n- use an object of (index, value) and atomically set the reference (requires allocation on every value delivered.\n- this current nested-synchronized block (no deadlock)\n- use a reader-writer lock which works better when concurrent subscribers want to do their first emission at the same time.", "NaN"], ["3261", "Fixes to ReplaySubject and BehaviorSubject.", "David Karnok", "akarnokd", "09/01/15, 08:09:15 AM", "ReplaySubject: time and size bound trimming was incorrectly deleting the terminal notification\n\nBehaviorSubject: double emission of the same value. The following loop fails (prints `Bad pattern received: [2, 2]`) with 1.x:\n\n``` java\nfor (int i = 0; i < 1_000_000; i++) {\n    if (i % 1000 == 0) {\n        System.out.println(\"--> \" + i);\n    }\n    BehaviorSubject<Object> bs = BehaviorSubject.create(1);\n\n    List<Object> list = new ArrayList<>();\n    CyclicBarrier cb = new CyclicBarrier(2);\n    CountDownLatch cdl = new CountDownLatch(1);\n\n    ForkJoinPool.commonPool().submit(() -> {\n        cb.await();\n        bs.onNext(2);\n        cdl.countDown();\n        return null;\n    });\n\n    cb.await();\n    bs.subscribe(v -> list.add(v));\n    cdl.await();\n\n    if (Arrays.asList(2).equals(list)) {\n        continue;\n    }\n    if (Arrays.asList(1, 2).equals(list)) {\n        continue;\n    }\n    System.out.println(\"Bad pattern received: \" + list);\n        break;\n    }\n}\n```", "NaN"], ["3262", "Operator window with boundary (exact, selector, exact + supplier).", "David Karnok", "akarnokd", "09/01/15, 10:36:54 AM", "I'm not 100% certain about the state management: when to let the main\nsource keep running and when to stop. I.e., the in the selector version,\nif the other completes, it means no new window will be opened but the\nactive should keep receiving values until their closer fires. If all\nsuch closers have fired, the main can be stopped.", "NaN"], ["3263", "Subjects onNext and onError null safety", "David Karnok", "akarnokd", "09/01/15, 10:53:19 AM", "Subjects are exposed so they may receive nulls that would mess up the internal state.", "NaN"], ["3264", "AsyncObserver", "David Karnok", "akarnokd", "09/01/15, 01:09:13 PM", "It is meant to be somewhat a replacement for 1.x `rx.Subscriber`, but it\ndoesn't support `Subscriber` chaining.\n\nI call it an `Observer` because one only needs to implement `onNext`, `onError`\nand `onComplete` as with `rx.Observer`", "NaN"], ["3265", "RxJavaPlugins performance enabling fix & lockdown.", "David Karnok", "akarnokd", "09/01/15, 01:32:35 PM", "By using null checks and direct returns we can avoid a dynamic dispatch\non a volatile variable which always more expensive.\n\nI've also added the `lockdown()` method to prevent any further changing\nof the plugin handlers. There is a `unlock` package-private method to\nallow testing the plugin in the locked state and then return to the\nunlocked state as other tests may want to install custom plugins.", "NaN"], ["3267", "Operator generate: create an observable that generates values by calling", "David Karnok", "akarnokd", "09/01/15, 02:35:27 PM", "a function and handling backpressure/resource cleanup automatically.\n\nThe logic is based on @stealthcode 's SyncSubscriber proposal from 1.x\nbut using only the lambda-form.", "NaN"], ["3268", "Standard disposables, changes to resource containers to support them.", "David Karnok", "akarnokd", "09/01/15, 07:53:57 PM", "- `Disposables` utility class with wrapper methods named `from`.", "NaN"], ["3270", "UnicastSubject javadoc, support for onCancelled notification.", "David Karnok", "akarnokd", "09/01/15, 08:30:54 PM", "The cancellation notification will come in handy with window (and in\ngroupby). It helps with the case when the main source has been cancelled\nbut the individual windows/groups are still being consumed. If those get\ncancelled by their single Subscribers, this notification will reach the\nsource and once all windows/groups get cancelled, the main source can be\ncancelled.\n\nFix to generator production accounting.", "NaN"], ["3271", "First unit test and fixes to operators.", "David Karnok", "akarnokd", "09/02/15, 09:11:23 AM", "Fixed mistakes in the operators.", "NaN"], ["3273", "Fix attempt to the firehose test.", "David Karnok", "akarnokd", "09/02/15, 09:34:32 AM", "Either the test is non-deterministic or I still have a bug.", "NaN"], ["3275", "Simplest combineLatest tests and fix to groupBy.", "David Karnok", "akarnokd", "09/02/15, 10:28:57 AM", "Forgot to deliver the value inside the GroupedUnicast drain loop.", "NaN"], ["3276", "Simplest concat test from 1.x", "David Karnok", "akarnokd", "09/02/15, 11:19:53 AM", "I've also added convenience overloads to concat 2-9 sources because `concat(Publisher...)` causes overload resolution conflict with `concat(Publisher<Publisher>)`.", "NaN"], ["3277", "ErrorHandlingTests and EventStream", "David Karnok", "akarnokd", "09/02/15, 11:35:24 AM", "I've changed them to use `safeSubscribe` because plain RS subscribers\nare not expected to throw.", "NaN"], ["3278", "Simplest tests of groupBy, merge and Notification", "David Karnok", "akarnokd", "09/02/15, 11:51:09 AM", "We need to talk about `Notification`s.", "NaN"], ["3279", "ConversionTest and DoOnTest", "David Karnok", "akarnokd", "09/02/15, 12:25:22 PM", "Forgot to call request, refactored some validation code.", "NaN"], ["3280", "ObservableTests and bugfixes.", "David Karnok", "akarnokd", "09/02/15, 02:36:31 PM", "Bugfixes in many operators.", "NaN"], ["3282", "Simpler tests for window reduce, scan, starWith.", "David Karnok", "akarnokd", "09/02/15, 05:40:48 PM", "I've refectored the mockSubscriber method out into a helper enum since it will be required almost everywhere.", "NaN"], ["3283", "SubscriberTests port from 1.x", "David Karnok", "akarnokd", "09/02/15, 06:10:25 PM", "They seem to try testing the request mechanism on thin implementations and are somewhat of no use.", "NaN"], ["3284", "Simpler tests of throttleLast, throttleWithTimeout, zip", "David Karnok", "akarnokd", "09/02/15, 07:00:42 PM", "Tests expect certain operator parameter orders so I'd expect a few changes in Observable in this regard.\n\nFixed timing bug with `throttleWithTimeout` but I'm not 100% certain it works as expected beyond this single test.", "NaN"], ["3285", "Added latch to async SyncOnSubscrbeTest", "Aubrey Tull", "stealthcode", "09/04/15, 09:00:56 PM", "NaN", "NaN"], ["3286", "1.x: Implements BlockingSingle", "Ho Yan Leung", "hyleung", "11/11/15, 11:03:39 AM", "Adds BlockingSingle (issue #3252), the blocking version of rx.Single.\n\nBlockingSingle has the following methods:\n- `from(Single)` -- factory method for creating a `BlockingSingle` from a\n  `Single`\n- `value()` -- returns the value emitted from the Single\n- `toFuture()` -- returns a `java.util.concurrent.Future`\n\nCouldn't actually think of any other useful operations to perform on `BlockingSingle` - in comparison to `BlockingObservable`, there's not much to this class (at the moment).", "NaN"], ["3292", "Unit test for Blocking operators.", "David Karnok", "akarnokd", "09/03/15, 07:16:35 PM", "NaN", "NaN"], ["3293", "Test some UnicastSubject, cache, NotificationLite, amb", "David Karnok", "akarnokd", "09/03/15, 08:01:55 PM", "- bugfix to cache, skipUntil and takeUnit", "NaN"], ["3294", "More tests and bugfixes to operators.", "David Karnok", "akarnokd", "09/03/15, 10:06:38 PM", "NaN", "NaN"], ["3297", "2.x: unit tests and fixes for fromIterable and range", "David Karnok", "akarnokd", "09/04/15, 08:12:22 AM", "NaN", "NaN"], ["3298", "2.x: tests for refCount and timer, fixes to flatMap, publish and range", "David Karnok", "akarnokd", "09/04/15, 09:36:56 AM", "NaN", "NaN"], ["3299", "2.x: test for toFuture and using, changes according to the test", "David Karnok", "akarnokd", "09/04/15, 10:39:10 AM", "expectations\n\nSome tests are now skipped due to being invalid in RS.", "NaN"], ["3300", "2.x: test for operators all, any, asObservable, fixes to all and any", "David Karnok", "akarnokd", "09/04/15, 11:41:29 AM", "Bugfix: since they would emit a value on an empty source, they have to hold it until an actual request comes in.", "NaN"], ["3301", "2.x: test for buffer, I'm still missing the boundary-supplier version", "David Karnok", "akarnokd", "09/04/15, 01:09:17 PM", "NaN", "NaN"], ["3303", "2.x: added missing buffer overload (with boundary selector)", "David Karnok", "akarnokd", "09/05/15, 10:54:15 AM", "- added AsyncSubscription that allows setting the actual subscription\n  later and can hold a resource. It has less overhead than\n  SubscriptionArbiter due to single use.", "NaN"], ["3305", "2.x: classes Single and NbpObservable", "David Karnok", "akarnokd", "09/06/15, 07:02:50 AM", "`Single` is a deferred single-value emitting Observable.\n\n`NbpObservable` is the non-backpressure Observable, named this way until\nthe main Observable gets all its tests ported so a refactor can deal\nwith all of them.\n\nI've implemented the most basic construction and operator methods on\nthem.", "NaN"], ["3306", "2.x: operators cast and concat tests", "David Karnok", "akarnokd", "09/06/15, 04:33:02 PM", "The concat reuses the same inner subscriber to save on its allocation\ncost which works only if the inner source conforms with the spec and\ndoesn't emit any event after an onComplete(). There is a test that\nexplicitly calls onComplete() twice to test the resilience of concat.\nThe current workaround makes this test pass but any async non-conforming\nsource may still bug out the operator. \n\nThis is a tradeoff between safety and performance. If we'd expect such\nnon-conforming behavior, the current optimization has to be turned into\na regular individually allocated inner subscribers.", "NaN"], ["3307", "2.x: Operator debounce and defaultIfEmpty, fix to debounce behavior", "David Karnok", "akarnokd", "09/06/15, 05:08:58 PM", "When debounce is completed, the last value encountered is emitted immediately.", "NaN"], ["3308", "2.x: operator test delay, dematerialize", "David Karnok", "akarnokd", "09/06/15, 05:36:29 PM", "NaN", "NaN"], ["3309", "2.x: operator test distinct, distinctUntilChanged and doOnEach", "David Karnok", "akarnokd", "09/06/15, 06:23:41 PM", "Note: several tests have been ignored due to non-conformance with RS\n\nAdded missing distinct and distinctUntilChanged overloads, fixed doOnEach not cancelling upstream if the callback crashes on the onNext path.", "NaN"], ["3310", "2.x: operator test doOn(Request|Subscribe|Unsubscribe).", "David Karnok", "akarnokd", "09/06/15, 06:44:49 PM", "NaN", "NaN"], ["3311", "2.x: operator test elementAt, filter, finally, first", "David Karnok", "akarnokd", "09/06/15, 07:15:53 PM", "- fixed exceptions throw by elementAt", "NaN"], ["3312", "2.x: operator test flatMap, merge, mergeDelayError", "David Karnok", "akarnokd", "09/07/15, 08:31:10 AM", "- added operator flatMap of notifications, fixed a bug in onBackpressureBuffer\n\nNote also the few ignored tests because they either want to test against a null value or try to throw from RS methods.", "NaN"], ["3313", "2.x: operator test for groupBy; fix to groupBy and type argument swap", "David Karnok", "akarnokd", "09/07/15, 09:29:16 AM", "for GroupedObservable\n- added BooleanSubscription to detect cancellation without caring about\n  requests.\n\nI'm still not 100% convinced the groupBy request coordination works\nproperly (i.e., no stall due lack of requests from one of the groups).", "NaN"], ["3314", "2.x: operator test ignoreElements, last, mapNotification", "David Karnok", "akarnokd", "09/07/15, 09:59:14 AM", "NaN", "NaN"], ["3315", "2.x: operator test observeOn", "David Karnok", "akarnokd", "09/07/15, 11:48:22 AM", "- fix to observeOn to not request if cancelled in onNext delivery\n- fix combineLatest error emission if the other sources are late or\n  never emit\n- fix interval and PublishSubject to send MissingBackpressureException", "NaN"], ["3316", "2.x: operator test onBackpressure(Buffer|Drop|Latest) and their bugfix", "David Karnok", "akarnokd", "09/07/15, 12:24:36 PM", "NaN", "NaN"], ["3317", "2.x: operator test onError and onException, relevant bugfixes", "David Karnok", "akarnokd", "09/07/15, 01:05:52 PM", "I had to ignore tests that throw exceptions from a Publisher.subscribe or an Operator.apply due to their non-conformant behavior.", "NaN"], ["3318", "2.x: operator tests: publish, reduce, repeat + fixes", "David Karnok", "akarnokd", "09/07/15, 02:38:00 PM", "- added toSingle and toNbpObservable to Observable\n- fixed bugs in many operators and in the IO scheduler's release logic", "NaN"], ["3319", "2.x: operator test for replay", "David Karnok", "akarnokd", "09/07/15, 04:43:59 PM", "Note that testIssue_2191_SchedulerUnsubscribe had to change the call\ncount to pass. I don't understand this test and the over-mocking (but\nrecognize the style).", "NaN"], ["3320", "2.x: operator test: retry, retryWhen", "David Karnok", "akarnokd", "09/07/15, 06:42:23 PM", "- retry with bipredicate\n- fixed map not checking the returned value for null\n- since RS doesn't allow throwing other than NPE, temporarily subscribe\n  and lift will throw NPE with the actual error as cause so we don't miss\n  an operator bug due to swallowed exceptions.", "NaN"], ["3321", "2.x: operator tests: sample, scan and sequenceEqual + their bugfixes", "David Karnok", "akarnokd", "09/07/15, 07:42:34 PM", "NaN", "NaN"], ["3322", "2.x: operator test: serialize, single + SerializedSubscriber fix", "David Karnok", "akarnokd", "09/07/15, 08:24:14 PM", "NaN", "NaN"], ["3323", "2.x: operator test: skip variants and bugfix", "David Karnok", "akarnokd", "09/07/15, 09:04:28 PM", "Note that since we know have time unit in schedulers, one must be\ncareful with the time unit of the timed skip operators. The timestamps\nwill be calculated via this unit and may not return the expected values. \n\nFor example, a skipLast of 1 second will not skip the value 0.5 seconds\nbefore completion because its timestamp is rounded down to the start of\nthe second. But if one uses 1000 milliseconds, the value will be\nskipped.", "NaN"], ["3324", "2.x: operator test: switchIfEmpty, switchMap + bugfixes", "David Karnok", "akarnokd", "09/08/15, 07:47:10 AM", "NaN", "NaN"], ["3325", "2.x: operator tests: take family + fixes", "David Karnok", "akarnokd", "09/08/15, 09:14:11 AM", "- fixed a deadlock possibility in one of the merge tests", "NaN"], ["3326", "2.x: operator throttleFirst, timeInterval and timeout + bugfixes", "David Karnok", "akarnokd", "09/08/15, 10:22:25 AM", "NaN", "NaN"], ["3327", "2.x: operator tests: timestamp, toMap, toMultiMap, toList, toSortedList", "David Karnok", "akarnokd", "09/08/15, 11:27:43 AM", "- signature fix to toMultimap and removed deprecated markers.", "NaN"], ["3328", "2.x: operator tests unsubscribeOn, withLatestFrom, zip (partial)", "David Karnok", "akarnokd", "09/08/15, 02:24:43 PM", "- fixed cancellation behavior of observeOn, subscribeOn and\n  unsubscribeOn (when and what to call cancel on)\n- fixed infinite loop in ScheduledRunnable\n- fixed zip not quitting eagerly if one of the sources was shorter\n- added specific ZipIterable because zip-iterable tests expect it to be\n  not prefetching any of the sources (the plain zip does prefetch)\n- made the fromIterable more resilient to Iterable/Iterator crashes and\n  added null-value checks", "NaN"], ["3329", "2.x: operator test: window variants", "David Karnok", "akarnokd", "09/08/15, 06:04:38 PM", "I had to adjust some test slightly due to the a new behavior: if one\ncancels a source which is windowed, as long as the windows are active,\nthe source has to stay active. However, there are more subtle\npossibilities that need new tests.", "NaN"], ["3330", "2.x: operator test zip and SafeSubscriberTest", "David Karnok", "akarnokd", "09/08/15, 06:48:07 PM", "NaN", "NaN"], ["3331", "2.x: schedulers test of classic schedulers", "David Karnok", "akarnokd", "09/08/15, 09:04:26 PM", "NaN", "NaN"], ["3332", "2.x: subject tests and bugfixes", "David Karnok", "akarnokd", "09/09/15, 08:39:54 AM", "- Fixed the `testNestedAsyncConcat` test.\n- Fixed memory leak in `NewThreadWorker`.", "NaN"], ["3333", "2.x: subscribers/observers tests", "David Karnok", "akarnokd", "09/09/15, 11:40:26 AM", "I had to ignore many tests because they either test with null or throw\nan exception from a Subscriber method which are not allowed with RS.\n- added Observers and Subscribers to create Observers/Subscribers with convenience.", "NaN"], ["3334", "2.x: disposable unit tests + fix to RefCountDisposable behavior", "David Karnok", "akarnokd", "09/09/15, 01:24:07 PM", "- sorted `Observable` and added `@BackpressureSupport` and\n  `SchedulerSupport` annotations.\n- created `@Beta` and `@Experimental` annotations, nothing is marked\n  with them because I intent everything to be standard at this point.", "NaN"], ["3335", "2.x: scalar flatMap optimization enabled", "David Karnok", "akarnokd", "09/09/15, 02:11:27 PM", "- I wanted to make sure the slow path passes all tests before enabling\n  the scalar optimization.\n- Fixed headers for internal classes", "NaN"], ["3340", "test/subjects: Use statically imported never() methods", "Tobias Bieniek", "Turbo87", "09/11/15, 04:58:46 PM", "... and remove the unused Mockito imports", "NaN"], ["3342", "Remove redundant onStart implementation in OperatorGroupBy", "Kevin Coughlin", "KevinTCoughlin", "10/07/15, 11:53:13 PM", "Addresses #3067 - Removes a redundant `onStart` implementation in `OperatorGroupBy`.", "NaN"], ["3348", "2.x Design: Flowable/Observable", "Ben Christensen", "benjchristensen", "09/21/15, 04:54:12 PM", "Proposed separation of `Observable` and `Flowable` along with description of each and their characteristics.", "NaN"], ["3349", "2.x Design: Subject", "Ben Christensen", "benjchristensen", "09/21/15, 04:53:32 PM", "Clarification of `Subject` that affects implementation. \n\nRelated to discussion in https://github.com/ReactiveX/RxJava/pull/3345.", "NaN"], ["3350", "2.x Design: Creation/Destruction", "Ben Christensen", "benjchristensen", "09/17/15, 08:43:01 PM", "How to create and destroy streams.\n\nThe wording of this can become much better once agreement occurs in https://github.com/ReactiveX/RxJava/pull/3348/files\n\nThe intent of this is:\n\n1) Specify how to create streams (Observable/Flowable) of the various flavors, and account for flow control.\n2) Evolve towards what the creation/generation APIs are\n3) Specify that it is not the responsibility of the final Subscriber to call unsubscribe/cancel upstream", "NaN"], ["3351", "Make BlockingOperatorToIterator exert backpressure.", "Victor Vu", "vqvu", "10/08/15, 01:42:53 PM", "The iterator created by `BlockingOperator#getIterator()` doesn't exert backpressure, which causes code like this to never terminate/run out of memory\n\n``` java\nObservable.from(new Iterable<Integer>() {\n\n    @Override\n    public Iterator<Integer> iterator() {\n        return new Iterator<Integer>() {\n\n            @Override\n            public boolean hasNext() {\n                return true;\n            }\n\n            @Override\n            public Integer next() {\n                return 1;\n            }\n        };\n    }\n}).toBlocking().getIterator().next();\n```\n\nThis PR adds the appropriate `request` calls so that this works. I had to combine the implementations of `Subscriber` and `Iterator` into a single class to get access to `request()`.", "NaN"], ["3352", "2.x: perf checks for flatMap and merge", "David Karnok", "akarnokd", "09/16/15, 02:34:07 PM", "Ported the two perf tests to evaluate 2.x throughput.\n\n![image](https://cloud.githubusercontent.com/assets/1269832/9907226/67a454c8-5c8e-11e5-8644-c3196b2e58d8.png)\n\nMy primary suspect for the extra overhead are the atomics of queue-drain. The 1.x uses a synchronized-based emitter-loop which is elided by the JIT compiler but atomics can't be elided. As I mentioned before, synchronized works better for light-to-none asynchronous use whereas atomics work better for asynchronous use.\n\nAlso quote from #3157\n\n> Exceptions that do not require a :+1: would be:\n> \n> javadoc changes\n> unit test additions or refactoring\n> **perf test additions, fixes or refactoring**\n> grammatical and presentation fixes to README, CONTRIBUTING, and other such metadata files", "NaN"], ["3353", "2.x: range perf + added missing header.", "David Karnok", "akarnokd", "09/18/15, 08:07:46 AM", "Benchmarks synchronous, asynchronous (where the emission can hop onto the receiver thread) and strictly-pipelined (the emitter and receiver are on different threads). Results on i7 4790, Windows 7 x64, Java 1.8u60:\n\n```\nBenchmark                (times)   Mode  Cnt         Score        Error  Units\nRangePerf.rangeAsync           1  thrpt    5    135410,552 ?  20521,908  ops/s\nRangePerf.rangeAsync        1000  thrpt    5     25634,730 ?    284,526  ops/s\nRangePerf.rangeAsync     1000000  thrpt    5        59,073 ?      1,154  ops/s\nRangePerf.rangePipeline        1  thrpt    5     98895,846 ?  11398,363  ops/s\nRangePerf.rangePipeline     1000  thrpt    5     16233,903 ?    741,712  ops/s\nRangePerf.rangePipeline  1000000  thrpt    5        10,621 ?      2,606  ops/s\nRangePerf.rangeSync            1  thrpt    5  30367277,992 ? 170100,628  ops/s\nRangePerf.rangeSync         1000  thrpt    5    212293,380 ?   3605,320  ops/s\nRangePerf.rangeSync      1000000  thrpt    5       248,135 ?      1,775  ops/s\n```", "NaN"], ["3354", "2.x: perf change wait to spin-loop for short async benchmarks", "David Karnok", "akarnokd", "09/18/15, 12:23:52 PM", "I've noticed that the `times = 1` async range sometimes produces double the throughput without any change to the underlying structure and I've figured out it is because how my operation system wakes up the await in the benchmark. I switched the tests to spin-loop and now I get a consistent and higher value than before:\n\n![image](https://cloud.githubusercontent.com/assets/1269832/9958923/0ce916fe-5e0f-11e5-988a-3e8cac1098dc.png)\n\nThere are a few light-greens and a few light-reds which I attribute to other fluctuating factors on my computer.\n\nIn addition, I've experimented with two optimizations: one for observing a scalar value on a different thread and one where the `OperatorObserveOn` is turned into a `PublisherObserveOn` to save on the allocation of a `PublisherLift`. The scalar optimization ended up being slower by 15% for some reason I don't understand and the `PublishObserveOn` had no impact on the throughput within the error range.", "NaN"], ["3356", "Fix to a bunch of bugs and issues with AsyncOnSubscribe", "David Karnok", "akarnokd", "09/29/15, 05:19:45 PM", "There were several problems with the operator:\n- The first 2 requests were always `Long.MAX_VALUE` no matter what the child requested.\n- There was a race-condition and memory leak when tracking the generated `Observable`s.\n- Both the individual generated `Observable`s and the main concatenation could overflow the internal buffers and had to be defensively-buffered.\n- If a request was responded with a generated `Observable` that delivered less than this requested amount, the child ended up hanging.\n- The concatenation didn't know about the number of values it should deliver in aggregate and might have delivered more or less, causing `MissingBackpressureException` or hangs.\n- Exception thrown from the `generateState` is now delivered to the child immediately.\n\nAs I see, the usage is as follows. Each individual `request()` from the child is supposed to be fulfilled by individual `Observable`s. For example, `request(1)` and `request(5)` will generate two distinct `Observable`s where the first will have 1 value and the second 5.", "NaN"], ["3357", "Eager ConcatMap", "David Karnok", "akarnokd", "10/08/15, 01:14:16 PM", "Related discussion in #3017.", "NaN"], ["3358", "2.x: Single class more operators + test from 1.x", "David Karnok", "akarnokd", "09/24/15, 04:38:26 PM", "I've added the methods from the 1.x Single plus a couple more based on Observable operators that makes sense to me in respect to Single. No plus unit tests and no javadoc.", "NaN"], ["3361", "Safer error handling in BlockingOperatorToFuture", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "10/07/15, 11:48:17 PM", "Not very important since `onError` should be called once, but anyway it's `AtomicReference` and we need to store the value returned from `get()` locally.\n\nP.S. I don't use `Future`s, just found this piece of code.", "NaN"], ["3362", "Fix synchronization on non-final field in BufferUntilSubscriber", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "09/29/15, 07:00:20 AM", "Compiler, VM, JIT and IDE will be happier :)", "NaN"], ["3363", "Remove unused private method from CachedObservable and make \"state\" final", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "10/07/15, 11:47:12 PM", "Fewer methods \u2014 happier Android Developers :)", "NaN"], ["3365", "Make field final and remove unnecessary unboxing in OnSubscribeRedo.RetryWithPredicate", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "09/28/15, 11:53:28 PM", "NaN", "NaN"], ["3369", "Lint fixes for unnecessary unboxing", "Kevin Coughlin", "KevinTCoughlin", "09/22/15, 05:55:56 AM", "Believe I'm removing some unnecessary unboxing calls, but please correct me if I'm wrong.", "NaN"], ["3370", "Remove unused field updater from SubjectSubscriptionManager", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "09/23/15, 03:59:32 AM", "NaN", "NaN"], ["3371", "2.x: non-backpressure NbpObservable all relevant operators + tests.", "David Karnok", "akarnokd", "09/23/15, 08:46:05 PM", "- non-backpressured subjects.", "NaN"], ["3376", "2.x: perf comparing Observable, NbpObservable, Stream and ParallelStream", "David Karnok", "akarnokd", "10/04/15, 08:33:43 AM", "This benchmark compares the overhead of backpressured range, non-backpressured range, streamed range and parallel-streamed range. Run on i7 4770K, Windows 7 x64, Java 1.8u60.\n\n![image](https://cloud.githubusercontent.com/assets/1269832/10107747/75d7c094-63bd-11e5-9e6d-fd3afd50b552.png)", "NaN"], ["3377", "2.x: fix take() reentrancy problem.", "David Karnok", "akarnokd", "09/28/15, 11:52:36 PM", "Discovered by @mgp in #3346 and using his supplied fix. I've already\napplied it to NbpObservable's take this Monday so all that's left was\nthe unit test.", "NaN"], ["3380", "2.x: CombineLatest removed leftover debug field + better cleanup", "David Karnok", "akarnokd", "01/15/16, 09:05:27 PM", "A terminal condition is now clearing the latest array which should help release its contents earlier in case a reference is kept to the class.", "NaN"], ["3382", "2.x: fix SpscLinkedArrayQueue leaves 1 slot null just before growing", "David Karnok", "akarnokd", "09/30/15, 07:37:55 PM", "Discovered while debugging #3381. Confirmed with JCTools in https://github.com/JCTools/JCTools/pull/80", "NaN"], ["3383", "Fix typo in a comment inside Observable.subscribe", "Steve Gury", "stevegury", "09/28/15, 11:50:33 PM", "sigificent -> significant\nalreay -> already", "NaN"], ["3384", "Fix for take() reentrancy bug.", "David Karnok", "akarnokd", "09/30/15, 06:28:58 PM", "Fixes the bug reported in  #3346. (I've done this for 1.x as well since the original poster disappeared). ", "NaN"], ["3386", "1.1.0 - Changed javadoc for Observable.doOnRequest(Action1)", "Aubrey Tull", "stealthcode", "10/07/15, 11:38:10 PM", "This is one of the many 1.1.0 promotion related pull requests. There is a split decision on the operator `Observable.doOnRequest(Action1)`. A majority of core committers have voted to promote this operator from `@Beta` to public. There is currently a minority is support for removing the convenience method on `Observable` or demoting it to `@Experimental`. Instead users would lift the underlying operator `obs.lift(new OperatorDoOnRequest<T>(onRequest))`. In this pull request I have taken the more conservative approach and expect that comments will guide our decisions. \n### Rationale:\n- the `doOnRequest` use case is to debug back-pressure use cases and as such should not pollute the public operator namespace. \n- the existence of this operator may mislead and confuse users. it could be misinterpreted and abused to alter or reset over arching state when the back-pressure mechanics should be more or less self contained (with the exception of `AsyncOnSubscribe`).\n\nIf my understanding is incorrect and there is a valid use case aside from debugging then please comment. ", "NaN"], ["3408", "DoOnEach: report both original exception and callback exception.", "David Karnok", "akarnokd", "10/07/15, 11:46:39 PM", "This came up in a [Stackoverflow](http://stackoverflow.com/questions/32889008/do-operators-instead-of-a-whole-subscriber) answer. If the `doOnError`'s callback or the `doOnEach`'s `onError` method throws, any non-fatal exception replaced the original error which got lost. This PR will wrap them both into a `CompositeException`.\n\n2.x note: since Java 8 supports `addSuppressed` all callbacks in this situation either attach to the original exception or the original exception is attached to the callback's exception.", "NaN"], ["3415", "Deprecate the Experimental/Beta method that will be deleted until 1.1.x", "George Campbell", "abersnaze", "10/07/15, 11:36:17 PM", "Squashed commits:\n[c6e43fc] 1.0.15. Beta/Deprecation of Subject state peeking methods.\n\nThis should give users one release to prepare for the class structure\nchanges.", "NaN"], ["3417", "Add Single.doOnSuccess()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "10/09/15, 01:54:21 AM", "Closes #3385.", "NaN"], ["3418", "Add Single.fromCallable()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "10/09/15, 12:13:53 AM", "Second part of #3154.\n\n@akarnokd I'd like to reuse `Observable.fromCallable()` but didn't find apropriate way to do it: `Observable.fromCallable().toSingle()` is not best option, if you have some thoughts on this \u2014 please share them.", "NaN"], ["3419", "Add Single.doOnError()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "10/08/15, 10:44:28 PM", "NaN", "NaN"], ["3422", "Update README.md", "George Campbell", "abersnaze", "10/08/15, 07:10:49 PM", "Slight change to make the distinction between `@Beta` and `@Experimental` explicit and meaningful.", "NaN"], ["3423", "Renaming Observable#x to Observable#extend", "Aubrey Tull", "stealthcode", "10/08/15, 08:15:41 PM", "NaN", "NaN"], ["3428", "GroupBy backpressure fix", "David Karnok", "akarnokd", "12/07/15, 07:35:08 PM", "This is a backport of the 2.x GroupBy operator which solves #3425.\n\nOne unit test in OperatorRetryTest had to be altered a bit. I believe\nthe original code relied on a GroupBy behavior which caused the bug in\n#3425.", "NaN"], ["3429", "Removed the alias BlockingObservable#run", "Aubrey Tull", "stealthcode", "10/09/15, 08:27:48 PM", "NaN", "NaN"], ["3433", "Add Single.defer()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "11/11/15, 04:45:45 PM", "NaN", "NaN"], ["3434", "Add Single.finallyDo()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "12/09/15, 08:33:23 AM", "@akarnokd I've found a problem with `null` action, I'll create separate issue about this soon.", "NaN"], ["3436", "1.x: Add action != null check in OperatorFinally", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "11/13/15, 08:28:38 AM", "Part of #3435.\n\nPersonally, I'd also add same test to `Observable.finallyDo()` and `Single.finallyDo()` because there are no guarantees that in future they will use exact same operator as implementation and this contract is more a contract of `Observable.finallyDo()` and `Single.finallyDo()`.", "NaN"], ["3438", "Better null tolerance in rx.exceptions.*Exception classes.", "David Karnok", "akarnokd", "10/19/15, 11:59:34 AM", "There seems to be a tendency to send `null` values through `onError` which eventually causes repeated failures. This PR converts these `null` values into `NullPointerException`s so the error origin is can be discovered and prevents the XXXExceptions from throwing NPEs in their constructors as well.\n\nI've also added some missing javadoc.", "NaN"], ["3444", "1.x: Completable class to support valueless event composition + tests", "David Karnok", "akarnokd", "12/07/15, 10:59:52 PM", "This is a backport of #3439.", "NaN"], ["3447", "1.x: DelaySubscription with a plain other Observable.", "David Karnok", "akarnokd", "12/09/15, 01:15:29 AM", "Requested in #3445.\n\nThis is an efficient implementation as it avoids allocating the lifter object, doesn't require a function wrapper and doesn't use producer arbitration.\n\n(Bonus points to those who can recognize the similarities with #3446).", "NaN"], ["3448", "Single delay", "Ho Yan Leung", "hyleung", "10/16/15, 11:57:27 PM", "Adds the `delay(long delay, TimeUnit unit, Scheduler\nscheduler)` and 'delay(long delay, TimeUnit unit)`operators to\n`rx.Single`.\n\nIncludes (in a separate commit) a refactor of `OperatorDelay`. As far as I can tell, the `source` field isn't used at all - by removing it, I was able to reuse `OperatorDelay` in `rx.Single` to implement the delay operator pretty easily.", "NaN"], ["3449", "2.x: Remove duplication of Optional API behavior.", "Jake Wharton", "JakeWharton", "01/11/16, 05:54:50 AM", "get() throws NSE when absent and orElse(T) returns the provided value when absent.", "NaN"], ["3454", "1.x: fix: bounded replay() not requesting enough for latecommers", "David Karnok", "akarnokd", "12/14/15, 07:10:32 PM", "Fixes the bug reported in #3452.\n\nThe fix involves 3 changes:\n- First, each node in the bounded buffer receives an incrementing index whenever they are created. The root node starts with 0, the first value's index will be 1 and so on.\n- In the replay logic, the very first time the current node is captured, the node's index is added to the totalRequested amount of the subscriber. Since this is always one less than the max requested that far, there is no point in calling `manageRequests()` at this point.\n- Third, the pinning of the current node has to happen before the child requests, otherwise the difference would manifest before the compensation and some elements may get missed.\n\nIn addition, there was a missing `r--` in the emission loop and thus the operator could have overflown its child subscriber.", "NaN"], ["3455", "OnErrorFailedException fix", "Konstantin Mikheev", "konmik", "10/20/15, 07:53:11 PM", "https://github.com/ReactiveX/RxJava/issues/2998", "NaN"], ["3456", "Begin the steps to release 1.0.15", "George Campbell", "abersnaze", "10/30/15, 08:23:05 PM", "Can get two more :+1: from the committers.", "NaN"], ["3458", "Clarify contracts of CompositeSubscription in its javadoc", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "10/18/15, 07:07:38 AM", "Current state of `CompositeSubscription`'s javadoc \u2014 totally misleading :smile: \n\nEvery time we need to store some subscriptions in it then clear them and leave `CompositeSubscription` in an operable state we have to read its sources because its actual behavior is not consistent with the javadoc.\n\n`CompositeSubscription.clear()` leaves `CompositeSubscription` in operable state, when on the other hand `CompositeSubscription.unsubscribe()` sets `isUnsubscribed = true` and `CompositeSubscription` is not able to manage new subscriptions.", "NaN"], ["3462", "1.x: A minor doc fix for `interval`", "Shixiong Zhu", "zsxwing", "10/20/15, 01:39:11 PM", "NaN", "NaN"], ["3467", "1.x: compensation for significant clock drifts in schedulePeriodically", "David Karnok", "akarnokd", "12/15/15, 12:48:19 AM", "There is a problem, reported in #3461 and #2943, in which if the system clock drifts, the periodic calculation inside Scheduler.Worker gets off and either taking a longer time for the next invocation of the task or doing \"catching-up\" with all the lost invocations.\n\nThe solution checks the wall clock difference between the last run and the current run and if it went back or forward significantly, it rebases the timer period and schedules the next execution relative to now.\n\nIf the clock goes back, the original code scheduled the next invocation way into the future. This PR will schedule it after the period.\n\nIf the clock goes forward, the original code scheduled executions for all the missed time between the last run and the new time immediately, yielding a bunch of 0 delays. This PR will simply schedule the next invocation after the period.\n\nThe algorithm for both cases is the same: make sure the next invocation is scheduled relative to now and recalculate the start timestamp as if the whole sequence run under the new drifted clock all along. The subsequent invocations will be scheduled at a fixed rate again.\n\nI've added the system parameter `rx.scheduler.drift-tolerance` (unit: minutes, default: 15 minutes), which is used to determine if the clock drifted too far between invocations of the periodic task.", "NaN"], ["3468", "1.x: Fix other places that may swallow OnErrorFailedException", "Shixiong Zhu", "zsxwing", "11/04/15, 06:00:35 AM", "Reviewed all usages of `OnErrorNotImplementedException` and fixed issues similar to #3455.", "NaN"], ["3470", "1.x: replay request coordination reduce overhead", "David Karnok", "akarnokd", "06/15/16, 06:17:47 PM", "Reported in #3469.\n\nThis change will make sure whenever a new subscriber arrives, the\nrequest coordination doesn't scan every other subscriber unnecessary.\n(They will trigger a manageRequests individually anyway).\n\nUnfortunately, I can't make the subscription registration constant (via a HashSet) because that would slow down the dispatching loop (which is quite expensive to for-each over compared to a plain array).\n\nNote also that this will likely conflict with #3454.\n\nI get the following numbers with the program in #3469.\n\n```\nsubscribing...\nsubscribed so far 10000; took 54ms to subscribe last 10000 at rate: 185185 per sec...\nsubscribed so far 20000; took 110ms to subscribe last 10000 at rate: 90909 per sec...\nsubscribed so far 30000; took 157ms to subscribe last 10000 at rate: 63694 per sec...\nsubscribed so far 40000; took 267ms to subscribe last 10000 at rate: 37453 per sec...\nsubscribed so far 50000; took 211ms to subscribe last 10000 at rate: 47393 per sec...\nsubscribed so far 60000; took 320ms to subscribe last 10000 at rate: 31250 per sec...\nsubscribed so far 70000; took 331ms to subscribe last 10000 at rate: 30211 per sec...\nsubscribed so far 80000; took 369ms to subscribe last 10000 at rate: 27100 per sec...\nsubscribed so far 90000; took 415ms to subscribe last 10000 at rate: 24096 per sec...\nsubscribed so far 100000; took 462ms to subscribe last 10000 at rate: 21645 per sec...\nsubscribed so far 110000; took 516ms to subscribe last 10000 at rate: 19379 per sec...\nsubscribed so far 120000; took 547ms to subscribe last 10000 at rate: 18281 per sec...\nsubscribed so far 130000; took 647ms to subscribe last 10000 at rate: 15455 per sec...\nsubscribed so far 140000; took 720ms to subscribe last 10000 at rate: 13888 per sec...\nsubscribed so far 150000; took 811ms to subscribe last 10000 at rate: 12330 per sec...\nsubscribed so far 160000; took 806ms to subscribe last 10000 at rate: 12406 per sec...\nsubscribed so far 170000; took 873ms to subscribe last 10000 at rate: 11454 per sec...\nsubscribed so far 180000; took 911ms to subscribe last 10000 at rate: 10976 per sec...\nsubscribed so far 190000; took 986ms to subscribe last 10000 at rate: 10141 per sec...\nsubscribed so far 200000; took 1003ms to subscribe last 10000 at rate: 9970 per sec...\nsubscribed so far 210000; took 1168ms to subscribe last 10000 at rate: 8561 per sec...\nsubscribed so far 220000; took 1213ms to subscribe last 10000 at rate: 8244 per sec...\nsubscribed so far 230000; took 1340ms to subscribe last 10000 at rate: 7462 per sec...\nsubscribed so far 240000; took 1314ms to subscribe last 10000 at rate: 7610 per sec...\nsubscribed so far 250000; took 1548ms to subscribe last 10000 at rate: 6459 per sec...\nsubscribed so far 260000; took 1372ms to subscribe last 10000 at rate: 7288 per sec...\nsubscribed so far 270000; took 1835ms to subscribe last 10000 at rate: 5449 per sec...\nsubscribed so far 280000; took 2087ms to subscribe last 10000 at rate: 4791 per sec...\nsubscribed so far 290000; took 1910ms to subscribe last 10000 at rate: 5235 per sec...\nsubscribed so far 300000; took 1966ms to subscribe last 10000 at rate: 5086 per sec...\nunsubscribing...\nunsubscribed so far 10000; took 1910ms to unsubscribe last 10000 at rate: 5235 per sec...\nunsubscribed so far 20000; took 1782ms to unsubscribe last 10000 at rate: 5611 per sec...\nunsubscribed so far 30000; took 1730ms to unsubscribe last 10000 at rate: 5780 per sec...\nunsubscribed so far 40000; took 1593ms to unsubscribe last 10000 at rate: 6277 per sec...\nunsubscribed so far 50000; took 1514ms to unsubscribe last 10000 at rate: 6605 per sec...\nunsubscribed so far 60000; took 1468ms to unsubscribe last 10000 at rate: 6811 per sec...\nunsubscribed so far 70000; took 1188ms to unsubscribe last 10000 at rate: 8417 per sec...\nunsubscribed so far 80000; took 1234ms to unsubscribe last 10000 at rate: 8103 per sec...\nunsubscribed so far 90000; took 1271ms to unsubscribe last 10000 at rate: 7867 per sec...\nunsubscribed so far 100000; took 1358ms to unsubscribe last 10000 at rate: 7363 per sec...\nunsubscribed so far 110000; took 1103ms to unsubscribe last 10000 at rate: 9066 per sec...\nunsubscribed so far 120000; took 1100ms to unsubscribe last 10000 at rate: 9090 per sec...\nunsubscribed so far 130000; took 990ms to unsubscribe last 10000 at rate: 10101 per sec...\nunsubscribed so far 140000; took 953ms to unsubscribe last 10000 at rate: 10493 per sec...\nunsubscribed so far 150000; took 854ms to unsubscribe last 10000 at rate: 11709 per sec...\nunsubscribed so far 160000; took 789ms to unsubscribe last 10000 at rate: 12674 per sec...\nunsubscribed so far 170000; took 779ms to unsubscribe last 10000 at rate: 12836 per sec...\nunsubscribed so far 180000; took 624ms to unsubscribe last 10000 at rate: 16025 per sec...\nunsubscribed so far 190000; took 634ms to unsubscribe last 10000 at rate: 15772 per sec...\nunsubscribed so far 200000; took 514ms to unsubscribe last 10000 at rate: 19455 per sec...\nunsubscribed so far 210000; took 411ms to unsubscribe last 10000 at rate: 24330 per sec...\nunsubscribed so far 220000; took 373ms to unsubscribe last 10000 at rate: 26809 per sec...\nunsubscribed so far 230000; took 337ms to unsubscribe last 10000 at rate: 29673 per sec...\nunsubscribed so far 240000; took 286ms to unsubscribe last 10000 at rate: 34965 per sec...\nunsubscribed so far 250000; took 234ms to unsubscribe last 10000 at rate: 42735 per sec...\nunsubscribed so far 260000; took 222ms to unsubscribe last 10000 at rate: 45045 per sec...\nunsubscribed so far 270000; took 159ms to unsubscribe last 10000 at rate: 62893 per sec...\nunsubscribed so far 280000; took 96ms to unsubscribe last 10000 at rate: 104166 per sec...\nunsubscribed so far 290000; took 63ms to unsubscribe last 10000 at rate: 158730 per sec...\nunsubscribed so far 300000; took 31ms to unsubscribe last 10000 at rate: 322580 per sec...\n```", "NaN"], ["3474", "Fix indentation", "Eug\u00eanio Cabral", "eug", "11/10/15, 07:36:26 AM", "NaN", "NaN"], ["3475", "1.x: benchmark range + flatMap throughput.", "David Karnok", "akarnokd", "10/28/15, 06:08:06 PM", "The current baseline on i7 4770K, Windows 7 x64, Java 8u66:\n\n```\nBenchmark           (times)   Mode   Samples        Score  Score error    Units\nrangeFlatMapJust          1  thrpt         5 24242025,899  2299703,654    ops/s\nrangeFlatMapJust         10  thrpt         5  2536987,139   153629,364    ops/s\nrangeFlatMapJust       1000  thrpt         5    54154,325     4014,598    ops/s\nrangeFlatMapJust    1000000  thrpt         5       48,638        7,591    ops/s\nrangeFlatMapRange         1  thrpt         5  9331777,291   531241,251    ops/s\nrangeFlatMapRange        10  thrpt         5   388606,708    22875,097    ops/s\nrangeFlatMapRange      1000  thrpt         5     4164,424      266,850    ops/s\nrangeFlatMapRange   1000000  thrpt         5        4,354        0,575    ops/s\n```", "NaN"], ["3476", "1.x: overhead reduction for merge and flatMap", "David Karnok", "akarnokd", "02/21/16, 11:25:45 PM", "Changes to the scalar fast-path was inspired by the Project Reactor's `flatMap` which was in turn inspired by RxJava 2.x's implementation of `flatMap`.\n\n**Naturally, this will conflict with #3169 .**\n\nBenchmark for comparison (i7 4770K, Windows 7 x64, Java 8u66):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/10799061/27b6ff8a-7dab-11e5-8580-6dbbacadf430.png)\n\nJust by applying the scalar re-batching, the operator gained a massive 45% throughput increase, from **48 MOps/s** to **71 MOps/s**.\n\nWhen the range optimization is also applied, the improvement is even more impressive:  +60% throughput, from **48 MOps/s** to **79 MOps/s**.\n\nThe optimization doesn't really affect `rangeFlatMapRange`, it has a larger run-to-run variance due to GC.\n\nI'm experimenting with the 2.x branch as well and by applying these two optimizations, the throughput increasd from **40 MOps/s** to **58 MOps/s**. I'm investigating if switching to synchronized would help with the remaining overhead gap.\n\nNote also that the perf tests measure the operator overhead only.", "NaN"], ["3477", "1.x: add a source OnSubscribe which works from an array directly", "David Karnok", "akarnokd", "12/15/15, 09:11:42 PM", "This specialized OnSubscribe performs ~33% better on longer streams.\n\nBenchmark comparison (i7 4770K, Windows 7 x64, Java 8u66):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/10802983/1ef4027a-7dc0-11e5-996a-9e9cf7033ed3.png)\n\nThe `slowpath` requests the available amount + 1 to trigger a slow path, `slowpath2` requests in batches of 128 and replenishes only after all were received.", "NaN"], ["3478", "1.x: perf benchmark for the cost of subscribing", "David Karnok", "akarnokd", "10/28/15, 09:57:16 PM", "This PR adds a perf test that measures what it takes to subscribe to a\nnon-backpressured and backpressured source and what is the effect of the\nmini-arbitration inside Subscriber.\n\nThis should enable investigations into why generally 1.x subscriptions have more overhead than 2.x.\n\nBenchmark (i7 4770K, Windows 7 x64, Java 8u66):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/10804298/023f5772-7dc7-11e5-8cf4-abe03c1ab725.png)\n\nDirect overrides `setProducer` and requests directly. Started requests in the `onStart` method and Usual requests in the constructor.", "NaN"], ["3480", "1.x: update and bugfix to SubscribingPerf", "David Karnok", "akarnokd", "10/29/15, 08:31:30 AM", "Note: this doesn't change any main class, just a perf class.\n- Two of the tests used the wrong subscriber type.\n- The benchmark layout allowed stack allocation instead of heap allocation and thus showing less overhead than expected. By letting consuming the `Subscriber`s via blackhole, this JIT optimization is negated as it should be.\n- Added a benchmark which should help verify the overhead of checking `isUnsubscribed` within range in #3479 because I suspect that will get worse there.\n\nBenchmark values: (i7 **4790**, Windows 7 x64, Java 8u66):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/10813246/16cbe7e4-7e1e-11e5-8de6-5bc1ffdb2739.png)", "NaN"], ["3485", "1.x: fix scan() not accepting a null initial value", "David Karnok", "akarnokd", "11/03/15, 11:18:24 PM", "I forgot a NotificationLite conversion in the constructor. Note that\nthere were no tests verifying null behavior at all.", "NaN"], ["3486", "1.x: Remove unused imports", "Matsuda Shoichi", "shoma2da", "11/09/15, 07:54:12 AM", "NaN", "NaN"], ["3487", "1.x: OnBackpressureBuffer: DROP_LATEST and DROP_OLDEST", "Galo Navarro", "srvaroa", "03/17/16, 05:58:36 PM", "Introduce a new interface BackpressureOverflowStrategy that allows implementing different handlers for an overflow situation.  This patch adds three implementations, reachable via OverflowStrategy:\n\n```\nstatic class OverflowStrategy {\n    static final BackpressureOverflowStrategy DEFAULT = Error.INSTANCE;\n    static final Error ERROR = Error.INSTANCE;\n    static final DropOldest DROP_OLDEST = DropOldest.INSTANCE;\n    static final DropLatest DROP_LATEST = DropLatest.INSTANCE;\n}\n```\n\nThe behavior for each is the following:\n- ERROR remains the default as the existing implementation.\n- DROP_LATEST will drop newly produced items after the buffer fills up.\n- DROP_OLDEST will drop the oldest elements in the buffer, making room for\n  newer ones.\n\nIn all cases, a drop will result in a notification to the producer by invoking the onOverflow callback.\n\nNone of the two new behaviours (DROP_*) will unsubscribe from the source nor onError.", "NaN"], ["3488", "1.x Remove all instances of Atomic*FieldUpdater", "Mark Rietveld", "markrietveld", "11/11/15, 10:09:38 AM", "Replace them all with their respective Atomic\\* counterparts\nFor example AtomicLongFieldUpdater -> AtomicLong\nAddresses https://github.com/ReactiveX/RxJava/issues/3459", "NaN"], ["3491", "1.x: make scan's delayed Producer independent of event serialization", "David Karnok", "akarnokd", "12/02/15, 07:36:49 PM", "It turns out serializing `request()` calls with regular `onXXX()` calls can be problematic because a `request()` may trigger an emission of events which then end up being queued (since `emitting == true`). If the request is large and the queue otherwise unbounded, this will likely cause OOME.\n\nIn case of `scan`, the fix was to make the missing request accounting and arrival of the `Producer` independent of the event's emitter loop; there is no need for them to be serialized in respect to each other.\n\nIn case of the `ProducerObserverArbiter` where the request accounting and producer swapping has to be serialized with the value emission, the solution is to call `request()` outside the emitter-loop.\n\nThere shouldn't be any issue with 2.x `scan()` because in 2.x, scan receives the `Subscription` before it allows the downstream to request anything so there is no missing requested to be handled.\n\nThis should resolve #3490. As far as I can remember, no other operator should have such problems because all others use `ProducerArbiter` which is independent of `onXXX` emission serializations.", "NaN"], ["3493", "1.x: fix for zip(Obs<Obs<T>>) backpressure problem", "David Karnok", "akarnokd", "11/11/15, 08:48:04 PM", "Reported in #3492.", "NaN"], ["3495", "1.x: benchmark just() and its optimizations.", "David Karnok", "akarnokd", "11/05/15, 08:58:54 AM", "This add a perf class that benchmarks just() and optimizations it allows. I'll use this as a baseline to compare the upcoming backpressure-aware version against.\n\nBenchmark results of throughput (ops/s) (i7 4790, Windows 7 x64, Java 8u66):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/10963349/0d15c6e8-83a0-11e5-9f28-646b57d08879.png)", "NaN"], ["3498", "1.x: Rename cache(int) to cacheWithInitialCapacity(int)", "Logan Johnson", "loganj", "12/10/15, 06:57:03 PM", "~~The parameter is a capacity hint, but more frequently confused with a\nbuffer size like replay(int) than it is correctly understood. It also\noffers no guarantees, only the weak hope of optimization.~~\n\nThe parameter is a capacity hint, but more frequently confused with a buffer size like replay(int) than it is correctly understood. It also offers no guarantees, only the weak hope of optimization.\n\nThis change renames the method, deprecating the old name. It also adds javadoc calling out that the parameter is not a bound and referencing replay(int).autoConnect() as a way to achieve that behavior.", "NaN"], ["3500", "Some code clean ups.", "dromato", "dromato", "11/08/15, 02:59:38 AM", "Nothing that could change logic or application flow, just minor refactors to be consistent with good practices and clean code.\nTo sum up changes:\n- Simplified some conditions\n- Changed small l to L in long number, as l tends to look like 1 and might confuse\n- Removed \"return\" statements where those are not necessary (last instruction in function)\n- Inlined returns where there were no need for creating new variable (easier to read)\n- Deleted unnecessary colons", "NaN"], ["3504", "1.x: Test adjustments to reduce problems when tests run on Android", "David Karnok", "akarnokd", "02/22/16, 06:37:03 AM", "These changes may help in reducing problems when the tests are run on an Android emulation:\n- set an uncaught exception handler because the native error handler crashes the entire test run.\n- reduce memory usage by some tests by doing fewer loops or items.\n- fix a missing backpressure case as Android starts threads much slower (100ms?).", "NaN"], ["3510", "1.x: eager concatMap to choose safe or unsafe queue based on platform.", "David Karnok", "akarnokd", "11/10/15, 09:03:09 PM", "I forgot to add the choice because 2.x `SpscArrayQueue` doesn't use Unsafe. I copied the `SpscAtomicArrayQueue` from #3169 and I hope it won't conflict. This is the drawback of long trail of unmerged fixes and enhancements...\n\nReported in #3508 . ", "NaN"], ["3511", "1.x: Remove unused and inefficient SubscriptionRandomList.", "David Karnok", "akarnokd", "11/10/15, 07:37:00 AM", "Use the standard CompositeSubscription instead.\n\nRelated issue: #3105", "NaN"], ["3512", "1.x: fix SafeSubscriber documentation regarding unsubscribe", "David Karnok", "akarnokd", "11/10/15, 09:02:42 PM", "The documentation was wrong in two points: unsubscription doesn't call`onCompleted` and unsubscription doesn't directly prevent delivery of `onXXX` events since the implementation doesn't even check isUnsubscribed: (it is the responsibility of the upstream to do that).\n\nRelated issue: #3059.", "NaN"], ["3513", "1.x: add shorter RxJavaPlugin class lookup approach.", "David Karnok", "akarnokd", "11/12/15, 08:52:50 AM", "This adds a new pattern and lookup method that let's the developer specify the custom plugins with shorter system property keys. Android is quite restrictive and allows only 31 characters.\n\nThe new pattern splits the target simple class name and its implementation into two separate system properties:\n\n```\nrxjava.plugin.1.class=SimpleClassName\nrxjava.plugin.1.impl=path.to.impl.Class\n```\n\nThe index tag (`1`) can be any string of your chosing:\n\n```\nrxjava.plugin.mykey.class=SimpleClassName\nrxjava.plugin.mykey.impl=path.to.impl.Class\n```\n\nbut make sure they are paired, otherwise nothing will happen.\n\nIf there are multiple `class` entries with the same `SimpleClassName` one of them will be chosen (depending on the walk order in `java.util.Properties`).\n\nRelated issue #2835.", "NaN"], ["3514", "1.x: SyncOnSubscribeTest.testConcurrentRequests give more time.", "David Karnok", "akarnokd", "11/12/15, 08:52:04 AM", "The test failed on Travis and locally if my machine was under heavy load without interacting with the mock. This change gives more time in the inner await and reports the exception instead of itself throwing.", "NaN"], ["3515", "1.x: BlockingUtils test: clear interrupted flag before/after", "David Karnok", "akarnokd", "11/20/15, 10:08:32 AM", "For some strange reason, the interrupted flag is sometimes still set when the next JUnit test method runs and `await` will throw immediately.", "NaN"], ["3517", "Update CHANGES.md for v1.0.16", "Aubrey Tull", "stealthcode", "11/11/15, 09:01:51 PM", "NaN", "NaN"], ["3524", "fix subscribe() javadoc ", "Dave Moten", "davidmoten", "11/16/15, 07:55:14 AM", "fix for javadoc issue #3523 ", "NaN"], ["3528", "1.x: Avoid to call next when Iterator is drained", "Shixiong Zhu", "zsxwing", "11/16/15, 06:32:18 PM", "`delay` delays the `onCompleted` event and `unsubscribe` is called when `onCompleted` finishes. So if we put a `o.zipWith(Iterable, func)` before `delay`, such as `o.zipWith(Iterable, func).delay(...)`, `o` may keep emitting items even if `zipWith` emits an `onCompleted` event. This PR just fixed `OperatorZipIterable` to handle this case.\n\nFixes https://github.com/ReactiveX/RxScala/issues/180", "NaN"], ["3535", "1.x: Don't swallow fatal errors in OperatorZipIterable", "Shixiong Zhu", "zsxwing", "11/22/15, 09:03:31 AM", "A follow up PR for #3528", "NaN"], ["3536", "1.x: Fix SyncOnSubscribeTest.testConcurrentRequests non-determinism", "David Karnok", "akarnokd", "11/25/15, 10:03:57 PM", "The test checks if onUnSubscribe is called but that happens after\nonCompleted is sent and as such, may run concurrently with the main\nthread where the mock is verified. The change switches to CountDownLatch\nto properly await the call to onUnsubscribe.", "NaN"], ["3539", "Add Single.zip() for Iterable of Singles", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "12/09/15, 07:43:04 PM", "NaN", "NaN"], ["3549", "Remove double whitespace in if conditions", "Niklas Baudy", "vanniktech", "12/09/15, 05:46:07 PM", "Just found them while walking through the source code trying to get a better overview of the Rx internals. ", "NaN"], ["3550", "Public API changes for 1.1.0 release", "Aubrey Tull", "stealthcode", "12/03/15, 12:14:15 AM", "NaN", "NaN"], ["3551", "Update CHANGES.md for v1.0.17", "Aubrey Tull", "stealthcode", "12/02/15, 08:24:46 PM", "NaN", "NaN"], ["3553", "Update CHANGES.md for v1.1.0", "Aubrey Tull", "stealthcode", "12/03/15, 08:42:02 PM", "NaN", "NaN"], ["3556", "1.x: fix toMap and toMultimap not handling exceptions of the callbacks", "David Karnok", "akarnokd", "12/08/15, 06:56:19 PM", "This PR adds the usual try-catch around callback invocations in `toMap`\nand `toMultimap`.\n\nRelated #3555.", "NaN"], ["3559", "Rewording 1.1.0 release notes in CHANGES.md", "Aubrey Tull", "stealthcode", "12/06/15, 08:21:49 AM", "NaN", "NaN"], ["3561", "Corrected buffer operator onError behaviour documentation", "Mariusz \u0141uci\u00f3w", "mariuszluciow", "12/08/15, 08:59:02 AM", "#3560", "NaN"], ["3562", "Add Single.doOnUnsubscribe()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "12/08/15, 10:03:03 PM", "As promised, adding more operators to `Single`. This one is very useful for releasing resources if task can be cancelled externally via `subscription.unsubscribe()` and subscriber may not receive the result. ", "NaN"], ["3563", "Fix typo in documentation", "Sebas LG", "sebaslogen", "12/07/15, 09:24:36 PM", "NaN", "NaN"], ["3565", "Replace never() calls in BehaviorSubjectTest with verifyNoMoreInteractions", "Niklas Baudy", "vanniktech", "12/09/15, 11:20:28 PM", "Advantage is that we verify that there's no interaction at all so also something that we might not expect is not going to happen.", "NaN"], ["3566", "Deprecate Observable.finallyDo() and add Observable.doAfterTerminate() instead", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "12/09/15, 10:15:20 AM", "#3434 but for `Observable`.", "NaN"], ["3567", "Implemented Observable#toCompletable", "Aubrey Tull", "stealthcode", "12/09/15, 06:59:55 PM", "NaN", "NaN"], ["3568", "Renamed Completable#finallyDo to #doAfterTerminate", "Aubrey Tull", "stealthcode", "12/09/15, 10:49:26 AM", "Renames as part of #3434 for the recently added Completable.", "NaN"], ["3569", "1.x: fix renamed operator in Single.", "David Karnok", "akarnokd", "12/09/15, 12:06:30 PM", "There was a cross dependency between two PRs yielding a broken\ncompilation in main.", "NaN"], ["3570", "Implemented Completable#andThen(Observable)", "Aubrey Tull", "stealthcode", "01/04/16, 11:07:51 PM", "I expect some discussion around the method name. ", "NaN"], ["3575", "Fix typo in CompositeException documentation", "Priyesh Patel", "ItsPriyesh", "12/15/15, 07:08:44 PM", "NaN", "NaN"], ["3579", "1.x: No more need to convert Singles to Observables for Single.zip()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "01/24/16, 08:23:47 AM", "PTAL", "NaN"], ["3582", "1.x: Update ReplaySubjectPerf.java", "Achintha Gunasekara", "achinthagunasekara", "02/08/16, 06:31:23 AM", "NaN", "NaN"], ["3584", "clarify behaviour of groupBy in javadoc", "Dave Moten", "davidmoten", "01/11/16, 09:06:28 PM", "As discussed in #3411, some clarification of the behaviour of `groupBy` looks necessary re its behaviour when the `GroupedObservable` terminates early (for example has `.first()` applied to it). See also  #3581.\n\nI also took the liberty of recommending `ignoreElements` instead of `take(0)` for the section in the javadoc that recommends how to ignore emissions because the `take(0)` approach would have more overhead (every emission from source would prompt the emission of a new `GroupedObservable`) than the `ignoreElements` approach.\n\nOnce this is accepted I'll look to submit a PR with `groupByOnce` (mentioned in #3411).", "NaN"], ["3585", "1.x: fix Completable.using not disposing the resource if the factory crashes during the subscription phase.", "David Karnok", "akarnokd", "01/12/16, 07:57:05 AM", "This PR fixes the cases when the Completable factory throws an exception\nor returns null and the resource is not disposed before reporting error\nto the subscriber.", "NaN"], ["3586", "Fixed typo", "Mariusz \u0141uci\u00f3w", "mariuszluciow", "12/26/15, 01:40:18 AM", "NaN", "NaN"], ["3587", "Remove the need for javac to generate synthetic methods.", "Jake Wharton", "JakeWharton", "12/27/15, 09:50:49 AM", "Outer classes accessing inner class private fields and methods (and vise versa) causes javac to generate package-scoped trampolines. These bloat the class files, adds overhead to the inliner analysis, and for Android create needless method that eat away at our fixed limit of methods in an application. By simply promoting the private interactions to package scope directly, the synthetic methods do not need generated.\n\n2.5% of RxJava's methods were these needless generated trampolines accounting for 1.2% of jar size and 1.4% of dex size.\n\n```\n$ dex-method-count before.dex\n5005\n\n$ dex-method-count after.dex\n4875\n```\n\n```\n-rw-r--r--   1 jw  jw   699K Dec 25 03:08 after.dex\n-rw-r--r--   1 jw  jw   952K Dec 25 03:08 after.jar\n-rw-r--r--   1 jw  jw   709K Dec 25 03:06 before.dex\n-rw-r--r--   1 jw  jw   964K Dec 25 03:06 before.jar\n```", "NaN"], ["3588", "Fix the initialization order in GenericScheduledExecutorService", "Shixiong Zhu", "zsxwing", "12/27/15, 09:54:57 AM", "The static `GenericScheduledExecutorService.None` should be initialized before creating any GenericScheduledExecutorService instance. Although the previous codes happen to work, it's sill worth to fix it.", "NaN"], ["3589", "1.x: concat reduce overhead when streaming a source", "David Karnok", "akarnokd", "02/03/16, 10:20:06 PM", "This PR reduces the request tracking overhead of `concat` by tracking the produced item count in a plain field and subtracting it from the arbiter and requested values only before the inner source completes. So instead of N decrementAndGet call, we have 1 addAndGet(-N) per source. \n\nI've added a perf class to measure the difference.\n\n(Intel Celeron 1005M @ 2GHz, Windows 7 x64, Java 8u66)\n\n![image](https://cloud.githubusercontent.com/assets/1269832/12010270/d8af1660-ac9f-11e5-933c-ee96da7deda5.png)\n\nThe throughput increased considerably, although I would have expected more, especially in the 1M case where the subscription overhead doesn't matter.\n\nI'll do further investigation on it and post a follow-up PR if this gets merged in the meantime.", "NaN"], ["3592", "1.x: add never test for  PublishSubjectTest", "Kevin Li", "Chaoba", "01/11/16, 08:48:42 PM", "This PR complete the never assert in PublishSubjectTest.", "NaN"], ["3609", "delaySubscription(Func0) does not use a scheduler", "Jake Wharton", "JakeWharton", "01/08/16, 10:46:30 PM", "It subscribes to the upstream `Observable` on the emitting thread of the other `Observable` obtained from the `Func0`.", "NaN"], ["3614", "1.x: just() now supports backpressure (+ related fixes/changes)", "David Karnok", "akarnokd", "01/26/16, 10:23:11 AM", "Updated `just()` to fully support backpressure.\n\nThis is a repost of #3496 due to merge and rebase problems.", "NaN"], ["3620", "1.x: Fix NPE in CompositeException when nested throws on initCause", null, "msavitskiy", "02/06/16, 04:54:18 PM", "possible solution :)", "NaN"], ["3623", "1.x: adding source links for @Beta and @Experimental", "Adam Arold", "adam-arold", "01/27/16, 03:49:11 AM", "Solution for issue #3618.", "NaN"], ["3626", "use Exceptions.throwOrError to simplify error handling", "Dave Moten", "davidmoten", "01/22/16, 06:20:59 AM", "This PR simplifies error handling by making use of existing `Exceptions.throwOrError` overloads.\n\nA number of classes are touched by this one PR but I'm assuming review will be easy enough that merge can happen soon.", "NaN"], ["3627", "1.x: Added MergeDelay operators for Iterable of Observables", null, "JohnWowUs", "02/08/16, 08:35:53 PM", "PR for issue #3577", "NaN"], ["3630", "1.x: ConcatMapEager allow nulls from inner Observables.", "David Karnok", "akarnokd", "01/22/16, 06:17:56 AM", "The operator was not allowing `null`s in the inner Observables.\n\nRelated: #3629.", "NaN"], ["3634", "1.x: redo performance checker", "David Karnok", "akarnokd", "01/22/16, 07:05:33 PM", "This PR adds a perf test to measure the redo-based operators: repeat, repeatWhen, retry, retryWhen.\n\nResults (Intel Celeron 1005M, Windows 7 x64, Java 8u72):\n\n```\nBenchmark                     (params)        Score  Score error\nr.o.RedoPerf.baseline              1,1  9507538,496   384265,883\nr.o.RedoPerf.baseline           1,1000   127236,123     6322,513\nr.o.RedoPerf.baseline        1,1000000      131,491        7,443\nr.o.RedoPerf.baseline           1000,1   126830,429     8161,593\nr.o.RedoPerf.baseline        1000,1000      130,795        8,571\nr.o.RedoPerf.baseline        1000000,1      130,097        0,936\nr.o.RedoPerf.repeatCounted         1,1   473245,445    16574,938\nr.o.RedoPerf.repeatCounted      1,1000     2039,161       64,254\nr.o.RedoPerf.repeatCounted   1,1000000        2,304        0,376\nr.o.RedoPerf.repeatCounted      1000,1    28622,433     2896,427\nr.o.RedoPerf.repeatCounted   1000,1000       35,208        2,312\nr.o.RedoPerf.repeatCounted   1000000,1       56,978        7,278\nr.o.RedoPerf.repeatWhen            1,1   452640,724     5506,024\nr.o.RedoPerf.repeatWhen         1,1000     2151,821      352,059\nr.o.RedoPerf.repeatWhen      1,1000000        2,159        0,066\nr.o.RedoPerf.repeatWhen         1000,1    23919,436      217,644\nr.o.RedoPerf.repeatWhen      1000,1000       20,947        1,615\nr.o.RedoPerf.repeatWhen      1000000,1       25,316        0,970\nr.o.RedoPerf.retryCounted          1,1   176470,291     4570,641\nr.o.RedoPerf.retryCounted       1,1000      588,985       38,103\nr.o.RedoPerf.retryCounted    1,1000000        0,589        0,037\nr.o.RedoPerf.retryCounted       1000,1     7178,699      123,423\nr.o.RedoPerf.retryCounted    1000,1000       14,470        0,699\nr.o.RedoPerf.retryCounted    1000000,1        7,842        0,252\nr.o.RedoPerf.retryWhen             1,1   310407,136     8052,067\nr.o.RedoPerf.retryWhen          1,1000      567,338       13,511\nr.o.RedoPerf.retryWhen       1,1000000        0,587        0,036\nr.o.RedoPerf.retryWhen          1000,1    10388,639      269,817\nr.o.RedoPerf.retryWhen       1000,1000       10,657        1,471\nr.o.RedoPerf.retryWhen       1000000,1       11,550        0,287\n```\n\nThe `params` is a composite of number of elements and number of repetitions.", "NaN"], ["3635", "1.x: zip performance measure", "David Karnok", "akarnokd", "01/25/16, 09:01:20 AM", "Performance measurement of `zip` and upgrade to JMH 1.11.3.\n\nResults (Intel Celeron 1005M, Windows 7 x64, Java 8u72):\n\nOverall throughput values:\n\n![image](https://cloud.githubusercontent.com/assets/1269832/12523444/3e1893fc-c157-11e5-81bd-353031db4a91.png)\n\nComparing fully sync and fully async dual sources:\n\n![image](https://cloud.githubusercontent.com/assets/1269832/12523464/5cc23074-c157-11e5-8231-5954eafd7d0e.png)\n\nComparing when either the first or the second is an async source:\n\n![image](https://cloud.githubusercontent.com/assets/1269832/12523485/7bdf951e-c157-11e5-9f3c-f2f3b156ba03.png)\n\nSo the order of sources matter, having the async first allows it to start early and not after the synchronous source completes its prefetch run.", "NaN"], ["3637", "handle predicate exceptions properly in skipWhile", "Dave Moten", "davidmoten", "01/24/16, 08:44:41 AM", "A non-fatal exception thrown by `predicate.call()` in `OperatorSkipWhile` could result in the error being reported by an upstream operator. This PR ensures that the error is reported by the operator in which it occurs.\n\nI've added a unit test for this scenario that failed with the original code, and a couple of other tests.\n\nThere are a few more of these floating around that I'll submit PRs for as well.", "NaN"], ["3638", "fix error handling in OperatorDistinctUntilChanged", "Dave Moten", "davidmoten", "01/25/16, 08:49:51 AM", "As per #3637, `keySelector.call()` was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\n\nThis PR includes a unit test that failed on the original code.", "NaN"], ["3639", "fix error handling in onBackpressureBuffer", "Dave Moten", "davidmoten", "01/25/16, 08:50:22 AM", "`onOverflow.call()`  was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\n\nThis PR includes a unit test that failed on the original code.", "NaN"], ["3640", "fix error handling in onBackpressureDrop", "Dave Moten", "davidmoten", "01/24/16, 08:43:25 AM", "`onDrop.call()`  was not wrapped in an appropriate try catch to prevent the error from being reported from an upstream operator.\n\nThis PR includes a unit test that failed on the original code.", "NaN"], ["3642", "1.x: Optimizate single just", "Kevin Li", "Chaoba", "02/03/16, 03:18:07 PM", "This PR add similar optimization as ScalarSynchronousObservable to Single.just method.", "NaN"], ["3643", "1.x: Single performance measurements", "David Karnok", "akarnokd", "01/25/16, 09:41:07 AM", "Benchmark `Single`'s behavior with `flatMap`, `subscribeOn` and `observeOn`.\n\nResults: (i7 4790, Windows 7 x64, Java 8u72)\n\n```\nBenchmark                   Score       Error  Units\ndirect                9054864,731  189403,130  ops/s\nflatmap               2761060,187   40953,148  ops/s\nflatmapConst          2763238,776   34372,376  ops/s\nobserveOn              300489,044   27461,361  ops/s\nobserveOnExec          333838,535    9098,275  ops/s\nobserveOnFJ            402261,384    9467,060  ops/s\nobserveOnSchExec       342714,377    8624,188  ops/s\nsubscribeOn            311487,902    8986,858  ops/s\nsubscribeOnExec        257315,361   29967,833  ops/s\nsubscribeOnFJ          383189,863   12596,397  ops/s\nsubscribeOnSchExec     290880,185   45773,862  ops/s\n```\n\nHere is a side-by-side comparison of throughput on various schedulers:\n\n![image](https://cloud.githubusercontent.com/assets/1269832/12547224/5dc0b5aa-c34f-11e5-889f-f77bca708997.png)", "NaN"], ["3644", "1.x: fix SyncOnSubscribe not signalling onError if the generator crashes", "David Karnok", "akarnokd", "01/25/16, 10:33:00 PM", "Discovered in a [stackoverflow](http://stackoverflow.com/questions/35001387/how-to-handle-error-in-generatestate-in-synconsubscribe-rxjava) question.", "NaN"], ["3645", "1.x: fix Amb sharing the choice among all subscribers", "David Karnok", "akarnokd", "01/25/16, 10:43:10 PM", "The OnSubscribeAmb shared the choice variable among all of its subscribers which prevented reusing the same Observable.", "NaN"], ["3648", "2.x: Add support for concurrently inserting actions while advancing time", "Benoit Corne", "bcorne", "06/18/16, 06:30:48 PM", "This change is adding a bit of thread safety when some threads are trying to insert some actions while the time is changed in the TestScheduler", "NaN"], ["3651", "1.x: Remove redundant \"final\" modifiers", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "01/31/16, 04:48:39 AM", "As promised in #3579.", "NaN"], ["3653", "1.x: fix sample(Observable) not requesting Long.MAX_VALUE", "David Karnok", "akarnokd", "01/31/16, 10:08:40 AM", "Reported on the rxjava discussion group.\n\nSample has to disconnect itself from the Producer chain and request Long.MAX_VALUE instead of whatever the downstream requests.", "NaN"], ["3655", "1.x: Add Single.onErrorResumeNext(Single)", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "02/03/16, 05:26:15 AM", "Part of #3652, will submit a PR for `onErrorResumeNext(Func1<Throwable, Single>)` later.", "NaN"], ["3658", "1.x: fix unsubscription and producer issues in sample(other)", "David Karnok", "akarnokd", "02/02/16, 09:00:43 PM", "This PR fixes 2 bugs with `sample`\n- Termination of the main or sampler subscriber unsubscribed the child subscriber which is not allowed.\n- The sampler wrapped the child subscriber and thus it allowed setting a producer on the child (thus sampling based on request with some sources).\n\nIn addition, #3657 wants to emit the very last item on completion to which I marked the required changes in comments (to be uncommented in a separate PR if needed).", "NaN"], ["3661", "1.x: CombineLatest now supports any number of sources", "David Karnok", "akarnokd", "02/03/16, 09:38:07 PM", "This PR is a backport of the 2.x `combineLatest` with `null` support and let's the programmer combine more than 128 sources at once. Note that 2.x supports manual sizing of the prefetch buffer and allows delaying the exceptions to the last moment; I kept these in case such features are required by 1.x some day.\n\nThe original had this 128 limit due to using a single and non-parametric RxRingBuffer to store values from sources. In addition, the original algorithm divided downstream requests among the sources with some strange logic in order to keep them running and not overflow the buffer.\n\nThis PR uses an unbounded-linked SPSC queue which can now hold as many elements as there are sources times the default ring buffer size (this is not preallocated and grows/shrinks as necessary).\n\nThe algorithm stores the current latest array and the source subscriber in the queue in pairs so when that particular row is emitted to downstream, that source subscriber gets the request() replenishment call that generated the row.\n\nIn addition, I've added an Iterator overload from #3660 as well.", "NaN"], ["3662", "1.x: fix doOnRequest premature requesting.", "David Karnok", "akarnokd", "02/03/16, 05:26:04 AM", "When the operator is assembled and it sets the producer on the child, if the child doesn't request until the assembly is complete, `doOnRequest` requested the default Long.MAX_VALUE.", "NaN"], ["3665", "Update javadoc for Subscribers.empty()", "Mike Nakhimovich", "digitalbuddha", "02/03/16, 05:58:02 PM", "fix for https://github.com/ReactiveX/RxJava/issues/3664", "NaN"], ["3668", "2.x: full JDK 6 compatible backport + including bugfixes up to today", "David Karnok", "akarnokd", "02/05/16, 07:53:38 AM", "Due to the issue with AtomicXFieldUpdaters on certain Android devices, I had to manually replace all of them with regular AtomicX classes.", "NaN"], ["3670", "1.x: fix Subscribers.create(onNext) javadoc", "Oguz Babaoglu", "oguzbabaoglu", "02/05/16, 05:29:23 AM", "fix for javadoc issue #3669", "NaN"], ["3671", "2.x: fix SchedulerLifecycle.testStartIdempotence vs cached threads dying", "David Karnok", "akarnokd", "02/06/16, 04:28:16 PM", "I forgot that RxCached threads can get evicted during the test. The new logic makes sure no new threads appeared.", "NaN"], ["3672", "Add How to Contribute wiki link", "Harun Urhan", "harunurhan", "02/06/16, 04:04:15 PM", "Since it has become standard to have everything about how to contribute on CONTRIBUTING.md file, I think   it would be really helpful and good to have link to How-to-Contribute wiki page.", "NaN"], ["3675", "1.x: fix take(-1) not completing", "David Karnok", "akarnokd", "02/06/16, 04:03:04 PM", "Originally, only 0 was checked which resulted in `onCompleted()` but negative values weren't. When the downstream requested, c became -1 and was requested from the source. `range` ignores negative requests but other sources may throw IAE in that case.\n\nWith the fix, the operator will throw IAE in assembly time.", "NaN"], ["3677", "1.x: negative argument check for skip's count and merge's maxConcurrent", "Shixiong Zhu", "zsxwing", "02/08/16, 06:27:59 AM", "As per #3675, we should also check the `count` argument of `skip`. Also added the missing check for `merge`'s `maxConcurrent`.", "NaN"], ["3678", "1.x: fix counted buffer and window backpressure", "David Karnok", "akarnokd", "03/18/16, 07:50:29 AM", "This PR fixes the backpressure behavior of the counted `buffer` and `window` operators and consists of several changes.\n\nThe main issue lies when `count > skip` in the operators, yielding overlapping buffers/windows. \n\nFor `buffer`, when the upstream completed, the logic emitted all remaining partial buffers even if there was no request for new buffers, which can result in `MissingBackpressureException` somewhere. The proper handling of the final buffers required a new backpressure management algorithm which is now part of the `BackpressureUtils` class and consists of two new methods: `postCompleteDone` called from onComplete to take over the emission of queued values and `postCompleteRequest` which manages requests before and after the completed state.\n\nFor `window`, the new window opened was emitted regardless of requests which was common due to request-amplification (i.e., requesting n windows results in requesting `count + skip * (n - 1)` elements at first (then `skip * n` later) which opens `ceil(count / skip)` windows upfront. To avoid the overflow, the individual windows have to go through the usual queue/drain logic as well. I've also updated the Javadoc to reflect the backpressure behavior along with parameter validation.\n\nIn addition, the window case didn't manage cancellation properly. When the outer observable is unsubscribed, the inner subscribers may be still going and thus cancelling the upstream would stop/hang the inner windows. Instead, the open window count is tracked (also counting the outer as 1 window) and when all get unsubscribed (i.e., count reaches zero), the upstream is unsubscribed. To accomplish this, the `UnicastSubject` had to be retrofitted with a new optional callback `Action0` which gets called at most once whenever either `onError` or `onCompleted` is called or when the single `Subscriber` unsubscribes.\n\nA secondary issue was with the `TestSubscriber`'s initial request; some upstream operators could get triggered with `Long.MAX_VALUE` despite the initial request amount was set. This PR changes it to be set at construction time instead of in `onStart`.", "NaN"], ["3680", "Fix various misspellings in OperatorPublish", "Steve Gury", "stevegury", "02/08/16, 11:54:32 PM", "No code change.", "NaN"], ["3681", "1.x: change publish(Func1) to use a dedicated subject-like dispatcher", "David Karnok", "akarnokd", "02/11/16, 10:51:47 AM", "Solves the problems #3673 and #3674 by introducing a new subject-like dispatcher class `OnSubscribePublishMulticast` that does support backpressure, pauses when there are no subscribers and signals the terminal event for late subscribers; all ideal for the multicasting `publish(Func1)` overload.", "NaN"], ["3682", "1.x: fix observeOn resource handling, add delayError capability", "David Karnok", "akarnokd", "02/10/16, 10:02:06 PM", "This PR fixes the \"messing around\" reported in #3002 and adds an overload to `observeOn` that allows delaying errors without the need for wrapping (see #3542 and maybe there are other reports).\n\nIn addition, this PR adds a proper override of the `isEmpty` method to simply compare the two indexes for emptiness directly instead of `size() == 0` to avoid looping, multi-reading and casting.\n\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u66):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/11442154/3f4f104a-9513-11e5-9b0c-00cef5a6bb10.png)\n\nNote that the benchmark is generally quite noisy, yielding hectic results (i.e., firing up a thread with newThread may take quite some random microseconds). For example, `observeOnImmediate` shouldn't be affected by any of the changes yet the run-to-run variance is +/- 10%. I'm fine with the results of the benchmark.", "NaN"], ["3683", "1.x: javadoc for rx.exceptions.Exceptions", "David Karnok", "akarnokd", "02/09/16, 06:26:06 PM", "See #1508", "NaN"], ["3684", "1.x: javadoc for Producer", "David Karnok", "akarnokd", "02/09/16, 10:55:28 PM", "See #1511. ", "NaN"], ["3686", "Added retry and retryWhen support for Single", "Klemen Kresnik", "klemzy", "02/10/16, 06:35:15 PM", "NaN", "NaN"], ["3688", "1.x: Fix zip() - observer array becoming visible too early and causing NPE", "David Karnok", "akarnokd", "02/10/16, 07:17:27 PM", "Reported in #3687.\n\nBy the way, I see several other small problems with zip: it is implemented as an `Operator` and even though one can know the number of sources upfront, this indirection hides the fact. In addition, it uses SpMc queue but could just use Spsc because there is only one drain thread at a time.", "NaN"], ["3689", "1.x: unified onErrorX and onExceptionResumeNext and fixed backpressure", "David Karnok", "akarnokd", "02/09/16, 08:21:40 PM", "The operators didn't honor backpressure when they switched over to the other Observable.\n\nThis PR also includes the fix #3685.", "NaN"], ["3690", "Update nebula gradle plugin", "Steve Gury", "stevegury", "02/10/16, 09:44:39 PM", "Update the gradle-rxjava-project-plugin to the latest version.\nUpdate gradle to version 2.10 as well.", "NaN"], ["3692", "1.x: Fix Completable using JDK 7 suppressed exceptions feature", "David Karnok", "akarnokd", "02/11/16, 05:28:35 AM", "The upgraded gradle switched my IDE to use a JDK 6 library I have installed all along and these popped up immediately.", "NaN"], ["3693", "Update nebula gradle plugin", "Steve Gury", "stevegury", "02/11/16, 05:26:01 AM", "Cherry-pick of the gradle nebula plugin upgrade in 1.x branch.", "NaN"], ["3694", "1.x: #3618 adding source links for @Beta and @Experimental", "Shixiong Zhu", "zsxwing", "02/11/16, 06:12:35 PM", "cherry-pick #3623 to 1.x", "NaN"], ["3695", "Release 1.1.1 changes.md", "David Karnok", "akarnokd", "02/11/16, 08:58:57 PM", "Preparation for 1.1.1", "NaN"], ["3696", "1.x: Added Single execution hooks", "Pawe\u0142 Hajduk", "phajduk", "03/17/16, 12:13:16 PM", "Resolves #3595", "NaN"], ["3697", "1.x: fix ScalarSynchronousObservable expects EventLoopsScheduler from", "David Karnok", "akarnokd", "02/12/16, 07:57:08 PM", "Schedulers.computation()\n\nWhen one installs a scheduler hook which makes Schedulers.computation() return a different scheduler, the constant function in ScalarSynchronousObservable crashes if that hasn't been initialized.", "NaN"], ["3699", "1.x: GroupBy Regression Test Case", null, "duncani", "02/19/16, 09:50:00 AM", "This is passing against 1.1.1 with the back-ported OperatorGroupBy, but would be good to have it in as a regression test.\n\nSee also: #3698", "NaN"], ["3701", "1.x: Add Completable.doOnCompleted and deprecate Completable.doOnComplete", "Zach Klippenstein", "zach-klippenstein", "02/14/16, 10:24:25 AM", "Closes #3700.", "NaN"], ["3702", "1.x: fix mapNotification's last item backpressure handling", "David Karnok", "akarnokd", "02/19/16, 09:49:02 AM", "The previous algorithm used a 2 element queue but it was possible the drain loop got captured and the queue wasn't enough, causing `MissingBackpressureException`.\n\nThe new algorithm uses the requested field's most significant bit to indicate a completed state. If the terminal events reach it with non-zero request or a post-terminal request finds a zero request amount, the last item is emitted.\n\nIn addition, the upstream's producer may arrive after the first request thus the class includes the usual arbitration logic inlined. If the upstream doesn't set a `Producer` but just emits values, the production/backpressure checks are bypassed.\n\n```\nrx.internal.operators.OperatorFlatMapTest > testFlatMapTransformsMaxConcurrentNormalLoop FAILED\n    java.lang.AssertionError: Unexpected onError events: 1\n        at rx.observers.TestSubscriber.assertNoErrors(TestSubscriber.java:309)\n        at rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsMaxConcurrentNormal(OperatorFlatMapTest.java:419)\n        at rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsMaxConcurrentNormalLoop(OperatorFlatMapTest.java:395)\n        Caused by:\n        rx.exceptions.MissingBackpressureException\n            at rx.internal.operators.OperatorMapNotification$SingleEmitter.offerAndComplete(OperatorMapNotification.java:173)\n            at rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.onCompleted(OperatorMapNotification.java:80)\n            at rx.internal.operators.OnSubscribeFromIterable$IterableProducer.slowpath(OnSubscribeFromIterable.java:101)\n            at rx.internal.operators.OnSubscribeFromIterable$IterableProducer.request(OnSubscribeFromIterable.java:73)\n            at rx.internal.producers.ProducerArbiter.emitLoop(ProducerArbiter.java:186)\n            at rx.internal.producers.ProducerArbiter.setProducer(ProducerArbiter.java:129)\n            at rx.internal.operators.OperatorMapNotification$MapNotificationSubscriber.setProducer(OperatorMapNotification.java:74)\n            at rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:49)\n            at rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:32)\n            at rx.Observable$2.call(Observable.java:162)\n            at rx.Observable$2.call(Observable.java:154)\n            at rx.Observable$2.call(Observable.java:162)\n            at rx.Observable$2.call(Observable.java:154)\n            at rx.Observable.subscribe(Observable.java:8426)\n            at rx.Observable.subscribe(Observable.java:8393)\n            at rx.internal.operators.OperatorFlatMapTest.testFlatMapTransformsMaxConcurrentNormal(OperatorFlatMapTest.java:416)\n            ... 1 more\n```", "NaN"], ["3704", "1.x: Make the javadoc task generate correct docs", "Shixiong Zhu", "zsxwing", "02/16/16, 07:47:07 PM", "This PR modified the javadoc task to make it generate the same format of http://reactivex.io/RxJava/javadoc/index.html. `gradle/stylesheet.css` is copied from https://github.com/ReactiveX/RxJava/blob/gh-pages/javadoc/stylesheet.css\n\nThis supports both Java 7 and Java 8. However, docs generated by Java 8 have a totally different style. Hence we should use Java 7 to generate javadoc and publish it to http://reactivex.io/RxJava/javadoc/index.html.", "NaN"], ["3705", "Update RxJava Javadoc to 1.1.1", "Shixiong Zhu", "zsxwing", "02/14/16, 08:46:49 PM", "Generated by `./gradlew -Prelease.version=1.1.1 clean javadoc` using Java 7 after applying #3704", "NaN"], ["3707", "1.x: make Completable.subscribe() report isUnsubscribed consistently", "David Karnok", "akarnokd", "02/15/16, 09:21:25 AM", "The empty and lambda-based `Completable.subscribe()` returns a `Subscription` whose `isUnsubscribed` should be consistent with the rest of the reactive objects by returning true if the sequence terminated (not just when one truly cancelled it).", "NaN"], ["3712", "Add takeUntil support in Single", "Zac Sweers", "ZacSweers", "02/23/16, 06:58:31 PM", "As discussed in #3708\n\nThis adds `takeUntil(Observable)` and `takeUntil(Single)` support in `Single`. It was mostly just adapting the logic from the existing `OperatorTakeUntil` and adjusting it for accepting a `Single` and sending a `CancelattionException` in the event of a submission from `other` prior to a terminal event in the source `Single`.\n\nAny feedback is appreciated it, this is my first time contributing an implementation to this project. Particularly wondering if it's worth keeping both overloads or if the user should just coerce their `other` to one type or ther other. Also particularly looking for feedback on what information to include in the `CancellationException`.", "NaN"], ["3714", "1.x: Add maxConcurrent parameter to concatMapEager", "Adrian Pascu", "adipascu", "04/07/16, 06:56:38 AM", "Relevant issue #3710 ", "NaN"], ["3717", "Update information about jar size in README.md", "Tolya Korniltsev", "korniltsev", "02/17/16, 04:53:51 PM", "The latest version of rxjava is 978K long.", "NaN"], ["3718", "new method concatMapIterable #3713", "Benjamin Donze", "benjamindonze", "02/24/16, 07:20:33 PM", "new method concatMapIterable #3713", "NaN"], ["3719", "Documentation fix.", "Said Tahsin Dane", "tasomaniac", "02/18/16, 05:56:07 PM", "NaN", "NaN"], ["3720", "1.x: Add vararg of Subscriptions to CompositeSubscription.", "Klemen Kresnik", "klemzy", "06/17/16, 08:37:28 AM", "NaN", "NaN"], ["3722", "Add maxConcurrent parameter to flatMapIterable", "Luka Cindro", "lukaciko", "03/03/16, 10:10:12 PM", "Refs #3711. Should these new overloaded functions be annotated with `@Beta`?", "NaN"], ["3727", "scan should pass upstream a request of Long.MAX_VALUE", "Dave Moten", "davidmoten", "02/24/16, 05:46:17 PM", "Changes in 1.1.1. for the `scan` operator introduced a bug in requesting where when the initial request was for max value the `scan` operator requested one less than that value of upstream (which affects fast-path producers).\n\nI believe this bug only affects 1.1.1 (haven't looked at 2.x).\n\nThis PR includes a test that failed on the original code.", "NaN"], ["3733", "Avoid swallowing errors in Completable", "Logan Johnson", "loganj", "03/02/16, 07:14:40 PM", "Instead, deliver them up to the thread's uncaught exception handler.\n\nFixes reactivex/rxjava#3726", "NaN"], ["3738", "Creating Observable#create overloads for SyncOnSubscribe and AsyncOnSubscribe", "Aubrey Tull", "stealthcode", "03/03/16, 09:22:34 PM", "This is to facilitate the discovery of methods for creating observables that respect back pressure semantics. Currently the `Observable#create(OnSubscribe)` static method is the easiest method to discover for creating an observable which does not provide clear facilities for managing back pressure. ", "NaN"], ["3741", "Add doOnSubscribe for Single", "Aaron He", "aaronweihe", "03/03/16, 10:09:17 PM", "Ref #3740.\n\nI didn't write much unit tests for `doOnSubscribe` because it internally uses `OperatorDoOnSubscribe` which is well covered.", "NaN"], ["3745", "1.x: Fix the test Issue1685 not waiting long enough.", "David Karnok", "akarnokd", "03/10/16, 12:31:52 PM", "The tests started regularly failing on travis. This PR increases the waiting time to 2 seconds in total.", "NaN"], ["3752", "1.x: Single.using()", "David Karnok", "akarnokd", "03/14/16, 04:40:08 PM", "This PR adds the factory method `using()` +1 overload to `Single` as requested in #3732.\n\nFor convenience, I've also added `Single.subscribe(Observer)`.", "NaN"], ["3753", "1.x: fix SerializedObserverTest.testNotificationDelay", "David Karnok", "akarnokd", "03/14/16, 04:53:53 PM", "This PR fixes the `SerializedObserverTest.testNotificationDelay` test to use reentrancy to verify the buffer in `SerializedObserver` is properly drained. For now, it loops 10,000 times to see if the CI brings up the issue again. Takes 400ms on my machine but I'll probably reduce it to 1,000 times.\n\n(The previous version was a bit convoluted with all those countdowns that didn't properly lock out the other thread).\n\nReported in issue #1389", "NaN"], ["3754", "1.x: measure flatMap/concatMap performance when used as filter", "David Karnok", "akarnokd", "03/13/16, 11:18:00 PM", "This PR adds a perf class to measure the overhead of using `empty()` when the `flatMap`/`concatMap` emulates `filter`.\n\nThis will establish the comparison baseline for `flatMap`/`concatMap` optimization as requested in #1653.\n\nThe baseline [numbers](https://gist.github.com/akarnokd/243a09e28edfc27aeb0d) (i7 4770K, Windows 7 x64, Java 8u72):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/13731994/629ce62c-e977-11e5-9f32-82dc404c792f.png)\n\nComparing `flatMap` against `concatMap`:\n\n![image](https://cloud.githubusercontent.com/assets/1269832/13731998/a15586b2-e977-11e5-82c5-b33e458cb5a9.png)\n\nHere, mask indicates the and-mask that makes emitting `empty` less frequent: 0 = always, 1 = every other, 3 = every fourth, 7 = every eighth. This also means that `rangeEmpty` starts emitting more and more values with higher mask value hence the different throughput values.", "NaN"], ["3755", "1.x: fix attempt 2 for testErrorThrownIssue1685", "David Karnok", "akarnokd", "03/13/16, 11:54:21 PM", "I hope this fixes the test once and for all.", "NaN"], ["3756", "1.x: clarify join/groupJoin no ordering guarantees", "David Karnok", "akarnokd", "03/14/16, 05:10:15 PM", "Original issue: #3616.", "NaN"], ["3757", "1.x: Operator sample emits last sampled value before termination.", "Kirill Boyarshinov", "kboyarshinov", "03/23/16, 09:06:21 PM", "Changes:\n- `OperatorSampleWithTime` emits last stored value if it is set before `onCompleted`\n- `OperatorSampleWithObservable` emits last sampled value if source or sample complete.\n\nAs discussed in https://github.com/ReactiveX/RxJava/issues/3657.", "NaN"], ["3759", "1.x: concatMap full rewrite + delayError + performance", "David Karnok", "akarnokd", "03/15/16, 11:10:59 PM", "This is a full rewrite of the `concat`/`concatMap` operator with the following properties:\n- using `OnSubscribe` to save on the allocation of `lift`\n- `concatDelayError` and `concatMapDelayError` to delay errors to the very end\n- new trampolining logic that also subscribes to the next source even if requested is zero\n- using `concatMap` or `concatMapDelayError` on a scalar source now bypasses the operator completely and uses `ScalarSynchronousObservable.scalarFlatMap` as well.\n- the operator now detects `just` and `empty` sources and bypasses subscribing accordingly\n- added `ExceptionsUtils` to work with composite exceptions and terminal state; useful for other similar delaying operators later on.\n- `concat` is now implemented as `concatMap(v -> v)` which saves on the allocation of an entire `map` operator\n- `OperatorWindowWithSizeTest.testBackpressureOuterInexact` had to be ignored because `window` doesn't honor backpressure properly and it is fixed in #3678; once it has been resolved, the test can be reenabled\n- Added varargs constructor to `CompositeException` for convenience; avoids creating a list when the number of initial exceptions are known upfront.\n\nPerformance comparison to baseline (i7 4770K, Windows 7 x64, Java 8u72):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/13744915/603866a8-e9eb-11e5-8711-8feb24fbb872.png)", "NaN"], ["3760", "1.x: fix ExecutorScheduler and GenericScheduledExecutorService reorder bug", "David Karnok", "akarnokd", "03/17/16, 05:56:43 PM", "This PR relates to the failure of `errorThrownIssue1685`.\n\nThe underlying problem was with the `GenericScheduledExecutorService`. By being multi-threaded, tasks scheduled from the same thread one after the other may get reordered because different worker threads inside the pool could pick them up at the same time. In this case, there is no guarantee they keep their FIFO order.\n\n_(I currently have no idea how one can use trampolining for this case; subsequent tasks may have any relative delays in respect to each other.)_\n\nThe solution creates N single threaded `ScheduledExecutorService`s and getInstance() hands one of them out. In turn `ExecutorService` takes one in its worker upfront.\n\nHowever, there is still the problem when the programmer uses a multi-threaded `ScheduledExecutorService` with `Schedulers.from()` when the same issue comes back. A solution to that problem would be to always use the new `GenericScheduledExecutorService` for delaying timed tasks.", "NaN"], ["3761", "1.x: optimize merge/flatMap for empty sources", "David Karnok", "akarnokd", "05/02/16, 09:04:01 PM", "This PR improves the overhead when one merges/flatMaps `empty()` sequences.\n\nBenchmark results: (i7 4770K, Windows 7 x64, Java 8u72):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/13749421/a04a35c6-ea01-11e5-8b02-53ad07517453.png)\n\nFor rare `empty()`, the overhead seems to be around the noise level.", "NaN"], ["3762", "1.x: Deprecate CompositeException constructor with message prefix", "Niklas Baudy", "vanniktech", "03/23/16, 09:07:12 PM", "Before this PR messagePrefix was never used :dancer: \n\nIf you guys want I can revert the change on CompositeExceptionTest.java:177. I just thought that way it' be nicer.\n\nAbout the message is there any reason for having a space after the dot?", "NaN"], ["3763", "1.x: combineLatestDelayError", "David Karnok", "akarnokd", "03/14/16, 10:07:50 PM", "This PR exposes the `delayError` option in `combineLatest` as `combineLatestDelayError`.\n\n(Note that we have convenience overloads with 2-9 sources that could also use an overload, but that just expands the API surface drastically.)", "NaN"], ["3765", "1.x: switchOnNextDelayError and switchMapDelayError", "David Karnok", "akarnokd", "03/15/16, 11:11:23 PM", "This PR adds a delayError version to the `switchOnNext` / `switchMap` operators.", "NaN"], ["3766", "1.x: Add Single.onErrorResumeNext(Func)", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "03/15/16, 11:57:39 PM", "Closes #3440, closes #3731, closes #3472 (whoa, 3 issues at a time!)", "NaN"], ["3767", "1.x: Update Gradle wrapper to 2.12", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "03/15/16, 11:53:27 PM", "Release notes https://docs.gradle.org/2.12/release-notes\n\n> Gradle 2.12 has the fastest build script compilation speeds of any Gradle version to date.", "NaN"], ["3768", "1.x: observeOn - fix in-sequence termination/unsubscription", "David Karnok", "akarnokd", "03/16/16, 01:50:25 PM", "This fixes `observeOn` not completing immediately if the downstream requested exactly the remaining amount. The original version required a new request from downstream to trigger the delivery of the terminal event.\n\nThis also fixes the rare failure in `testNoMoreRequestsAfterUnsubscribe` because the unsubscription is now checked in-sequence and doesn't trigger the unwanted replenishment request.", "NaN"], ["3777", "observeOn: allow configurable buffer size", "Galo Navarro", "srvaroa", "03/23/16, 10:41:13 PM", "The observeOn operator is backed by a small queue of 128 slots that may\noverflow quickly on slow producers.  This could only be avoided by\nadding a backpressure operator before the observeOn (not only\ninconvenient, but also taking a perf. hit as it forces hops between two\nqueues).\n\nThis patch allows modifying the default queue size on the observeOn\noperator.\n\nFixes: #3751\nSigned-off-by: Galo Navarro anglorvaroa@gmail.com", "NaN"], ["3778", "1.x: Release 1.1.2 CHANGES.md update", "David Karnok", "akarnokd", "03/18/16, 10:21:38 PM", "Preparing for release 1.1.2.", "NaN"], ["3780", "Upgrading SyncOnSubscribe from experimental to beta", "Aubrey Tull", "stealthcode", "03/31/16, 08:00:27 PM", "NaN", "NaN"], ["3782", "2.x design decisions", "Steve Gury", "stevegury", "04/07/16, 11:03:55 AM", "This is a first draft of the design document for the 2.x branch.\nWe are interested in collecting any feedback from the community (implementers but also pure users).\n\nThis present document is the collaborative work of @abersnaze, @benjchristensen, @stealthcode, and @stevegury. But we encourage anyone to propose improvements/clarifications via pull-request.", "NaN"], ["3783", "2.x: rename and refactor classes to match the design document", "David Karnok", "akarnokd", "03/23/16, 10:31:53 PM", "This PR renames and moves classes around to match the design document.\n\nIn addition, JMH version is updated to 1.11.3 and Gradle to 2.12.\n\nInternal classes haven't been renamed yet and I plan to do it after this PR is merged.\n\nThis PR can't be effectively reviewed on GitHub. I suggest a clean checkout to your local IDE and see the proposed structure there.", "NaN"], ["3787", "1.x: fix GroupBy delaying group completion till all groups were emitted", "David Karnok", "akarnokd", "03/23/16, 10:32:34 PM", "In 1.1.1, `groupBy` was fixed to properly honor backpressure on the outer `Observable`. The change included a drain loop that emitted `onCompleted()` to the groups only when all `GroupedObservable`s were drained from the main queue. This delayed the group's completion unnecessarily causing the `concat` operator to hang in some source-consumer cases such as #3775.\n\nThis PR fixes the behavior by signalling `onCompleted()` to the groups the moment the main completes. \n\nNote, however, that concatenating groups is eventually prone to hangs due to the groups not completing until the source completes, thus `concat` can't switch to the next source. One should use `flatMap` or `concatMapEager` instead.", "NaN"], ["3789", "1.x: Prevent Single.zip() of zero Singles", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "03/23/16, 10:33:02 PM", "Closes #3784.", "NaN"], ["3790", "1.x: Expose Single.lift()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "03/23/16, 10:32:49 PM", "Closes #3161.", "NaN"], ["3791", "1.x: Fix Observable delay methods typos in documenation", "Sebas LG", "sebaslogen", "03/23/16, 09:06:51 PM", "NaN", "NaN"], ["3795", "1.x: observeOn now replenishes with constant rate", "David Karnok", "akarnokd", "04/08/16, 08:56:14 PM", "This PR makes sure `observeOn` requests replenishments in a fixed and predictable quantity of 75% of the `bufferSize`, that is, if an emission counter reaches `0.75 * bufferSize`, that amount is requested and the emission counter is reset to zero. This requires saving the emission count between drain runs. If the bufferSize is 1 or 2, the replenishment will trigger after every 1 or 2 items.\n\nNote that there is only one sensitive operator-builder, `AsyncOnSubscribe`, which is mostly affected by the request pattern as it facilitates user code to respond with an Observable sequence of the requested amount.\n\nIn addition, since `observeOn` now supports setting the buffer size, it can act as a rebatching operator via the help of `Schedulers.immediate()`.", "NaN"], ["3799", "1.x: Add Completable.andThen(Single)", "(\u00b4\u2323`\u0283\u01aa)", "pt2121", "03/30/16, 09:18:54 PM", "https://github.com/ReactiveX/RxJava/issues/3730", "NaN"], ["3803", "1.x: Fix typos in documentation and some code", "Sebas LG", "sebaslogen", "03/29/16, 07:23:21 AM", "NaN", "NaN"], ["3809", "1.x: fix merge/flatMap crashing on an inner scalar of null", "David Karnok", "akarnokd", "03/29/16, 08:00:07 PM", "This crash happens on contention where a scalar null value has to go through the scalar-queue which doesn't support nulls and requires NotificationLite transformations. (The drain side had the proper `getValue` in place already.)\n\nReported in #3808.", "NaN"], ["3818", "1.x fromCallable() @Experimental -> @Beta", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "04/07/16, 06:57:15 AM", "Part of #3816", "NaN"], ["3820", "Making RxPlugins reset() public", "Shivang Shah", "shivangshah", "04/29/16, 06:15:18 PM", "Discussions found here: https://github.com/ReactiveX/RxJava/issues/2297", "NaN"], ["3822", "1.x: make defensive copy of the properties in RxJavaPlugins", "David Karnok", "akarnokd", "04/04/16, 06:39:52 PM", "Possible solution to #3749.", "NaN"], ["3823", "1.x: DoAfterTerminate handle if action throws", "David Karnok", "akarnokd", "04/04/16, 06:11:37 PM", "Fixes the bug reported in #3435.", "NaN"], ["3824", "1.x: javac 9 compatibility fixes", "David Karnok", "akarnokd", "04/04/16, 06:13:48 PM", "The type inference of javac in JDK 9 has been changed in an incompatible way, marking many generics-related code invalid.\n\nThe most common problems:\n- The inference calculates `Observable<? extends T>` but from its perspective, a call to `subscribe()` with a `Subscriber<T>` is ambiguous as it matches `subscribe(Observer<? super T>)` and `subscribe(Subscriber<? super T>)`. Somehow, the more specific class is not considered as a valid choice. Downcasting to `Observable<T>` fixes the error.\n- `A<?>[]` no longer accepts `A<Ti>` elements, requires the use of raw types to get around\n\nThe tests appear to compile fine.\n\nNote that I couldn't find a working IDE for JDK 9 and had to revert to command line trickery:\n\n```\n@echo off\n\ndir /s /B src\\main\\java\\rx\\*.java > sources.txt\ndir /s /B src\\test\\java\\rx\\*.java >> sources.txt\n\n\"c:\\program files\\java\\jdk-9\\bin\\javac.exe\" -cp C:/temp/rx/junit.jar;C:/temp/rx/mockito.jar @sources.txt \n\ndel sources.txt\n```", "NaN"], ["3825", "1.x: Fix ObserveOnTest. testQueueFullEmitsErrorWithVaryingBufferSize", "David Karnok", "akarnokd", "04/03/16, 02:06:14 AM", "The test had some non-deterministic machinery to trigger the failure.", "NaN"], ["3826", "1.x: Fix TestSubscriber.create doc", "(\u00b4\u2323`\u0283\u01aa)", "pt2121", "04/04/16, 07:01:33 AM", "the docs of TestSubscriber.create(Subscriber) and TestSubscriber.create(Observer) got mixed up.\nI just swapped them.", "NaN"], ["3828", "1.x: AsyncSubject now supports backpressure", "David Karnok", "akarnokd", "04/04/16, 05:50:32 PM", "`AsyncSubject` can trivially support backpressure when it emits a single item by setting the `SingleProducer` on the child `Subscriber` instead of calling `onNext` immediately.", "NaN"], ["3829", "1.x: Add system property for disabling usage of Unsafe API", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "04/04/16, 05:08:13 PM", "Part of #3459, related to #3815.", "NaN"], ["3836", "1.x: fix switchMap/switchOnNext producer retention and backpressure", "David Karnok", "akarnokd", "04/07/16, 06:59:56 AM", "This PR fixes the producer retention problem and backpressure problem in `switchMap`/`switchOnNext`.\n\nIn the original, when an inner source completed, its producer was still referenced after it. If there was no new inner source or the next inner source didn't set a new producer, the operator leaked the previous inner source's internals. The fix involves nulling out the producer field when the inner source completes (and is still the current one).\n\nThe original had an additional bug due to a race condition between the request arbitration and switching inner sources. In some cases, the switch didn't properly forward the remaining request amount to the new inner source, causing hangs. In some other cases, both the old and new inner sources were able to emit, causing overflow. The fix involves a new queue-drain loop with some emitter-loop help to work out the state transitions.", "NaN"], ["3839", "1.x: fix takeLast() backpressure", "David Karnok", "akarnokd", "04/08/16, 09:39:57 PM", "The counted and timed versions of `takeLast` had a concurrency bug which allowed concurrent emission from the underlying queue that holds onto the values till the upstream completes. When timed correctly, both an `onCompleted()` and a `request()` that went from 0 to n could enter the emit() method and break the internal state of the non-concurrent queue. Note that this queue doesn't have to be concurrent by nature because the operator can emit only _after_ the upstream completes (`offer()` never runs concurrently with `poll()` unlike in `observeOn`).\n\nIn addition, the emission didn't immediately complete if the queue was emptied and requested == 0. In this operator, the fact that the queue became empty is the indicator of completion.\n\nBoth issues can be fixed with the `postCompleteXXX` mechanics in `BackpressureUtils`.\n\nSince the operator has to store `null` values, the `postCompleteXXX` had to be extended with an exit transform overload to allow converting the `NotificationLite` values back to regular `T`/`null`.", "NaN"], ["3840", "1.x: fix concatMap scalar/empty source behavior", "David Karnok", "akarnokd", "04/08/16, 08:06:27 PM", "There were two tiny problems with the rewritten `concatMap` operator, mainly due to copy-paste error:\n- When a scalar was concatenated, the `active` field was not set and thus the next prefetched source overwrote it.\n- When the scalar was set on the arbiter, its custom producer didn't check for n > 0 zero causing instant emission always. Generally Producer.request(0) is allowed and should be no-op (unlike RS).\n- When an empty() was encountered as a last source, the it didn't trigger the check for completion afterwards.", "NaN"], ["3842", "1.x: improve ExecutorScheduler worker unsubscription", "Dave Moten", "davidmoten", "04/08/16, 06:15:47 PM", "I noticed that when a worker built from `Schedulers.from(Executors.newFixedThread(1))` is unsubscribed the use of a `CompositeSubscription` to track task subscriptions means that the tasks may be unsubscribed in any old order (`CompositeSubscription` holds its subscriptions in a `HashSet`).  This means that if the worker is given task A and task B then the race can prevent A from running but allow B to run! I've included a unit test in this PR that demos it. Fails every time on my machine on the first loop.\n\nThis  PR is really for discussion about the problem and possible fixes.\n\nI have included a possible fix which is to track overall subscription using a volatile boolean and check that boolean before running any task. If this was considered the way to go some further simplification would take place in the operator (might not need to check individual task subscriptions).\n\nI haven't checked other schedulers for this sort of problem yet.", "NaN"], ["3845", "1.x: fix delaySubscription(Observable) unsubscription before triggered", "David Karnok", "akarnokd", "04/08/16, 09:45:03 PM", "The serial subscription in the `delaySubscription(Observable)` operator was not chained properly and thus an unsubscription before any events by the other didn't prevent the subscription to the main source.\n\nReported in #3844", "NaN"], ["3846", "1.x: Release 1.1.3 CHANGES.md update", "David Karnok", "akarnokd", "04/08/16, 10:25:05 PM", "Update to the CHANGES.md file.\n\n(Without the flatMap and replay perf enhancements.)", "NaN"], ["3848", "1.x: deanonymize Observable inner classes", "David Karnok", "akarnokd", "04/14/16, 05:50:27 PM", "This PR factors out many anonymous inner classes into named classes and moves them outside `Observable`.\n\nThis cleanup makes the `Observable` more compact and helps debugging by showing more meaningful names in stacktraces.", "NaN"], ["3849", "Remove unused local.", "Jake Wharton", "JakeWharton", "04/11/16, 06:03:52 AM", "NaN", "NaN"], ["3853", "1.x: ConcatMap vs ConcatMapIterable perf", "David Karnok", "akarnokd", "04/14/16, 05:51:04 PM", "This PR adds a perf class to measure the difference between `concatMap()` and `concatMapIterable()` to support performance work\n\n[Results](https://gist.github.com/akarnokd/86f5507ba4dec6a19fdf5b4bf7d7578f) on my machine (i7 4770K, Windows 7 x64, Java 8u77):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/14477915/8206a302-0111-11e6-82dd-d0e3cf70b8b8.png)", "NaN"], ["3856", "Provide factories for creating the default scheduler instances.", "Jake Wharton", "JakeWharton", "04/18/16, 10:34:37 AM", "Unlike other hooks, the `RxJavaSchedulersHook` has no access to the real `Scheduler` instances in order to do wrapping/delegation. With these factory methods, a hook can access what would otherwise be the instance used since there is often no other means of creating these specialized schedulers.\n\nFor Android this wrapping/delegation use-case is important for UI testing. We have a means to tell the testing framework when the app is idle and to do that we need to hook into the schedulers to know when they're empty. This is easy to do currently, but you cannot wrap the real instance and instead have to supply alternate implementations which might subtly alter the behavior under test.\n\nThese three methods are referenced in #3724, and I think providing the defaults is useful as well as eventually adding overloads which take `ThreadFactory` instances for each.", "NaN"], ["3862", "1.x: fix from(Iterable) error handling of Iterable/Iterator", "David Karnok", "akarnokd", "04/21/16, 07:58:08 PM", "The `from(Iterable)` ignored non-fatal exceptions thrown by the `Iterable` and `Iterator`.\n\nApart from wrapping the calls into `try-catch`, the overal emission algorithm has been changed:\n- It calls `hasNext` only once for each available value. Since the subscribe() checks for an outright empty `Iterable`, the drain loop runs only if it wasn't empty and does another `hasNext` check immediately to complete immediately if possible.\n- It uses what I call a fast-flow algorithm to avoid decrementing the requested amount (this) if there were more requests issued during the emission.", "NaN"], ["3864", "1.x: optimize concatMapIterable/flatMapIterable", "David Karnok", "akarnokd", "05/03/16, 08:18:49 PM", "This PR reduces the overhead of `concatMapIterable`/`flatMapIterable` by not wrapping them into `Observable.from` sources but handling the generated `Iterable`s directly.\n\nSince `Iterable`s are inherently synchronous, there is no difference between the two operators that now use the common underlying operator (i.e., flatMap can't chose a different source because it can't tell if an `Iterable` source is not ready or not; `hasNext()` is for indicating completion, not temporary lack of data).\n\nBenchmark (i7 4790, Window 7 x64, Java 8u77):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/14599483/e3c72978-0557-11e6-8a3e-833381399646.png)\n\n`Iterable-M` is the current master, `Plain` is using `concatMap(Observable::from)` as a reference.\n\nThe `count=1` cases are bit slower because there is no good way of detecting if an `Iterable` holds only a single element, unlike with `just()`, and have to instantiate the full infrastructure even for a single element.\n\nThe same table using the master as baseline:\n\n![image](https://cloud.githubusercontent.com/assets/1269832/14599552/5258f7e0-0558-11e6-8d1d-4eacca60805b.png)", "NaN"], ["3866", "1.x: Add Single.toCompletable()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "04/19/16, 06:18:23 AM", "Closes #3865.", "NaN"], ["3867", "1.x: improve ExecutorScheduler worker unsubscription some more", "Dave Moten", "davidmoten", "04/20/16, 05:15:37 PM", "As per discussion in #3842, there was an outstanding possibility that unsubscription of a `Worker` would not cancel all tasks waiting in the queue. This PR addresses that possibility. I attempted to provoke the condition in a unit test but didn't manage it. Nethertheless I think this change completes the protection desired in #3842.\n\nI do have mixed feelings about the possible double calling of `queue.clear()` (once in the `run()` method and once in the `unsubscribe()` method. Any preferences?", "NaN"], ["3868", "Fix an unsubscribe race in EventLoopWorker", "Shixiong Zhu", "zsxwing", "04/20/16, 05:03:05 PM", "There is an unsubscribe race condition similar to #3842 in `CachedThreadScheduler.EventLoopWorker` and `EventLoopsScheduler.EventLoopWorker`. Image the following execution order:\n\n| Execution Order | thread 1 | thread 2 |\n| --- | --- | --- |\n| 1 |  | submit task A |\n| 2 |  | submit task B |\n| 3 | unsubscribe Worker |  |\n| 4 | unsubscribe task A |  |\n| 5 |  | task A won't run as it's unsubscribed |\n| 6 |  | run task B |\n| 7 | unsubscribe task B |  |\n\nSo task B will run but its previous task A will be skipped.\n\nThis PR adds a check before running an action and moves `workerUnderConcurrentUnsubscribeShouldNotAllowLaterTasksToRunDueToUnsubscriptionRace` to `AbstractSchedulerConcurrencyTests` to test all concurrent schedulers.", "NaN"], ["3871", "Deprecate remaining public scheduler types.", "Jake Wharton", "JakeWharton", "04/21/16, 07:06:35 AM", "A continuation of some work done in #3856 of removing uninstantiable types from the public API (via deprecation).", "NaN"], ["3874", "remove unused field baseCapacity from onBackpressureBuffer", "Dave Moten", "davidmoten", "04/22/16, 10:45:05 PM", "as per title", "NaN"], ["3879", "Expose scheduler factories which accept thread factories.", "Jake Wharton", "JakeWharton", "04/29/16, 06:13:19 PM", "This allows hooks to create schedulers whose threads have different priorities.\n\nCloses #3724.", "NaN"], ["3880", "1.x: TestSubscriber/TestObserver print values if number of items doesn't match", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "04/29/16, 05:46:47 PM", "Otherwise you have to manually print/debug values if test failed.", "NaN"], ["3883", "1.x: fix multiple chained Single.doAfterTerminate not calling actions", "David Karnok", "akarnokd", "04/29/16, 09:43:36 PM", "Resolves #3881.\n\nThe bug is caused by the impedance mismatch between `Observable`'s `Subscriber` and `Single`'s `SingleSubscriber`. The original code called `onNext()` which immediately signalled an `onSuccess` but also caused an unsubscription, preventing a delivery of `onCompleted()` in the inner Single.\n\nThe fix keeps `onSuccess`/`onError` rails intact  throughout the chain.", "NaN"], ["3886", "throwIfFatal() now throws OnCompletedFailedException", "Daniel Lew", "dlew", "04/29/16, 05:56:57 AM", "Otherwise, if there's an error in onCompleted, the exception is\nswallowed and unreported.\n\nFixes #3885", "NaN"], ["3887", "Have undeliverable errors on subscribe() sent to plugin error handler.", "David Karnok", "akarnokd", "04/29/16, 06:14:36 PM", "This change will make sure if the `Subscriber` has unsubscribed, the non-fatal error is sent to the plugin error handler at least. I.e.,\n\n``` java\nObservable.create(s -> {\n    s.onError(new RuntimeException());\n    throw new IllegalArgumentException();\n}).subscribe();\n```\n\nIn addition, if the original code threw `RuntimeException` in case the `subscriber.onError()` threw. I've changed this to `OnErrorFailedException` but not sure the original type was intentional or just left out.", "NaN"], ["3888", "1.x: proposal: onTerminateDetach - detach upstream/downstream for GC", "David Karnok", "akarnokd", "05/03/16, 08:12:02 PM", "By default, operators have final link to their child Subscriber and they never clear the upstream's Producer. If the end subscriber is referenced, for example in a `CompositeSubscription`, that keeps an entire chain of objects alive and can cause memory leaks (a use case common on Android).\n\nThis proposed operator detaches the structures and nulls out references if the sequence terminates or the downstream unsubscribes - at the cost of atomic operations and mandatory volatile read for each onNext(). \n\nI know this issue has been brought up several times, but instead of adding the overhead to every operator, I propose an operator that can be applied when the developer really needs it (i.e., could be part of the usual compose(subscribeOn/observeOn) setup).\n\nOn the implementation side, this requires deferred `Producer`/`request()` handling because requests from downstream may appear even before the upstream calls `setProducer` (if at all) and we can't use the base class' behavior for this.", "NaN"], ["3890", "1.x: map() and filter() should unsubscribe on crash eagerly", "David Karnok", "akarnokd", "04/29/16, 08:44:33 PM", "In current master, when the function in `map` or `filter` crashes, the error is propagated but the upstream is not immediately unsubscribed but expected to happen eventually due to some other operator or `SafeSubscriber`.\n\nThe fix, and also the restructuring of the unsubscription chain, makes sure the crash also unsubscribes immediately (unless a fatal one).\n\nRelated: [StackOverflow question](http://stackoverflow.com/questions/35343474/why-does-it-need-onbackpressure-here-for-click-events)", "NaN"], ["3893", "1.x: enable backpressure with from(Future).", "David Karnok", "akarnokd", "04/29/16, 09:43:53 PM", "The `from(Future)` operator was not refitted for backpressure.\n\nReported in: #3892.", "NaN"], ["3895", "1.x: cast() should unsubscribe on crash eagerly", "David Karnok", "akarnokd", "04/29/16, 08:42:49 PM", "Similar issue as in #3890.", "NaN"], ["3896", "1.x: OperatorMapPair should unsubscribe on crash eagerly", "David Karnok", "akarnokd", "04/29/16, 08:42:32 PM", "Found another one.", "NaN"], ["3897", "1.x: Give more time to OperatorSwitchTest.switchAsyncHeavily", "David Karnok", "akarnokd", "04/29/16, 06:40:50 PM", "`OperatorSwitchTest.switchAsyncHeavily` sometimes times out. Could be due to Travis or an actual bug which doesn't deliver the last few elements.", "NaN"], ["3898", "1.x: Add missing license headers", "David Karnok", "akarnokd", "04/29/16, 07:36:23 PM", "This PR simply adds missing license header to main and test files.", "NaN"], ["3901", "Small code style consistency fix for WeakSingleProducer", "Zsombor Erd\u0151dy-Nagy", "rzsombor", "05/02/16, 05:03:38 PM", "Handling the case of 0 requests with the same code style as SingleDelayedProducer and SingleProducer.", "NaN"], ["3903", "Spare a few redundant calls in SleepingAction around determining the \u2026", "Zsombor Erd\u0151dy-Nagy", "rzsombor", "05/02/16, 05:25:29 AM", "\u2026delay value\n- Remove redundant outer conditional.\n- Skip calling into System.currentTimeMillis(), which could potentially result in different values.", "NaN"], ["3904", "1.x: Fix Completable swallows OnErrorNotImplementedException", "(\u00b4\u2323`\u0283\u01aa)", "pt2121", "05/02/16, 07:08:42 AM", "Fixed https://github.com/ReactiveX/RxJava/issues/3860", "NaN"], ["3905", "1.x: fix singleOrDefault() backpressure if source is empty", "David Karnok", "akarnokd", "05/02/16, 10:50:48 PM", "Issue #3892 is a goldmine for missing backpressure problems. This PR fixes the case when `singleOrDefault` encounters an empty source and has to emit some default value. Fixed via setting the `SingleProducer` on the child on termination.", "NaN"], ["3906", "1.x: Release 1.1.4 CHANGES.md update", "David Karnok", "akarnokd", "05/04/16, 06:30:43 PM", "Release 1.1.4 CHANGES.md update.\n\n:+1: for the release.", "NaN"], ["3907", "1.x: DoOnUnsubscribe javadoc clarifications", "David Karnok", "akarnokd", "05/05/16, 07:31:31 PM", "See #3877", "NaN"], ["3909", "1.x: Single.retryWhen javadoc clarifications", "David Karnok", "akarnokd", "05/05/16, 07:31:16 PM", "See #3774", "NaN"], ["3912", "1.x: fix filter() default-requesting and thus going unbounded", "David Karnok", "akarnokd", "05/05/16, 07:29:46 PM", "Forgot that `Subscriber` defaults to requesting `Long.MAX_VALUE` unless suppressed and apparently there was no verification of filter's backpressure behavior; the two existing tests didn't really check for the delivery pattern.", "NaN"], ["3913", "Release 1.1.5 CHANGES.md update", "David Karnok", "akarnokd", "05/05/16, 08:04:52 PM", "Emergency release.", "NaN"], ["3918", "1.x: ReplaySubject now supports backpressure", "David Karnok", "akarnokd", "06/15/16, 09:53:14 PM", "In addition, the behavior of time-limited mode has been changed. Late subscribers will now skip stale data.\n\nRelated issue: #3917", "NaN"], ["3919", "1.x: Subscriber.NOT_SET Long -> long, saves an unboxing per instance", "David Karnok", "akarnokd", "05/10/16, 07:51:29 PM", "Somehow, Subscriber.NOT_SET was object `Long` instead of primitive `long`.", "NaN"], ["3922", "1.x: fix using() resource cleanup when factory throws or being non-eager", "David Karnok", "akarnokd", "05/10/16, 09:23:57 PM", "The operator `using` didn't call the resource cleanup code if the `observableFactory.call()` code crashed. In addition, a non-eager using didn't call the resource cleanup if one subscribed with `unsafeSubscribe` or the subscription to the generated `Observable` crashed.\n\nRelated: #3921 ", "NaN"], ["3924", "1.x: fix RxRingBuffer-pool depending on the computation scheduler", "David Karnok", "akarnokd", "05/10/16, 07:51:02 PM", "This PR fixed the `ObjectPool` dependency on the `Schedulers.computation()` which can be replaced via plugin hooks causing unexpected and long sleeps (i.e., when `computation()` is replaced by `immediate()`).\n\nSee #3923.\n\nI'd also consider removing the `RxRingBuffer` entirely.", "NaN"], ["3928", "Update RxJava Javadoc to  1.1.5", "Shixiong Zhu", "zsxwing", "05/11/16, 05:19:10 PM", "Closes #3925", "NaN"], ["3931", "1.x: add groupBy overload with evictingMapFactory", "Dave Moten", "davidmoten", "06/25/16, 09:46:50 AM", "I have a long running stream using `groupBy` that over time will accumulate 10s of millions of keys. If I can specify an evicting map to `groupBy` then I'll be able to keep it down to ~10,000 keys. \n\nThis PR supports this use case and could be used with Guava's `CacheBuilder` like this:\n\n``` java\nFunc1<Action1<K>, Map<K, Object>> mapFactory = \n    action -> CacheBuilder.newBuilder()\n              .maximumSize(1000)\n              .expireAfterAccess(12, TimeUnit.HOUR)\n              .removalListener(key -> action.call(key))\n              .<K, Object> build().asMap();\nobservable\n    .groupBy(keySelector, elementSelector, mapFactory)\n    ...\n```\n\nI'll enhance this PR with more unit tests if this looks a good direction.", "NaN"], ["3934", "1.x: TestSubscriber extra info on assertion failures", "David Karnok", "akarnokd", "05/23/16, 11:20:20 PM", "This PR adds extra information to assertion failure messages on `TestSubscriber` and `TestObserver`, indicating:\n- the listener didn't receive any `onCompleted` calls, which is an indication of hung or skipping operation,\n- there were errors received, indicating a failure in the event generation process.\n\nPreviously, if there was something wrong with the sequence, the order and type of assertions were mostly unhelpful: if `assertValues` was first, the lack of values failure could hide a revealing onError call. If the `assertNoErrors()` was first, the error is visible but no way of knowing how far the sequence got.\n\nNow, it is generally okay to use `assertValues` first, which along the difference, will print the lack of completion and the number of exceptions received, plus, the `AssertionError` will have its cause initialized to the actual or composited exception. The message format thus changes:\n\n```\noriginal assertion message with details (0 completions) (+1 error)\n...\ncaused by\n...\n```\n\nThis extra information saved me a lot of time in 2.x and Rsc development.\n\nNote that this change doesn't make the `assertXXX`s also assert for completion or error at all. If the values match, but there is an additional error instead of completion, one has to assert that separately, just like now.", "NaN"], ["3935", "Clean-up of the 2.x Design.md document", "Steve Gury", "stevegury", "06/01/16, 07:37:08 AM", "I went through all the pending comments that weren't addressed.", "NaN"], ["3936", "1.x: promote UnicastSubject to be a standard+experimental Subject", "David Karnok", "akarnokd", "06/01/16, 09:54:18 PM", "Plus, the unsubscribe indirection has been inlined, making `State` implement `Subscription` directly (instead of `Action0` + `Subscriptions.create`).", "NaN"], ["3941", "1.x: fix Single.flatMap not composing subscription through", "David Karnok", "akarnokd", "05/17/16, 07:57:36 PM", "See #3940.", "NaN"], ["3942", "1.x: add Completable.safeSubscribe option + RxJavaPlugins hook support", "David Karnok", "akarnokd", "06/01/16, 05:06:52 PM", "Add option to safely subscribe a `CompletableSubscriber` / regular `Subscriber` and handle `onXXX` failures.\n\nSee also: #3938\n\nNaming and whether or not the safe wrapping should be the default is open to discussion.", "NaN"], ["3943", "Update branches names in CONTRIBUTING:md", "Santiago Castro", "bryant1410", "05/18/16, 10:32:56 PM", "NaN", "NaN"], ["3944", "fix exception message from observer to subscriber", "Yunpeng Li", "loveyoupeng", "05/17/16, 10:06:02 PM", "NaN", "NaN"], ["3948", "Add Completable.andThen(Completable), deprecate endWith()", "Niklas Baudy", "vanniktech", "05/23/16, 11:37:46 PM", "See #3947 ", "NaN"], ["3949", "1.x: javac- and javadoc-related cleanup in components, part 1", "David Karnok", "akarnokd", "05/18/16, 08:16:13 PM", "My Eclipse warned me about several hundred javac and javadoc errors which could hide other significant warnings. This PR is the first part to fix those warnings. Note that `Observable` and `Single` itself is full of those as well (several hundred in each).", "NaN"], ["3951", "1.x: javac- and javadoc-related cleanup in components, part 2", "David Karnok", "akarnokd", "05/24/16, 08:40:35 PM", "Next round of cleanup, still about 100 cases remain in `Completable` and `Observable`, but those will most likely conflict with open PRs.", "NaN"], ["3958", "1.x: just() construction to call the onCreate execution hook", "David Karnok", "akarnokd", "05/23/16, 11:15:32 PM", "This PR adds the call to `RxJavaObservableExecutionHook.onCreate()` to the `just()` - `ScalarSynchronousObservable` construction.\n\nRelated: #2656.", "NaN"], ["3966", "1.x: add multi-other withLatestFrom operators", "David Karnok", "akarnokd", "06/16/16, 09:57:17 PM", "Add `withLatestFrom` operator version that can take 2 to N other sources and combine them with the main source.\n\nRelated: #3779.", "NaN"], ["3971", "1.x: request rebatch operator", "David Karnok", "akarnokd", "06/01/16, 09:53:27 PM", "This is a follow-up on #3964 but with a separate operator on `Observable`.", "NaN"], ["3974", "1.x: add terminal clarification to switchMap operators", "David Karnok", "akarnokd", "06/01/16, 03:52:37 AM", "See #3576 .", "NaN"], ["3977", "1.x: Use the correct Throwable to set the cause for CompositeException", "Shixiong Zhu", "zsxwing", "06/01/16, 11:17:38 PM", "The cause of #3679 is we use a wrong Throwable (its cause has been set) to set the cause and `initCause` will throw an exception. Hence, the cause chain is not created correctly. In this PR, it searches the root cause (which doesn't have a cause) and use it to call `initCause`.", "NaN"], ["3979", "1.x: remove remaining field updaters", "David Karnok", "akarnokd", "06/01/16, 07:08:25 PM", "This PR removes the remaining `AtomicXFieldUpdater`s from the library because reflection is somewhat problematic on Android.\n\nThis also deprecates the internal `BackpressureUtils.getAndAddRequest` to indicate `requested` field updater should not be used anymore.", "NaN"], ["3980", "2.x: Design.md +extension +fusion", "David Karnok", "akarnokd", "06/17/16, 08:29:01 AM", "Added sections from #3935.", "NaN"], ["3981", "1.x: document zip() eagerness", "David Karnok", "akarnokd", "06/02/16, 06:17:26 AM", "See #3960 and #3124.", "NaN"], ["3982", "1.x: benchmark just and Single", "David Karnok", "akarnokd", "06/01/16, 11:02:27 AM", "This PR adds a comparison benchmark for working with `Observable.just` and `Single.just`.\n\nResults: (i7 4790, Win 7 x64, Java 8u92)\n\n![image](https://cloud.githubusercontent.com/assets/1269832/15705865/476ebcd2-27f1-11e6-8468-4cd02962f31a.png)\n- `one`: custom Observable emitting a single item with backpressure\n- `scalar`: `Observable.just(1)`\n- `scalarHidden`: `just(1).asObservable()`\n- `single`: `Single.just(1)`\n- `singleHidden`: wrapping with `Single.create`\n- `plain`: just subscribe\n- `Concat`: use `concatMap` to map it to a scalar (operator not available in Single)\n- `Merge` : use `flatMap` to map it to a scalar/singe\n- `Switch` : use `switchMap` to map it to a scalar (operator not available in Single)\n\nMy guess is that single is slower because that `Observable.OnSubscribe` vs `Single.OnSubscribe` wrapping game.", "NaN"], ["3986", "Add Schedulers.reset() for better testing", "Zac Sweers", "ZacSweers", "06/06/16, 09:41:21 PM", "Resolves #3985\n\nThis adds a `reset()` method to `Schedulers`, with the main benefit being improved testing support. This does slightly tweak the internal API of `Schedulers` to use a `getInstance()` approach to allow lazy init. This way we don't have to replace the singleton instance during `reset()` and allow it to lazily re-evaluate upon next usage. Otherwise, if you change your scheduler hook, you'd always have to make sure you set it before you call `Schedulers.reset()`.\n\nWill run perf tests overnight in case, I'm not sure how much of a tradeoff moving to an internal `getInstance()` approach costs, if anything.\n\nCC @zsxwing", "NaN"], ["3987", "Add more time to certain tests that failed under heavy CI load", "David Karnok", "akarnokd", "06/03/16, 10:49:11 AM", "Sometimes, the heavy Travis CI load (or throttling) makes a few tests fail with timeout. This increases the timeout for some of them to reduce the likelihood.", "NaN"], ["3996", "1.x: fix reset() shutting down everything other than the schedulers", "David Karnok", "akarnokd", "06/07/16, 11:06:52 PM", "The reset shut down all the main schedulers and the helper pools, causing the failure in #3993 .\n\n@hzsweers, you were right with the need for the instance-shutdown method.", "NaN"], ["4005", "1.x: fix Spsc queues reporting not empty but then poll() returns null", "David Karnok", "akarnokd", "06/15/16, 06:21:27 PM", "In the spsc queues, the indexes were written before the actual elements and thus a concurrent `isEmpty` check would report a non-empty queue but a `poll` would still return `null`. The fix swaps the two writes.\n\nNote that this an inconsistency in the original JCTools code and not the lack of keeping up with it.", "NaN"], ["4007", "1.x: new hook management proposal", "David Karnok", "akarnokd", "06/23/16, 07:05:25 AM", "This PR adds a new, in-between, hook manager class, `RxJavaHooks` that allows runtime hooking of `Observable`, `Single`, `Completable` and `Schedulers` components and is aimed to be more versatile than the `RxJavaPlugins`.\n\nSince `RxJavaPlugins` is public API, it can't be just removed, therefore, `RxJavaHooks` by default delegates to it but that delegation can be completely disabled via `clear()`.\n#### Usage\n\nCall the `setOn` methods with an appropriate function to manipulate the object being hooked:\n\n``` java\nRxJavaHooks.setOnComputationScheduler(s -> Schedulers.immediate());\n\nRxJavaHooks.setObservableCreate(o -> { System.out.println(\"Creating: \" + o); return o; });\n```\n\nYou can also get the current hooks via the `getOn` methods, allowing chaining multiple hooks if necessary. Changing and retrieving the hooks are thread safe, although it is recommended you change them in quiet times.\n\nOperator writers should usually not call the `onXXX` methods on `RxJavaHooks` except `RxJavaHooks.onError()`; It is useful when they have to signal a `Throwable` that can't be delivered to a `Subscriber`.\n\nCalling `reset()` will restore the original delegation hooks.\n\nThis PR also features a way of tracking the assembly locations, that is where `Observable.create()` was invoked internally or externally, via `enableAssemblyTracking`. It changes the creation hooks of all 3 base types by adding an `OnSubscribeOnAssemblyX` wrapper. This operator will replace the Throwable flowing through `onError` and wraps it via the new `AssemblyStackTraceException`. \n\nBoth the wrapper and the exception contain a string representation of the captured stacktrace, this helps \"printing\" out that information in a debugging session by simply viewing the field contents.\n\nThis tracking can be enabled at any time and affects sequences created afterwards. To stop the tracking, use `resetAssemblyTracking` to restore the default delegate callbacks to `RxJavaPlugins` or `clearAssemblyTracking` to restore the empty hooks (only affecting the `onCreate` hooks).\n\nFor frameworks, the `RxJavaHooks` can be locked down, preventing changing the hooks.\n\nIf you are using `RxJavaPlugins` existing features, you don't have to do anything; tests will work as before.\n#### Performance impact\n\nA default `RxJavaHooks` incurs a 2-4 level indirection in method calls. `onNext` calls are not affected.\n\nA clear `RxJavaHooks` incurs a volatile read (very cheap) followed by a branch (predictable). `onNext` calls are not affected.\n\nA tracking-enabled RxJavaHooks incurs an estimated 1000-3000 cycles overhead for each source creation and operator application. The `AssemblyStackTraceException` itself doesn't fill in its own stacktrace but takes only the captured stacktrace string and has mostly the cost of an object allocation. Due to the in-between nature of tracking, `onXXX` calls get through another indirection at each operator. For example, `range(1, 5).map(v -> v).filter(v -> true).subscribe()` will have 3 extra layers (one for each `.`). I believe these are acceptable overheads because the tracking feature is for tracking down crashes and not performance problems.\n#### Discussion\n\nNot all hook methods have been replicated completely on `RxJavaHooks`. For one, I wanted a minimal working prototype that passes existing tests. Second, those that are left out are not even tested (`onSubscribeError`, `onLift`). If the **concept** of this PR is accepted, those can be added along with their unit tests. Also further Javadoc will be added in the same case.\n\nNames and structure are not set in stone.", "NaN"], ["4008", "1.x: Release 1.1.6 CHANGES.md", "David Karnok", "akarnokd", "06/15/16, 11:43:37 PM", "Release 1.1.6 CHANGES.md\n\n:+1: for the full release.", "NaN"], ["4011", "1.x: Deprecate TestObserver, enhance TestSubscriber a bit", "David Karnok", "akarnokd", "06/22/16, 09:09:10 AM", "This PR deprecates `TestObserver` in favor of the richer `TestSubscriber`.\n\nIn addition, `TestSubscriber` gets 3 new methods and 1 deprecation:\n- `getCompletions()` to return the onCompleted count as int instead of Notifications\n- `getValueCount()` returns the committed number of onNext events for thread-safe checking of values up to this count\n- `awaitValueCount` repeatedly sleeps up to a timeout and waits till the committed onNext count reaches/passes the expected amount.", "NaN"], ["4014", "Add specificity to documentation for AsyncSubject", "David Andrews", "DavidDTA", "06/17/16, 09:02:28 AM", "This documentation answers questions I had while reading it.", "NaN"], ["4018", "1.x: Update Gradle to 2.14", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "06/17/16, 03:39:17 PM", "Release notes: https://docs.gradle.org/2.14/release-notes", "NaN"], ["4019", "1.x: make the latest CompositeSubscription test more robust.", "David Karnok", "akarnokd", "06/18/16, 06:26:36 PM", "Make sure there is enough time for the test and the latch is always counted down.\n\n/cc @artem-zinnatullin ", "NaN"], ["4020", "1.x: add AsyncCompletableSubscriber that exposes unsubscribe()", "David Karnok", "akarnokd", "06/21/16, 09:22:42 PM", "This PR adds a default, abstract base class with unsubscription support for `Completable`'s `CompletableSubscriber`.\n\nPros: direct, slim class\n\nCons: people probably used `subscriber(Action0)` or `subscribe(Subscriber)` so far.\n\nRelated: #4017 ", "NaN"], ["4021", "Improve unit test for `publish()`", "David Andrews", "DavidDTA", "06/17/16, 07:12:41 PM", "NaN", "NaN"], ["4023", "1.x: fix timed replay() replaying old data for late subscribers", "David Karnok", "akarnokd", "06/22/16, 07:44:08 AM", "In the current master, `replay` only trucates its buffer if an event is received. This means if a subscriber subscribes between two events, the operator may replay old events. This PR skips those events. The operator is now consistent with the recently updated `ReplaySubject`.\n\nThe old behavior was somewhat expected by a few unit tests that have been updated.\n\nRelated: #3917, #3918. ", "NaN"], ["4024", "1.x: update doOnEach(Observer) javadoc", "David Karnok", "akarnokd", "06/17/16, 08:47:50 PM", "Fixes the documentation problem reported in #3721.", "NaN"], ["4026", "1.x: expand and explain cache() in more detail", "David Karnok", "akarnokd", "06/18/16, 03:53:36 PM", "This PR rephrases the `cache` documentation a bit and adds workaround for stopping and forgetting the cached values.\n\nRelated: #3007.", "NaN"], ["4027", "1.x: fix Completable.onErrorComplete(Func1) not relaying function crash", "David Karnok", "akarnokd", "06/18/16, 03:21:06 PM", "The catch around the predicate didn't actually signal the CompositeException.\n\nDiscovered in #4025", "NaN"], ["4030", "2.x: first step switching to the reduced-allocation architecture", "David Karnok", "akarnokd", "06/19/16, 08:14:22 AM", "This is the first step towards the new architecture where operator implementations are themselves of the base type instead of a 2-3 layer indirection as in 1.x.\n\nThis PR removes the instance field `onSubscribe` from the base reactive classes and introduces `subscribeActual` to be overridden with the custom operator logic now on. Existing operators are still working through the classical OnSubscribe/Lift indirection and will be updated in subsequent PRs.\n\nNaming and existence of `subscribeActual` is up for (post-merge) discussion. To recap, the method is needed so that the default `subscribe` method can be made final and ensure plugin hooks can be called (once available). The method is protected and only affects operator implementors that chose to extend the base reactive classes directly. \n\nThe alternative is to leave `subscribe` abstract and add a hook to every operator method (for example, see [this](https://github.com/reactor/reactive-streams-commons/blob/master/src/main/java/rsc/publisher/Px.java#L50) and [this](https://github.com/reactor/reactive-streams-commons/blob/master/src/main/java/rsc/publisher/Px.java#L162).", "NaN"], ["4031", "2.x: Update groupID and readme.md", "David Karnok", "akarnokd", "06/19/16, 09:08:02 AM", "This PR updates the readme and changes the group ID.\n\nI'm going to merge this and hope the new group id shows up at https://oss.jfrog.org/artifactory/libs-snapshot/io/reactivex/ (may take several attempts, depending on how cooperative the nebula plugin is.)", "NaN"], ["4034", "1.x: distinctUntilChanged with direct value comparator - alternative", "David Karnok", "akarnokd", "06/20/16, 05:43:26 PM", "Alternative implementation to #4001.", "NaN"], ["4036", "1.x: Added zip function with Observable array.", "Alberto Ballano", "aballano", "06/20/16, 05:54:41 PM", "As discussed in #4035 with @akarnokd ", "NaN"], ["4038", "Fix typos in NullFunction javadoc", "Brandon Gogetap", "bgogetap", "06/20/16, 05:17:28 AM", "NaN", "NaN"], ["4039", "1.x: add missing javadoc elements, fix some descriptions", "David Karnok", "akarnokd", "06/20/16, 08:57:34 PM", "- Fixes to Javadoc warnings\n- Type arguments\n- Missing descriptions", "NaN"], ["4041", "2.x: Update Observable's ops to work with ObservableConsumable", "David Karnok", "akarnokd", "06/20/16, 11:02:00 AM", "This PR updates the `Observable` method signatures to accept `ObservableConsumable`, similar to how `Flowable` methods accept `Publisher`.\n\nThe architecture switch may take a couple of more PRs. I'll try to limit the change amount in each.", "NaN"], ["4042", "2.x: Use XConsumable in Completable and Single", "David Karnok", "akarnokd", "06/20/16, 01:07:55 PM", "Update to `Completable` and `Single` to use `CompletableConsumable` and `SingleConsumable` as input.", "NaN"], ["4043", "2.x: factor out Completable ops, unify disposed markers", "David Karnok", "akarnokd", "06/20/16, 06:01:43 PM", "- Moved the operators of Completable into their respective classes. Updated them to extend `Completable` directly.\n- Fixed a large set of inconsistend `Disposable` management among the `Observable` operators.", "NaN"], ["4045", "2.x: Single operators factored out, headers added", "David Karnok", "akarnokd", "06/20/16, 08:29:12 PM", "`Single` operators factored out and made them extend `Single` directly. Added missing headers.", "NaN"], ["4046", "1.x: Publish code coverage results to codecov.io", "Shixiong Zhu", "zsxwing", "06/20/16, 09:25:23 PM", "This is an example built in my repo: https://codecov.io/gh/zsxwing/RxJava/", "NaN"], ["4048", "2.x: Publish code coverage results to codecov.io", "Shixiong Zhu", "zsxwing", "06/20/16, 10:03:42 PM", "Same as #4046 except the badge link.", "NaN"], ["4049", "2.x: make Flowable operators extend Flowable directly to reduce allocation", "David Karnok", "akarnokd", "06/21/16, 11:55:06 AM", "Relatively straightforward, although manual an tedious, refactoring of the Flowable operators. The number of files is this large because for consistency, the tests have been renamed as well.", "NaN"], ["4051", "1.x: fix ReplaySubject anomaly around caughtUp by removing that optimization", "David Karnok", "akarnokd", "06/22/16, 07:43:40 AM", "Adding the backpressure support to `ReplaySubject` exposed a race condition around the `caughtUp` optimization.\n\nThe problem occurs when the source thread has caught up after `drain()` returned true but at the same time, a concurrent `drain()` starts running (due to a subscribe() process finishing or requesting on top of the previous `Long.MAX_VALUE`). This concurrent drain may think the replay hasn't started yet (by finding `rp.node` null) or seeing that the buffer has more elements (that may get double emitted).\n\nThe current solution is to remove this optimization until we come up with a correct optimization.\n\nRelated: #4028.", "NaN"], ["4053", "2.x: Convert SchedulerSupport annotation to accept a string value.", "Jake Wharton", "JakeWharton", "06/21/16, 10:16:17 PM", "Closes #4052.", "NaN"], ["4055", "2.x: Update conversion method name to reflect new base type names.", "Jake Wharton", "JakeWharton", "06/22/16, 06:54:54 AM", "NaN", "NaN"], ["4058", "Use DisposableHelper and SubscriptionHelper to reduce duplication.", "Jake Wharton", "JakeWharton", "06/22/16, 07:19:38 AM", "A lot of operators contained their own marker instance and class definition of Disposable or Subscription. This changes almost all of them to use the shared instance provided by their respective helper class. Some duplication still exists but can be cleaned up in a subsequent change.", "NaN"], ["4059", "2.x: cleanup a few additional SubscriptionHelper locations", "David Karnok", "akarnokd", "06/22/16, 08:02:10 AM", "Follow up to #4058 .", "NaN"], ["4060", "1.x: coverage improvements, small adjustments", "David Karnok", "akarnokd", "06/22/16, 09:05:35 AM", "- update to JUnit 4.12\n- remove deprecated use of `junit.framework.Assert`\n- update to Mockito 1.10.19\n- Notification.accept() now uses switch (note that Jacoco can't properly cover enum switches as it only sees the default and impossible path is not taken).\n- in `Scheduler.schedulePeriodically`, move the unsubscribe check after the action to prevent unnecessary schedule of the next iteration.\n- remove the inner counted loop from `SerializedObserver` as being unnecessary\n- increate timeout in `OperatorSwitchTest`\n- add `CompletableSubscriberTest`\n- extend `Scheduler`, `SerializedObserver`, ", "NaN"], ["4062", "1.x: add package-info.java to the public packages", "David Karnok", "akarnokd", "06/22/16, 01:37:34 PM", "This PR adds the missing `package-info.java` files to the public packages.\n\n(http://reactivex.io/RxJava/javadoc/ looks awkward with all those empty descriptions).", "NaN"], ["4063", "1.x: scan & reduce give javadoc about unsharing the initialValue", "David Karnok", "akarnokd", "06/22/16, 01:29:26 PM", "Replacement for #3959.", "NaN"], ["4065", "1.x: ignore .pmd file in root directory", "David Karnok", "akarnokd", "06/22/16, 12:20:06 PM", "The PMD tool in local IDE tends to create this custom file. Add a rule to ignore it.", "NaN"], ["4066", "1.x: Ignore local.properties file", "Niklas Baudy", "vanniktech", "06/22/16, 12:34:35 PM", "NaN", "NaN"], ["4068", "1.x: Add PMD code checking tool to the build process", "David Karnok", "akarnokd", "06/22/16, 08:42:51 PM", "This PR adds a PMD plugin to the build process to check a set of coding rules.\n\nAt this point, I don't think rule violations should fail the build.\n\nUnfortunately, I don't know about a service, like codecov-io, that could post the check results as comments under a PR, therefore, the current build just prints the first ~100 violations into the build log:\n\nhttps://travis-ci.org/ReactiveX/RxJava/builds/139539158#L240\n\nhttps://travis-ci.org/ReactiveX/RxJava/builds/139539158#L5508", "NaN"], ["4069", "Remove second type parameter from Subject and FlowProcessor.", "Jake Wharton", "JakeWharton", "06/22/16, 03:45:08 PM", "Closes #4056.", "NaN"], ["4070", "2.x: Merge SerialDisposable and MultipleAssignmentDisposable.", "Jake Wharton", "JakeWharton", "06/22/16, 04:55:11 PM", "Closes #4057 although doesn't address the name of the class.", "NaN"], ["4071", "2.x: Inline last uses of caching DisposableHelper's constant.", "Jake Wharton", "JakeWharton", "06/22/16, 04:18:06 PM", "NaN", "NaN"], ["4072", "2.x: Dereference atomic ref before identity comparison.", "Jake Wharton", "JakeWharton", "06/22/16, 04:19:54 PM", "This returns false 100% of the time otherwise.", "NaN"], ["4074", "2.x: Use more DisposableHelper and SubscriptionHelper in operators.", "Jake Wharton", "JakeWharton", "06/22/16, 06:08:02 PM", "NaN", "NaN"], ["4076", "2.x: Some small tweaks to Disposables.", "Jake Wharton", "JakeWharton", "06/22/16, 07:46:21 PM", "- Use BooleanDisposable for Runnables.\n- Change BooleanDisposable to use null for disposed instead of keeping a marker instance.\n- Eliminate static factory for CompositeDisposable since its constructors are already public.", "NaN"], ["4077", "Annotation links in README.md yield 404 error", "max", "maxthomas", "06/22/16, 07:52:30 PM", "The links for `@Beta` and `@Experimental` in the `README.md` point to the master branch. These URLs yield 404 not found when clicked. ", "NaN"], ["4078", "2.x: Re-use the single empty Disposable instance everywhere.", "Jake Wharton", "JakeWharton", "06/22/16, 08:28:06 PM", "NaN", "NaN"], ["4080", "2.x: Replace custom empty Disposables with global instance.", "Jake Wharton", "JakeWharton", "06/22/16, 09:10:24 PM", "I keep thinking I found all of these and then more crop up...", "NaN"], ["4081", "2.x: Do not leak the DISPOSED marker instance into public API.", "Jake Wharton", "JakeWharton", "06/23/16, 06:51:26 AM", "If this were to be used by public code it could have have Very Bad\u2122 effects by causing operators to think that they already disposed resources when they actually had not. Since `Disposable` is stateless it's safe for `disposed()` and `empty()` to be synonymous, although that might change in the future so both methods are retained.", "NaN"], ["4083", "2.x: Merge CancelledSubscriber into EmptySubscriber.", "Jake Wharton", "JakeWharton", "06/23/16, 07:18:08 AM", "NaN", "NaN"], ["4084", "2.x: More uses of SubscriptionHelper.", "Jake Wharton", "JakeWharton", "06/23/16, 07:00:52 AM", "NaN", "NaN"], ["4085", "2.x: Merge NbpCancelledSubscriber into NbpEmptySubscriber.", "Jake Wharton", "JakeWharton", "06/23/16, 07:07:19 AM", "The NBP version of #4083.", "NaN"], ["4086", "1.x: Remove unnecessary dependency in build.gradle", "Shixiong Zhu", "zsxwing", "06/23/16, 07:14:22 AM", "NaN", "NaN"], ["4087", "2.x: Normalize request validation using SubscriptionHelper.", "Jake Wharton", "JakeWharton", "06/23/16, 07:04:22 AM", "NaN", "NaN"], ["4088", "1.x: fix some flaky tests, add more timeout to others", "David Karnok", "akarnokd", "06/23/16, 07:49:20 AM", "Some tests are sensitive to Travis hiccups. This adds more timeout to some and reduces heavyness on others.", "NaN"], ["4091", "1.x: apply fixes based on PMD suggestions", "David Karnok", "akarnokd", "06/25/16, 05:42:36 AM", "Some notable changes:\n- move fields to the beginning of a class\n- remove unnecessary modifiers and initializers\n- avoid creating objects to early\n- update most drain algorithm to use the (more modern) `while (e != r)` pattern\n- PMD has a few incorrect checks: complaining about a final local that gets used in an inner class\n- adding braces to ifs\n- documenting deliberately empty methods\n- fix internal field and method namings\n- delegate to `Exceptions.propagate`", "NaN"], ["4092", "1.x: add AnimalSniffer to the build process, fix and suppress violations", "David Karnok", "akarnokd", "06/25/16, 06:05:25 AM", "This PR adds the AnimalSniffer plugin to check for Java 6 API violations.\n\nRelated issue: #4067.", "NaN"], ["4093", "1.x: exclude some text files from license checks", "David Karnok", "akarnokd", "06/25/16, 06:07:21 AM", "By default, the `license` plugin warns about MDs and text files. In addition, this excluded the JCTools queues and the beta/experimental annotations because they kept their original license header.", "NaN"], ["4094", "2.x: Remove EmptySubscriber, start to remove NbpEmptySubscriber.", "Jake Wharton", "JakeWharton", "06/23/16, 05:43:15 PM", "Follow up from comments in #4083 and #4085.", "NaN"], ["4095", "2.x: Invert request validation return type for better semantics.", "Jake Wharton", "JakeWharton", "06/23/16, 07:50:26 PM", "NaN", "NaN"], ["4096", "2.x: convert Observable OnSubscribe to direct implementation", "David Karnok", "akarnokd", "06/23/16, 07:55:31 PM", "First part of converting the OnSubscribe operators of `Observable` into direct implementors of `Observable` - saves allocation.\n\nDon't worry about the unnecessary parenthesis, will be removed in a future PR.", "NaN"], ["4097", "1.x: update map() and filter() to implement OnSubscribe directly", "David Karnok", "akarnokd", "06/25/16, 06:07:44 AM", "This change reduces the indirection and allocation count when using `map` or `filter`.", "NaN"], ["4099", "1.x: Add Findbugs", "Niklas Baudy", "vanniktech", "06/25/16, 10:19:04 AM", "Continuing from #3164 .\n\nParsing the generated Findbugs output file it not as trivial as with PMD since it does contain some meta information. \n\nLet me know whether this is wanted or not and if so how it can be pursued. \n\nBy default all rules from Findbugs are enabled and one can opt out using `excludeFilter = file('findbugs-filter.xml)` inside the `findbugs` block, which will then contain something alone the lines of [this](http://findbugs.sourceforge.net/manual/filter.html).", "NaN"], ["4100", "2.x: Add PMD", "Niklas Baudy", "vanniktech", "06/23/16, 10:04:36 PM", "Basically taken from the 1.x branch", "NaN"], ["4101", "2.x: Switch a SerialResource use to SerialDisposable.", "Jake Wharton", "JakeWharton", "06/24/16, 06:58:09 AM", "NaN", "NaN"], ["4102", "2.x: Expose isDisposed method on Disposable.", "Jake Wharton", "JakeWharton", "06/24/16, 04:02:27 PM", "This is a fairly \"dumb\" addition. There's lots of room for follow-up improvement in the utilization of base helper classes and even removing some now-duplicated state management.\n\nCloses #4075.", "NaN"], ["4103", "2.x: prepare the operator-fusion enhancement", "David Karnok", "akarnokd", "06/24/16, 10:38:11 AM", "This PR adds 3 operator-fusion related interfaces: \n- `QueueSubscription` will support fusion for `Flowable` - avoid creating queues, avoid cost of multiple enqueue-dequeue, reduce `request()` overhead\n- `QueueDisposable` will support fusion for `Observable` - avoid creating queues, avoid cost of multiple enqueue-dequeue\n- `ScalarCallable` - indicate a scalar constant source\n\nIn addition `ConditionalSubscriber` is marked and will be moved to the new package and its method renamed to `tryOnNext`.\n\nUnlike Reactor-Core (and Rsc), there is no `Fuseable` marker interface. The ability of fusing is indicated by calling `onSubscribe` with the above `QueueX` enabled instances and then called back via `requestFusion`. This allows having less duplicated code compared to Reactor/Rsc - at the cost of usually one extra field to store the `QueueX` value that may be null.", "NaN"], ["4105", "2.x: Remove some superfluous reads before writes.", "Jake Wharton", "JakeWharton", "06/24/16, 05:14:31 PM", "NaN", "NaN"], ["4106", "2.x: Remove explicit cancel flags where it can be inferred.", "Jake Wharton", "JakeWharton", "06/24/16, 06:51:21 PM", "I suspect there's quite a few of these all over. These are just the ones I noted while doing other changes.", "NaN"], ["4107", "2.x: make sure the helper returns true if the pre-swap value was null", "David Karnok", "akarnokd", "06/24/16, 08:31:21 PM", "The original behavior was somewhat inconsistent: if the target was null before the cancel/dispose, the method didn't return true indicating a successful swap for the current thread. Now that many `cancelled` flag has been removed, it has to consistently trigger the remaining cleanup actions.", "NaN"], ["4108", "2.x: Invert subscription validation return type for better semantics.", "Jake Wharton", "JakeWharton", "06/24/16, 08:07:10 PM", "NaN", "NaN"], ["4110", "2.x: Remove explicit cancel flags where it can be inferred.", "Jake Wharton", "JakeWharton", "06/25/16, 06:48:13 AM", "NaN", "NaN"], ["4111", "2.x: Simplify boolean disposables which run code on dispose.", "Jake Wharton", "JakeWharton", "06/25/16, 06:03:00 AM", "NaN", "NaN"], ["4112", "2.x: Switch the last SerialResource to manual resource management.", "Jake Wharton", "JakeWharton", "06/25/16, 05:28:20 AM", "NaN", "NaN"], ["4113", "2.x: Parallelize unit test execution for speed!", "Jake Wharton", "JakeWharton", "06/25/16, 03:35:47 PM", "This gives me a 57% reduction in execution time.", "NaN"], ["4114", "2.x: Case IO acronym like a word.", "Jake Wharton", "JakeWharton", "06/25/16, 05:31:57 AM", "This is already being done in the library, and is fairly [standard practice](https://google.github.io/styleguide/javaguide.html#s5.3-camel-case).", "NaN"], ["4116", "2.x: Add Findbugs", "Niklas Baudy", "vanniktech", "06/25/16, 11:34:40 AM", "Taken from the 1.x branch", "NaN"], ["4117", "1.x: increase coverage of producers", "David Karnok", "akarnokd", "06/25/16, 12:02:31 PM", "Increase coverage of `XProudcer`s.", "NaN"], ["4118", "1.x: provide an explanation why certain tests are ignored", "Dmitriy Zaitsev", "DmitriyZaitsev", "06/25/16, 01:13:35 PM", "During code reading I've found some tests that are ignored but don't have a record why they are being ignored. Some of them have meaningful explanations present as line comments, so I decided to make them the parameters of `@Ignore` annotation, so it will be correct.", "NaN"], ["4119", "1.x: increase coverage of internal utils, remove unused/unnecessary items", "David Karnok", "akarnokd", "06/25/16, 01:55:09 PM", "Increase coverage of internal utils, remove unused and unnecessary items.", "NaN"], ["4120", "2.x: provide an explanation why certain tests are ignored", "Dmitriy Zaitsev", "DmitriyZaitsev", "06/25/16, 01:54:57 PM", "The same as #4118, but for 2.x", "NaN"], ["4122", "Refactor ConditionalSubscriber, add base fuseable Subscribers", "David Karnok", "akarnokd", "06/25/16, 05:21:41 PM", "This PR refactors `ConditionalSubscriber` and renames its method to `tryOnNext`. In addition, two new abstract subscriber types were added: `BasicFuseableSubscriber` and `BasicFuseableConditionalSubscriber` to help writing operators that support fusion (queue and/or conditional).", "NaN"], ["4124", "Switch some Observable ops to direct, map fuseable", "David Karnok", "akarnokd", "06/25/16, 06:51:57 PM", "- Switch a few `Observable` operators to direct implementations (reduces allocation)\n- Update `map` to support operator fusion; there are no sources or consumer yet though.\n- Adjust `BasicFuseableX` to have different default conveniences\n- Modify `CompositeResource` to indicate success of the mutator methods\n- increase timeout of `FlowableOnBackpressureDropTest.testFixBackpressureWithBuffer`", "NaN"], ["4125", "1.x: Test all private Constructors", "Niklas Baudy", "vanniktech", "06/27/16, 05:13:13 AM", "NaN", "NaN"], ["4126", "Remove XResource classes", "David Karnok", "akarnokd", "06/25/16, 09:10:44 PM", "This PR removes the `XResource` types and replaces them with `XDisposable` or `XSubscription` where necessary.", "NaN"], ["4127", "2.x: Correct method name for Flowable-->Observable.", "Jake Wharton", "JakeWharton", "06/26/16, 06:20:34 AM", "NaN", "NaN"], ["4128", "2.x: Reduce the visibility of internal methods.", "Jake Wharton", "JakeWharton", "06/26/16, 06:21:40 AM", "NaN", "NaN"], ["4129", "2.x: cleanup of PMD suggestions", "David Karnok", "akarnokd", "06/26/16, 09:11:02 AM", "This PR adjusts the PMD rules and fixes about 300 suggestions.", "NaN"], ["4130", "2.x: run Findbugs on main only", "David Karnok", "akarnokd", "06/26/16, 09:45:01 AM", "Don't run findbugs for the perf and test packages.", "NaN"], ["4131", "1.x: run Findbugs on main only", "Niklas Baudy", "vanniktech", "06/26/16, 10:19:06 AM", "NaN", "NaN"], ["4133", "Refactor private constructor checker into a utility class", "David Karnok", "akarnokd", "06/27/16, 08:58:54 PM", "Move into `TestUtil.checkUtilityClass()`.", "NaN"], ["4134", "2.x: cleanup and test renames", "David Karnok", "akarnokd", "06/27/16, 06:13:44 AM", "This PR adds the missing `@Override` annotations and renames the `Observable` unit tests to conform a single name pattern.", "NaN"], ["4135", "2.x update branch and year in contributing and readme md", "David Karnok", "akarnokd", "06/28/16, 01:55:09 AM", "Target 2.x and (C) 2016.", "NaN"], ["4136", "2.x: enable fuseable sources, adjust operators", "David Karnok", "akarnokd", "06/27/16, 12:54:37 PM", "- adds an operator `hide` to allow hiding and breaking optimizations\n- update `filter` to support fusions: queue and conditional\n- `range` now supports fusion: sync-queue and conditional\n- `fromArray` now supports fusion: sync-queue and conditional\n- `fromIterable` now supports fusion: sync-queue and conditional\n- enhanced `TestSubscriber` methods to return this - allows chaining the assertions\n- extended `TestSubscriber` to act as a consumer for queue-fusion\n- introduced `FlowableSource` as an intermediate type for operators: allows discovering the upstream in a standard way, allows the IDE to generate a constructor with a source value.\n- added `BasicQueueSubscription` that locks down unused `Queue` methods plus is a container for an atomic long value useful for request/wip tracking.", "NaN"], ["4139", "2.x: fix flaky tests", "David Karnok", "akarnokd", "06/27/16, 03:30:40 PM", "This PR should fix some test timing out otherwise sensitive to thread hiccups.\n#4138\n#4109\n#4054", "NaN"], ["4140", "1.x: Change Completable.subscribe(onError, onComplete) to (onComplete, onError)", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "06/28/16, 01:55:19 AM", "Closes #3851, closes #4137.", "NaN"], ["4141", "2.x: upgrade to Gradle 2.14", "David Karnok", "akarnokd", "06/28/16, 09:41:55 AM", "Upgrade to 2.14.", "NaN"], ["4142", "1.x: add RxJavaHooks tests, fix small bugs", "David Karnok", "akarnokd", "06/29/16, 12:47:28 PM", "This PR adds unit tests for the new `RxJavaHooks` facility and fixes\n- Small mistakes in calling the right hook.\n- Dealing with constant `Completable` sources such as `complete()` and `never()`: they executed the hook on class initialization so they couldn't be properly overridden later via an `onCreate` hook. (This could affect the other constants and will be addressed separately.)", "NaN"], ["4145", "Observable direct rest", "David Karnok", "akarnokd", "06/29/16, 04:30:27 PM", "This concludes the architecture switch for 2.x.", "NaN"], ["4146", "Fix the initialization of Completable.complete()", "David Karnok", "akarnokd", "06/29/16, 01:49:09 PM", "I forgot to invert the noHook -> useHook change.", "NaN"], ["4151", "2.x: enable scalar and async fuseable sources and intermediates", "David Karnok", "akarnokd", "07/01/16, 09:54:06 AM", "This PR enables operator fusion for scalar and knowingly single-element sources.\n\nThere are no fusion-consumers yet.", "NaN"], ["4154", "Ability to create custom schedulers with behavior based on composing operators.", "George Campbell", "abersnaze", "07/09/16, 05:22:16 PM", "based on #4115\n\nAllows the use of operators for controlling the timing around when actions scheduled on workers are actually done. This makes it possible to layer additional behavior on an existing `Scheduler`. The main parameter is a function that flattens an `Observable<Completable>` into just one `Completable`. There must be a chain of operators connecting the returned value to the source Observable otherwise any work scheduled on the Scheduler will not be executed.\n\nWhen `scheduler.createWorker()` is invoked a `Completable` is onNext'd to the combinator to be flattened. If the `Completable` is not immediately subscribed to an calls to `worker.schedule(...)` are buffered. Once the `Completable` is subscribed to actions are then scheduled on the actual Scheduler. When the `Worker` is unsubscribed the `Completable` emits an onComplete and triggers any behavior in the flattening operator. The `Observable<Completable>` and all `Completable`s give to the flattening function never onError.\n\nSlowing down the rate to no more than than 1 a second.\n\n``` java\n Scheduler slowSched = new ScheduleWhen(workers -> {\n    // use concatenate to make each worker happen one at a time.\n    return Completable.concat(workers.map(worker -> {\n        // delay the starting of the next worker by 1 second.\n        return worker.delay(1, TimeUnit.SECONDS);\n    }));\n }, Schedulers.computation());\n```\n\nLimit the amount concurrency two at a time without creating a new fix size thread pool:\n\n``` java\n Scheduler limitSched = new ScheduleWhen(workers -> {\n    // use merge max concurrent to two at a time\n    return Completable.merge(workers, 2);\n }, Schedulers.computation());\n```", "NaN"], ["4157", "2.x: Enable fusion-consumers", "David Karnok", "akarnokd", "07/02/16, 04:23:07 PM", "This PR enables fusion-consumers such as `observeOn`, `flatMap`, `zip`, `concatMap`; makes `UnicastProcessor` async-fuseable (used by `window`); fixes a few hidden issues with operators and has convenience renames of `SubscriptionHelper.validateX`. In addition, it features the new `FlowableFlattenIterable` used by `flatMapIterable` and `concatMapIterable`.", "NaN"], ["4160", "2.x: enable op-fusion on GroupBy, doOnX, fix mistakes in map and filter", "David Karnok", "akarnokd", "07/05/16, 06:50:32 AM", "This short PR enables operator fusion on `groupBy` and on the `doOnNext`, `doOnError`, `doOnComplete` and `doOnEach` operators.\n\nIn addition, it fixes small mistakes in `map` and `filter` and adds a method to `TestSubscriber` to print better fusion-assertion failure message.", "NaN"], ["4165", "2.x: fix wrong reference check in FlattenIterable", "David Karnok", "akarnokd", "07/05/16, 08:52:50 AM", "This was due to bad rewrite of field updater to atomic reference.", "NaN"], ["4166", "2.x: measure overhead of toBlocking() first and last", "David Karnok", "akarnokd", "07/05/16, 11:06:08 AM", "This updates the perf classes a bit and adds a blocking benchmark.\n\n![image](https://cloud.githubusercontent.com/assets/1269832/16580974/5ff08e54-42a7-11e6-889e-cfbb5c0bdecb.png)", "NaN"], ["4167", "2.x: reduce overhead of blocking first/last/single", "David Karnok", "akarnokd", "07/06/16, 08:27:02 AM", "Optimize the reception, less allocation, less overhead in general.\n\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u92)\n\n![image](https://cloud.githubusercontent.com/assets/1269832/16583761/065268fc-42b8-11e6-86a1-4ac91da80c97.png)", "NaN"], ["4172", "1.x: add missing backpressure descriptions and update old ones", "David Karnok", "akarnokd", "07/07/16, 08:09:38 PM", "This PR adds or updates places where the `Backpressure:` description was missing or outdated.\n\nUnfortunately, GitHub has a hard limit on diff size per file so reviewers have to use their own local diff.", "NaN"], ["4173", "1.x: allow customizing GenericScheduledExecutorService via RxJavaHooks", "David Karnok", "akarnokd", "07/10/16, 06:36:37 AM", "This PR adds a customization point to  `RxJavaHooks` that let's one create different `ScheduledExecutorService` instances for the `GenericScheduledExecutorService` utility.\n\nTo apply the hook (or remove it), one has to restart the `Schedulers` via `shutdown()` and then `start()`. Note that the latter had to be made public as well.\n\nRelated #4171.", "NaN"], ["4174", "1.x: benchmark reduce and takeLast(1)", "David Karnok", "akarnokd", "07/07/16, 06:58:17 PM", "Adds benchmarks to measure the overhead of `reduce()`, `takeLast(1)` and `collect()`.\n\nResults (i7 4770K, Windows 7 x64, Java 8u92) ops/s, larger is better.\n\n![image](https://cloud.githubusercontent.com/assets/1269832/16664818/2f0235f4-4482-11e6-8844-8e294bbcabd9.png)", "NaN"], ["4176", "1.x: optimize collect, reduce and takeLast(1)", "David Karnok", "akarnokd", "07/08/16, 07:05:40 AM", "This PR reduces the overhead with `collect`, `reduce` and `takeLast` and introduces the `DeferredScalarSubscriber` to support similar unbounded-in single-out scenarios.\n\nBenchmark comparison (i7 4770K, Windows 7 x64, Java 8u92)\n\n![image](https://cloud.githubusercontent.com/assets/1269832/16669829/ba5541cc-4497-11e6-9827-097ac686bcf2.png)\n\nRelative to each other: (each practically returning the very last value)\n\n![image](https://cloud.githubusercontent.com/assets/1269832/16669793/a35183fa-4497-11e6-9a93-36f7effe7e3b.png)", "NaN"], ["4178", "1.x: improve coverage of rx.Observable methods", "David Karnok", "akarnokd", "07/08/16, 08:43:43 PM", "This PR improves the coverage of `rx.Observable` methods plus \n- fixes a javadoc issue \n- fixes an enum-coverage anomaly in Notification (now it is simply biased towards onNext signals)\n- removes `equals()` from `TestException` as it caused anomalies with deduplication inside `CompositeException`\n- fixes 3 PMD rule violations (2 suppressed, 1 corrected)\n- `timestamp` and `timeInterval` now use the `Schedulers.computation()` as the source for the current time instead of `Schedulers.immediate()` which can't be properly hooked. By default, they both return `System.currentTimeMillis()`.", "NaN"], ["4179", "1.x: new fromAsync to bridge the callback world with the reactive", "David Karnok", "akarnokd", "07/10/16, 06:36:10 AM", "This PR adds a new source operator: `fromAsync()` that let's bridge the callback-style world with the reactive world by providing a push surface and offers options to handle backpressure.", "NaN"], ["4180", "1.x: change test heap size to avoid 137", "David Karnok", "akarnokd", "07/09/16, 07:46:02 AM", "It appears that since we added jacoco to the build, it fails sometimes with error 137 which is the code for the system killing the JVM for running out of memory. It is likely the coverage data plus some test's excessive memory use (I don't know which ones) try to go above the current 2GB limit.\n\nThis is an experiment.", "NaN"], ["4181", "1.x: increase Coverage of some classes", "David Karnok", "akarnokd", "07/09/16, 08:44:00 PM", "The problem with deprecated API is that it pulls down the coverage percentage.", "NaN"], ["4182", "1.x: add missing RxJavaHooks options, fix bugs", "David Karnok", "akarnokd", "07/09/16, 08:22:42 PM", "These PR adds the remaining hooks which weren't even tested with the original RxJavaPlugins plus a full coverage of the RxJavaHooks itself.\n\nThis is a mandatory addition and 1.1.7 can't be released without it (i.e., with an incomplete RxJavaHooks that is).", "NaN"], ["4183", "1.x: no need to run gradle assembe by travis", "David Karnok", "akarnokd", "07/09/16, 08:02:26 PM", "By default, Travis runs `gradle assemble` and if it fails, there seems to be no way to specify `--stacktrace` for it other than disabling it entirely. The `buildViaTravis.sh` does a full build anyway.\n\nI'm posting this as Nebula fails in the assembly phase for some reason but by default, nothing else is printed.", "NaN"], ["4184", "Release 1.1.7 changes.md update", "David Karnok", "akarnokd", "07/10/16, 06:54:23 AM", "Applying #4149 to CHANGES.md", "NaN"], ["4187", "Move status icons to top, add maven version badge.", "David Karnok", "akarnokd", "07/10/16, 11:39:01 AM", "Plus, this should also fix the snapshot versions which were broken (they are with 0.0.1-SNAPSHOT on bintray) because of yesterday's Nebula plugin problems.", "NaN"], ["4188", "1.x: add missing headers, add SuppressWarnings", "David Karnok", "akarnokd", "07/10/16, 02:36:49 PM", "I still forget about these sometimes.", "NaN"], ["4189", "Update 1.1.7 javadoc files", "David Karnok", "akarnokd", "07/11/16, 05:27:59 AM", "I've extracted the javadoc.jar from the release into a subdir 1.1.7 and replaced the root files as well.\n\n/cc @DavidMGross ", "NaN"], ["4190", "2.x: implement concat(Map)Eager(DelayError) and expose concat(Map)DelayError overload", "David Karnok", "akarnokd", "07/12/16, 06:54:23 AM", "Started a syncing process between 1.x and 2.x operators (based on [this diff](https://gist.github.com/akarnokd/4a391527e099412cad87d3dffbfef762)). The first set is the addition of the eager version of `concat` and `concatMap`. In addition, all of them get a `XDelayError` overloads as well.", "NaN"], ["4191", "Fix grammar error in RxJavaHooks javadocs", "Santiago Castro", "bryant1410", "07/11/16, 02:12:00 PM", "NaN", "NaN"], ["4192", "2.x: +fromAsync, distinctUC, skip, take overloads, fix TestSubscriber API", "David Karnok", "akarnokd", "07/13/16, 06:51:23 AM", "This PR adds a few operators and overloads from 1.x\n- `fromAsync`\n- `just` - 10 arguments\n- `distinctUntilChanged(BiPredicate<? super T, ? super T> comparer)`\n- `skip` timed - default scheduler\n- `take` timed - default scheduler\n- `toCompletable`\n\nIn addition, this PR fixes the API of TestSubscriber by making the initial value primitive `long` and having 0 as no initial request instead of the trickery with `null`.", "NaN"], ["4195", "2.x: sync unit tests of Completable, add missing features", "David Karnok", "akarnokd", "07/14/16, 06:58:33 AM", "Don't worry about not all things tested in this PR, anything extra relative to 1.x will be covered after the sync.", "NaN"], ["4204", "2.x: test sync + cleanup", "David Karnok", "akarnokd", "07/18/16, 04:43:47 PM", "- More unit tests ported;\n- `TestObserver` cleanup and sync with `TestSubscriber`;\n- fix travis to run with Java 7 instead of 8;\n- added AnimalSniffer;\n- cleaned up `combineLatest`, introduced `combineLatestDelayError`;\n- test names are as in 1.x, please don't complain about the `test` prefix in the method names!", "NaN"], ["4209", "1.x: merge/flatMap to keep scalar/inner element relative order", "David Karnok", "akarnokd", "07/20/16, 09:04:10 PM", "This PR changes flatmap to make sure there is no element reordering happening on the fast-paths.\n\nRelated: #4206.", "NaN"], ["4211", "2.x: use generic type instead of Object in combineLatest and zip", "Bob van der Linden", "bobvanderlinden", "07/19/16, 05:51:48 PM", "As discussed in https://github.com/ReactiveX/RxJava/issues/1277#issuecomment-233357354\n\nThis PR gives a stricter type signature for `combineLatest`, `zip`, `zipArray` and `zipIterable`. It replaces occurrences of `Object` with its generic type `T`. In practice users will not need to type-cast arrays in the combine function anymore.", "NaN"], ["4215", "1.x: fix assembly tracking replacing original exception", "David Karnok", "akarnokd", "07/20/16, 09:17:11 PM", "Modify the assembly tracking logic to not replace the exception flowing through but to attach the tracking exception to the end of the causal chain (if possible).\n\nFixes #4212", "NaN"], ["4217", "2.x: Test sync, +groupJoin, +join, +onTerminateDetach", "David Karnok", "akarnokd", "07/22/16, 08:24:26 AM", "- add `groupJoin`, `join`, `onTerminateDetach`\n- fix missing cancellation in `FlowableFlattenIterable`\n- fix `fromIterable` error handling\n- added several unit test methods and classes from 1.x", "NaN"], ["4222", "2.x: subscribeOn allow cancelling before the actual subscription happens (just like 1.x)", "David Karnok", "akarnokd", "07/22/16, 08:24:55 AM", "This PR fixes the `subscribeOn` operator to allow cancellation before the actual subscription to the source takes place - just like how 1.x works.", "NaN"], ["4224", "1.x: PublishSubject perf", "David Karnok", "akarnokd", "07/22/16, 07:42:37 AM", "This PR benchmarks the overhead in `PublishSubject` to give a baseline for upcoming behavior correction (backpressure fail-fast, more eager child isUnsubscribed() checking).\n\nBenchmark (i7 4790, Windows 7 x64, Java 8u102, ops/s - bigger is better):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/17049741/617b9386-4fef-11e6-9d08-27352d676221.png)", "NaN"], ["4225", "1.x: PublishSubject fail-fast when backpressured", "David Karnok", "akarnokd", "07/27/16, 09:08:36 PM", "This PR modifies the `PublishSubject` to fail fast if the child Subscriber can't keep up. Therefore, instead of some other operator failing somewhere downstream, the `MissingBackpressureException` now points to the `PublishSubject` instead. \n\nIn addition, there were complaints in #3850 that cross-unsubscription doesn't stop another Subscriber from receiving events if it comes after the unsubscribe() call in the dispatch loop. Since `PublishSubject` now tracks request - which is the main extra overhead - it is trivial to add the necessary eager check for the unsubscribed state.\n\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u102)\n\n![image](https://cloud.githubusercontent.com/assets/1269832/17052414/a30acf84-4ffd-11e6-88ae-1fc5d28a6d12.png)\n\nAs expected, this adds some overhead although most noticeably for the mid-range only. Short-lived publishing is now slightly faster even.\n\nInterestingly, many benchmarks behave oddly in these 1000s range - we could be hitting some JIT threshold. While in other benchmarks, the warmup iteration numbers keep increasing as JIT does its work but here, it starts out quite nicely then drops 25% and stays that way. I'm on windows so JMH -perfasm doesn't work.\n\nIf this direction is accepted, I'll update `BehaviorSubject`, `timer()` and `interval()` do do the same tracking.", "NaN"], ["4226", "1.x: Single.flatMapCompletable", "Niklas Baudy", "vanniktech", "07/27/16, 08:58:07 PM", "Addresses #4216 \n\nHappy to receive feedback on the implementation. Also should I take the documentation from `flatMapObservable` and adjust it?", "NaN"], ["4229", "1.x: fix replay() retaining reference to the child Subscriber", "David Karnok", "akarnokd", "07/23/16, 07:14:43 AM", "In #3470, a flat cache of Subscribers has been introduced that is versioned and gets only updated if there are new Subscribers coming, old Subscribers leaving _and_ a value comes through - improving performance if lots of Subscribers come and go between main onNext signals. This cache is not cleared but rebuilt therefore child Subscribers unsubscribing were still referenced through it and everything beyond - leading to memory leak on sensitive systems.\n\nThe fix is to cut the link to the child Subscriber in `InnerProducer` on unsubscription. A secondary action also empties the cache if all Subscribers are gone.\n\nReported in #4228 .", "NaN"], ["4231", "CachedThreadScheduler should wait until the previous action (if any) \u2026", "Csaba Kos", "csabakos-zz", "07/23/16, 12:24:03 PM", "\u2026completes before releasing a worker to the pool. Fixes #4230.", "NaN"], ["4232", "save allocation in OnSubscribeAmb", "Dave Moten", "davidmoten", "07/23/16, 12:14:13 PM", "`Selection` class can extend `AtomicReference` to save an allocation", "NaN"], ["4233", "save allocation in OnSubscribeAutoConnect", "Dave Moten", "davidmoten", "07/23/16, 12:41:04 PM", "Another one. I'll keep rolling through the operators to pick up more. \n\n@akarnokd Are you ok with `@SuppressWarnings(\"serial\")` instead of `private static final long serialVersionUID = ...`? ", "NaN"], ["4234", "1.x: Fix some typos", "Niklas Baudy", "vanniktech", "07/23/16, 01:11:37 PM", "NaN", "NaN"], ["4236", "save allocations in OnSubscribeJoin", "Dave Moten", "davidmoten", "07/24/16, 06:39:37 AM", "as per title.\n\nWould have been nicer to extend `CompositeSubscription` but is final.", "NaN"], ["4237", "reduce allocations in OnSubscribeGroupJoin", "Dave Moten", "davidmoten", "07/24/16, 06:41:01 AM", "as per title", "NaN"], ["4238", "1.x: Fix typo eigth to eighth", "Niklas Baudy", "vanniktech", "07/24/16, 12:08:51 PM", "Found another one", "NaN"], ["4239", "save allocation in OperatorSkipTimed", "Dave Moten", "davidmoten", "07/27/16, 07:48:08 AM", "as per title, combined `AtomicBoolean` with an `Action`.", "NaN"], ["4241", "Fix retryWhen/repeatWhen potential concurrent reentry when resubscribing", "David Karnok", "akarnokd", "07/27/16, 09:07:55 PM", "When the function's returned Observable signals the resubscription in the operator `redo` (which is the base for `repeatWhen` and `retryWhen`). It is possible an asyncronous source triggers the function (and thus the same `Observable`) from another thread while the first is still coming back from the resubscription itself.\n\nThis PR serializes the dispatching `BehaviorSubject` to prevent such concurrent execution of the when chain.\n\nThis may or may not be the source of the failure of #4175 but I can't reproduce the failure with the 1.x branch. /cc @davidmoten.", "NaN"], ["4243", "rename Map and Filter test classes now that have moved to OnSubscribe", "Dave Moten", "davidmoten", "07/27/16, 07:25:27 AM", "a bit of cleanup", "NaN"], ["4244", "OperatorAll - prevent multiple terminal events", "Dave Moten", "davidmoten", "07/27/16, 09:05:29 PM", "As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\n\nIncludes a unit test that failed on the original code.", "NaN"], ["4245", "OperatorAny - prevent multiple terminal events", "Dave Moten", "davidmoten", "07/28/16, 06:14:41 AM", "As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\n\nIncludes a unit test that failed on the original code.", "NaN"], ["4246", "OperatorReduce - prevent multiple terminal events", "Dave Moten", "davidmoten", "07/28/16, 06:15:27 AM", "As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\n\nIncludes a unit test that failed on the original code.\n\nAlso renamed test class to match tested class.", "NaN"], ["4248", "1.x: SyncOnSubscribe fix typo and java doc", "Niklas Baudy", "vanniktech", "07/27/16, 03:47:21 PM", "NaN", "NaN"], ["4250", "onBackpressureDrop - prevent multiple terminal events", "Dave Moten", "davidmoten", "07/28/16, 06:16:16 AM", "As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\n\nIncludes three unit tests that failed on the original code and another that gives coverage of the onBackpressureDrop action being called.", "NaN"], ["4251", "toMap - prevent multiple terminal events, support backpressure", "Dave Moten", "davidmoten", "07/30/16, 06:57:04 AM", "As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about an `onCompleted` being sent from upstream even if upstream has been unsubscribed.\n\nIncludes three unit tests that failed on the original code. The fix also has the side effect of enabling gc of `map` when the factory fails (`onError` was called on the child, not `this` so `map` was not set to null).", "NaN"], ["4252", "collect, DeferredScalarSubscriber - prevent multiple terminal emissions", "Dave Moten", "davidmoten", "07/29/16, 07:24:11 AM", "As per discussion in #4242, if an operator maps an `onNext` emission to an `onError` emission downstream then it needs be defensive about another event being sent from upstream even if upstream has been unsubscribed.\n- `DeferredScalarSubscriber` has been updated with a `done` flag\n- moved tests from `ObservableTests` to new class `OnSubscribeCollectTest`\n- added three tests of post error emissions\n- added factory failure test  ", "NaN"], ["4254", "1.x: fix SingleTest generics warnings", "David Karnok", "akarnokd", "07/28/16, 02:23:38 PM", "This fixes the generics warnings in the new `Single.flatMapCompletable` unit tests.", "NaN"], ["4257", "Fix javadoc on RxJavaHooks.setOnError", "Dave Moten", "davidmoten", "07/29/16, 07:57:04 AM", "as per title", "NaN"], ["4261", "1.x: concatDelayError multiple arguments", "Sherif Makhlouf", "SherifMakhlouf", "08/10/16, 04:23:15 PM", "This PR adds multiple arguments to concatDelayError operator\n\nRelated to: #4152 ", "NaN"], ["4262", "doOnEach - reduce allocations, report to RxJavaHooks", "Dave Moten", "davidmoten", "07/31/16, 10:51:57 AM", "as discussed in #4260 \n- call `RxJavaHooks.onError` for secondary errors\n- reduced allocations (`ActionSubscriber` -> `ActionObserver`, `Operator` -> `OnSubscribe`)\n- added 5 unit tests", "NaN"], ["4264", "Adds Observable.sorted method", "Sherif Makhlouf", "SherifMakhlouf", "08/02/16, 11:37:37 AM", "This PR Observable.sorted Method, I hope it addresses this #4263 correctly. ", "NaN"], ["4265", "remove unnecessary map call in sequenceEquals operator", "Dave Moten", "davidmoten", "08/01/16, 05:15:42 AM", "This PR is a performance improvement in `sequenceEquals` where I removed a call to `map` that appears unnecessary.", "NaN"], ["4266", "2.x: add dedicated concat for array of publishers", "David Karnok", "akarnokd", "08/02/16, 07:20:11 AM", "This PR adds a dedicated `concat` implementation that works with the source array. The main benefit is that there is no need to serialize emissions because the source array can't throw (unlike `concatMap` where there could be an onError from the main source while an inner source is running). Plus, there is a new `concatArrayDelayError` version.", "NaN"], ["4268", "2.x: test sync and operator fixes", "David Karnok", "akarnokd", "08/02/16, 07:46:54 AM", "- rename `finallyDo` (deprecated in 1.x) to `doAfterTerminate`\n- upgrade sized `buffer()`, fix backpressure bug\n- add post-complete helper methods\n- fix `toSingle` not complaining about an empty/longer source\n- `RxJavaPlugins` to reset the base-type lifecycle callbacks as well", "NaN"], ["4269", "Remove needless static field for initialization.", "Jake Wharton", "JakeWharton", "08/01/16, 08:20:22 PM", "NaN", "NaN"], ["4270", "toMultimap - prevent post terminal emissions, reduce allocations", "Dave Moten", "davidmoten", "08/02/16, 07:29:15 AM", "- switched to `OnSubscribe`\n- switched to use `DeferredScalarSubscriberSafe`\n- previous source failed to handle post terminal emissions \n- added 4 unit tests", "NaN"], ["4273", "2.x: test sync and missing operators (8/02)", "David Karnok", "akarnokd", "08/03/16, 10:09:54 AM", "- Add `rebatchRequests` which delegates to `observeOn` with the help of an internal `ImmediateThinScheduler` that only executes tasks immediately. Still not planning to expose an immediate scheduler.\n- Fix `FlowableMapNotification`'s type signature, no need to restrict it to return `Publisher<R>` but can go with `R` itself.\n- Make sure `flatMap` doesn't reorder scalars and elements of the same inner source.\n- Change parameter ordering on `mergeDelayError(Iterator)` overloads.", "NaN"], ["4278", "2.x: Functional interfaces now throw", "David Karnok", "akarnokd", "08/06/16, 08:51:43 AM", "It had a bit of a cascading effect.", "NaN"], ["4281", "1.x: Remove needless static field for initialization in IndexedRingBuffer.", "Niklas Baudy", "vanniktech", "08/04/16, 09:59:59 AM", "Equivalent of #4269 ", "NaN"], ["4282", "1.x: Make Observable takeUntil documentation more explicit", "Niklas Baudy", "vanniktech", "08/05/16, 09:02:36 AM", "NaN", "NaN"], ["4285", "2.x: Remove defunct 'Nbp' prefix from Observable interfaces.", "Jake Wharton", "JakeWharton", "08/06/16, 08:52:41 AM", "NaN", "NaN"], ["4287", "2.x: Elide ObservableWrapper for empty and never.", "Jake Wharton", "JakeWharton", "08/06/16, 08:53:39 AM", "NaN", "NaN"], ["4288", "2.x: move Exceptions to public area, + ExceptionHelper", "David Karnok", "akarnokd", "08/06/16, 09:52:49 PM", "Related: #4280.\n\nThe `Exceptions.propagate` and `Exceptions.throwIfFatal` are too useful to be hidden in an internal package so this PR moves them into the public `io.reactivex.exceptions` package. The terminal atomics related to Throwable containers lives in the `ExceptionHelper` enum.", "NaN"], ["4289", "2.x: Elide more create/callback wrappers in favor of direct Observables.", "Jake Wharton", "JakeWharton", "08/06/16, 10:46:43 PM", "NaN", "NaN"], ["4291", "2.x: Promote anonymous Observables to top-level types.", "Jake Wharton", "JakeWharton", "08/08/16, 01:54:13 PM", "NaN", "NaN"], ["4292", "2.x: Actually apply custom scheduler when applying future.", "Jake Wharton", "JakeWharton", "08/07/16, 08:20:02 AM", "Correct annotatoin declaration as well.", "NaN"], ["4293", "2.x: Correct default subscriber name.", "Jake Wharton", "JakeWharton", "08/07/16, 08:32:43 AM", "NaN", "NaN"], ["4294", "2.x: Inline generic-free runnable and long consumer method.", "Jake Wharton", "JakeWharton", "08/07/16, 08:30:08 AM", "NaN", "NaN"], ["4295", "2.x: Add serialized single subscriber wrapper.", "Jake Wharton", "JakeWharton", "08/07/16, 08:44:35 AM", "There's already one for observer, subscriber, and completable subscriber.", "NaN"], ["4296", "2.x: Observable.range fix Exception message", "Niklas Baudy", "vanniktech", "08/07/16, 10:47:25 AM", "NaN", "NaN"], ["4297", "2.x: Rename Single Base Interface Types for consistency", "Niklas Baudy", "vanniktech", "08/07/16, 05:54:55 PM", "Addresses #4044", "NaN"], ["4298", "2.x: Clarify behavior of RxJavaPlugins.reset() in javadoc", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "08/10/16, 04:40:53 PM", "Noticed in RxAndroid https://github.com/ReactiveX/RxAndroid/pull/316#discussion_r73783555", "NaN"], ["4299", "2.x: Rename Flowable Base Interface Types for consistency", "Niklas Baudy", "vanniktech", "08/07/16, 06:40:06 PM", "Addresses #4044", "NaN"], ["4300", "2.x: Rename Observable Base Interface Types for consistency", "Niklas Baudy", "vanniktech", "08/07/16, 09:32:19 PM", "Addresses #4044.", "NaN"], ["4301", "2.x: Rename ObservableSource to ObservableWithUpstream", "Niklas Baudy", "vanniktech", "08/07/16, 08:51:42 PM", "To unblock #4300 ", "NaN"], ["4302", "2.x: Rename Completable Base Interface Types for consistency", "Niklas Baudy", "vanniktech", "08/07/16, 08:53:14 PM", "Addresses #4044 ", "NaN"], ["4303", "2.x: Move single and completable observers to correct package.", "Jake Wharton", "JakeWharton", "08/07/16, 09:32:54 PM", "NaN", "NaN"], ["4304", "2.x: Add missing license headers", "Niklas Baudy", "vanniktech", "08/07/16, 09:59:59 PM", "Now every file has a license header.", "NaN"], ["4305", "2.x: Rename source/publisher wrapper class to more semantic 'from' name.", "Jake Wharton", "JakeWharton", "08/08/16, 01:55:04 PM", "NaN", "NaN"], ["4307", "2.x: Promote lift implementations to top-level types.", "Jake Wharton", "JakeWharton", "08/08/16, 06:54:21 AM", "NaN", "NaN"], ["4308", "2.x: Promote Observable to Single/Flowable adapters to top-level types.", "Jake Wharton", "JakeWharton", "08/08/16, 06:55:29 AM", "NaN", "NaN"], ["4309", "2.x: Remove unused exceptions in public API", "Niklas Baudy", "vanniktech", "08/08/16, 02:45:43 PM", "As wanted in #4306 ", "NaN"], ["4310", "2.x: fix SubscriptionArbiter reentrancy/cancel bug", "David Karnok", "akarnokd", "08/08/16, 01:53:23 PM", "This PR fixes the case when a call to request() prevented cancellation of the arbiter if the call never returned, thus locking out the drain loop from the cancellation call.\n\nThe PR makes sure `request()` is only called outside the guarded region.\n\n1.x is not affected because unsubscription and requesting go on separate \"channels\".\n\nThe PR also fixes `FlowableRedo` by serializing the repeat signal `Processor`.", "NaN"], ["4311", "1.x: Schedulers.from() to call RxJavaHooks.onScheduleAction", "David Karnok", "akarnokd", "08/08/16, 01:30:49 PM", "The `ExecutorScheduler` wrapper did not call the `RxJavaHooks.onScheduledAction()` to decorate actions sent to a custom scheduler.", "NaN"], ["4314", "2.x: Rename FlowableSource to FlowableWithUpstream to match ObservableWithUpstream.", "Jake Wharton", "JakeWharton", "08/08/16, 02:30:03 PM", "NaN", "NaN"], ["4315", "2.x: Use ArrayListSupplier in more places, add HashMapSupplier.", "Jake Wharton", "JakeWharton", "08/08/16, 03:06:53 PM", "NaN", "NaN"], ["4316", "2.x: Normalize empty and never sources.", "Jake Wharton", "JakeWharton", "08/08/16, 04:01:28 PM", "NaN", "NaN"], ["4317", "2.x: Rename create to unsafeCreate, add \"safe\" create methods.", "Jake Wharton", "JakeWharton", "08/09/16, 07:07:06 AM", "This is a proposal to solve #4255 but for 2.x and closes #4286 built around one goal: make the `create` methods actually usable by developers!\n\nCurrently the advice given to most developers using 1.x is avoid `create` unless you are absolutely 100% sure you understand backpressure and cancellation, and even then avoid it if possible. This method is a trap that most new developers fall into. _The method is named \"create\", after all, so it must be how I create these things!_ I want to make that statement not only correct, but advisable (at least when the still-convenient \"from\" methods are not suitable, such as when wrapping callback-based APIs).\n\nBecause `Observable`, `Single`, and `Completable` are backpressure-free, this amounts to just suppressing downstream notifications when disposed. This doesn't seem too controversial.\n\nThe most controversial part is that I have renamed `Flowable.fromAsync` to `Flowable.create` thus making it the canonical way for users to create `Flowable`s directly. I'm much less opinionated on this change, but it felt wrong to have an `Flowable.unsafeCreate` with no associated `create` and `fromAsync` is the \"safest\" version we have.", "NaN"], ["4318", "2.x: Switch (almost) all chain operators to FlowableWithUpstream.", "Jake Wharton", "JakeWharton", "08/09/16, 07:10:28 AM", "NaN", "NaN"], ["4319", "2.x: Switch (almost) all remaining chain operators to ObservableWithUpstream.", "Jake Wharton", "JakeWharton", "08/09/16, 07:11:44 AM", "NaN", "NaN"], ["4322", "1.x: add TestSubscriber.assertValuesAndClear", "David Karnok", "akarnokd", "08/11/16, 11:59:47 AM", "This PR adds an ~~`assertAndConsume`~~ `assertValuesAndClear` method to `TestSubscriber` to assert on value content and then clear the internal value list. This helps asserting on received values without the need to list all previously seen values in `assertValues`. \n\nOn a sidenote, `getOnNextEvents()` returns the internal list and one can call `clear()` on it.", "NaN"], ["4323", "2.x: No scheduler change happens for timeInterval() and timestamp().", "Jake Wharton", "JakeWharton", "08/09/16, 02:00:38 PM", "NaN", "NaN"], ["4324", "2.x: Skip static factories when converting between stream types.", "Jake Wharton", "JakeWharton", "08/09/16, 02:24:07 PM", "Also rename Publisher->Completable factory method and operator implementation to match other stream types.", "NaN"], ["4326", "2.x: Extract 'WithUpstream' interfaces.", "Jake Wharton", "JakeWharton", "08/10/16, 06:52:10 AM", "This allows use with types that do not extend directly from their base stream types.", "NaN"], ["4328", "1.x: compact MultipleAssignment- and Serial-Subscriptions", "David Karnok", "akarnokd", "08/11/16, 11:34:10 AM", "This PR reduces the allocation in `MultipleAssignmentSubscription` and `SerialSubscription` by introducing a shared, compact underlying container `SequentialSubscription`.\n\nI've updated `Worker.schedulePeriodically` to use it directly.\n\nIn addition, there is a behavior change with `MultipleAssignmentSubscription`: it no longer retains the last `Subscription` as it was likely to cause retention problems (and otherwise didn't make sense to me).\n\nThe `SequentialSubscription` feature weak versions of the mutation methods that don't retry if there was a concurrent mutation: for some operations, not winning such races is fine.\n\n/cc @JakeWharton @davidmoten @artem-zinnatullin ", "NaN"], ["4330", "Added Observable.concat(Iterable)", "Paul Woitaschek", "PaulWoitaschek", "08/10/16, 04:33:39 PM", "See #4329 \n\nI also adjusted the test as it was testing the wrong thing before.", "NaN"], ["4333", "2.x: Add 'WithUpstream' interfaces to connectable implementations.", "Jake Wharton", "JakeWharton", "08/10/16, 03:50:27 PM", "NaN", "NaN"], ["4337", "2.x: move DisposableObserver to public area, add some javadocs", "David Karnok", "akarnokd", "08/10/16, 05:31:11 PM", "Move `DisposableObserver` to `io.reactivex.observers` + some documentation.\n\nRelated: #4082.", "NaN"], ["4338", "2.x: Remove conditional resource management from async listeners.", "Jake Wharton", "JakeWharton", "08/10/16, 08:21:57 PM", "Rename them to have a 'Resource' prefix.", "NaN"], ["4342", "2.x: sync javadoc of Flowable", "David Karnok", "akarnokd", "08/11/16, 06:01:25 PM", "This PR adds the Javadoc to the `Flowable` plus removes some deprecated or unnecessary operator overloads.\n\nBy the sheer amount of documentation, `Flowable` can't be reviewed on GitHub. Once the CI passes, I'll merge it and people who wish to review it can immediately start a PR to fix any documentation mistakes.", "NaN"], ["4343", "Remove tabs indent and redundant space.", "Shintaro Katafuchi", "hotchemi", "08/11/16, 06:36:29 PM", "- Remove tabs indent and redundant space.\n  - Currently tabs and spaces are mixed up in the code so just unify them.", "NaN"], ["4344", "2.x: Fix some typos in Flowable + Observer documentation", "Niklas Baudy", "vanniktech", "08/11/16, 07:28:35 PM", "NaN", "NaN"], ["4345", "Release 1.1.9 update changes.md", "David Karnok", "akarnokd", "08/12/16, 07:13:02 AM", "Update CHANGES.md with the release log.", "NaN"], ["4346", "2.x: sync Javadoc of Observable (copy&adjust Flowable's)", "David Karnok", "akarnokd", "08/12/16, 03:32:48 PM", "This PR adds Javadoc to `Observable` by mainly copying and adjusting `Flowable`'s documentation.\n\nIn addition, the method set was synced as well and placeholders added for unported 1.x operators.\n\nThe drill is the same as before: after CI, I merge this and reviewers can post PRs with necessary fixes.", "NaN"], ["4349", "2.x: Observable + Flowable fix some typos", "Niklas Baudy", "vanniktech", "08/14/16, 09:05:07 AM", "NaN", "NaN"], ["4352", "2.x: Sync Single javadoc with 1.x", "David Karnok", "akarnokd", "08/15/16, 10:46:48 AM", "This PR adds javadoc to the `Single` methods, fixes a few API differences.", "NaN"], ["4353", "2.x: Accept subclasses of Throwable for asserting failure.", "Jake Wharton", "JakeWharton", "08/16/16, 07:04:48 AM", "NaN", "NaN"], ["4355", "2.x: sync Completable javadoc and related changes", "David Karnok", "akarnokd", "08/16/16, 08:35:22 AM", "This PR mainly adds `Scheduler:` descriptions to `Completable`, removes deprecated operators or unnecessary aliases. In addition, blocking methods now are named `blockingAwait` and `blockingGet`.", "NaN"], ["4357", "2.x: switch to throwing Action, switchMapDelayError, other cleanup", "David Karnok", "akarnokd", "08/16/16, 01:56:31 PM", "Notable changes:\n- Replace the use of `Runnable` in the base reactive types to `Action` whose `run` method can throw a checked exception.\n- Fix javadoc referencing 1.x types no longer available.\n- The `switchMap` operator has been enhanced to support delaying errors.\n- Update `concat(Iterable)` to use `concatMapDelayError` because Iterable can't throw just anytime but on the boundary, reducing the per-element overhead.\n- `FlowableEmitter` has been enhanced with a `serialize()` method that serializes calls to `onXXX` methods.\n- Factored out `FlowableEmitter.Cancellable` into `io.reactivex.functions` as it will be used by the other base reactive types with their `XEmitter` implementations.\n- Added `AtomicThrowable` with convenience methods that use `ExceptionHelper`'s terminal atomics with `Throwable`s.", "NaN"], ["4358", "Add missing @Test annotation", "Dimitar Asenov", "dimitar-asenov", "08/16/16, 06:00:12 PM", "This annotation has been accidentally omitted when resolving a conflict during the merging of:\n96feb27e1b90cb93a64295de077cffb1a7d9ea9b and 98cccec27252f30578cd3cf1b7aeddcb9837a2fd\ninto:\nd6bf9d15c6802c74d8e5a3fc4f908a2d01d3d335\n\nWe made PRs for both versions 1.x and 2.x.\n\nWe found the missing annotation while processing RxJava's git repository using a tool for structured code merge that we're developing as part of the Envision IDE: www.pm.inf.ethz.ch/research/envision.html", "NaN"], ["4359", "Add missing @Test annotation", "Dimitar Asenov", "dimitar-asenov", "08/16/16, 05:36:40 PM", "This annotation has been accidentally omitted when resolving a conflict during the merging of:\n96feb27e1b90cb93a64295de077cffb1a7d9ea9b and 98cccec27252f30578cd3cf1b7aeddcb9837a2fd\ninto:\nd6bf9d15c6802c74d8e5a3fc4f908a2d01d3d335\n\nWe made PRs for both versions 1.x and 2.x.\n\nWe found the missing annotation while processing RxJava's git repository using a tool for structured code merge that we're developing as part of the Envision IDE: www.pm.inf.ethz.ch/research/envision.html", "NaN"], ["4360", "2.x: factor out inner classes from the base reactive types", "David Karnok", "akarnokd", "08/17/16, 06:00:36 AM", "This PR factors out the anonymous inner classes from the base reactive types and introduces the appropriate classes and methods in `*Helper` enums.", "NaN"], ["4361", "2.x: test sync, fix retryWhen/redoWhen/publish(Function)", "David Karnok", "akarnokd", "08/18/16, 07:07:41 AM", "Notable changes:\n- Implement the `onBackpressureBuffer` with overflow strategy; change the strategy to plain enum.\n- Additional unit tests from 1.x\n- Implement `publish(Function)` properly to support latecommers.\n- Split `FlowableRedo` into `FlowableRetryWhen` and `FlowableRepeatWhen`.\n- Make sure `take(0)` still triggers upstream subscription that is immediately cancelled.", "NaN"], ["4364", "2.x collect - handle post terminal events", "Dave Moten", "davidmoten", "08/23/16, 12:02:34 PM", "Just looking at moving some recent 1.x bug fixes and tests over to 2.x.\n\nThis is my first PR in 2.x so before I proceed adding more tests from 1.x (to this PR) I want to get some feedback on my approach. In particular in the test `testCollectorFailureDoesNotResultInTwoErrorEmissions` is the `Flowable` creation method ok?", "NaN"], ["4368", "2.x: add withLatestFrom many, cleanups and other enhancements", "David Karnok", "akarnokd", "08/18/16, 02:28:18 PM", "Notable changes:\n- implemented `withLatestFrom` with multiple other sources (both `Flowable` and `Observable`)\n- added missing `Exceptions.throwIfFatal()` after catching throwables\n- added `SequentialDisposable` and replaced internal use of `SerialDisposable` with it\n- added `package-info.java` to public packages\n- added javadoc to some interfaces and methods\n- removed `@Experimental` tags and set those methods to `@since 2.0`\n- added `HalfSerializer` to deal with single onNext and multiple onError/onComplete callers", "NaN"], ["4370", "2.x: remove Try+Optional, introduce Notification", "David Karnok", "akarnokd", "08/18/16, 06:24:04 PM", "This PR removes the `Try` and `Optional` classes and (re)introduces `Notification<T>`.\n\nThere are several ways to implement it. This PR uses the abstract class + private subclasses approach that saves on instance size.\n\nRelated discussion: #4365.", "NaN"], ["4371", "2.x: move blocking operators into the base classes", "David Karnok", "akarnokd", "08/18/16, 08:59:39 PM", "This PR removes the `BlockingFlowable` and `BlockingObservable` classes and moves the blocking operators into the respective reactive classes and names prefixed with `blocking`.\n\nIn addition, many of the mentions of `Flowable` has been replaced with `Observable` in `Observable`.\n\nRelated: #4366.", "NaN"], ["4372", "2.x: Implement ObservableHide for also masking the Disposable.", "Jake Wharton", "JakeWharton", "08/18/16, 10:09:22 PM", "NaN", "NaN"], ["4375", "2.x: added missing ops, cleanup 8/19-1", "David Karnok", "akarnokd", "08/19/16, 03:13:10 PM", "Notable changes:\n- renamed and added safe `create` support to `Observable`, `Single` and `Completable`\n- added some javadoc\n- added `test()` method to `Single` and `Completable`\n- factored out `ErrorMode` into `internal.util` (used by various `concat` operators)", "NaN"], ["4378", "2.x: implement ops, add javadoc, remove unused components 8/19-2", "David Karnok", "akarnokd", "08/19/16, 08:20:36 PM", "Notable changes:\n- use JMH 1.13\n- fix javadoc generator exclude pattern\n- add javadoc to many components\n- remove `Observers` and `Subscribers` - all their function is available via subscribe() and/or by implementing the abstract `XObserver`/`XSubscriber` provided\n- remove `Schedulers.immediate()`\n- remove `Single.subscribe(Subscriber)`, `Single.subscribe(Observer)`, `Completable.subscribe(Subscriber)` and `Completable.subscribe(Observer)`\n- remove `CompletableSerializedObserver` and `SingleSerializedObserver` and their parent package\n- implement `Single.takeUntil`, `Single.flatMapCompletable`\n- update the time-shift handling in the default `Scheduler.schedulePeriodically()` to match 1.x\n- fix `Single.subscribeOn` disposable management\n- renamed `Subject.hasSubscribers` to `Subject.hasObservers`", "NaN"], ["4379", "2.x: Move single-use top-level type to nested class of its only use.", "Jake Wharton", "JakeWharton", "08/20/16, 05:29:32 PM", "NaN", "NaN"], ["4380", "2.x: Remove test scheduler factory.", "Jake Wharton", "JakeWharton", "08/20/16, 05:28:12 PM", "This method is misleading in that it's a factory next to a bunch of accessor methods to shared resources. The TestScheduler constructor is public and can be used directly.", "NaN"], ["4381", "2.x: Correct factory method name for converting an RS Publisher.", "Jake Wharton", "JakeWharton", "08/20/16, 05:30:36 PM", "NaN", "NaN"], ["4382", "2.x: Correctly dereference subscription before comparing against null.", "Jake Wharton", "JakeWharton", "08/21/16, 12:16:21 AM", "NaN", "NaN"], ["4383", "2.x: Remove double dash on RxThreadFactory thread names.", "Jake Wharton", "JakeWharton", "08/21/16, 12:18:09 AM", "Also optimize name creation to avoid `StringBuilder` having to expand its underlying `char[]`.", "NaN"], ["4384", "2.x: Do not promise a new instance where we return a singleton.", "Jake Wharton", "JakeWharton", "08/21/16, 12:39:48 AM", "NaN", "NaN"], ["4385", "2.x: Free upstream resources when default observer/subscriber is canceled.", "Jake Wharton", "JakeWharton", "08/21/16, 08:34:44 AM", "NaN", "NaN"], ["4386", "2.x: Move error consumer helper to internal API.", "Jake Wharton", "JakeWharton", "08/21/16, 08:35:10 AM", "NaN", "NaN"], ["4387", "2.x: Remove unused test methods from safe observer/subscriber.", "Jake Wharton", "JakeWharton", "08/21/16, 08:36:04 AM", "NaN", "NaN"], ["4388", "2.x: Remove reference counted Disposable public type.", "Jake Wharton", "JakeWharton", "08/21/16, 08:33:19 AM", "This is a very specific use case to provide as a first-party type which can always be added back later should there be sufficient demand.", "NaN"], ["4390", "1.x: Remove explicit StackOverflow check as its a VirtualMachineError.", "Jake Wharton", "JakeWharton", "08/21/16, 08:41:53 AM", "Looks like [the linked comment](https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495) was misinterpreted (but not in a way that affected the implementation) as Scala considered StackOverflowError as non-fatal but RxJava always considered it fatal. As such, its explicit check was redundant.", "NaN"], ["4391", "2.x: Remove explicit StackOverflow check as its a VirtualMachineError.", "Jake Wharton", "JakeWharton", "08/21/16, 08:43:00 AM", "Looks like [the linked comment](https://github.com/ReactiveX/RxJava/issues/748#issuecomment-32471495) was misinterpreted (but not in a way that affected the implementation) as Scala considered StackOverflowError as non-fatal but RxJava always considered it fatal. As such, its explicit check was redundant.", "NaN"], ["4394", "2.x: Single.test cancel TestSubscriber when wanted", "Niklas Baudy", "vanniktech", "08/21/16, 12:05:07 PM", "NaN", "NaN"], ["4395", "2.x: Completable.test cancel TestSubscriber when wanted", "Niklas Baudy", "vanniktech", "08/21/16, 12:06:58 PM", "NaN", "NaN"], ["4397", "1.x: Fix multiple values produced by throttleFirst with TestScheduler", "Anton Rutkevich", "AntonRutkevich", "08/21/16, 03:27:43 PM", "When throttleFirst was operating on a TestScheduler, it delivered all items passed to it untill TestScheduler's time would change to a non-zero value.", "NaN"], ["4398", "2.x: Avoid potential NPE when onError throws.", "Jake Wharton", "JakeWharton", "08/22/16, 07:00:34 AM", "t2 was only initialized if canceling threw an exception. In the happy path it would have never been initialized so when onError threw the call to suppress() would NPE.", "NaN"], ["4403", "2.x: add missing ops, cleanup, fusion fixes", "David Karnok", "akarnokd", "08/23/16, 07:55:26 AM", "Notable changes:\n- Implement `concatEager` and its variants\n- Implement `onTerminateDetach`\n- Implement `distinctUntilChanged(BiPredicate)`\n- Replace `EmptyDisposable.INSTANCE` with `Disposables.empty()` due to clash with fusion (sending an INSTANCE tells a fusion-enabled source to not expect onNext values yet the test still send those - this was a problem with EmptySubscription.INSTANCE a while back too). Also added javadoc warning about its use\n- add `ObservableScalarXMap` optimization to `Observable.xMap(Function)` and their operator's `subscribeActual`\n- Make `ObservableJust` `ScalarCallable` and sync-fuseable with `ScalarDisposable` (similar to `Flowable.just()`)\n- Make `Observable.bufferSize()` public for convenience.\n- Fix `flatMap` fused `Callable` handling\n- Renamed `Objects` to `ObjectHelper` to avoid accidental bad imports of `java.util.Objects` of Java 8.", "NaN"], ["4410", "2.x: cleanup, enhancements 8/23-1", "David Karnok", "akarnokd", "08/23/16, 03:11:54 PM", "Notable changes:\n- Introduce `Emitter<T>` as a base interface for `FlowableEmitter` and `ObservableEmitter`, use it for the `generate()` operators to be the push surface.\n- Hide fusion-related methods in `TestSubscriber` and `TestObserver`, remove `test()` method overload from the base reactive classes, introduce `SubscriberFusion` and `ObserverFusion` helper in the test source set\n- Enable fusion on `Observable.range()`.\n- Move `Observer`-related tests into the `observers` test package.", "NaN"], ["4413", "2.x: API removals and renames", "David Karnok", "akarnokd", "08/24/16, 06:45:21 AM", "Notable changes:\n- delete `concat` 5-9 arguments, use `concat(just(...))` or `concatArray(...)` instead\n- delete `withLatestFrom` 5-8 arguments\n- rename `merge(Publisher...)` into `mergeArray(Publisher...)` to disambiguate\n- rename `merge(int, int, Publisher...)` into `mergeArray(int, int, Publisher...)` to disambiguate\n- delete `merge(int, Publisher...)` overload\n- rename `mergeDelayError(Publisher...)` into `mergeArrayDelayError(Publisher...)` to disambiguate\n- rename `mergeDelayError(int, int, Publisher...)` into `mergeArrayDelayError(int, int, Publisher...)` to disambiguate\n- delete `mergeDelayError(int, Publisher...)` overload\n- delete `takeLatestBuffer` overloads", "NaN"], ["4417", "2.x: add assembly tracking, minor fixes and cleanup", "David Karnok", "akarnokd", "08/24/16, 03:36:19 PM", "Notable changes:\n- renamed `amb(sources...)` to `ambArray(sources...)` to be consistent with the naming of other operators with varargs input\n- Renamed some other varargs operators ot `xArray` to be consistent\n- Added `RxJavaPlugins.onAssembly()` to operators, note that no other infrastructure (such as `enableAssemblyTracking` was added; companion libraries may later utilize these hooks to inject the necessary wrapper classes.\n- Extended `RxJavaPlugins.onAssembly()` to support `ConnectableX` operators\n- Renamed `FlowProcessor` into `FlowableProcessor` to avoid future confusion with JDK 9's `Flow.Processor`\n- Removed common value extraction methods from `Subject` and `FlowableProcessor` and left them in the implementations\n- Made common terminal state checking methods of `Subject` and `FlowableProcessor` as abstract since all subtypes can implement them reasonably\n- fixed copy-paste errors in javadocs, such as wrong class named, referencing non-existent backpressure", "NaN"], ["4418", "1.x: Sync doOnEach java doc", "Niklas Baudy", "vanniktech", "08/24/16, 09:34:05 AM", "The other `doOnEach` function has the right java doc. Terminal events such as `onCompleted` / `onError` are also included in `doOnEach`.", "NaN"], ["4421", "2.x: fixes, cleanups, renames", "David Karnok", "akarnokd", "08/24/16, 08:02:46 PM", "Changes:\n- fix spelling mistakes\n- more consistent parameter naming scheme based on #1353 (but incomplete, RC2)\n- fix bugs due to wrong variable naming\n- compact logic expressions\n- fix `Completable.doAfterTerminate` not called the right time\n- `onErrorReturnValue` renamed to `onErrorReturnItem`\n\n@DavidMGross once this PR has been merged, it would be great you submitted one that has `//TODO` markers on those lines that need attention. The naming scheme you suggested doesn't come intuitively to me so I may skip many of them without the markers.", "NaN"], ["4422", "2.x: add subscribeWith to get back the subscriber/observer fluently", "David Karnok", "akarnokd", "08/24/16, 10:49:39 PM", "This PR adds the `subscribeWith` methods to the base reactive types to mainly help with the 1.x to 2.x changeover as 2.x `subscribe(Subscriber)` return void instead of the resource/cancellation/unsubscription type `Disposable`. See the javadocs and the unit test for example use.\n\nRelated: #4400", "NaN"], ["4423", "1.x: Add to() conversion function to all stream types.", "Jake Wharton", "JakeWharton", "08/25/16, 07:51:18 AM", "This deprecates extend() on Observable, which is a less powerful version of these functions.", "NaN"], ["4424", "Update javadoc 1.1.9, add dirs and 2.0.0-RC1 doc", "David Karnok", "akarnokd", "08/25/16, 08:24:52 AM", "- Moved old javadocs under `/1.x/javadoc/version_number`\n- Added `/2.x/javadoc/`\n- Updated `/javadoc` to have the 1.1.9 documentation\n\nThere was a small hiccup with the 2.x release as the javadoc didn't properly generate (bad link and missing css). I've included the locally generated javadoc here which is titled 2.0.0-DP0-SNAPSHOT at the moment.", "NaN"], ["4425", "1.x: Remove 'Completable' prefix from nested interfaces, move its subscription to top-level.", "Jake Wharton", "JakeWharton", "08/30/16, 07:12:49 AM", "This is only the `Completable` part of #4420. It does not make `CompletableSubscriber` an abstract class nor create `Single.Operator`.", "NaN"], ["4427", "1.x: fromAsync - handle post-terminal events", "Dave Moten", "davidmoten", "08/26/16, 06:41:31 AM", "`fromAsync` did not handle post-terminal events properly when overflow occurs.\n\nAdded three unit tests that failed on original logic.", "NaN"], ["4428", "2.x: collect - handle post terminal events  - Observable", "Dave Moten", "davidmoten", "08/26/16, 06:40:14 AM", "Post-terminal event handling for `Observable.collect`.\n\nAdded three unit tests that failed on original logic.", "NaN"], ["4430", "2.x Improve coverage, fix bugs", "David Karnok", "akarnokd", "08/26/16, 06:43:05 PM", "The new tests revealed some bugs (nothing major).", "NaN"], ["4431", "2.x: coverage, fixes, cleanup 8/27-1", "David Karnok", "akarnokd", "08/26/16, 10:12:01 PM", "- updated `Single.cache()` to be lock-free, to allocate less and work properly\n- added test coverage to some classes\n- remove unused internal `EmptyObserver`\n- update `PublishSubject` to support cross-cancellation\n- update `TestHelper.race` to use the current thread for one of the tasks", "NaN"], ["4432", "Fix typo.", "Shintaro Katafuchi", "hotchemi", "08/27/16, 05:20:58 PM", "NaN", "NaN"], ["4433", "Fix typo.", "Shintaro Katafuchi", "hotchemi", "08/27/16, 06:09:37 PM", "NaN", "NaN"], ["4434", "2.x: cleanup, bugfixes, coverage 8/27-2", "David Karnok", "akarnokd", "08/27/16, 07:36:36 PM", "- Remove unused code\n- Improve coverage of `Single`, `Completable` and `Observable`\n- Fix minor bugs in operators", "NaN"], ["4435", "2.x: cleanup, behavior clarifications, fixes, coverage 8/28-1", "David Karnok", "akarnokd", "08/28/16, 08:56:08 PM", "- Add tests\n- fix mistakes in `TestObserver`\n- Combine `DisposableHelper` and its inner `Disposed` enum\n- Compact `NotificationLite` and its inner `Complete` enum\n- Fix NPE in `ListCompositeDisposable` constructor\n- Fix `DeferredScalarObserver` fusion and state management\n- Turned a few empty enums into classes with private constructor: coverage can't cover them 100% otherwise. These empty enums have a constructor in their bytecode which never gets called and thus there's always 10 instructions / 2 method calls missing.\n- Removed `TestObserver.awaitDone()`, one should always await with timeout", "NaN"], ["4436", "2.x: Maybe for lazy Optional", "George Campbell", "abersnaze", "09/01/16, 06:53:04 AM", "In #4321 I hit on the problem of needing a lazy object that could either be zero or one value. In that issue the idea of switching the return value of `reduce(R, Func2<R,T,R>)` from `Observable<R>` to `Single<R>` because that operator can only ever produce an Observable that emits exactly one value. The problem was that `reduce(Func2<T,T,T>)` could not be changed to `Single<T>` because the source Observable could be empty and therefore not produce one and only one value.\n\nTo solve this problem I mentioned we could create a lazy type that represents either 1 or no value could fill the gap between `Completable` and `Single<T>`.\n\nThis PR is for the introduction of the `Maybe<T>` type.", "NaN"], ["4437", "2.x: Subject/Processor improvements & small cleanup", "David Karnok", "akarnokd", "08/29/16, 05:47:49 PM", "- open up `verifyPositive` as protected for validation convenience in subclasses\n- improve size and state handling of `DeferredScalarSubscription`\n- enable async-fusion on `AsyncSubject` and `AsyncProcessor`, compact the classes\n- **behavior change** `AsyncX.hasValue()` returns false until the terminal state has been reached\n- compact the classes `PublishSubject`, `PublishProcessor`, `BehaviorSubject`, `BehaviorProcessor`, `ReplaySubject` and `ReplayProcessor`\n- enable async-fusion on `UnicastSubject`, compact the class\n- rename `BaseXQueueDisposable` to `BasicXQueueDisposable` to match `BasicXQueueSubscription`\n- introduce `DeferredScalarDisposable`, refactor `DeferredScalarObserver`\n- adjust tests that asserted on the former parameter names\n- subjects and processors can now be created with newing up their constructor: `new PublishSubject<>()`; there is no mandatory shared state between the `Observer` part and the `Observable` part because both are now stateless on their own.", "NaN"], ["4441", "Fix FlowableOnBackpressureBufferStrategy", "Mathieu Gabriel", "matgabriel", "08/31/16, 07:28:20 AM", "Fix buffered objects not propagated downstream in FlowableOnBackpressureBufferStrategy\nFix drop strategy logic in FlowableOnBackpressureBufferStrategy\nAdd unit test for FlowableOnBackpressureBufferStrategy, copied from FlowableOnBackpressureBufferTest, there is still some work needed to have a better coverage", "NaN"], ["4442", "1.x: cleanup, javadoc, Completable.fromEmitter", "David Karnok", "akarnokd", "08/30/16, 01:59:39 PM", "- Add javadoc to `AsyncEmitter.BackpressureMode` (#4199)\n- Deprecate `Observable.fromAsync`, add `Observable.fromEmitter` instead (#4255)\n- Add `Completable.fromEmitter()` (#4356)\n- Add missing placeholder `@since` tags\n- Fix some generics error `RxJavaHooks`\n- Add race helper to `TestUtil`\n- Fix javadoc warnings", "NaN"], ["4447", "Fix withLatestFrom's tparam", "Shixiong Zhu", "zsxwing", "08/31/16, 07:27:17 AM", "NaN", "NaN"], ["4450", "2.x: fixes, cleanup, coverage 8/31-1", "David Karnok", "akarnokd", "08/31/16, 01:36:00 PM", "- Improve coverage of internal classes\n- Turn more empty enums into classes with private constructors\n- Fix `Single.subscribeOn` and `Completable.subscribeOn` disposable management.\n- Create a compact `FutureSubscriber` and `FutureObserver` classes, drop their former enums\n- Deprecate `Disposables.from` methods, add `Disposables.fromX` methods where X = argument type\n- Fix error management in `Completable.mergeX` operators.\n- Remove unused methods from internal classes", "NaN"], ["4452", "enhance generics on onErrorResumeNext and onErrorReturn", "Dave Moten", "davidmoten", "09/01/16, 06:54:14 AM", "`Func1<Throwable,...>` parameter should be `Func1<? super Throwable, ...>`", "NaN"], ["4453", "Wrap InterruptedException with an unchecked exception in TestSubscriber#awaitValueCount().", "Volkan Yaz\u0131c\u0131", "vy", "09/01/16, 01:35:38 PM", "In its current form, `awaitValueCount()` is the only `TestSubscriber#await*`method that throws a checked exception (that is, `InterruptedException`), whereas the others wrap it with a `IllegalStateException`. This spreads a try-catch disease throughout the entire code base where `awaitValueCount()` is used. One can argue that why not just declaring the exception in the caller method footprint: Because you might be implementing an interface (e.g. `Runnable`) which does not allow any exceptions in its footprint. This patch wraps the `InterruptedException` with an unchecked exception in `TestSubscriber#awaitValueCount()`.", "NaN"], ["4454", "2.x: start reimplementing Maybe with up-to-date javadoc, tests and algo", "David Karnok", "akarnokd", "09/01/16, 02:25:58 PM", "This PR reimplements the `Maybe` with more up-to-date algorithms (the original was a copy-paste of some older Single and Completable code it seems) and adds javadoc and tests along the way. Not all operators have been rewritten yet (and no placeholders). Early adopters should refer to the `toX` methods on the base reactive types. The PR also adds the `RxJavaPlugins` hooks to support `Maybe`.\n\nIn addition, I've fixed javadoc mistakes in the other base reactive types (referring to the wrong types).", "NaN"], ["4458", "2.x: rename Observable and Single #doOnCancel to #doOnDispose", "Marvin Ramin", "Mauin", "09/01/16, 06:45:58 PM", "#4456\n\nCompletable already used .doOnDispose() however I renamed the arguments to match Observable and Single", "NaN"], ["4460", "1.x: Completable add doOnEach", "Niklas Baudy", "vanniktech", "09/02/16, 06:47:05 AM", "First part of #4457 \n\nIs it okay that I reused Notification like that?\n\nAlso are there any Java 6 Generics missing? It would be nice if this project was set up to target Java SDK 6, as my default seems to be Java 8 and I don't get any errors shown in the IDE.", "NaN"], ["4461", "1.x: Single add doOnEach", "Niklas Baudy", "vanniktech", "09/05/16, 12:18:01 PM", "Really not that happy with `onNotification.call(Notification.<T>createOnNext(t));` do you guys have any other way of doing this? There's no way of creating a Notification that has the `onCompleted` plus a value. A new one could be introduced there though. Also the `doOnEachSuccess` test feels clunky.\n\nAlso why does Single when using the `do` methods does the job by using an Observable? And later converting it back to a Single again. Is it due to the way Single was implemented in 1.x? With Completable there is no converting of back and forth needed.\n\nJavadoc will follow once we sorted out the few nits here.\n\nFixes #4457 ", "NaN"], ["4463", "1.x: Remove some unused fields", "Niklas Baudy", "vanniktech", "09/02/16, 07:00:04 AM", "NaN", "NaN"], ["4466", "1.x: Deprecate Notification.createOnCompleted", "Niklas Baudy", "vanniktech", "09/02/16, 02:01:53 PM", "Fix #4462 \n\nIt might just as well shine some light into which method should be used and explain why there are 2", "NaN"], ["4467", "2.x: add more Maybe operators, fix a few javadoc mistakes", "David Karnok", "akarnokd", "09/02/16, 04:04:03 PM", "- Move `verifyPositive` into `ObjectHelper`\n- Fix javadoc of `Flowable.subscribe()` and `Observable.subscribe()` mentioning `Subscription` from 1.x\n- `Maybe`: add `amb`, `concat`, `concatArray`, `merge`, `mergeArray`, `concatMap`, `subscribe`, `subscribeWith`, `doOnEvent`", "NaN"], ["4468", "2.x: coverage, bugfixes, 9/03-1", "David Karnok", "akarnokd", "09/02/16, 10:53:48 PM", "- Fixed bugs in `Flowable.sequenceEqual`, `Flowable.zip` when errors are delayed, `Flowable.onBackpressureBuffer` when errors are delayed\n- Fixed mentions of `NbpX` in some places\n- Synchronized unit tests between `Observable` and `Flowable`", "NaN"], ["4469", "2.x: coverage and fixes 9/03-2", "David Karnok", "akarnokd", "09/03/16, 02:38:36 PM", "- enable fusion with `Observable.map`\n- remove impossible branches in some classes\n- add more tests to cover tool classes\n- fix `Observable.range()` entering regular emission if fusion-drain is interrupted\n- fix `FullArbiter` and `ObservableFullArbiter` not cancelling/disposing the incoming Subscription/Disposable in some cases", "NaN"], ["4474", "1.1.10 javadoc", "David Karnok", "akarnokd", "09/05/16, 12:52:58 PM", "Update Javadoc 1.1.10 on gh-pages", "NaN"], ["4478", "Fix typo Javadocs TestObserver", "V\u00edctor Albertos", "VictorAlbertos", "09/05/16, 05:54:28 PM", "NaN", "NaN"], ["4479", "2.x: Add doOnEvent to Single & Completable", "Niklas Baudy", "vanniktech", "09/06/16, 06:55:25 AM", "NaN", "NaN"], ["4484", "2.x: Flowable.reduce() to return Single, macro fusion", "David Karnok", "akarnokd", "09/06/16, 03:14:05 PM", "This PR adds the baseline for changing `Flowable` and `Observable` operators to return `Single`, `Completable` or `Maybe` but in case the user wants to go back to the original type via `toFlowable` or `toObservable` we switch to a natively `Flowable`/`Observable` operator (macro-fusion).\n\nBenchmark comparison (i7 4790, Windows 7 x64, Java 8u102):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18269896/98ffbf80-742a-11e6-91b7-23b03bec8b8c.png)\n\nNo changes were applied to `Observable` yet hence the roughly same result there. `Flowable.reduce()` has been updated plus there is a new `FlowableReduce` instead of `scan().last()`.", "NaN"], ["4486", "2.x: Completable enhance doOnEvent to reduce allocations", "Niklas Baudy", "vanniktech", "09/06/16, 03:13:50 PM", "NaN", "NaN"], ["4488", "2.x: add new methods to Maybe, Observable and Single from 4481", "David Karnok", "akarnokd", "09/06/16, 04:32:17 PM", "This PR adds just the new methods from #4481 to allow a much cleaner change of return types later on.", "NaN"], ["4490", "2.x: rename emitters #isCancelled to #isDisposed", "Marvin Ramin", "Mauin", "09/06/16, 08:38:15 PM", "Renames Observable/Single/CompletableEmitter#isCancelled to #isDisposed.\n\nThis now causes a bit of a weird situation where most (not all) Emitter classes implement `Disposable` as well, so both interfaces expose the same `#isDisposed` method. Before the `#isCancelled` methods were basically just calling `#isDisposed` or had the same implementation. \n\nSuggestions on how to improve this?", "NaN"], ["4491", "2.x: reduce blockingX overhead, move internal observers to common pkg", "David Karnok", "akarnokd", "09/07/16, 06:57:55 AM", "This PR compacts the `blockingX` operators by extending `CountDownLatch` and implementing `SingleObserver`, `CompletableObserver` and `MaybeObserver` with the necessary blocking await mechanics.\n\nBenchmark comparison (i7 4770, Windows 7 x64, Java 8u102):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18291535/868c4d6a-7488-11e6-99f7-43415f79e5e4.png)\n\nIn addition, the internal package `subscribers.single` and `subscribers.completable` has been removed and the classes moved into `io.reactivex.internal.observers` package. The old blocking enum helpers were removed as well.\n\nThe `BlockingSingleSubscriber` and `BlockingSingleObserver` abstract classes have been renamed to `BlockingBaseX` to avoid name confusion (they have nothing to do with the `Single` type).", "NaN"], ["4493", "2.x: more Maybe operators, minor cleanups 9/07-1", "David Karnok", "akarnokd", "09/07/16, 02:48:09 PM", "- minor Javadoc corrections\n- Note: some Maybe operators shifted within the file\n- add to `Maybe`: `concatArrayDelayError`, `concatArrayEager`, `concatEager`, `concatDelayError`, `mergeArrayDelayError`, `mergeDelayError`, `sequenceEqual`, `timer`, `using`, `zip`, `zipArray`\n- improve coverage of `Observable`, `Single` and `Maybe`.\n- Move tests from `ObservableTests` into `ObservableTest` drop the former.", "NaN"], ["4496", "2.x: Remove trailing whitespace", "Niklas Baudy", "vanniktech", "09/07/16, 03:27:56 PM", "Removed them like this:\n\n`find . -type f -name \"*.java\" | xargs sed -i '' -e's/[ \\t]*$//' \"$1\"`\n\nI think it's best to review this locally or by appending `?w=1` to this URL to let GitHub ignore white space changes.", "NaN"], ["4497", "2.x: Add Checkstyle for Trailing Whitespace", "Niklas Baudy", "vanniktech", "09/08/16, 07:42:36 AM", "This will add checkstyle though it should not be executed together with Travis and hence does not fail the PR if there are. Also running `./gradlew checkstyleMain` gives a list of places where trailing whitespace exists.", "NaN"], ["4500", "1.x: Remove trailing whitespace", "Niklas Baudy", "vanniktech", "09/08/16, 08:00:28 AM", "Dunno whether this is wanted or not in 1.x. If not just close this PR. ", "NaN"], ["4502", "2.x: Replace `finallyDo` references with `doAfterTerminate`", "IKEDA Sho", "ikesyo", "09/08/16, 09:18:47 AM", "This should be less confusing.", "NaN"], ["4503", "2.x: add system properties to adjust thread priorities of Schedulers", "David Karnok", "akarnokd", "09/08/16, 01:00:40 PM", "This PR adds the ability to specify the default thread priorities of `computation()`, `io()`, `newThread()` and `single()` schedulers via system properties. I've added the property names to the `Schedulers` javadoc.\n\nRelated: #4389.", "NaN"], ["4504", "2.x: Add Disposable Observer for Maybe, Completable & Single", "Niklas Baudy", "vanniktech", "09/08/16, 09:18:34 AM", "Also any reason the Dispoable is called `s`? Is it still from the Subscription time?\n\nFixes #4501 ", "NaN"], ["4505", "2.x: Ignore Checkstyle failures", "Niklas Baudy", "vanniktech", "09/08/16, 09:13:12 AM", "NaN", "NaN"], ["4506", "2.x: fix operator RefCount, disable FindBugs (due to Travis OOM)", "David Karnok", "akarnokd", "09/08/16, 10:22:09 AM", "This PR fixes the operators `refCount` (ensure proper call order to onXXX), disables FindBugs due to out-of-memory kills on Travis and increases the half-time sleep of a flaky unit-test.", "NaN"], ["4507", "2.x: add Reactive-Streams TCK infrastructure and couple of tests", "David Karnok", "akarnokd", "09/08/16, 12:38:25 PM", "This PR sets up the build to run TestNG tests as well and adds the Reactive-Streams TCK to allow validating our operators.\n\nIncluded tests are: `just`, `fromArray`, `fromIterable`, `concat`, `merge`.\n\nNote that the TCK tests for invalid `request()` amount which, according to the spec, should be reported to the running `Subscriber` via `onError`. Unfortunately, this is a very expensive requirement (requiring half-serialization all the time) and we are not going to support it in RxJava 2. Negative requests are bugs in operators and should be fixed, we only provide a notification about such situations in the `RxJavaPlugins.onError` for those who want to check for such errors. \n\nTherefore, the `FlowableTCK` has been added with does the required behavior by the TCK and can be used as `FlowableTCK.wrap(flowable)` when returning from the TCK's `createPublisher(long)`.", "NaN"], ["4508", "2.x: Add exception message in SingleFromCallable", "Niklas Baudy", "vanniktech", "09/08/16, 12:37:09 PM", "NaN", "NaN"], ["4509", "2.x: Adjust some JavaDoc in Emitters", "Niklas Baudy", "vanniktech", "09/08/16, 01:32:45 PM", "NaN", "NaN"], ["4513", "2.x: fix switchMap bad cancellation", "David Karnok", "akarnokd", "09/08/16, 04:13:03 PM", "Both `switchMap` implementations didn't properly cancel the current inner consumer (but instead cancelled the outer 'connection' only).\n\nReported in #4512.", "NaN"], ["4516", "2.x: fix Single.using, add unit tests and coverage", "David Karnok", "akarnokd", "09/08/16, 10:38:06 PM", "I've forgotten to create a branch so the first part of todays coverage work [landed in 2.x direct](https://github.com/ReactiveX/RxJava/commit/1145819b658983807e0cede5ba2c7d5ac1117baa)\n- removed unused methods from various classes\n- compacted `SpscArrayQueue`\n- added null checks to `SpscLinkedArrayQueue.offer()` and `MpscLinkedQueue.offer()`\n- fixed `ResourceObserver` not calling `onStart`\n- Added direct NotificationLite-emission methods to `AppendOnlyLinkedArrayList`, updated `SerializedObserver` and `SerializedSubscriber` to use it directly instead of the former indirection\n- `TestObserver.isDisposed` now reports true if terminal events were received (#4514)\n- `ResourceSubscriber` to use `SubscriptionHelper`'s deferred Subscription/requesting management\n- added unit tests to cover `DisposableXObserver`s\n- `SerializedObserver` and `SerializedSubscriber` now have proper unit tests each\n\nThis current PR fixes `Single.using` not properly managing the resource and adds unit tests to verify the behavior along with a few extra coverage improvements.", "NaN"], ["4518", "2.x: Add missing Resource Observer for Maybe, Completable & Single and adjust some Javadoc", "Niklas Baudy", "vanniktech", "09/09/16, 03:49:15 PM", "Fixes #4517", "NaN"], ["4519", "2.x: add more Maybe operators 9/09-1", "David Karnok", "akarnokd", "09/09/16, 03:33:49 PM", "This PR adds some more `Maybe` operators:\n- `ambWith`\n- `cache`\n- `concatWith`\n- `contains`\n- `count`\n- `defaultIfEmpty`\n- `delay`\n- `switchIfEmpty`\n- `zipWith`\n\nPlus a small cleanup and additional `TestHelper` test support (check double onSubscribe calls, dispose() state management).", "NaN"], ["4522", "Observable/Flowable/Completable/Single.delay should always call onError on the provided Scheduler", "Vladimir Mironov", "nsk-mironov", "09/09/16, 08:46:53 PM", "Fixes #4521 ", "NaN"], ["4525", "2.x: Fix Generics T[] in Zip & CombineLatest", "Niklas Baudy", "vanniktech", "09/10/16, 12:13:54 PM", "Fixes #4524\n\nTest for combineLatest fill follow", "NaN"], ["4526", "2.x: More usage of ObjectHelper", "Niklas Baudy", "vanniktech", "09/11/16, 11:11:07 AM", "NaN", "NaN"], ["4527", "2.x: Remove unused declarations", "Niklas Baudy", "vanniktech", "09/11/16, 01:58:18 PM", "NaN", "NaN"], ["4528", "2.x: add Maybe operators, add annotation and source code checker tests", "David Karnok", "akarnokd", "09/12/16, 06:40:25 AM", "- add `Maybe` operators: `delay`, `hide`, `isEmpty`, `onErrorComplete`, `onErrorResumeNext`, `onExceptionResumeNext`\n- add more fusion interfaces and mark `Maybe.just` and `Maybe.empty` as `ScalarCallable`.\n- added unit test to verify base reactive classes have proper scheduler and backpressure annotations (wherever appropriate)\n- added unit test to verify the javadoc of the main reactive types have the **Backpressure:** and **Scheduler:** sections in them (via scanning the source files if it can find it possible, works for me)\n- added unit test to verify that when **Scheduler:** section mentions a method name, it actually matches the method the javadoc is there for (lots of copy-paste errors were found this way)\n- fix the annotations and documentation errors detected above\n- the backpressure javadoc section checker for 3 types are currently disabled as I'm out of time for tonight.", "NaN"], ["4529", "2.x: Fix MaybeTimber by using scheduler and unit", "Niklas Baudy", "vanniktech", "09/12/16, 03:41:34 PM", "Also one question why does `CompletableTimer` check `if (!sd.isDisposed()) {` before replacing but SingleTimer does not? I adjusted MaybeTimber to SingleTimer so I didn't add the check there either.\n\nHowever I feel like this should be consistent, can you elaborate which one is wanted?", "NaN"], ["4530", "2.x: cleanup 9/12-1, more Maybe operators, more source code checking", "David Karnok", "akarnokd", "09/12/16, 12:26:52 PM", "- more `Maybe` operators: `onTerminateDetach`, `repeat`, `retry`\n- fixed missing `Backpressure:` entries of the javadoc where the base type uses Flowable/Publisher\n- new base type source parser and check for javadoc mistakes: wrong type mentions, a/an use\n- fixes of those javadoc mistakes", "NaN"], ["4531", "2.x: PublishSubject enhance NPE when onNext(null) is called", "Niklas Baudy", "vanniktech", "09/12/16, 11:49:48 AM", "NaN", "NaN"], ["4533", "2.x: more cleanup and fixed checker, Maybe.takeUntil", "David Karnok", "akarnokd", "09/12/16, 02:47:41 PM", "- Fix missed javadoc mistakes, fix the checker that hid those mistakes in instance methods' javadoc due to a bug\n- add `Maybe.takeUntil`", "NaN"], ["4536", "Observable.timeout/Flowable.timeout should unsubscribe from underlying subscription on dispose", "Vladimir Mironov", "nsk-mironov", "09/12/16, 05:21:50 PM", "NaN", "NaN"], ["4537", "2.x: last Maybe operators", "David Karnok", "akarnokd", "09/12/16, 06:20:08 PM", "This PR adds the last couple of `Maybe` operators `timeout` and `unsubscribeOn`.\n\n@abersnaze Let me know if I missed an operator or you want some overload.\n\nIn the subsequent PRs, I'll change the return types of some classical operators to better indicate the cardinality they have (`Single`, `Completable`).", "NaN"], ["4538", "2.x: add most relevant ~100 operators' Reactive-Streams TCK tests", "David Karnok", "akarnokd", "09/13/16, 06:41:43 AM", "This PR adds about ~100 Reactive-Streams Test Compatibility Kit (TCK) tests of RxJava's most relevant operators and operation modes.\n\nThe PR also contains a behavior fix for `unsubscribeOn` that now stops propagating events if the cancelled because it may take arbitrary time for the scheduled cancellation to reach the upstream which generally keeps emitting in the meantime.", "NaN"], ["4540", "2.x: Add Create test with CancelAble for all types and add more MaybeCreateTest cases", "Niklas Baudy", "vanniktech", "09/13/16, 08:21:14 AM", "`setCancellable` was not tested before.", "NaN"], ["4541", "2.x: small cleanup and TCK fix", "David Karnok", "akarnokd", "09/13/16, 09:04:10 AM", "- Change the `Callable<Publisher<T>>` parameter of `timeout` to plain `Publisher<T>` to simplify the API surface; use `defer(Callable<Publisher<T>>)` as input instead\n- change the parameter order of `timeout` from `(long, TimeUnit, Publisher, Scheduler)` to `(long, Timeunit, Scheduler, Publisher)` to better match the general pattern of time-unit-scheduler.\n- `Observable.timeout` has been updated similarly\n- Add `FlowableAwaitOnSubscribeTck` to workaround the case when calling `onNext` (indirectly) from `onSubscribe` may be unexpected (plus randomly fails the observeOn TCK test).", "NaN"], ["4542", "2.x: cleanup of some javadoc errors and mentions of 'Nbp'", "David Karnok", "akarnokd", "09/13/16, 02:39:40 PM", "- fix some javadoc typos\n- replace javadoc mentioning of \"unsubscribe\" with either \"cancel\" or \"dispose\"\n- some minor algorithm reorganizations based on IntelliJ analysis\n- remove the mention of \"Nbp\" from the code and documentation (it refers to an earlier naming scheme for Observables and Observers)", "NaN"], ["4549", "1.2 preparation cleanup and Experimental/Beta/Deprecated adjustments", "David Karnok", "akarnokd", "09/15/16, 07:04:27 AM", "This PR contains some cleanup, javadoc fixes as well as the API changes for 1.2:\n### Promote beta to standard\n- `rx.Observable.create(SyncOnSubscribe<S, T>)`\n- `rx.Observable.doOnRequest(Action1<Long>)`\n- `rx.Observable.flatMap(Func1<? super T, ? extends Observable<? extends R>>, Func1<? super Throwable, ? extends Observable<? extends R>>, Func0<? extends Observable<? extends R>>, int)`\n- `rx.Observable.flatMap(Func1<? super T, ? extends Observable<? extends R>>, int)`\n- `rx.Observable.flatMap(Func1<? super T, ? extends Observable<? extends U>>, Func2<? super T, ? super U, ? extends R>, int)`\n- `rx.Observable.flatMapIterable(Func1<? super T, ? extends Iterable<? extends R>>, int)`\n- `rx.Observable.flatMapIterable(Func1<? super T, ? extends Iterable<? extends U>>, Func2<? super T, ? super U, ? extends R>, int)`\n- `rx.Observable.fromCallable(Callable<? extends T>)`\n- `rx.Observable.toSingle()`\n- _ _\n- `rx.Single.fromCallable(Callable<? extends T>)`\n- _ _\n- `rx.SingleSubscriber<T>`\n- _ _\n- `rx.observables.ConnectableObservable.autoConnect()`\n- `rx.observables.ConnectableObservable.autoConnect(int, Action1<? super Subscription>)`\n- `rx.observables.ConnectableObservable.autoConnect(int)`\n- _ _\n- `rx.observables.SyncOnSubscribe<S, T>`\n- _ _\n- `rx.subjects.AsyncSubject.getThrowable()`\n- `rx.subjects.AsyncSubject.getValue()`\n- `rx.subjects.AsyncSubject.hasCompleted()`\n- `rx.subjects.AsyncSubject.hasThrowable()`\n- `rx.subjects.AsyncSubject.hasValue()`\n- _ _\n- `rx.subjects.BehaviorSubject.getThrowable()`\n- `rx.subjects.BehaviorSubject.getValue()`\n- `rx.subjects.BehaviorSubject.getValues()`\n- `rx.subjects.BehaviorSubject.getValues(T[])`\n- `rx.subjects.BehaviorSubject.hasCompleted()`\n- `rx.subjects.BehaviorSubject.hasThrowable()`\n- `rx.subjects.BehaviorSubject.hasValue()`\n- _ _\n- `rx.subjects.PublishSubject.getThrowable()`\n- `rx.subjects.PublishSubject.hasCompleted()`\n- `rx.subjects.PublishSubject.hasThrowable()`\n- _ _\n- `rx.subjects.ReplaySubject.getThrowable()`\n- `rx.subjects.ReplaySubject.getValue()`\n- `rx.subjects.ReplaySubject.getValues()`\n- `rx.subjects.ReplaySubject.getValues(T[])`\n- `rx.subjects.ReplaySubject.hasAnyValue()`\n- `rx.subjects.ReplaySubject.hasCompleted()`\n- `rx.subjects.ReplaySubject.hasThrowable()`\n- `rx.subjects.ReplaySubject.hasValue()`\n- `rx.subjects.ReplaySubject.size()`\n### Promote experimental to standard\n\nNone.\n### Promote to beta\n- `rx.BackpressureOverflow`\n- `rx.Observable.concatDelayError(Iterable<? extends Observable<? extends T>>)`\n- `rx.Observable.concatDelayError(Observable<? extends Observable<? extends T>>)`\n- `rx.Observable.concatEager(Iterable<? extends Observable<? extends T>>, int)`\n- `rx.Observable.concatEager(Iterable<? extends Observable<? extends T>>)`\n- `rx.Observable.concatEager(Observable<? extends Observable<? extends T>>, int)`\n- `rx.Observable.concatEager(Observable<? extends Observable<? extends T>>)`\n- `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\n- `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\n- `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\n- `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\n- `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\n- `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\n- `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>, Observable<? extends T>)`\n- `rx.Observable.concatEager(Observable<? extends T>, Observable<? extends T>)`\n- `rx.Observable.concatMapDelayError(Func1<? super T, ? extends Observable<? extends R>>)`\n- `rx.Observable.concatMapEager(Func1<? super T, ? extends Observable<? extends R>>, int, int)`\n- `rx.Observable.concatMapEager(Func1<? super T, ? extends Observable<? extends R>>, int)`\n- `rx.Observable.concatMapEager(Func1<? super T, ? extends Observable<? extends R>>)`\n- `rx.Observable.delaySubscription(Observable<U>)`\n- `rx.Observable.distinctUntilChanged(Func2<? super T, ? super T, Boolean>)`\n- `rx.Observable.mergeDelayError(Observable<? extends Observable<? extends T>>, int)`\n- `rx.Observable.onBackpressureBuffer(long, Action0, Strategy)`\n- `rx.Observable.switchMapDelayError(Func1<? super T, ? extends Observable<? extends R>>)`\n- `rx.Observable.switchOnNextDelayError(Observable<? extends Observable<? extends T>>)`\n- `rx.Observable.toCompletable()`\n- `rx.Observable.toSortedList(Func2<? super T, ? super T, Integer>, int)`\n- `rx.Observable.toSortedList(int)`\n- `rx.Observable.using(Func0<Resource>, Func1<? super Resource, ? extends Observable<? extends T>>, Action1<? super Resource>, boolean)`\n- _ _\n- `rx.observables.BlockingObservable.subscribe()`\n- `rx.observables.BlockingObservable.subscribe(Action1<? super T>, Action1<? super Throwable>, Action0)`\n- `rx.observables.BlockingObservable.subscribe(Action1<? super T>, Action1<? super Throwable>)`\n- `rx.observables.BlockingObservable.subscribe(Action1<? super T>)`\n- `rx.observables.BlockingObservable.subscribe(Observer<? super T>)`\n- `rx.observables.BlockingObservable.subscribe(Subscriber<? super T>)`\n- _ _\n- `rx.Completable`\n- _ _\n- `rx.Single.defer(Callable<Single<T>>)`\n- `rx.Single.delay(long, TimeUnit, Scheduler)`\n- `rx.Single.delay(long, TimeUnit)`\n- `rx.Single.delaySubscription(Observable<?>)`\n- `rx.Single.doAfterTerminate(Action0)`\n- `rx.Single.doOnError(Action1<Throwable>)`\n- `rx.Single.doOnSubscribe(Action0)`\n- `rx.Single.doOnSuccess(Action1<? super T>)`\n- `rx.Single.doOnUnsubscribe(Action0)`\n- `rx.Single.lift(Operator<? extends R, ? super T>)`\n- `rx.Single.onErrorResumeNext(Func1<Throwable, ? extends Single<? extends T>>)`\n- `rx.Single.onErrorResumeNext(Single<? extends T>)`\n- `rx.Single.toBlocking()`\n- `rx.Single.toCompletable()`\n- `rx.Single.using(Func0<Resource>, Func1<? super Resource, ? extends Single<? extends T>>, Action1<? super Resource>, boolean)`\n- `rx.Single.using(Func0<Resource>, Func1<? super Resource, ? extends Single<? extends T>>, Action1<? super Resource>)`\n- _ _\n- `rx.exceptions.CompositeException.CompositeException(Throwable...)`\n- _ _\n- `rx.exceptions.Exceptions.throwOrReport(Throwable, Observer<?>, Object)`\n- `rx.exceptions.Exceptions.throwOrReport(Throwable, Observer<?>)`\n- `rx.exceptions.Exceptions.throwOrReport(Throwable, SingleSubscriber<?>)`\n- _ _\n- `rx.singles.BlockingSingle<T>``\n### Removed\n- `rx.Observable.extend(Func1<OnSubscribe<T>, R>)`\n- `rx.Observable.fromAsync()`\n- _ _\n- `rx.Completable.CompletableSubscriber`\n- `rx.Completable.CompletableOnSubscribe`\n- `rx.Completable.CompletableLift`\n- `rx.Completable.CompletableTransform`", "NaN"], ["4552", "2.x: cleanup of style and other minor things, 9/14-1", "David Karnok", "akarnokd", "09/14/16, 04:33:17 PM", "This PR has 781 lines changed across 511 files so GitHub won't display the complete diff. It is advised to check this out and do a diff in your IDE.\n\nNotable changes:\n- replace mention of `onCompleted` with `onComplete`\n- remove `public` from constructors of package-private classes (some may think the class was intended to be public but usually isn't)\n- few minor whitespace addition around operators (so the code doesn't look so cluttered to me when I have view/debug older code or unit tests contributed a while ago)\n- add missing `.` from the end of the first sencence in javadocs\n- removed empty `/** */` comments above the `serialVersionUID` fields\n- use checkstyle tool version 6.19 plus a few more checkstyle rules\n- fix ObservableRedo asnyc reentrancy problem by serializing the subject", "NaN"], ["4554", "2.x: make internal naming consistent, refactor some classes 9/14-2", "David Karnok", "akarnokd", "09/14/16, 07:58:51 PM", "- Make internal naming of components consistent with the base reactive type\n- move `io.reactivex.internal.subscribers.flowable.*` to `io.reactivex.internal.subscribers`\n- move `io.reactivex.internal.subscribers.observable.*` to `io.reactivex.internal.observers`", "NaN"], ["4555", "1.x: enhance generics doOnError doOnRequest", "Dave Moten", "davidmoten", "09/22/16, 07:00:39 AM", "want to able to call `doOnError(Action1<Object>)` and similarly enhanced `doOnRequest` while I was about it.", "NaN"], ["4556", "1.x: safeguard against building with 2.* tags", "David Karnok", "akarnokd", "09/15/16, 08:16:28 AM", "This PR adds a safeguard so that when releasing, mis-tagging the 1.x branch won't build and release `io.reactivex:rxjava:2.*` (2.x goes into `io.reactivex.rxjava2:rxjava:2.*`).\n\nSince I can't try this locally (or can't really try a real tag&release), the PR will get a few commits along the way.", "NaN"], ["4560", "2.x: Fix typo in Single + Maybe defer()", "Niklas Baudy", "vanniktech", "09/15/16, 09:29:32 AM", "NaN", "NaN"], ["4561", "2.x: Enhance NPE message in Create functions of all Base Reactive Types", "Niklas Baudy", "vanniktech", "09/15/16, 03:37:38 PM", "NaN", "NaN"], ["4567", "Add extra Maybe iterable Amb tests for overlapped emissions", "Zsombor Erd\u0151dy-Nagy", "rzsombor", "09/20/16, 07:34:12 AM", "- Asserting that downstream will get the results of the first source that began emission, even if multiple sources have overlapped emissions\n- Testing Success and Error paths", "NaN"], ["4570", "2.x: last() to return Single", "David Karnok", "akarnokd", "09/20/16, 09:30:36 PM", "This PR changes the return type of `last()` to `Single<T>` and updates the relevant locations.\n\nOriginally, it was implemented as `takeLast(1).single()` so to reduce impact, all other original uses now have this inlined.", "NaN"], ["4573", "2.x: make any() and all() return Single, patch up tests", "David Karnok", "akarnokd", "09/21/16, 03:31:11 PM", "This PR changes the return type of `any()` and `all()` to `Single`.\n\nI've also did a small change to `TestObserver` by having it implement the other `XObserver` types. This resulted in one extra method `onSuccess` to be added but now you can subscribe `TestObserver` to `Single`, `Maybe` and `Completable` without conversion yet still `test()` them with the same convenient API.\n\n``` java\nFlowable.range(1, 10).any(v -> true).test().assertResult(true);\n```", "NaN"], ["4574", "2.x: collect, toList, toSortedList, toMap, toMultimap to return Single", "David Karnok", "akarnokd", "09/21/16, 07:58:17 PM", "This PR makes the following operators return `Single`:\n- `collect`\n- `collectInto`\n- `toList`\n- `toSortedList`\n- `toMap`\n- `toMultimap`\n\nand changes the documentation to mention `Single` instead as well. (There are some whitespace removals I forgot previously).", "NaN"], ["4576", "2.x: count, elementAt, ingoreElements, last, single, reduce, reduceWith to return non-Flowable", "David Karnok", "akarnokd", "09/22/16, 06:58:15 AM", "This PR updates many `Flowable` operators to return `Single`, `Maybe` or `Completable`:\n- `count()` -> `Single`\n- `elementAt()` -> `Maybe`\n- `elementAt(T)` -> `Single`\n- `first(T)` -> `Single`\n- `firstElement()` -> `Maybe`\n- `ignoreElements()` -> `Completable`\n- `reduce(Callable, BiFunction)` -> `Single`\n- `reduceWith(U, BiFunction)` -> `Single`\n- `single(T)` -> `Single`\n- `singleElement()` -> `Maybe`\n\nand deletes `Flowable.toSingle`, `Flowable.toMaybe` and `Flowable.toCompletable`.\n\n`Flowble.reduce(BiFunction)` was not yet changed from `Single` to `Maybe` (to allow empty sources to be reduced to empty Maybe).\n\nRelated: #4321", "NaN"], ["4579", "2.x: convert the Observable operators to return Single/Maybe", "David Karnok", "akarnokd", "09/22/16, 01:37:08 PM", "This PR updates many `Observable` operators to return `Single`, `Maybe` or `Completable`:\n- count() -> Single\n- elementAt() -> Maybe\n- elementAt(T) -> Single\n- first(T) -> Single\n- firstElement() -> Maybe\n- ignoreElements() -> Completable\n- lastElement() -> Maybe\n- reduce(BiFunction) -> Maybe\n- reduce(Callable, BiFunction) -> Single\n- reduceWith(U, BiFunction) -> Single\n- single(T) -> Single\n- singleElement() -> Maybe\n\nand deletes Observable.toSingle, Observable.toMaybe and Observable.toCompletable.\n\nIn addition, `Flowable.reduce(BiFunction)` now returns `Maybe<T>`.\n\nRelated: #4321", "NaN"], ["4580", "rename AsyncEmitter to Emitter", "Dave Moten", "davidmoten", "09/24/16, 08:39:11 PM", "as per discussion in #4577, renaming `AsyncEmitter` to `Emitter` via deprecation.\n\nThere is a catch though. `CompletableEmitter` is correctly named now and depends on `AsyncEmitter` via the method:\n\n``` java\n void setCancellation(AsyncEmitter.Cancellable c);\n```\n\nWhen can we break the api of that class?", "NaN"], ["4581", "2.x: Remove some dead code", "Niklas Baudy", "vanniktech", "09/22/16, 04:05:59 PM", "Also what about IntFunction it's right now in the public API however not used. So the question is does Rx want to expose that interface?", "NaN"], ["4582", "2.x: Add missing Maybe tests for concatWith & onErrorResumeNext", "Niklas Baudy", "vanniktech", "09/22/16, 02:39:43 PM", "They had no tests previously", "NaN"], ["4583", "2.x fix Flowable.create() not reporting null values properly, unify", "David Karnok", "akarnokd", "09/22/16, 07:07:56 PM", "exception msg across\n\nReported on [Stackoverflow](http://stackoverflow.com/questions/39622458/flowableemitter-doesnt-signal-error-when-onnext-got-null).\n\nThere was no proper null check in the various emitters. I've also unified the message pattern across all `create()` emitters.", "NaN"], ["4585", "2.x: Evaluate Schedule initialization via Callable", "Peter Tackage", "peter-tackage", "09/26/16, 07:50:39 AM", "This implements the solution proposed in #4572 - to initialize the Schedulers via a Callable, rather than directly via a value.", "NaN"], ["4586", "2.x: Add error assertion with predicate to TestSubscriber and TestObserver", "Josef Raska", "jraska", "09/23/16, 06:53:13 AM", "Added support for error assertions with to TestSubscriber requested in #4498 to support custom error evaluation. Removes the need to implement equals and hashCode in exceptions.", "NaN"], ["4589", "2.x: Add singleOrError, firstOrError, lastOrError & elementAtOrError to Observable and Flowable", "Niklas Baudy", "vanniktech", "09/23/16, 09:19:00 PM", "Closes #4588", "NaN"], ["4590", "2.x: Report errors from onError to Plugin when done", "Niklas Baudy", "vanniktech", "09/23/16, 03:55:22 PM", "For the first one that I found I even wrote a test. Then I started noticing more missing spots. If wanted I could port that one test to every operator that I touched. Though I didn't really find tests testing that errors are propagated through the Plugin API.", "NaN"], ["4592", "2.x: UnicastSubject fix onTerminate", "Niklas Baudy", "vanniktech", "09/23/16, 09:18:16 PM", "NaN", "NaN"], ["4593", "2.x: Enhance NPE messages", "Niklas Baudy", "vanniktech", "09/23/16, 10:28:51 PM", "Now all NPE thrown internally are having this standard message", "NaN"], ["4595", "2.x: Remove takeFirst(predicate) in Observable & Flowable", "Niklas Baudy", "vanniktech", "09/23/16, 10:49:21 PM", "NaN", "NaN"], ["4597", "2.x: Add missing @Test annotation on tests", "Niklas Baudy", "vanniktech", "09/25/16, 05:42:05 PM", "NaN", "NaN"], ["4599", "Update javadoc to 1.2.0 and 2.0.0-RC3", "David Karnok", "akarnokd", "09/25/16, 04:30:17 PM", "Update public javadocs to 1.2.0 and 2.0.0-RC3.", "NaN"], ["4600", "2.x: don't show started unit tests", "David Karnok", "akarnokd", "09/25/16, 05:28:34 PM", "Unfortunately, test reporting can't be coalesced so our almost 6000 tests overflow the Travis' window and making it more difficult to see what went wrong (especially from mobile). \n\nHowever, Travis times the build out if it doesn't detect standard output emission for more than 10 minutes; our tests take 12 minutes on average.\n\nBy not showing started but showing skipped (of which we have 200 scattered around), the timeout should not happen and the output is not bloated.", "NaN"], ["4601", "2.x: Sync behaviour between UnicastProcessor & UnicastSubject + add a few test cases", "Niklas Baudy", "vanniktech", "09/25/16, 05:17:46 PM", "NaN", "NaN"], ["4602", "2.x: benchmark just() and fromCallable() throughput", "David Karnok", "akarnokd", "09/25/16, 07:56:43 PM", "This PR adds benchmarks for measuring `just()` and `fromCallable()` when using `subscribeOn`, `observeOn` and `subscribeOn().observeOn()` with them.\n# Benchmark baseline\n- i7 4770K, Windows 7 x64, Java 8u102, JMH 1.13\n- throughput ops/s, larger is better\n## just\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18817630/bf4c4c9a-8365-11e6-87ea-13b9e2f5303c.png)\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18817657/69047e10-8366-11e6-9a63-6b0878e55097.png)\n## fromCallable\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18817631/c850e922-8365-11e6-8e7b-f60c2b9bdbaa.png)\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18817654/5cfcd46e-8366-11e6-9eb7-50e1b872f377.png)\n## just vs. fromCallable\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18817632/d7109ac0-8365-11e6-9936-e287477965e5.png)", "NaN"], ["4603", "2.x: RxJavaPlugins - Don't pass null throwable down to Error Handler", "Niklas Baudy", "vanniktech", "09/25/16, 08:13:05 PM", "NaN", "NaN"], ["4604", "2.x: add flattenAs{Observable,Flowable} to Single and Maybe", "David Karnok", "akarnokd", "09/29/16, 07:30:13 AM", "This PR adds `Single.flattenAsObservable`, `Single.flattenAsFlowable`, `Maybe.flattenAsObservable` and `Maybe.flattenAsFlowable` to map a success value into an `Iterable` sequence and stream it as `Flowable` or `Observable`. It is more efficient than `Single.toFlowable().flatMapIterable()`.", "NaN"], ["4606", "2.x: Verify same onNext / onError null behavior across all Subjects and Processors", "Niklas Baudy", "vanniktech", "09/26/16, 01:05:37 PM", "NaN", "NaN"], ["4607", "2.x: TestSubscriber & TestObserver add assertValue(Predicate)", "Niklas Baudy", "vanniktech", "09/26/16, 01:18:16 PM", "NaN", "NaN"], ["4609", "2.x: Factor out typical TestObserver/TestSubscriber methods", "David Karnok", "akarnokd", "09/26/16, 09:28:13 PM", "This PR introduces a new abstract internal class `BaseTestConsumer` which now hosts the `assertX` methods of `TestSubscriber` and `TestObserver` which were duplicates before.", "NaN"], ["4610", "1.x @Beta and @Experimental annotations are not longer annotated with itself", "V\u00edctor Albertos", "VictorAlbertos", "09/26/16, 09:22:57 PM", "This PR addresses #4608", "NaN"], ["4612", "2.x: improve performance of Observable.flatMapIterable", "David Karnok", "akarnokd", "09/27/16, 01:43:33 PM", "This PR improves the performance of `flatMapIterable` by inlining the consumption of the generated `Iterable`. The performance improvement comes from direct iteration and emission plus removing the overhead of the regular `flatMap` as such source mappings are inherently synchronous.\n### Benchmark\n\ni7 4790, Windows 7 x64, Java 8u102, JMH 1.13, ops/s - bigger is better\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18866111/a5a228b6-849e-11e6-9b53-c59df8f32d59.png)\n\n10x overhead reduction in flattening a single element `Iterable`.\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18866190/187bce50-849f-11e6-9e44-473464457c3c.png)\n\nHalf the overhead compared to (an already optimized) `Flowable.flatMapIterable`.\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18866147/d93d6686-849e-11e6-9bdb-7837c55efddc.png)\n\nNice improvement on the cross-range benchmark (stream 1 million element split into N outer and M inner elements where N \\* M = 1 million):\n\n![image](https://cloud.githubusercontent.com/assets/1269832/18866180/005367d4-849f-11e6-9925-9b9d2a33a618.png)\n\nAlso quite better than `Flowable.flatMapIterable`.", "NaN"], ["4614", "2.x: Add Maybe.flatMapSingle", "Niklas Baudy", "vanniktech", "09/27/16, 01:33:42 PM", "Gave that implementation a try. Feedback is welcome I think there are improvements that can be done.", "NaN"], ["4616", "2.x: Add Completable.andThen(MaybeSource)", "Niklas Baudy", "vanniktech", "09/27/16, 01:14:35 PM", "NaN", "NaN"], ["4617", "2.x: Add Single.flatMapMaybe", "Niklas Baudy", "vanniktech", "09/27/16, 02:59:52 PM", "NaN", "NaN"], ["4619", "2.x: Make CompositeExcpetion thread-safe like 1.x and also fix some issues", "Shixiong Zhu", "zsxwing", "09/28/16, 08:12:14 AM", "Right now CompositeExcpetion has several issues:\n- `CompositeException(Throwable... exceptions)` doesn't deduplicate exceptions and flatten CompositeExceptions like `CompositeException(Iterable<? extends Throwable> errors)`\n- If using `CompositeException(Iterable<? extends Throwable> errors)` to create CompositeException, `suppress` cannot be used.\n- `suppress` doesn't update `cause`.\n- `suppress` doesn't deduplicate exceptions and flatten CompositeExceptions.\n- `suppress` and `Throwable.addSuppressed` are pretty confusing for Java 7+ users. Without looking at the implementation, it's hard to figure out the differences.\n\nThis PR made the following changes:\n- Remove `CompositeException.suppress` so that it's easy to make CompositeException thread-safe.\n  - This may cause some performance lost in some path rarely happening, e.g., an excpetion is thrown from `onError`, but that's not a big deal.\n  - Since `suppress` is removed, it doesn't make sense to create an empty CompositeException, so `isEmpty` is removed and defense codes are added.\n- Defense codes for bad exceptions.\n- Deduplicate excepctions and flatten CompositeExceptions for `CompositeException(Throwable... exceptions)`.", "NaN"], ["4621", "1.x: NotificationLite - reduce allocations", "Dave Moten", "davidmoten", "09/28/16, 08:12:27 AM", "A lot of commonly used operators allocated an instance of `NotificationLite` as a field in a subscriber but for no great type-safety benefit. I've cut these fields by converting all instance methods of `NotificationLite` to static methods and removing the `NotificationLite.instance()` method.\n\nThe changes are trivial till you get to the `Subjects` that would pass instances of `NotificationLite` in methods of the `SubjectSubscriptionManager`. Still simple changes but reviewing these is a good idea.\n\nRxJava2 goes a bit further in the internals of `NotificationLite`. I'd like to leave changes to the internals beyond making methods static for another PR if appropriate.", "NaN"], ["4622", "2.x: enable operator fusion in onBackpressureBuffer", "David Karnok", "akarnokd", "09/28/16, 01:43:48 PM", "This PR enables operator fusion in `onBackpressureBuffer`. The main benefit is that given a non-backpressured source, using `observeOn` now reuses `onBackpressureBuffer`'s (un)bounded queue seamlessly.", "NaN"], ["4625", "2.x: Replace 'resource' observers with plain 'disposable' observers in tests.", "Jake Wharton", "JakeWharton", "09/28/16, 07:05:13 PM", "This makes the resource observers unused internally and I'm curious as to whether they deserve to stick around in the public API. Any thoughts?", "NaN"], ["4627", "2.x: Use predicates in BaseTestConsumer assertError(Class/Throwable) to remove duplicate code, tests tweaks to remove few IDE warnings", "Josef Raska", "jraska", "09/28/16, 06:59:12 PM", "Messages and error checking was duplicates between all three assertError overloads.", "NaN"], ["4629", "2.x: Add Completable.fromRunnable()", "(\u00b4\u2323`\u0283\u01aa)", "pt2121", "09/29/16, 06:57:29 AM", "addresses #4628\n\n> There's `Maybe.fromRunnable` but `Completable` is missing this method.", "NaN"], ["4631", "2.x: Don't wrap with CompositeException when there is only one error", "Shixiong Zhu", "zsxwing", "09/29/16, 07:03:18 AM", "NaN", "NaN"], ["4632", "2.x: Clean up SingleFlatMap", "Niklas Baudy", "vanniktech", "09/29/16, 09:32:47 AM", "NaN", "NaN"], ["4636", "Update Mockito to 2.1.0-RC.2", "Tim van der Lippe", "TimvdLippe", "09/29/16, 02:33:48 PM", "Equivalent of #4634 , but now for the 2.x branch.", "NaN"], ["4637", "2.x: Remove unused methods in BasicFuseableObserver", "Niklas Baudy", "vanniktech", "09/29/16, 03:16:51 PM", "NaN", "NaN"], ["4639", "2.x: fix Mockito 2.1 changes using deprecated API of its own", "David Karnok", "akarnokd", "09/29/16, 06:21:12 PM", "`anyListOf()` is deprecated in Mockito 2.1.0-RC.2 and the GitHub diff can't show such uses.\n\n(In addition, there was a missing `serialVersionUID` in another PR.)", "NaN"], ["4641", "1.x: SafeSubscriber not to call RxJavaHooks before delivering the original error.", "David Karnok", "akarnokd", "09/30/16, 06:39:25 PM", "Before the introduction of `RxJavaHooks`, the `SafeSubscriber._onError` called the original error handler with the exception it received which was by default an empty handler. The default `RxJavaHooks.onError` behavior, however is to signal errors to the uncaught exception handler of the caller thread which leads to unnecessary logging or app crashes even though the error itself is to be handled properly.\n\nThis PR restores the `SafeSubscriber._onError` to skip the `RxJavaHooks` and call the original handler directy so old tracking code should still get all safe error while newer hooking doesn't get called.\n\nRelated: #4332.", "NaN"], ["4645", "2.x Signal NPE ObservableAmb FlowableAmb", "V\u00edctor Albertos", "VictorAlbertos", "09/30/16, 07:01:49 AM", "This PR addresses #4640", "NaN"], ["4647", "2.x: Merge AmbArray and AmbIterable into Amb for Single, Maybe and Completable types", "V\u00edctor Albertos", "VictorAlbertos", "09/30/16, 12:22:35 PM", "This PR addresses #4633\n- Merge SingleAmbArray and SingleAmbIterable operators into SingleAmb\n- Merge MaybeAmbArray and MaybeAmbIterable operators into MaybeAmb\n- Merge CompletableAmbArray and CompletableAmbIterable operators into CompletableAmb", "NaN"], ["4648", "1.x: rework Single internals to reduce overhead and stack depth", "David Karnok", "akarnokd", "10/02/16, 10:10:15 AM", "This PR makes the `Single.OnSubscribe` as the primary means to execute the subscribe action in `Single` and former couple of reused `Observable` operators are now recreated with `Single.OnSubscribe`.\n\nBecause `Single` is now marked final, we can't remove the former `Observable.Operator` and `Observable.OnSubscribe` entry points (but may be deprecated in a separate PR).", "NaN"], ["4651", "Switch Maybe and Single to use their Transformers in compose()", "Zac Sweers", "ZacSweers", "10/01/16, 08:08:37 AM", "Resolves #4650 ", "NaN"], ["4654", "Upcast ConcurrentHashMap to Map to avoid compatibility issue", "Zac Sweers", "ZacSweers", "10/01/16, 09:42:59 AM", "Resovles #4653\n\nSee http://stackoverflow.com/a/32955708/61158", "NaN"], ["4658", "2.x: Observable.compose to use ObservableTransformer", "David Karnok", "akarnokd", "10/02/16, 01:29:52 PM", "This changes the `Observable.compose` type to `ObservableTransformer` to reduce the type-argument/inference problem. The other base types have been previously updated to their respective transfomer types.", "NaN"], ["4661", "2.x: cleanup and coverage 10/03", "David Karnok", "akarnokd", "10/03/16, 03:23:23 PM", "- remove unused methods and classes\n- make sure `Maybe.toFlowable` and `Maybe.toObservable` allows macro-fusion back to the original type\n- improve coverage of various components", "NaN"], ["4663", "2.x: cleanup and fixes 10/03-2", "David Karnok", "akarnokd", "10/04/16, 06:52:09 AM", "- More coverage\n- fix some composite exception ordering\n- fix a few bugs", "NaN"], ["4666", "2.x: coverage and cleanup 10/04-1", "David Karnok", "akarnokd", "10/04/16, 04:51:30 PM", "- Improve coverage\n- remove unused, unnecessary or impossible code paths\n- fix order of inner exceptions in the reported `CompositeException` in various operators\n- `Maybe.ignoreElement()` now returns `Completable`", "NaN"], ["4667", "2.x: flatMap{Completable, Maybe, Single} operators", "David Karnok", "akarnokd", "10/05/16, 08:11:35 AM", "This PR adds `Observable.flatMapCompletable(Function<T, CompletableSource>)` and `Flowable.flatMapCompletable(Function<T, CompletableSource>)`, both resulting in `Completable` (+ support for fusing back to the original type).\n\n**Edit**\n\nAdded `flatMapMaybe` and `flatMapSingle` variants to both `Flowable` and `Observable`.", "NaN"], ["4668", "Limit gradle memory to avoid kill 137", "David Karnok", "akarnokd", "10/05/16, 08:59:36 AM", "I read that decreasing the memory amount Gradle itself uses may help avoid such kills, let's try it.", "NaN"], ["4669", "2.x: Fix javadoc for Single.flatMapObservable", "Niklas Baudy", "vanniktech", "10/05/16, 10:47:32 AM", "- wrong return type was described\n- some git merging information was added", "NaN"], ["4672", "2.x Remove Function from transformer interfaces to allow a single obj\u2026", "Dale King", "dalewking", "10/06/16, 02:17:12 PM", "This pull request removes Function from the super type of the various Transformer interfaces. While these are technically functions, the problem is that if they all extend Function then you cannot have a single object instance that can implement multiple Transformer interfaces. The goal is to be able to call a function that returns an object that can be passed to Observable.compose or Single.Compose and so on.\n\nThis was an issue with RxLifecycle project. See this for more info: https://github.com/trello/RxLifecycle/issues/39", "NaN"], ["4674", "2.x: add javadoc and unit test to the recently changed XTransformers", "David Karnok", "akarnokd", "10/06/16, 07:05:37 PM", "This PR adds the javadoc and crash-testing for each XTransformer interface changed by #4672.", "NaN"], ["4676", "1.x: Make identity function a singleton.", "Jake Wharton", "JakeWharton", "10/06/16, 07:08:58 PM", "NaN", "NaN"], ["4677", "1.x: Cleanups from making NotificationLite stateless.", "Jake Wharton", "JakeWharton", "10/06/16, 07:08:15 PM", "NaN", "NaN"], ["4678", "2.x: fix flatMapX calling SpscLinkedArrayQueue.offer concurrently", "David Karnok", "akarnokd", "10/06/16, 08:55:18 PM", "I forgot to synchronize the offer part of the new flatMapX operators (since of course, Spsc is for single producer only but here there could be concurrent non fast-path queueing of values). \n\n(There is an MpscLinkedArrayQueue in JCTools but I'm not confident in it and don't want to use MpscLinkedQueue due to the node allocation.)", "NaN"], ["4681", "2.x: Fix Flowable + Single elementAt and elementAtOrError operators on empty sources", "Niklas Baudy", "vanniktech", "10/07/16, 09:48:01 AM", "This will fix #4680\n- elementAtOrError(1) on an empty source just leaves the new Single hanging without signalling onError()\n- elementAt(1) on an empty source just leaves the Maybe hanging without signalling onComplete()\n- I also noticed that elementAt() with a default value on an empty source did not work either.", "NaN"], ["4682", "Update Mockito to 2.1.0", "Tim van der Lippe", "TimvdLippe", "10/10/16, 07:22:04 AM", "There are no changes from RC-2 to 2.1.0, so should be good to go \ud83d\ude04 ", "NaN"], ["4685", "2.x: Test static from methods and add Maybe.fromSingle & fromCompletable", "Niklas Baudy", "vanniktech", "10/11/16, 07:29:01 AM", "- add Maybe.fromSingle by reusing MaybeFromSingle\n- add Maybe.fromCompletable by resuing MaybeFromCompletable\n- remove anonymous classes in various operators\n- add tests for\n  - Completable.fromAction()\n  - Completable.fromCallable()\n  - Completable.fromObservable()\n  - Completable.fromPublisher()\n  - Completable.fromRunnable()\n  - Completable.fromSingle()\n  - Maybe.fromAction()\n  - Maybe.fromCallable()\n  - Maybe.fromCompletable()\n  - Maybe.fromRunnable()\n  - Maybe.fromSingle()\n  - Single.fromCallable()", "NaN"], ["4686", "2.: Fix flatMapX over-cancellation in case of an inner error", "David Karnok", "akarnokd", "10/10/16, 04:11:05 PM", "A non-delayed error set the cancellation flag and thus any subsequent drain would just quit instead of delivering the error.\n\n(And while I'm at it, I'll try to figure out a way to not get killed by OOMKiller).\n\nReported in #4684.", "NaN"], ["4687", "2.x: Add Observable.rangeLong & Flowable.rangeLong", "Niklas Baudy", "vanniktech", "10/11/16, 03:29:22 PM", "Will fix #4683\n- adds Observable.rangeLong()\n- adds Flowable.rangeLong()\n\nboth implementations are copied same for the unit tests.\n\nWhat should we do about the range overflow check? We could use BigDecimal to check that.", "NaN"], ["4689", "2.x: coverage and cleanup 10/11-1", "David Karnok", "akarnokd", "10/11/16, 03:24:33 PM", "This PR enhances the coverage of `Maybe` operators (run out of time for this batch, 5 remaining) and fixes an NPE bug in `Maybe.doOnEvent` due to not saving the `Disposable`. Some inner receivers no longer implement `Disposable` as `isDisposed` is unreachable and not really necessary.\n\nIn addition `Maybe.toCompletable` was removed in favor of `Maybe.ignoreElement()`.", "NaN"], ["4690", "2.x: BaseTestConsumer add assertValueAt(index, Predicate<T>) ", "Niklas Baudy", "vanniktech", "10/11/16, 04:40:33 PM", "Fixes #4688\n- adds assertValueAt(index, Predicate) to BaseTestConsumer", "NaN"], ["4692", "2.x: coverage, fixes and cleanup 10/11-2", "David Karnok", "akarnokd", "10/12/16, 07:04:56 AM", "- cover remaining `Maybe` operators\n- cover `Single` operators\n- cover some of the `Completable` operators\n- fix missing `onSubscribe` calls\n- compact a few operator implementations\n- fix the order of inner Throwables on certain `CompositeException` emissions", "NaN"], ["4693", "1.x: improve timer javadoc", "Dave Moten", "davidmoten", "10/12/16, 07:06:54 AM", "Javadoc was correct but not very helpful. Had to look further down in the javadoc to the `@return` section to see what value was emitted.", "NaN"], ["4694", "2.x - improve timer javadoc", "Dave Moten", "davidmoten", "10/12/16, 07:07:28 AM", "Make it clearer what gets emitted (0L).", "NaN"], ["4695", "2.x: CompositeException fix order of Exceptions", "Niklas Baudy", "vanniktech", "10/12/16, 09:35:31 AM", "After looking at #4692 I found a few more exceptions which were passed in the wrong order to CompositeException.", "NaN"], ["4696", "2.x: coverage and cleanup 10/12-1", "David Karnok", "akarnokd", "10/12/16, 03:50:20 PM", "- Add coverage to remaining `Completable` operators\n- Fix inner Throwable order for `CompletablePeek`\n- Compact/rewrite a few operators", "NaN"], ["4699", "2.x: Clean up null usages by using ObjectHelper.requireNonNull", "Niklas Baudy", "vanniktech", "10/12/16, 09:57:09 PM", "Instead of using an if statement to check for `null`, `ObjectHelper.requireNonNull` will be used now. This reduces a lot of duplicated code. Also I found a few places (mostly zip operators) where the wrong Throwable was being onError'd.\n\nIn addition for one of the Completable operators the CompositeException call has been fixed. In addition I found another one that was wrong.", "NaN"], ["4701", "2.x: coverage and cleanup 10/13-1", "David Karnok", "akarnokd", "10/14/16, 06:58:46 AM", "Improve coverage of `Subject`s and `FlowableProcessor`s, remove impossible paths, cleanup code.", "NaN"], ["4705", "2.x: coverage, cleanup fixes 10/14-1", "David Karnok", "akarnokd", "10/14/16, 04:59:37 PM", "- improve coverage of `Observable` operators\n- remove impossible or unused code paths\n- fix `Observable.flatMap`'s dispose behavior and error accumulation", "NaN"], ["4706", "2.x: cleanup, coverage, fixes 10/14-2", "David Karnok", "akarnokd", "10/14/16, 10:31:08 PM", "- more `Observable` operator coverage\n- enable fusion with `filter` and `fromCallable`\n- change order of size parameter in timed `buffer` and `window` operators\n- fix minor mistakes in operators", "NaN"], ["4707", "2.x: Fix Flowable.elementAt on empty sources. Plus sync tests", "Niklas Baudy", "vanniktech", "10/15/16, 12:44:59 PM", "- fixes Flowable.elementAt on an empty source \n- sync tests between Observable & Flowable elementAt", "NaN"], ["4708", "2.x: coverage, fixes, cleanup 10/15-1", "David Karnok", "akarnokd", "10/15/16, 05:17:54 PM", "- improve coverage of `Observable` operators\n- remove unnecessary code paths\n- fix `publish(Function)` latecommer behavior\n- remove `bufferSize` overloads of `publish` as there is no need to buffer anything for an `Observable`\n- simplify `Observable.publish`", "NaN"], ["4710", "2.x: Remove checked exceptions from transformer interfaces.", "Jake Wharton", "JakeWharton", "10/19/16, 04:01:23 PM", "These functions are for transforming the stream shape, not doing work. Any operation that would throw a checked exception should happen inside the stream, not when shaping it.\n\nCloses #4709.", "NaN"], ["4711", "2.x: Decouple stream operators from Function interface.", "Jake Wharton", "JakeWharton", "10/15/16, 06:36:12 PM", "This allows a single class to implement itself as an operator for all stream types. A similar change was recently made to the transformer types.\n\nFrom https://github.com/ReactiveX/RxJava/pull/4672#issuecomment-252417909.", "NaN"], ["4712", "2.x: coverage, cleanup, fixes 10/15-2", "David Karnok", "akarnokd", "10/16/16, 09:23:22 AM", "- more `Observable` coverage\n- make `Observable.sequenceEqual` return `Single<Boolean>`\n- reimplement `Observable.distinct()`\n- fix `Observable.combineLatest` error management\n- remove or compact unused code paths\n- fix `Observable.flatMap` maxConcurrency behavior with scalars, use of unbounded queue\n- fix `Observable.timeInterval` not saving the `Disposable` ", "NaN"], ["4714", "2.x: test sync from Observable to Flowable 10/16-1", "David Karnok", "akarnokd", "10/17/16, 06:58:52 AM", "- copy the recent unit tests from `Observable` to `Flowable`\n- fix the same bugs\n- perform the same cleanups\n- compact the same operators\n- factor out fusion method and constants to `QueueFuseable`\n- have `Flowable.toList(Callable)` return `Single`", "NaN"], ["4716", "1.x: fix subscribe(Action1 [, Action1]) to report isUnsubscribed", "David Karnok", "akarnokd", "10/17/16, 05:16:45 PM", "The lambda version didn't report `isUnsubscribed()` as before because of the removal of the `SafeSubscriber` wrapping. This PR makes sure it reports consistently again.\n\nRepored in: #4715\n\nNote that there is no `unsafeSubscribe(SingleSubscriber)` so a regular `subscribe(SingleSubscriber)` by default won't report `isUnsubscribed() == true` unless the implementation of `onSuccess` and `onError` - controlled by the user - doesn't call `unsubscribe` on itself.", "NaN"], ["4717", "2.x: coverage and cleanup 10/17-1", "David Karnok", "akarnokd", "10/17/16, 05:15:53 PM", "A small set of coverage and cleanup of `Observable` operators.", "NaN"], ["4718", "2.x: Distinct Operator - delegate null Collection down to onError", "Niklas Baudy", "vanniktech", "10/17/16, 05:30:04 PM", "- returning null as a Collection in the callable didn't go to onError\n- adopted flowable & observable", "NaN"], ["4720", "2.x: remove variance from the input source of retryWhen", "David Karnok", "akarnokd", "10/17/16, 09:44:09 PM", "The variance of the `retryWhen` operator doesn't infere properly with java 8. This PR removes the `? extends` from the function's input `Observable`.\n\nReported in: https://twitter.com/HansWurst315/status/788108336285753344", "NaN"], ["4723", "2.x: coverage, fixes, enhancements, cleanup 10/18-1", "David Karnok", "akarnokd", "10/18/16, 04:20:47 PM", "- improve coverage of more `Observable` operators\n- reduce allocation of `ConnectableObservable.connect(Consumer)` and `ConnectableFlowable.connect(Consumer)`\n- enable fusion on `Observable.observeOn`\n- fix fusion of `Observable.just`\n- remove `flatMapIterable(Function, int)` overload and have `flatMapIterable(Function)` use the flatten operator.\n- fix `Observable.replay()` potential emission before `onSubscribe` call", "NaN"], ["4725", "1.x: remove AsyncEmitter deprecations", "Dave Moten", "davidmoten", "10/19/16, 07:10:51 AM", "discussed in #4580", "NaN"], ["4729", "Merge FlowableEmitter.BackpressureMode into BackpressureStrategy", "Adrian Pascu", "adipascu", "10/19/16, 11:50:36 AM", "This is the implementation of #4727 ", "NaN"], ["4730", "2.x: coverage, fixes, cleanup, copy to Flowable 10/19-1", "David Karnok", "akarnokd", "10/19/16, 03:47:22 PM", "- Explain `Observable.observeOn` unboundedness\n- improve `Observable` operator coverage\n- copy test methods over to `Flowable` operators\n- apply fixes to `Flowable` operators\n- add missing calls to `RxJavaPlugins.onError()`\n- add more time to RS TCK test of `observeOn`", "NaN"], ["4731", "2.x: Delegate null Collections down to onError in toList", "Niklas Baudy", "vanniktech", "10/19/16, 07:25:52 PM", "- if null from a collection supplier is returned delegate to onError\n- adapted Flowable & Observable\n- unified exception message", "NaN"], ["4732", "2.x: coverage, minor fixes, cleanup 10/19-2", "David Karnok", "akarnokd", "10/20/16, 06:45:03 AM", "- Improve coverage of a few `Observable` operators\n- move some classes into their solo user parent class\n- `checkDisposed` now calls `dispose`/`cancel` twice to have better conditional coverage of those methods", "NaN"], ["4736", "2.x: cleanup, fixes, coverage 10/20-1", "David Karnok", "akarnokd", "10/20/16, 03:31:32 PM", "- Finished covering `Observable` operators to a reasonable level (the remaining are either impossible or only reachable by probabilistic race)\n- Synced operator coverage between `Observable` and `Flowable`\n- Started covering `Flowable` operators\n- Cleaning up a few `Flowable` operators (cache, concatMap)\n- fix `onBackpressureBuffer(long, Action, BufferOverflowStrategy)` return type\n- fix `concatMapDelayError` wrong barrier mode selected", "NaN"], ["4738", "2.x: coverage, fixes, cleanup 10/20-2", "David Karnok", "akarnokd", "10/20/16, 08:39:15 PM", "I cut this short so there is time for the **2.0.0-RC release preparations**.\n- Introduce `SimplePlainQueue` where `poll` doesn't throw, avoiding the need for try-catches where the queue is one of the standard lock-free queues.\n- Fix `FlatMap` error, cancellation and resource management.\n- Coverage of some `Flowable` operators\n- Removal of impossible and unused code paths.", "NaN"], ["4740", "1.x: Error when tracking exception with unknown cause", "py - Pierre Yves Ricau", "pyricau", "10/22/16, 05:58:53 PM", "#4737", "NaN"], ["4742", "2.x: coverage, fixes, cleanup 10/21-1", "David Karnok", "akarnokd", "10/21/16, 03:47:07 PM", "- fix `Flowable.materialize()` terminal signal emission in face of backpressure\n- fix `Flowable.onErrorReturn()` terminal signal emission in face of backpressure\n- cleanup `Flowable.publish()` and enable operator fusion on its input\n- fix `Flowable.flatMapSingle()` and `Flowable.flatMapMaybe()` termination detection\n- compact `Flowable.blockingSubscribe()` and `Observable.blockingSubscribe()`\n- compact `Flowable.subscribeOn()`", "NaN"], ["4744", "2.x: Fixed Javadoc for Disposables.fromFuture", null, "falcon71", "10/21/16, 05:19:15 PM", "NaN", "NaN"], ["4745", "1.x: Remove unused helper class previously used by extend().", "Jake Wharton", "JakeWharton", "10/21/16, 05:41:38 PM", "NaN", "NaN"], ["4747", "2.x: distinctUntilChanged to store the selected key instead of the value", "David Karnok", "akarnokd", "10/21/16, 06:13:49 PM", "Fix `distinctUntilChanged` to store the selected key instead of the input value.\n\nReported in #4743 ", "NaN"], ["4749", "New 2.x marble diagrams", "David Gross", "DavidMGross", "10/21/16, 09:23:38 PM", "Adds some new marble diagrams and adjusts some for operators that now return Single/Maybe/Completable where they used to return Observable in 1.x.", "NaN"], ["4751", "2.x: fix Flowable.concatMapEager hang due to bad request management", "David Karnok", "akarnokd", "10/22/16, 07:40:18 AM", "`Flowable.concatMapEager`'s drain loop when encountering a finished inner jumped back to the beginning of the loop but disregarded the potentially changed request amount and just stopped emitting. The fix is to use the typical request management approach of reading the current request at the beginning of the loop and then committing the emission amount before trying to leave the loop.\n\nRelated: #4620\n\nIn addition `TestHelper.assertError` has been changed to attach the whole unexpected exception to the `AssertionError`. ", "NaN"], ["4752", "Add more new marble diagrams & update old ones", "David Gross", "DavidMGross", "10/21/16, 10:56:34 PM", "NaN", "NaN"], ["4754", "2.x: Remove some unused fields", "Niklas Baudy", "vanniktech", "10/22/16, 12:40:58 PM", "Remove some unused fields that are either\n- present in their parent class\n- not set", "NaN"], ["4755", "2.x: fix window-timed test leaking an MBE that affects unrelated tests", "David Karnok", "akarnokd", "10/22/16, 05:35:30 PM", "The `FlowableWindowWithTimeTest.restartTimerMany` did not wait for its source to receive the cancellation and subsequent tests could delay this cancel.\n\nRelated: #4750", "NaN"], ["4757", "1.x: Add cache() to Single", "Erick C", "ekchang", "10/24/16, 10:14:58 PM", "#4702\n\nUses the same test as the Observable one.", "NaN"], ["4760", "2.x: Add Single.fromObservable(ObservableSource)", "Niklas Baudy", "vanniktech", "10/24/16, 01:55:58 PM", "- adds an overload to create a Single from an ObservableSource", "NaN"], ["4761", "2.x: cleanup, fixes, coverage 10/24-1", "David Karnok", "akarnokd", "10/24/16, 03:17:16 PM", "- Remove unused or unnecessary code paths.\n- Fix cancellation bugs in `Flowable` operators.\n- Unify `MapNotification`, `Materialize`, `OnErrorReturn` last element backpressure under the same helper class.\n- Move `FlowableBlockingIterator` into `FlowableBlockingIterable`.\n- Reuse parts of `FlowableSequenceEqual` in `FlowableSequenceEqualSingle`.", "NaN"], ["4763", "2.x: cleanup & coverage 10/24-2", "David Karnok", "akarnokd", "10/25/16, 07:51:05 AM", "- better coverage of `Flowable` operators\n- cleanup of operator internals\n- better coverage of standard Schedulers.\n- rewrite of `takeUntil` to avoid `onSubscribe()` races.", "NaN"], ["4764", "1.x: zip - check local boolean before volatile in logical and", "Dave Moten", "davidmoten", "10/25/16, 07:51:47 AM", "Minor perf improvement.  Local boolean variable check should be placed before volatile check in `&&` operation.", "NaN"], ["4766", "2.x: cleanup, fixes and coverage 10/25", "David Karnok", "akarnokd", "10/25/16, 02:44:40 PM", "This is the last part of my dedicated coverage improvement run.\n- Update code paths and remove unnecessary and unused parts.\n- Fix `skipUntil` lifecycle and concurrency properties.\n- Fix `concatMapEager` error management.\n- `Flowable.scan(T, BiFunction)` now emits the initial value only when the upstream signals an event. This has the effect that even if there is a downstream request, the initial value won't get emitted. This change reduces the overhead of the operator greatly.", "NaN"], ["4767", "2.x: Rename BackpressureStrategy.NONE to MISSING", "Artur Dryomov", "arturdryomov", "10/25/16, 04:21:58 PM", "As discussed in #4643.", "NaN"], ["4769", "1.x: Add note to SingleSubscriber doc about unsubscribe invocation", "Alexey Agapitov", "marwinxxii", "10/26/16, 03:43:55 PM", "Add note to SingleSubscriber doc about unsubscribe invocation in onSuccess and onError.\n\nI wanted to clarify this in the doc after reading #4716.", "NaN"], ["4770", "2.x: allow subscribeOn to work with blocking create", "David Karnok", "akarnokd", "10/26/16, 05:16:04 PM", "When running a blocking emission in `Flowable.create` with `subscribeOn`, the default behavior of `subscribeOn` is to schedule downstream requests onto the same thread. Unfortunately, the blocking emission prevents the backing threadpool the `create` from accumulating that request amount leading to either buffer bloat or dropped emissions till the very end of the sequence.\n\nThis PR introduces a `nonScheduledRequests` parameter to `subscribeOn` that simply calls the upstream's `request()` from the caller's thread without scheduling it. The parameter is not exposed to the surface API but the `subscribeOn` operator does an `instanceof` check to see if the upstream type is `FlowableCreate`.\n\nNote that this requires a direct upstream `create` and any intermediate operator re-enables the default behavior. It is possible to traverse the upstream graph to locate a `FlowableCreate` but it has relatively high cost and thus penalizing all `subscribeOn` usages.\n\nRelated: #4735", "NaN"], ["4777", "1.x: support Observable.test()", "Dave Moten", "davidmoten", "11/09/16, 09:33:54 AM", "The new method chaining `TestSubscriber` in 2.x is too good not to have in 1.x as well (while I wait for 2.x to mature and to make my existing unit tests less verbose).\n\n``` java\nObservable\n  .just(1)\n  .test()\n  .assertValue(1)\n  .assertCompleted();\n```\n\n`Observable.test()` returns a `TestSubscriber2` that wraps a `TestSubscriber` and enables method chaining where it can.\n\nI've added tests to get to 100% test coverage though I've been pretty slap-dash about testing some of the details (for example I haven't tested that `awaitXXX` really does wait for stuff).\n\nI've noted it as `@since 1.2.3` but can update to 1.2.2 if you are happy to squeak it into the release.", "NaN"], ["4780", "Add Javadoc 2.0.0 final", "David Karnok", "akarnokd", "10/29/16, 11:55:42 AM", "Update to 2.0.0 final javadocs.", "NaN"], ["4783", "2.x: fix Observable.repeatWhen & retryWhen not disposing the inner", "David Karnok", "akarnokd", "10/31/16, 02:05:56 PM", "The `Observer` that is subscribing to the `Observable` returned by the handler function was not properly linked to the disposing of the end Observer. This PR fixes it by making that `Observer` do async `Disposable` management and make sure the end `Observer` receives a disposable list with both the main and the handler `Disposable`s.\n\nThe `Flowable` versions worked properly but added unit tests to them regardless.\n\nReported in #4782.", "NaN"], ["4791", "1.x: Add null check to Observable.switchIfEmpty", "Andrey Bushmin", "ortex", "11/01/16, 02:32:04 PM", "#4762", "NaN"], ["4793", "2.x: Fix exceptions in javaDoc", "Dmitriy Zaitsev", "DmitriyZaitsev", "11/02/16, 12:38:06 PM", "I've corrected some javadocs for methods that check arguments using `ObjectHelper.requireNonNull(arg, \"message\")`. It throws `NullPointerException` instead of `IllegalArgumentException`, but as we know copy-pasting is an insidious thing. ;)", "NaN"], ["4798", "documentation updates", "Alexander Zhdanov", "qwert2603", "11/03/16, 03:25:29 PM", "NaN", "NaN"], ["4803", "Fix typo", "Jiawen Geng", "gengjiawen", "11/04/16, 08:11:19 AM", "NaN", "NaN"], ["4810", "Subtle change in Completable's documentation for retryWhen.", "Alberto Ballano", "aballano", "11/04/16, 09:46:28 PM", "Small change as discussed in #4809 ", "NaN"], ["4815", "fix typo in javadoc of Maybe::toSingle", null, "tbcs", "11/06/16, 05:14:50 PM", "NaN", "NaN"], ["4819", "2.x: Observable.repeatWhen fix for onError", "David Karnok", "akarnokd", "11/07/16, 06:58:50 PM", "`Observable.repeatWhen` was not properly signalling an upstream `onError` case. The `Flowable.repeatWhen` works as expected.", "NaN"], ["4824", "1.x: update AssertableSubscriber API and add Javadoc", "David Karnok", "akarnokd", "11/10/16, 08:13:06 AM", "This PR adds 3 convenience methods - `assertResult`, `assertFailure` and `assertFailureAndMessage` from 2.x, makes the `assertValueCount` fluent to allow chaining a subsequent `requestMore` call and adds the missing JavaDoc to the `AssertableSubscriber` interface.", "NaN"], ["4826", "Schedule when bug fix", "George Campbell", "abersnaze", "11/09/16, 10:55:03 PM", "In using this in production we found a bug where some actions were dropped.  I've tracked it down to the premature onCompleted and unsubscription of the completable that represents the scheduled action causes the future to get canceled before it is started.\r\n\r\nThe fix was to delay the onCompleted until the action was truly done.\r\n\r\nI did the PR as two commits because the first one is changing all the tabs to spaces! Look at the second commit for the actual functional difference.", "NaN"], ["4827", "Porting the Scheduler.when operator from 1.x to 2.x", "George Campbell", "abersnaze", "11/10/16, 02:26:30 PM", "In fixing the Scheduler.when in 1.x I noticed that it hadn't been ported to 2.x. This PR tries to fix that translating Observable to Flowable and Subscription to Disposable. This also includes the fix from 1.x", "NaN"], ["4828", "changing inner classes to package-private.", "George Campbell", "abersnaze", "11/10/16, 08:01:36 AM", "to fix issue in #4826", "NaN"], ["4830", "1.x: Completable.doAfterTerminate to run after onError as well", "David Karnok", "akarnokd", "11/10/16, 02:22:25 PM", "DoAfterTerminate was intended to call the callback after either onCompleted or onError but somehow missed that behavior in 1.x.\r\n\r\nRelated: #4822", "NaN"], ["4831", "2.x: add doFinally for handling post-terminal or cancel cleanup", "David Karnok", "akarnokd", "11/10/16, 02:23:11 PM", "This PR adds the `Flowable.doFinally` method that executes an action when the upstream terminates or the downstream cancels (but only once per subscriber). Formerly, one could use `doAfterTerminate` + `doOnCancel` together but no support for making sure only one executed the cleanup action.\r\n\r\nBased on the feedback, the rest of the base reactive types can get the same operator a bit later.", "NaN"], ["4832", "2.x: add doFinally to the rest of the reactive base classes", "David Karnok", "akarnokd", "11/10/16, 05:16:55 PM", "This PR adds the `doFinally` operator to the rest of the base reactive classes.", "NaN"], ["4833", "2.x: add `Flowable.doAfterNext` operator + 3 doX TCKs", "David Karnok", "akarnokd", "11/11/16, 08:04:47 AM", "This PR adds the `Flowable.doAfterNext` operator which calls a `Consumer` after the call to `downstream.onNext()` with the same value.\r\n\r\nIn addition, `doOnNext`, `doAfterNext` and `doFinally` received their Reactive-Streams TCK tests.", "NaN"], ["4835", "2.x: add doAfterNext & doAfterSuccess to the other types", "David Karnok", "akarnokd", "11/11/16, 05:11:44 PM", "This PR adds `Observable.doAfterNext`, `Maybe.doAfterSuccess` and `Single.doAfterSuccess`.", "NaN"], ["4838", "2.x: add fluent requestMore to TestSubscriber", "David Karnok", "akarnokd", "11/11/16, 07:01:39 PM", "This PR just adds the `TestSubscriber.requestMore` that calls `request` and returns `this` for method chaining purposes.", "NaN"], ["4839", "2.x: javadoc: fix wording of some operators, remove @throws implications", "David Karnok", "akarnokd", "11/11/16, 11:10:16 PM", "This PR fixes some javadoc mistakes with operators such as `single`, `first`, `last` and co and removes `@throws` tags from operators since those don't throw it when the method is invoked.", "NaN"], ["4841", "1.x: replace non-serializable value of OnNextValue with its toString", "David Karnok", "akarnokd", "11/12/16, 06:31:35 PM", "When certain operators crash, they attach the current value to the exception via `OnErrorThrowable.addValueAsLastCause`, however, the value may not be serializable and the Throwable itself is, that causes a serialization exception.\r\n\r\nThis PR replaces such values with their `String.valueOf` representation or the crash message if `toString` failed on that object.\r\n\r\nThis was reported in #4562 with the suggestion of making the internal field `transient`. The problem with that is that upon deserialization, the field is null and there is no way of knowing if the original value was really null or just not serializable. Using `String.valueOf` at least gives a chance to know it was non-null and gets across some information about the original value.", "NaN"], ["4842", "2.0.1 javadoc", "David Karnok", "akarnokd", "11/12/16, 05:11:24 PM", "Update the gh-pages javadoc to 2.0.1", "NaN"], ["4846", "1.x: remove ObjectPool, code style cleanups", "David Karnok", "akarnokd", "11/14/16, 06:12:50 PM", "This PR removes the `ObjectPool` and `SynchronizedQueue`  as their utility now seems surpassed.\r\n\r\nIn addition, this PR contains a bunch of code style cleanups. Use the `?w=1` [parameter to hide whitespace changes](https://github.com/ReactiveX/RxJava/pull/4846/files?w=1).\r\n\r\nOther changes:\r\n\r\n  - fix finality of `BackpressureOverflow`\r\n  - introduce the system parameter for io scheduler time-to-live counter: `rx.io-scheduler.keepalive`\r\n  - mention scheduler system parameters in the `Schedulers` javadoc", "NaN"], ["4849", "1.x: fix Completable.concat & merge hanging in async situations", "David Karnok", "akarnokd", "11/14/16, 07:42:38 PM", "This PR fixes the hang in `Completable.concat(Observable)` and `Completable.merge(Observable)` mainly due to using `subscribe` instead of `unsafeSubscribe`. The underlying problem was that `SafeSubscriber` unsubscribed the dowstream consumer which cancelled the outstanding elements of `range`.\r\n\r\nIn addition, I've upgraded the `concat(Observable)` to use an up-to-date concatenation algorithm and more compact memory footprint.", "NaN"], ["4851", "1.x: add Single.fromEmitter", "David Karnok", "akarnokd", "11/15/16, 09:19:51 PM", "This PR adds the `Single.fromEmitter` operator, driving a `SingleEmitter` instance similar to `Observable.fromEmitter` and `Completable.fromEmitter`.", "NaN"], ["4852", "1.x: Single::takeUntil CancellationException message enh.", "David Karnok", "akarnokd", "11/15/16, 09:26:49 PM", "This PR modifies the `CancellationException` message to include the operator name and source type.\r\n\r\nRelate: #4756", "NaN"], ["4858", "2.x: add Maybe.flatMapSingleElement returning Maybe", "David Karnok", "akarnokd", "11/18/16, 07:57:52 AM", "This PR adds the `Maybe.flatMapSingleElement()` operator that returns a `Maybe` and completes if the source completes unlike `flatMapSingle` where the returned `Single` signals `NoSuchElementException`.\r\n\r\nRelated #4857", "NaN"], ["4873", "2.x: TestObserver shouldn't clear the upstream disposable on terminated", "David Karnok", "akarnokd", "11/22/16, 05:30:15 PM", "`TestObserver` replaced the upstream's `Disposable` with the disposed-sentinel when it got a terminal event (unlike `TestSubscriber`) and there seems to be a need for triggering `dispose` in some upstream even after that. This PR changes this behavior and also updates unit tests that expect `isDisposed()` true without actually calling `dispose()`.\r\n\r\nRelated #4872 ", "NaN"], ["4874", "Remove empty list item from `io.reactivex.package-info.java`", "Mike Kobit", "mkobit", "11/23/16, 08:23:46 AM", "NaN", "NaN"], ["4877", "2.x: Apply missing RxJavaPlugins.onAssembly on ops", "David Karnok", "akarnokd", "11/23/16, 03:00:05 PM", "This PR adds the missing calls to `RxJavaPlugins.onAssembly` on a few operators.", "NaN"], ["4881", "Add CheckReturnValue annotation", "Niklas Baudy", "vanniktech", "11/26/16, 12:41:37 PM", "First draft on this.\r\n\r\nSo far I have only annotated `subscribeWith()` and `test()` methods.\r\n\r\nI checked this against Error Prone and their [check](http://errorprone.info/bugpattern/CheckReturnValue) is able of picking up the RxJava annotation.\r\n\r\nHow do you feel if I extend `BaseTypeAnnotations` to test for `@CheckReturnValue` too?\r\n\r\nRelated #4878 ", "NaN"], ["4882", "2.x: Common test classes for Processors.", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "11/24/16, 01:15:56 PM", "Caused by https://github.com/JakeWharton/RxRelay/pull/20#discussion_r89308736", "NaN"], ["4884", "1.x: enable TestScheduler with nanosecond periodic scheduling", "David Karnok", "akarnokd", "11/28/16, 08:07:53 AM", "The default periodic scheduling code accessed the current worker time as milliseconds which prevents running microsecond and nanosecond scale unit tests with TestScheduler as its internal nanosecond resolution time is always converted, losing precision.\r\n\r\nThis PR introduces the internal `SchedulePeriodicHelper` class, moves the default scheduling code into a static method and defines a `NowNanoSupplier` interface that is now implemented by TestSchedulerWorker to return the current nano time. The default `Worker.schedulePeriodically` delegates to this static method and given a `null` `noNanoSupplier` the `Worker.now()` is converted to nanoseconds as usual.\r\n\r\nRelated: #4883", "NaN"], ["4885", "2.x: dedicated reduce() op implementations", "David Karnok", "akarnokd", "11/28/16, 08:08:13 AM", "This PR adds dedicated operator implementations to\r\n\r\n  - `Flowable.reduce(seed, reducer)` (returns `Single`),\r\n  - `Flowable.reduceWith(seedSupplier, reducer)`  (returns `Single`),\r\n  - `Observable.reduce(reducer)` (returns `Maybe`),\r\n  - `Observable.reduce(seed, reducer)`  (returns `Single`) and\r\n  - `Observable.reduceWith(seedSupplier, reducer)`  (returns `Single`)\r\n\r\ninstead of using `scan().takeLast(1)` (`Flowable.reduce(reducer)` already had a dedicated operator).\r\n\r\nComparison (Celeron 1005M, 4GB RAM, Windows 7 x64, Java 8u112, JMH 1.16):\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/20644317/a411f9ba-b430-11e6-8fa7-0db5195f4ddd.png)\r\n\r\nThe new `ReducePerf` benchmark does a simple sum over a list of integer values. Unfortunately, this creates a lot of garbage for longer sequences (plus the CPU/RAM is not really suited for such benchmarks; the `flowMaybe` lines should be roughly the same since the code didn't change but there is a significant run-to-run variance).", "NaN"], ["4890", "1.x: add Issue and PR \"welcome\" templates", "David Karnok", "akarnokd", "11/28/16, 02:41:00 PM", "This PR adds a basic GitHub template that is presented for new Issues and PRs. This helps me maintain focus on important issues rather than questions that can be googled or asked on StackOverflow.", "NaN"], ["4891", "2.x: Issue and PR \"welcome\" templates", "David Karnok", "akarnokd", "11/28/16, 02:52:58 PM", "This PR adds a basic GitHub template that is presented for new Issues and PRs once 2.x becomes the default branch, similar to #4890.", "NaN"], ["4892", "Update CHANGES.md", "chanx2", "chanx2", "11/28/16, 12:14:19 PM", "fix URL typo", "NaN"], ["4893", "2.x: fix compilation errors when using Java 8", "David Karnok", "akarnokd", "11/28/16, 09:07:44 PM", "This PR fixes a few compilation errors that happen when the project is compiled with Java 8 target (Eclipse is even slower then).\r\n\r\nSome covariant casts don't work in 8 and some type arguments inferred as Object get inferred as a more concrete type in 8. The slight drawback is that with the changes, Java 6 compilation needs extra suppressions.", "NaN"], ["4899", "2.x: FlowableScanSeed - prevent multiple terminal events", "Dave Moten", "davidmoten", "12/03/16, 04:28:31 PM", "This PR\r\n* prevents multiple terminal events being emitted when the scan function throws\r\n* prevents processing of a later `onNext` if the previous `onNext` processing resulted in an error emission\r\n* increases coverage to 100% of `FlowableScanSeed`\r\n\r", "NaN"], ["4900", "2.x: Fix typo in DisposableHelper", "Niklas Baudy", "vanniktech", "12/03/16, 09:23:50 PM", "Fixed a typo in DisposableHelper. `curren` -> `current`", "NaN"], ["4901", "2.x: FlowableScan - prevent multiple terminal emissions", "Dave Moten", "davidmoten", "12/03/16, 09:41:40 PM", "For scan without seed this PR\r\n* prevents multiple terminal events being emitted when the scan function throws\r\n* prevents processing of a later `onNext` if the previous `onNext` processing resulted in an error emission\r\n* ensures post terminal errors are reported to `RxJavaPlugins` error handler\r\n\r\nFor scan with seed (forgot this one in the last PR)\r\n* ensures post terminal errors are reported to `RxJavaPlugins` error handler", "NaN"], ["4903", "2.x: doAfterNext - prevent post-error calls to consumer", "Dave Moten", "davidmoten", "12/03/16, 10:03:35 PM", "This PR\r\n* prevents further calls to the consumer if an error has been thrown", "NaN"], ["4904", "2.x: Observable.scan, no seed - fix post-terminal behaviour", "Dave Moten", "davidmoten", "12/04/16, 09:07:53 AM", "This PR\r\n* ensures that scan function throwing cannot result in two terminal events (error or complete) and that additional error event is reported to `RxJavaPlugins` error handler.\r\n* ensures that scan function if throws is not called again", "NaN"], ["4907", "Use t instead of value to allow for IDE naming", "John Carlson", "Jawnnypoo", "12/07/16, 07:53:21 AM", "Naming the value `t` instead of `value` allows the IntelliJ to intelligently name the variable based on the type when autocompleting. \r\n\r\n\r\nBefore:\r\n```\r\nSingle.just(new Dog()).subscribe(new SingleObserver<String>() {\r\n            @Override\r\n            public void onSubscribe(Disposable d) {\r\n                \r\n            }\r\n\r\n            @Override\r\n            public void onSuccess(Dog value) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onError(Throwable e) {\r\n\r\n            }\r\n        });\r\n```\r\nAfter:\r\n```\r\nSingle.just(new Dog()).subscribe(new SingleObserver<String>() {\r\n            @Override\r\n            public void onSubscribe(Disposable d) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onSuccess(Dog dog) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void onError(Throwable e) {\r\n\r\n            }\r\n        });\r\n```", "NaN"], ["4908", "Use t instead of value to allow for IDE naming 1.x", "John Carlson", "Jawnnypoo", "12/07/16, 07:53:50 AM", "Same as https://github.com/ReactiveX/RxJava/pull/4907 but for 1.x. Most places already named the variable `t`, there were just a few missing.\r", "NaN"], ["4911", "2.x: fix & update Observable.repeatWhen and retryWhen (again)", "David Karnok", "akarnokd", "12/09/16, 05:24:31 PM", "This PR fixes the `Observable.repeatWhen` not completing properly if the handler completes. In addition, the `ObservableRedo` has been split to `ObservableRetryWhen` and `ObservableRepeatWhen` just like their `Flowable` counterpart and are now they use a less convoluted algorithm.\r\n\r\nRelated: #4909", "NaN"], ["4912", "Fix resolveAndroidApiVersion when running under Robolectric", "Cesar Puerta", "cesar1000", "12/09/16, 05:03:19 PM", "This is addressing issue #4697.\r\n\r\n`PlatformDependent.resolveAndroidApiVersion()` tries to determine the Android SDK version by reading the `android.os.Build$VERSION#SDK_INT` field. When running under Robolectric, the class will be found (since Robolectric bundles an original android.jar). However, the method is using the system class loader for loading it (instead of the Robolectric instrumenting class loader), which will not instrument the class to run in the JVM. As a result, static initialization of the class fails with\r\nan UnsatisfiedLinkError when calling `SystemProperties.get()`, which calls native method native_get.\r\n\r\nI fixed by using the default class loader instead. This would only make a difference in the extremely rare case that the Android application installs a class loader that's not capable of finding Android classes. I tested that this behaves as expected on a device, fixes the issue with Robolectric, and detects it's not Android otherwise (as proven by the unit test).", "NaN"], ["4921", "2.x: fix TestSubscriber/Observer message texts", "David Karnok", "akarnokd", "12/15/16, 02:53:27 PM", "Fix the wrong messages in `TestSubscriber` and `TestObserver`.\r\n\r\nRelated: #4920.", "NaN"], ["4924", "2.x: Change Completable to CompletableSource", "Niklas Baudy", "vanniktech", "12/16/16, 05:25:07 PM", "Changing `Completable` to `CompletableSource`. Also found one other wrong spot that I fixed within this PR.\r\n\r\nFixes #4923 ", "NaN"], ["4927", "2.x: fix timer() ISE due to bad resource mgmt", "David Karnok", "akarnokd", "12/20/16, 08:31:27 AM", "Both `Observable.timer()` and `Flowable.timer()` could report `IllegalStateException` because if the delayed task completed before the task's `Disposable` was set, the `setOnce` found a non-null, non-terminal reference already set.\r\n\r\nRelated: #4926.", "NaN"], ["4930", "2.x: add Completable.cache()", "David Karnok", "akarnokd", "12/20/16, 04:51:20 PM", "This PR adds the operator `cache()` to `Completable` to cache the terminal event of a `Completable` sequence.\r\n\r\nI came across the need for this when [answering a question](http://stackoverflow.com/a/41241793/61158) where the intent of using `Completable` was to indicate an operation has completed but not actually trigger the operation whenever one subscribed.\r\n\r\nA small drawback, just like with other `cache()` operators is that once connected, there is no way for cancel it from within the operator itself. Returning `Completable & Disposable` doesn't work because of the the type restriction of `RxJavaPlugins.onAssembly`. There could be a `cache(Consumer<? super Disposable> onDispose)` overload or an example showing `source.ambWith(disposer).cache()`.", "NaN"], ["4932", "2.x: add safeguards to generate()", "David Karnok", "akarnokd", "12/21/16, 08:28:14 AM", "`Flowable.generate()` and `Observable.generate()` lacked the safeguards that were present in 1.x. This adds those and adds extra state cleanup.\r\n\r\nRelated: #4931", "NaN"], ["4941", "1.x: Completable.mergeDelayError check unsafe availability", "David Karnok", "akarnokd", "12/28/16, 09:03:45 PM", "This PR fixes the unconditional use of `MpscLinkedQueue` when Unsafe is not available or has been disabled inside `CompletableOnSubscribeMergeDelayErrorIterable`.\r\n\r\nRelated: #4940", "NaN"], ["4943", "2.x: fix publish(Function) not replenishing its queue", "David Karnok", "akarnokd", "12/29/16, 04:41:04 PM", "I was working on converting the [Monte Carlo PI benchmark](http://swave.io/usage/show-off/monte-carlo-pi.html) to RxJava 2 and it turned out I forgot to replenish the internal queue of `publish(Function)` in case the upstream was not sync-fuseable.\r\n\r\nThis PR fixes the replenishment problem for non-fused and async-fused sources by requesting after 75% consumption.\r\n\r\nIn addition, if an inner subscriber cancelled while it was at request 0, the other inner subscribers might not have resumed draining.\r\n\r\nI've also fixed two unit tests with wrong timeout unit of measure that randomly failed the tests on a slow machine or travis (#4902).", "NaN"], ["4945", "2.x: fix timeout with fallback not cancelling the main source", "David Karnok", "akarnokd", "12/29/16, 07:29:50 PM", "This PR fixes the lack of dispose/cancel call towards the upstream in the timed+fallback `timeout` operator version.\r\n\r\nIn addition, the selector version received similar unit tests to ensure they work properly (they did).\r\n\r\nRelated: #4944.", "NaN"], ["4946", "2.x: A simple Javadoc typo fix.", "gaemi", "gaemi", "12/30/16, 08:59:37 AM", "Fixed Javadoc for SingleToObservable, MaybeToObservable, CompletableToObservable", "NaN"], ["4949", "1.x: header and whitespace cleanup", "David Karnok", "akarnokd", "12/30/16, 03:20:26 PM", "  - Add missing header to 3 files\r\n  - Remove trailing whitespaces from recent additions", "NaN"], ["4951", "fix javadoc for BehaviorSubject", "Ievgen Maletskyi", "DDesideria", "01/03/17, 03:11:38 PM", "-fix examples for creating BehaviorSubject with or without initial value.", "NaN"], ["4953", "2.0.4 javadoc", "David Karnok", "akarnokd", "01/04/17, 09:30:46 AM", "Updated javadoc files to 2.0.4", "NaN"], ["4955", "2.x: add sample() overload that can emit the very last buffered item", "David Karnok", "akarnokd", "01/04/17, 03:21:41 PM", "The `sample()` operator in 1.x has been changed to always emit the very last buffered item before completion for [1.1.3](https://github.com/ReactiveX/RxJava/releases/tag/v1.1.3): [Discussion](https://github.com/ReactiveX/RxJava/issues/3657), [PR](https://github.com/ReactiveX/RxJava/pull/3757).\r\n\r\nThis change has been forgotten in 2.x (because 2.x `sample()` was implemented several months earlier) but unlike 1.x, I don't want to break existing use cases, hence the introduction of 6 overloads (3 for each base type) that let's one define the \"tail\" behavior.\r\n\r\nNote that the associated marble diagrams are inconsistent with the operators implemented, we need a new diagram where the timed-sample also emits the last value:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/21642878/891ca42a-d285-11e6-876a-e613de2443db.png)\r\n\r\nand one new diagram where the sampler-sample doesn't emit the last value:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/21642917/b4dc257c-d285-11e6-8f25-707043957f26.png)\r\n\r\nThe default sampler-sample should use this and the `emitLast == true` version can use the current diagram.\r\n\r\n(I don't have a Mac thus can't run OmniGraffle).\r\n\r\nRelated: #4952", "NaN"], ["4957", "2.x: fix LambdaObserver calling dispose when terminating", "David Karnok", "akarnokd", "01/04/17, 03:01:33 PM", "This PR changes the `LambdaObserver` to not dispose the upstream when it receives a terminal event. The `LambdaSubscriber` has been previoulsy updated but apparently not synced.\r\n\r\nReported in #4956.\r\n\r\nThis PR fixes 2 unit test methods of `Flowable.ignoreElements()` as they were not actually testing the operator (discovered when the `Observable.ignoreElements()` initially failed after the patch to `LambdaObserver`).", "NaN"], ["4962", "2.x: fix Single.takeUntil() other triggering twice", "David Karnok", "akarnokd", "01/06/17, 06:39:59 PM", "This PR fixes the double termination of `Single.takeUntil(Publisher)` when the `other` fires an item and then completes while ignoring the cancellation in between, trying to signal a `CancellationException` again which is routed to the `RxJavaPlugins.onError` and crashing on Android.\r\n\r\nIn addition, the `Maybe.takeUntil()` received a unit test verifying this doesn't also happen to it.\r\n\r\nRelated: #4961.", "NaN"], ["4963", "1.x: add missing marbles, fix image sizes", "David Karnok", "akarnokd", "01/06/17, 11:52:32 AM", "  - add `create(SyncOnSubscribe)` marble and update image dimensions\r\n  - add `create(AsyncOnSubscribe)` marble and update image dimensions\r\n  - add `switchIfEmpty()` marble\r\n  - add `toCompletable()` marble and update image dimensions", "NaN"], ["4964", "1.x: update javadoc to 1.2.5", "David Karnok", "akarnokd", "01/06/17, 12:14:18 PM", "Update Javadoc on gh-pages to 1.2.5.", "NaN"], ["4966", "2.x: add strict() operator for strong RS conformance", "David Karnok", "akarnokd", "01/07/17, 08:45:06 AM", "This PR adds a new instance operator `strict()`:\r\n\r\nEnsures that the event flow between the upstream and downstream follow the Reactive-Streams 1.0 specification by honoring the 3 additional rules (which are omitted in standard operators due to performance reasons).\r\n\r\n * \u00a71.3: onNext should not be called concurrently until onSubscribe returns\r\n * \u00a72.3: onError or onComplete must not call cancel\r\n * \u00a73.9: negative requests should emit an onError(IllegalArgumentException)\r\n\r\nIn addition, if rule \u00a72.12 (onSubscribe must be called at most once) is violated, the sequence is cancelled an onError(IllegalStateException) is emitted. Note that the Reactive-Streams specification doesn't have any sanction for violating \u00a72.12.\r\n\r\nThe `strict()` operator also replaces the test-only operators that were supporting the Reactive-Streams TCKs already.\r", "NaN"], ["4967", "2.x: add subjects for Single, Maybe and Completable", "David Karnok", "akarnokd", "01/08/17, 09:38:24 AM", "This PR adds 3 new subject types: `SingleSubject`, `MaybeSubject` and `CompletableSubject`. Their purpose is to provide an imperative way to multicast 0-1-error events as well as cache these events for later observers. They are thread-safe by design and there is no need for a serialized wrapper unlike the other `Subject`s.", "NaN"], ["4970", "2.x: fix withLatestFrom null checks, lifecycle", "David Karnok", "akarnokd", "01/08/17, 02:44:43 PM", "This PR fixes the lack of null check on the result of the `combiner` function as well as fixes the lifecycle of the `FlowableWithLatestFrom` to avoid races with the `onSubscribe`.", "NaN"], ["4971", "2.x: Add @CheckReturnValue to create methods of Subjects + Processors", "Niklas Baudy", "vanniktech", "01/08/17, 11:26:32 AM", "- adds the @CheckReturnValue annotation to subjects + processors since Single/Completable and MaybeSubject got them recently too", "NaN"], ["4972", "Improve compose() generics", "Zac Sweers", "ZacSweers", "01/08/17, 11:33:50 AM", "Resolves #4950\r\n\r\nI tested and built with the added tests on Java 6, 7, and 8. Not sure if you want to keep them in before merging since they're not really functional in nature, just there to make sure they compile.\r\n\r", "NaN"], ["4973", "2.x: Add Completable.hide()", "Niklas Baudy", "vanniktech", "01/08/17, 12:17:52 PM", "- adds Completable.hide() operator so that CompletableSubject as well as other custom Completable implementations can be hidden", "NaN"], ["4974", "2.x: add Flowable.parallel() and parallel operators", "David Karnok", "akarnokd", "01/18/17, 10:24:16 PM", "This PR adds the `parallel()` method to `Flowable` which opens up a sub-DSL with parallel operations. (Note that only a few operators make sense in a parallel settings.)\r\n\r\nThis parallel sub-DSL is not limited to computation tasks as it allows specifying the parallelism and the `Scheduler` to run the parallel 'rails'. For example, you can have parallel downloads that block:\r\n\r\n```java\r\nFlowable.range(1, 100)\r\n.parallel(10)\r\n.runOn(Schedulers.io())\r\n.map(v -> httpClient.blockingGet(\"http://server/item/\" + v))\r\n.sequential()\r\n.observeOn(AndroidSchedulers.mainThread())\r\n.subscribe(...);\r\n```\r\n\r", "NaN"], ["4976", "Fixed a typo and other cosmetics issues.", "Savelii Zagurskii", "zsavely", "01/09/17, 03:22:58 PM", "Fixed a small typo in README.md.", "NaN"], ["4979", "Add newline to end of files missing a newline", "Ben Christensen", "benjchristensen", "01/09/17, 11:20:49 PM", "This is to get rid of the \"No newline at end of file\" warning that exist on many but not all files in the project, so adds a newline to any file missing a newline. This came about while modifying a large number of files for https://github.com/ReactiveX/RxJava/issues/4978.\r\n\r\nThis is intended to clean this up once so it doesn't cause warnings and noise in each PR this can affect. Probably would be good if the project had a formatter than ensured this as part of CI.", "NaN"], ["4980", "Update Copyright to 'RxJava Contributors'", "Ben Christensen", "benjchristensen", "01/09/17, 11:21:38 PM", "Updating all files containing a Copyright header to change from 'Netflix, Inc' to 'RxJava Contributors' as per https://github.com/ReactiveX/RxJava/issues/4978.", "NaN"], ["4982", "2.x: fix Observable.concatMapEager bad logic for immediate scalars", "David Karnok", "akarnokd", "01/11/17, 07:34:33 PM", "The operator `Observable.concatMapEager` had a bad optimization targeting scalar and callable sources and emitted their values immediately even if it wasn't that particular source's turn for it.\r\n\r\nThe `Flowable` is not affected, added unit tests for both.\r\n\r\nReported in #4981.", "NaN"], ["4984", "2.x: fix cross-boundary invalid fusion with observeOn, flatMap & zip", "David Karnok", "akarnokd", "01/12/17, 06:24:55 PM", "When `flatMap` and `zip` fuses its sources, it was possible one of the async source polls on another source which executed boundary-sensitive operators (`map`, `filter`) on the wrong thread.\r\n\r\nFor clarity, here is a diagram showing the execution flow of a classical and fused setup:\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/21883621/536a123c-d8b0-11e6-9a7a-b6deb2ffb26b.png)\r\n\r\nIn the classical flow, everything is push and when flatMap collects the available elements, all side-effects happened inside `map`.\r\n\r\nIn the fused flow, there are no queues and the onNext call is an indication to `poll()` on the sources inside `flatMap` (or zip). If the first source triggers onNext, that source is correctly polled and `map` executes on the right thread. However, when the flatMap continues to collect other available elements, it polls on the other source and executes that `map` still on the first scheduler, despite that source having its own scheduler specified.\r\n\r\nThe solution is to mark `flatMap` and `zip`'s inner consumer as boundary sensitive which prevents the fusion above since `map` is also marked as boundary sensitive.\r\n\r\nRelated: https://github.com/reactor/reactor-core/issues/342", "NaN"], ["4987", "2.x: make Obs.combineLatest consistent with Flowable + doc cornercase", "David Karnok", "akarnokd", "01/12/17, 06:25:12 PM", "This PR fixes `Observable.combineLatest` to be consistent with `Flowable.combineLatest` by not subscribing to additional input sources if the operator reached a terminal state due to a valueless source (that completes or errors). In addition, such early termination didn't properly cancel the other sources when `delayErrors == true`.\r\n\r\nI've also extended the documentation on the overloads to warn about empty sources that will terminate the operator, even with `combineLatestDelayError`, and thus subscription side-effects may not happen.\r\n\r\nThere is a related issue #4414 where the operator should fully consume each input source no matter what and terminate when all terminate. I'm still considering what would be the best way to introduce this.\r\n\r\nReported in #4986", "NaN"], ["4989", "2.x: Fix Observable.singleElement doc", "IKEDA Sho", "ikesyo", "01/13/17, 08:00:31 AM", "Fixes a subtle documentation bug. `Observable.singleElement` returns `Maybe<T>`, not `Observable<T>`.\r", "NaN"], ["4990", "2.x: Update marble diagrams for sample overloads", "David Karnok", "akarnokd", "01/16/17, 10:12:54 AM", "This PR updates the referenced marble diagrams to reflect the actual behavior and options with `sample`.\r\n\r\nNew images:\r\n\r\n  - `sample(time, emitLast)`\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.emitlast.png)\r\n\r\n  - `sample(time, scheduler, emitLast)`\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.s.emitlast.png)\r\n\r\n  - `sample(other)` - the [original image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.o.png) indicated the emission of the last item which was not the case\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.o.nolast.png)\r\n\r\n  - `sample(other, emitLast)`\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.o.emitlast.png)", "NaN"], ["4992", "2.x: A.flatMapB to eagerly check for cancellations before subscribing", "David Karnok", "akarnokd", "01/16/17, 10:13:07 AM", "The `flatMap` implementations always subscribed to the generated inner source even if there was an asynchronous cancel while the function was running. With typical functions, there is only a really tiny window inside function but some users tend to block/sleep in the function and when that returns, the `flatMap` operator is already cancelled. \r\n\r\nIf the generated inner source emitted an error disregarding its own cancellation signal (the `error()` operators do this), those errors end up in the `RxJavaPlugins.onError` and crash the app (on Android).\r\n\r\nThis PR adjusts the `flatMap` implementations to check for the disposed/cancelled state before subscribing to the inner source. For `Observable` and `Flowable`, this has practically no extra overhead as the add/remove already checks for the terminal state and can return a boolean for it. The rest require an explicit `isDisposed()` check.", "NaN"], ["4994", "2.x: assertNever(T value) / assertNever(Predicate<T> valuePredicate)", "S\u00e9rgio Marques Moura", "sergiomarqmoura", "01/17/17, 01:47:37 PM", "This pull request adds to any class extending ```BaseConsumerTest``` the ability to assert that a given value was not emitted by the observable it was subscribed to, either with ```assertNever(T value)```or ```assertNever(Predicate<T> valuePredicate)```", "NaN"], ["5000", "Add which are the other stardard methods of create", "Brais Gab\u00edn", "BraisGabin", "01/17/17, 12:35:55 PM", "I was using `Observable.create(OnSubscribe)`. I knew about the warning:\r\n\r\n> This method requires advanced knowledge about building operators and data sources; please consider other standard methods first\r\n\r\nBut I didn't know which were the *other stadard methods*. There were no clue in the JavaDoc. With this change the problem is gone.", "NaN"], ["5002", "2.x: Add scheduler creation factories", "Zac Sweers", "ZacSweers", "01/25/17, 08:22:00 AM", "Resolves #4993\r\n\r\nThis is a pretty vanilla copy from RxJava 1's implementation. Note that I had to tune NewThread scheduler to not be a singleton to support this.\r\n\r\nWe had talked about borrowing from project reactor's APIs for different overloads, let me know if you think we should add more fine-grained controls through these.\r", "NaN"], ["5005", "2.x: ExecutorScheduler.scheduleDirect to report isDisposed on complete", "David Karnok", "akarnokd", "01/18/17, 07:15:06 PM", "This PR makes the `Disposable` returned by the `ExecutorScheduler.scheduleDirect()` report `isDisposed` `true` if the task has actually finished, which should now be consistent with the `Worker` behavior of other schedulers.\r\n\r\nReported in #5004.", "NaN"], ["5006", "2.x: improve the parallel() mode test coverage, improve its code", "David Karnok", "akarnokd", "01/20/17, 07:24:00 PM", "This PR adds additional unit tests for the `parallel()` operators, plus:\r\n\r\n  - adds conditional fusion to `runOn`, `filter` and `map` operators\r\n  - exposes the `FlowableFlatMap`'s internal `Subscriber` to be reused with `ParallelFlowable.flatMap`\r\n  - uses the `FlowableConcatMap`'s internal `Subscriber` to be reused with `ParallelFlowable.concatMap`\r\n  - fix generics with `collect` and `reduce`\r\n  - change queue overflow errors to `MissingBackpressureException`\r\n  - make sure join-like operators don't emit the same upstream `Throwable` to the `RxJavaPlugins.onError` handler if all rails have the same error reference\r", "NaN"], ["5007", "1.x: update sample(time) diagram to indicate emission of last", "David Karnok", "akarnokd", "01/24/17, 11:32:02 AM", "This PR updates the 1.x `sample(time)` diagram to indicate the last value is emitted when the sequence completes. It is the same (style) as for 2.x:\r\n\r\n\r\nDefault scheduler:\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.emitlast.1x.png)\r\n\r\nCustom scheduler:\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.s.emitlast.1x.png)\r\n\r\nRelated: #4952", "NaN"], ["5015", "Override RS dependency to compile, replace owner info", "David Karnok", "akarnokd", "01/24/17, 10:31:34 AM", "This PR overrides the dependency of Reactive-Streams in the generated POM.xml from `runtime` to `compile` to avoid trouble with plain maven users.\r\n\r\nIn addition, I took the liberty of overriding the responsible owner references which seem to be hard-coded in the `rxjava-nebula` plugin.\r\n\r\nRelated: #4813, #5014", "NaN"], ["5017", "Fix copyright instructions in CONTRIBUTING", "Pascal Welsch", "passsy", "01/24/17, 09:00:57 PM", "After [changing the copyright of the project](https://github.com/ReactiveX/RxJava/issues/4978) the documentation in CONTRIBUTING.md should be adjusted with the updated copyright header", "NaN"], ["5020", "2.x: option to fail for using blockingX on the computation scheduler", "David Karnok", "akarnokd", "01/27/17, 08:08:18 AM", "This PR adds an `RxJavaPlugins` option `failOnNonBlockingScheduler` that triggers an `IllegalStateException` when the user tries to run a blocking method while the execution is on the `computation()` or `single()` `Scheduler`: \r\n\r\n```java\r\nFlowable.just(1)\r\n.subscribeOn(Schedulers.computation())\r\n.map(v -> Flowable.just(\"query\").subscribeOn(Schedulers.io()).blockingFirst())\r\n.doOnNext(v -> someAPI(v).subscribeOn(Schedulers.newThread()).blockingSubscribe());\r\n.blockingFirst();\r\n```\r\n\r\nIt is an optional setting, default off.\r\n\r\nThe check is done before going into an await method (and a few other types of blocking). Most blocking operators usually poll the status and try to avoid the actual blocking thus this shouldn't affect synchronous sequences that one extracts a value from.\r\n\r\nDetection of a blocking-sensitive scheduler's thread is done by checking the current thread's class for implementing the `NonBlockingThread` marker interface (currently `internal`).\r\n\r\nThe `RxThreadFactory` has been updated to allow picking a default `Thread` implementation or a custom one for the `newThread()`. Note that since #5002 you can create custom schedulers by providing a `ThreadFactory`.\r\n\r\nThis works for RxJava's default schedulers but not for `AndroidSchedulers.mainThread()` where similar blocking should be avoided as well. For them, a plugin-callback action would be more suitable. ~~Question is how that callback should behave (throw, return false, should it be always executed or only when the flag is true).~~\r\n\r\nMy proposed solution is to have a plugin callback `RxJavaPlugins.setOnBeforeBlocking(BooleanSupplier)` that Android users can define the callback for:\r\n\r\n```java\r\nRxJavaPlugins.setOnBeforeBlocking(() -> Looper.myLooper() == Looper.getMainLooper())\r\nRxJavaPlugins.setFailOnNonBlockingScheduler(true);\r\n```\r\n\r\nThis callback is only executed if the `failOnNonBlockingScheduler` is set to true.", "NaN"], ["5023", "Add nullability annotations to io.reactivex.annotations interfaces.", "Tony Cosentini", "tonycosentini", "01/27/17, 05:21:03 PM", "(Addresses https://github.com/ReactiveX/RxJava/issues/4876)\r\n\r\nThis pull request annotates everything in the `io.reactivex.annotations` package with a new `@NonNull` annotation defined in RxJava. This doesn\u2019t annotate everything, but I think it\u2019s a good start.\r\n\r\nIn particular, when migrating a large codebase of RxJava 1.x code to 2.x, catching null returns in these interfaces was very difficult. At best, it\u2019s noticed while migrating, otherwise it\u2019s up to unit tests or a production crash to catch these.\r\n\r\nWith these new annotations, you get much better IDE support (once you tell IntelliJ about the new annotation):\r\n<img width=\"563\" alt=\"screen shot 2017-01-27 at 2 30 18 pm\" src=\"https://cloud.githubusercontent.com/assets/23467/22362686/7f172032-e49f-11e6-9fc6-94049c263ceb.png\">\r\n^ in this example, `getPhoneNumber()` is marked as `@Nullable`\r\n\r\nIn addition, support for this annotation can easily be added to static analysis tools like Infer, checker, or any other popular tool.\r\n\r\nOpen Questions\r\n* Does this even make sense to add? There seem to be some concerns in the issue.\r\n* The `@NonNull` annotation needs JavaDoc - I\u2019m planning on following up with whatever is in existing NonNull annotations floating around unless anyone thinks otherwise.\r\n* There are no tests since this is essentially just metadata. Should there be something that enforces this? I'm not sure if there is any kind of lint tool that runs on this project, but one approach would be to write a check that enforces everything in specific packages in annotated. This would also help keep future changes annotated.\r\n* Is it worth adding this elsewhere? I find these function interfaces to be the easiest place to run into nullability problems, but I'm curious what others think. A simple, but kind of crazy brute force approach would be to require annotations on every public API.", "NaN"], ["5025", "Update javadoc to 2.0.5", "David Karnok", "akarnokd", "01/27/17, 12:01:42 PM", "Update the main javadoc to show the documentation of 2.0.5 since the project has been switched over to the 2.x.\r\n\r\nThe 1.x documentation can be accessed under http://reactivex.io/RxJava/1.x/javadoc/\r\nThe 2.x documentation can be also accessed under http://reactivex.io/RxJava/2.x/javadoc/", "NaN"], ["5027", "2.x: dedicated Single.zip implementation, no dispose on all-success", "David Karnok", "akarnokd", "01/27/17, 04:35:08 PM", "This adds a dedicated implementation for zipping `Single`s (adapted from `MaybeZipX`).\r\n\r\nRouting the original `zip` through `Flowable` added the usually unwanted behavior of cancelling the sources if one of them reports a completion after a row has been consumed from all (when converted to `Flowable`, `SingleObserver.onSuccess` becomes `Subscriber.onNext` + `onComplete`). Since there is only `onSuccess` and `onError` in `Single`, there is no need to dispose the sources once all signalled their only `onSuccess`.\r\n\r\nRelated: #5024.", "NaN"], ["5030", "1.x: fix groupBy consuming the upstream in an unbounded manner", "David Karnok", "akarnokd", "01/28/17, 06:17:31 PM", "Due to an unnecessary `request(1)`, `groupBy` consumed the upstream in an unbounded manner no matter the downstream request patterns against the main or the inner groups themselves.\r\n\r\nThis PR fixes this by removing it and rearranging the group/group item handling similar to how 2.x is implemented.\r\n\r\nRelated #5029.", "NaN"], ["5036", "2.x: reintroduce OnErrorNotImplementedException for 0-1 argument subscribe()", "David Karnok", "akarnokd", "02/01/17, 09:38:58 AM", "This PR reintroduces the `OnErrorNotImplementedException` wrapper from 1.x and applies it to the `subscribe()` methods that don't define an `onError` handler.\r\n\r\nThe errors are still routed to the `RxJavaPlugins.onError` handler but now wrapped with `OnErrorNotImplementedException`.\r\n\r\nThis should help with cases where the developer forgot to add the handler and distinguish such unhandled errors from other undeliverable errors due to lifecycle limitations.", "NaN"], ["5043", "2.x: add parallel hooks to RxJavaPlugins, add missing params validation", "David Karnok", "akarnokd", "02/02/17, 08:16:09 AM", "This PR adds an `onAssembly` hook for `ParallelFlowable` operators and adds the missing parameter validation to some parallel operators.", "NaN"], ["5046", "Add StackOverflow links", "David Karnok", "akarnokd", "02/02/17, 03:03:14 PM", "Add StackOverflow links to Readme. Also trigger CI for codecov.io integration check.", "NaN"], ["5047", "2.x: Document and test amb subscription ordering.", "Jake Wharton", "JakeWharton", "02/02/17, 06:43:05 PM", "Refs #5044.", "NaN"], ["5048", "1.x: Improve the BehaviorSubject Java doc", "Brais Gab\u00edn", "BraisGabin", "02/02/17, 06:45:08 PM", "- The second example didn't explain what happened with \"default\".\r\n- The first line is copied from the 2.x documentation. It's more clear.", "NaN"], ["5049", "use bounded wildcards for errorHandler (fixes #5045)", "Johannes Schneider", "jschneider", "02/03/17, 04:42:22 PM", "Adding bound wildcards for error handler - fixes #5045\r", "NaN"], ["5051", "Feature/#4876 nonnull annotations", "Johannes Schneider", "jschneider", "02/03/17, 10:29:35 AM", "Issue: #4876\r\n\r\nStarting to add @NonNull and @Nullable annotations.\r\n\r\nI decided to add a compileOnly dependency to findbugs:jsr305 artifact.\r\n\r\nWe could also use \"io.reactivex.annotations.NonNull\" which already exists. But there is no \"io.reactivex.annotations.Nullable\" annotation which is at least as important in my experience.\r\n\r\nSince these are only annotations, it is no problem when the class files are missing at compile time (JLS 9.6.1.2 Retention).\r\n\r\n\r\nI have started to add annotations in the Scheduler and RxJavaPlugins.\r\nThe test RxJavaPlugins contains some invalid checks using null (lines 1353 and following).\r\n\r\n\r\nThis pull request is work in progress and should be discussed.\r\n\r\n\r\nQuestions so far:\r\n- use jsr305 (compileOnly) or existing annotation in io.reactivex?\r\n- (if not using jsr305): Use own @Nullable annotation or try to get one added to \"io.reactivex\"? Or skip these completely (which misses the point of the static code analysis)\r\n- Why has there been tests calling the RxJavaPlugins.on*Scheduler with null arguments? Can these be removed securely?\r", "NaN"], ["5052", "Update javadoc to 1.2.6", "David Karnok", "akarnokd", "02/03/17, 08:47:58 AM", "Update Javadoc to 1.2.6", "NaN"], ["5054", "2.x: add nullable annotation to simple queue (fixes #5053)", "Johannes Schneider", "jschneider", "02/03/17, 11:18:18 AM", "As explained in https://github.com/ReactiveX/RxJava/issues/5053 SimpleQueue might return null.\r\nTo document this behavior a nullable annotation has been added.", "NaN"], ["5055", "2.x: Feature/#4876 more null checks", "Johannes Schneider", "jschneider", "02/03/17, 04:41:34 PM", "I have added some more null checks to help the static code analysis.\r\nI think I have also fixed one possible NPE in NewThreadWorker", "NaN"], ["5056", "2.x: document (internal) SimpleQueue", "David Karnok", "akarnokd", "02/03/17, 04:39:42 PM", "The interface was missing javadoc on its methods.", "NaN"], ["5057", "2.x: disable codecov-checks on PRs", "David Karnok", "akarnokd", "02/03/17, 12:40:18 PM", "Codecov.io seems to be messing around quite a bit lately. A day after the integration, new checks appeared at every PR that fail because of small irrelevant fluctuations in the coverage itself and they fail the whole PR even though the tests pass.\r\n\r\nThis PR seeks to disable these checks.", "NaN"], ["5058", "Feature/#5045 more generics in RxJavaPlugins", "Johannes Schneider", "jschneider", "02/06/17, 07:26:52 PM", "I widened the bounds for the functions. Looks good for me.\r\nRelated to #5045 ", "NaN"], ["5062", "2.x: update readme parallel example", "David Karnok", "akarnokd", "02/03/17, 06:02:27 PM", "Add `parallel()` example to the getting started in README.md", "NaN"], ["5064", "2.x: fix replay() cancel/dispose NPE", "David Karnok", "akarnokd", "02/03/17, 06:40:43 PM", "This PR fixes both `Flowable.replay()` and `Observable.replay()` throwing a `NullPointerException` if the connection is disconnect before the upstream calls `onSubscribe` on the connection being established. \r\n\r\nIn practice, this requires an async cancellation to happen through `refCount().unsubscribeOn()` for example. The validation tests simulate this by not calling `onSubscribe` until the synchronous connect/disconnect happens.\r\n\r\nReported in #5060.", "NaN"], ["5066", "Update codecov.yml", "Steve^", "stevepeak", "02/03/17, 10:12:50 PM", "Fix codecov.yml\r\n\r\n- `target` is used a \"coverage must be greater or equal to the target\"\r\n- `threshold` is the acceptable amount of loss to still consider the status as successful.\r", "NaN"], ["5068", "Update README.md", "Soulkey Kim", "soulkeykim", "02/04/17, 07:34:10 AM", "I tried to use RxJava2 from the example and I get some error message.\r\n\r\nError:(13, 38) java: variable v is already defined in method main(java.lang.String[])", "NaN"], ["5069", "2.x: compatibility fixes (JDK 9 & IntelliJ 2017.1 EAP)", "David Karnok", "akarnokd", "02/04/17, 04:36:11 PM", "1. When the project is checked out into a directory that is not exactly `*/RxJava/` (i.e., `/RxJavaSomething/`) the source-code locator in the unit tests failed with a `NullPointerException`. The locator is now relaxed to expect `/RxJava` prefix.\r\n2. Running the unit tests from IntelliJ 2017.1 EAP, the `ExceptionTests.testStackOverflowWouldOccur` failed with `AssertionError` because the final stack depth was exactly the constant value (800). The check now uses the correct `>=` as the dual of the recursion condition of `<`.", "NaN"], ["5075", "2.x: cancel upstream first, dispose worker last", "David Karnok", "akarnokd", "02/06/17, 07:25:53 PM", "This PR makes sure the `Scheduler.Worker` is disposed only after\r\n\r\n  - disposing/cancelling the upstream,\r\n  - emitting terminal events.\r\n\r\nThis may help with situations when the worker-dispose interrupts a thread that is blocked and the InterruptedException handler checks for the stream to be disposed so the exception can be safely ignored (and thus not end up in the RxJavaPlugins.onError handler to crash the app).\r\n\r\nRelated: #4863", "NaN"], ["5076", "2x: Removed documentation leftover", "Paul Woitaschek", "PaulWoitaschek", "02/06/17, 07:48:57 PM", "...that wrongly states that the error will be swallowed.\r\n\r\nAs discussed in #5036", "NaN"], ["5080", "2.x: wrap undeliverable errors", "David Karnok", "akarnokd", "02/08/17, 10:06:34 AM", "This PR adds the `UndeliverableException` and `ProtocolViolationException`. The former wraps exceptions that happen beyond the lifecycle of a flow and the latter is added to distinguish validation bugs.\r\n\r\nThe `RxJavaPlugins.onError` wraps errors into `UndeliverableException` unless `RxJavaPlugins.isBug()` returns true when the `Throwable` is relayed to the (default) handler.\r\n\r\nHaving the `UndeliverableException` should help with understanding the source of a crash and by having its own stack trace, help locating the offending positions (for example, a missed `isDisposed()` check in a 3rd party library).", "NaN"], ["5086", "1.x: deprecate create(), add alternatives", "David Karnok", "akarnokd", "02/10/17, 08:38:14 AM", "Looks like `create()` won't go away unless we get the IDE mark it someway, such as being deprecated.\r\n\r\nThis PR deprecates `create()` and adds `unsafeCreate` for internal use and deprecate-renames `fromEmitter` to `create(Action1, BackpressureMode)`.\r\n\r\nThere was an earlier attempt at deprecating `create`, #4253, but it was not followed up. This PR executes what I suggested in one of the [comments](https://github.com/ReactiveX/RxJava/pull/4253#issuecomment-235913860).", "NaN"], ["5087", "2.x: Correct marble diagram dimensions", "Stephan Schroevers", "Stephan202", "02/09/17, 05:00:38 PM", "This fixes part of #4535, as requested in #5067.\r\n\r\nThese changes were generated using the following script:\r\n\r\n```sh\r\n#!/usr/bin/env bash\r\n\r\nfind . -name '*.java' -print0 \\\r\n  | xargs -0 grep '^\\s*\\*' \\\r\n  | grep -oP 'https.*?\\.png' \\\r\n  | sort -u \\\r\n  | while read -r I; do\r\n      echo \"Updating ${I}...\"\r\n      # Gather image details.\r\n      DATA=\"$(identify <(curl -f -L -s \"${I}\"))\"\r\n\r\n      # Extract the image's true width and height.\r\n      WIDTH=\"$(echo \"${DATA}\" | grep -oP '(?<=PNG )\\d+')\"\r\n      HEIGHT=\"$(echo \"${DATA}\" | grep -oP 'PNG \\d+x\\d+' | grep -oP '(?<=x)\\d+')\"\r\n\r\n      # Determine the image's scaled height, assuming a width of 640 pixels.\r\n      NEW_HEIGHT=\"$(echo 'scale=100; s='\"${WIDTH}\"' / 640; scale=0; '\"${HEIGHT}\"' / s' | bc)\"\r\n\r\n      # Update all `<img/>` tags referencing the image.\r\n      find . -name '*.java' -print0 \\\r\n        | xargs -0 perl -i -p -e 's,<img( (width|height)=\"[^\"]*\")* src=\"\\Q'\"${I}\"'\\E\",<img width=\"640\" height=\"'\"${NEW_HEIGHT}\"'\" src=\"'\"${I}\"'\",g'\r\n    done\r\n```\r", "NaN"], ["5088", "2.x: fix CI load sensitive BlockingNextTests, XFlatMapTest", "David Karnok", "akarnokd", "02/10/17, 08:27:08 AM", "This PR updates `testNoBufferingOrBlockingOfSequence` with\r\n\r\n  - retry up to 3 times with an exponential backoff as the test is time sensitive and Travis CI load sensitive,\r\n  - uses `Schedulers.single()` as the helper thread and manages resource cleanup properly,\r\n  - both `Flowable` and `Observable` variants.\r\n\r\nUpdate: Looks like `XFlatMapTest` is still flaky, added changes here to try fixing it as well.", "NaN"], ["5090", "2.x: fix scan(seed, f) to emit accumulated values asap", "David Karnok", "akarnokd", "02/11/17, 09:37:16 AM", "For performance reasons, the `scan` delayed the emission of accumulated items by one which worked well with sources that pushed new items frequently. \r\n\r\nUnfortunately, if the source stopped emitting (without completion), the very last accumulated item was stuck and no way to get it out of `scan`. I considered this type of use being rare but apparently I was wrong.\r\n\r\nThe PR changes `scan` to emit accumulated items, including the initial seed, as soon as there is request for it. The operator now uses a stable-prefetch queue-drain found throughout other operators such as `observeOn`. \r\n\r\nRemark: sadly, request trickery such as capturing the first `request` call, emitting the seed and then requesting n - 1 doesn't work because if the `request()` call itself happens from another thread and the source is empty, the `onNext` and `onComplete` could run concurrently.\r\n\r\nReported in #5089 ", "NaN"], ["5091", "1.x: create+subscribeOn avoid same-pool deadlock", "David Karnok", "akarnokd", "02/11/17, 09:36:19 AM", "This PR allows to fix the same-pool deadlock that may happen with `create()` (formerly `fromEmitter`) and `subscribeOn` as `subscribeOn` by default schedules the requests behind a running emitter and thus the internal request amount may not get updated, leading to unnecessary dataloss.\r\n\r\nSee #4735.\r\n\r\nIn the update, if `subscribeOn` detects its upstream is `OnSubscribeCreate`, it no longer reschedules requests for it. For other, non-immediate cases, a new overload allows specifying the `requestOn` parameter that should be `false` if there is a `create(Action1, BackpressureStrategy)` in the sequence upstream.", "NaN"], ["5092", "1.x: add Single.merge(Obs), Obs.flatMapSingle & flatMapCompletable", "David Karnok", "akarnokd", "02/11/17, 06:06:25 PM", "This PR adds specialized operators for merging `Single` and `Completable` sources:\r\n\r\n  - `Single.merge(Observable<Single<T>>)` + `maxConcurrency` overload\r\n  - `Single.mergeDelayError(Observable<Single<T>>)` + `maxConcurrency` overload\r\n  - `Observable.flatMapSingle(Func1<T, Single<R>>)` + `delayErrors` + `delayErrors, maxConcurrency` overloads\r\n  - `Observable.flatMapCompletable(Func1<T, Completable>)` + `delayErrors` + `delayErrors, maxConcurrency` overloads\r\n\r\nAll of these return `Observable`.\r\n\r\nThis replaces #4988.\r\n\r\n*Sidenote: for some time now, contributor(s) from certain party tend to contribute low quality or inadequate code and \"disappear\" pretty quickly. I can't be sure this is just lazyness or a deliberate and elaborate scheme to extract free work out of me for their own party's benefit but it is annoying as hell.*", "NaN"], ["5093", "2.x: Add doAfterTerminate callback to the Single type.", "VeskoI", "VeskoI", "02/13/17, 10:30:13 AM", "As mentioned in [THIS StackOverflow question](http://stackoverflow.com/questions/42168043/why-is-doafterterminate-missing-from-single-in-rxjava-2), doAfterTerminate() is currently missing in RxJava2. There's no strong reason for that, so this PR adds support for it.", "NaN"], ["5101", "2.x: fix Maybe.concat() subscribe-after-cancel, verify others", "David Karnok", "akarnokd", "02/16/17, 05:20:41 PM", "This PR fixes `Maybe.concatX` subscribing to the next source when the downstream cancelled the `Flowable` sequence from its `onNext`. This resulted in executing the subscription side-effects of the source to be immediately cancelled when it called `onSubscribe` on concat's `MaybeObserver`.\r\n\r\nIn addition, tests were added to verify the other types don't have this kind of a problem.\r\n\r\nRelated #5100.", "NaN"], ["5102", "2.x: Added missing @NonNull attribute to Function7.", "Alexandre Dubois", "alexandre-dubois", "02/16/17, 09:56:13 PM", "This Pull Request adds the missing @NonNull attribute to Function7. On Pull Request #5023, Function7 was missing from the updates.", "NaN"], ["5103", "2.x: fix doOnSubscribe signalling Undeliv.Exception instead of just onError", "David Karnok", "akarnokd", "02/16/17, 10:31:04 PM", "This PR fixes the issue reported on [StackOverflow](http://stackoverflow.com/questions/42279543/exception-is-not-propagated-to-onerror-when-thrown-from-doonsubscribe) where crashing the lambda in `Flowable.doOnSubscribe` calls the `RxJavaPlugins.onError`, which crashes the app and prevents calling the `EmptySubscription.error` on Android. (Desktop prints to the console and delivers the error normally.)\r\n\r\nThe bug was present in the `Flowable`, `Observable` and `Completable`. All 5 base types received the respective unit test to ensure correct behavior.", "NaN"], ["5106", "2.x: fix window(time, size) not completing windows on timeout", "David Karnok", "akarnokd", "02/17/17, 05:56:17 PM", "This PR fixes the operators `Flowable.window(time, size)` and `Observable.window(time, size)` to complete the current window if the time elapses before the size limit is reached.\r\n\r\nReported in #5104.", "NaN"], ["5112", "2.x: Flowable as a Publisher to be fully RS compliant", "David Karnok", "akarnokd", "02/18/17, 09:02:48 AM", "This PR performs the changes suggested in #5110.\r\n\r\n - Introduce `FlowableSubscriber` with extra textual specification on its relaxed nature\r\n - `Flowable.subscribe(Subscriber)` checks for `FlowableSubscriber` and if not found, it wraps the incoming RS `Subscriber` into a `StrictSubscriber` that follows the RS spec to the letter at any cost.\r\n - Introduce `Flowable.subscribe(FlowableSubscribe)` that most internal operators will use\r\n - Change `AbstractFlowableWithUpstream` to accept `Flowable` as a source, update operators\r\n - Some operators were useful with raw `Publisher` input, these were duplicated on their outer containing type but use the same internal `FlowableSubscriber`\r\n - Removed \"cheat\" from the TCK tests, adjusted timeout on `delay`\r\n - Replaced most `implements Subscriber` with `implements FlowableSubscriber`\r\n - Replaced most `new Subscriber` with `new FlowableSubscriber` in tests, the rest is required for testing the strictness itself.\r\n - `strict()` is now an identity operator with suggested scheduled removal.\r\n\r\nPerformance impact estimation\r\n\r\n- Most primary use of a `Flowable` should go through `subscribe(FlowableSubscribe)` and thus no overhead change.\r\n- Where the API mandated `Publisher` as input, providing a `Flowable` will have an `instanceof` check at subscription time and routed to `subscribe(FlowableSubscriber) if the consumer is part of RxJava 2 itself.", "NaN"], ["5114", "2.x: fix Observable.combineLatest to dispose eagerly", "David Karnok", "akarnokd", "02/18/17, 08:22:07 PM", "This PR fixes `Observable.combineLatest` to dispose the sources outside the serialization loop, just like `Flowable.combineLatest` does. This allows cancellation even if the serialization loop is busy/blocking inside an `onNext` emission.\r\n\r\nIn addition, a unit test was added to `Flowable.combineLatest` as well.\r\n\r\nReported in #5111.", "NaN"], ["5115", "2.x: benchmark the new strict/interop mode", "David Karnok", "akarnokd", "02/18/17, 07:59:22 PM", "Benchmark the overhead of the strict/interop mode.\r\n\r\ni5 6440HQ, Windows 10 x64, Java 8u121\r\n\r\n![image](https://cloud.githubusercontent.com/assets/1269832/23092637/ce9f343c-f5cf-11e6-868b-e24ff6fc2b43.png)\r\n\r\nThe numbers are consistent with my expectations; this mobile processor is roughly equivalent to i7 4770 desktop where the cost model is: 1 atomic increment per item equals to roughly 130 Mops/s upper limit, 2 atomic increment per item is roughly 60 Mops/s upper limit. Since the interop mode requires at minimum two atomic increments, 54 Mops/s is a reasonable value to get.", "NaN"], ["5117", "2.x: add ParallelFlowable.sequentialDelayError", "David Karnok", "akarnokd", "02/21/17, 04:27:48 PM", "This PR adds the `sequentialDelayError` operator to `ParallelFlowable` that allows awaiting all 'rails' in a parallel flow to terminate normally or with the (composite) exception of the failed rail(s).\r\n\r\nTo enable this, the `Flowable.parallel()` operator's behavior regarding rail cancellation had to be changed. In v2.0.5 if any of the rails cancelled (maybe due to a failure, maybe due to an end consumer cancelling the entire parallel flow) the input `Flowable` was cancelled. \r\n\r\nThis PR alters this by requiring all rails to cancel before cancelling the input `Flowable`. The change permits one or multiple rails to fail and let others progress in case the new `sequentialDelayError` is applied as a terminal operator. The original `sequential()` operator still cancels all rails if one of them fails (triggering the cancellation of the input `Flowable`).\r\n\r\nNote that this change may still drop and never process elements in the internal queues of the operators in the parallel flow (because the parallel processing is not implemented with work-stealing that could pick up elements from a dead queue). In order to get as many elements processed as possible, it is recommended to reduce the default prefetch on the `runOn` operator to a reasonable tradeoff value (between throughput and fault tolerance).\r\n\r\n**Edit**\r\n\r\nUpdated the PR to make sure `parallel()` ignores cancelled rails when it dispatches items.\r\n\r\nRelated: #5108.", "NaN"], ["5119", "2.x: improve coverage, remove unused code", "David Karnok", "akarnokd", "02/20/17, 08:44:21 AM", "This PR adds coverage to some low-coverage classes and removes unused code. \r\n\r\nIn addition, the `XFlatMapTest` now retries each test up to 3 times with exponential backoff since they are the most sensitive to Travis CI fluctuations.", "NaN"], ["5121", "2.x: fix Observable.zip to dispose eagerly", "James Barr", "jbarr21", "02/20/17, 08:30:43 AM", "This PR fixes `Observable.zip` to dispose the sources outside the serialization loop, just like `Flowable.zip` does. This allows cancellation even if the serialization loop is busy/blocking inside an `onNext` emission.\r\n\r\nIn addition, a unit test was added to `Observable.zip` as well.\r\n\r\nReported in #5111.", "NaN"], ["5123", "1.x: throttleFirst detecting clock-drift backwards to open the gate", "David Karnok", "akarnokd", "02/22/17, 09:59:44 AM", "If the current time moves backwards before the time the gate was closed, the opening of the gate would happen way later. Since we don't know how much relative time has passed, this fix opens the gate when the drift is detected during `onNext`.\r\n\r\nReported in #5120.\r\n\r\n/cc @davidmoten as you've been experimenting with time-only (that is non-scheduled) gating.", "NaN"], ["5125", "1.x: reduce stack depth with switchIfEmpty", "David Karnok", "akarnokd", "02/21/17, 04:45:19 PM", "Stack depths may get deep if `switchIfEmpty` has to switch to the alternative source at the end of an already long chain leading to the `onCompleted`. Using multiple `switchIfEmpty` amplifies the impact on the stack depth. \r\n\r\nThis PR introduces trampolined subscribing to both sources (similar to how `concat` works), thus given synchronous sources, the stack depth rewinds to the level it was when the `switchIfEmpty` was subscribed to. In addition, to reduce the depth even further, the operator has been turned into an `OnSubscribe`-based implementation to avoid the extra depth due to `lift`.\r\n\r\nRelated: [rxjava StackOverflowError exception in long chain\r\n](http://stackoverflow.com/questions/42363452/rxjava-stackoverflowerror-exception-in-long-chain)", "NaN"], ["5127", "2.x: update javadoc of flatMap() overloads", "David Karnok", "akarnokd", "02/22/17, 05:11:55 PM", "This PR rewords the Javadoc of `Flowable.flatMap()` overloads to correctly express their behavior regarding backpressure towards their upstream. In 2.x, only `merge()` operators are unbounded-in by default, `flatMap`s are by default bounded by `bufferSize()` or the `maxConcurrency` parameter.\r\n\r\nIn addition, one of the `flatMap` overload still had `resultSelector` instead of the common `combiner` parameter name. As far as I know, there are no language-specific libraries targeting 2.x yet where in the language the actual parameter names are also part of the signature and changing them counts as an incompatible change.\r\n\r\nRelated #5126. ", "NaN"], ["5133", "2.x: fix flatMap not cancelling the upstream eagerly", "David Karnok", "akarnokd", "02/24/17, 02:40:06 PM", "This PR fixes the lack of eager cancellation when flatmapping sources and not stopping the upstream if the inner source fails.\r\n\r\nUnit tests were added to verify `Single` (in case it receives a dedicated implementation one day as currently it delegates to `Flowable`), `Flowable` and `Observable`.\r\n\r\nReported in #5132.", "NaN"], ["5136", "2.x: fix repeatWhen and retryWhen signatures", "David Karnok", "akarnokd", "02/25/17, 08:48:22 PM", "Adjust the `repeatWhen` and `retryWhen` signatures to accept `Publisher<?>` on `Single` and `Completable`, matching `Flowable`'s signature.\r\n\r\nReported in #5135.", "NaN"], ["5137", "2.x: add TestSubscriber.withTag", "David Karnok", "akarnokd", "02/27/17, 04:45:21 PM", "This PR adds the method `withTag` to the `TestBaseConsumer` that allows setting a textual tag which is then appended to the assertion failure's message:\r\n\r\n```\r\nFailure message (latch = 1, values = 0, errors = 0, completions = 0, tag = x: 5, y: 7)\r\n```\r\n\r\nUse case, for example, is to add the parameters of the current flow to help identify what settings caused the failure. This comes up with unit tests that have some form of (nested) loop(s) to verify multiple parameter ranges. (It is often much easier than trying to work out JUnit rules and such.) ", "NaN"], ["5140", "2.x: fix timed replay-like components replaying outdated items", "David Karnok", "akarnokd", "02/27/17, 05:10:17 PM", "The timed versions of `Flowable.replay()`, `ReplayProcessor`, `Observable.replay()` and `ReplaySubject` all replay outdated items to new subscribers and through the `getValues()` and `size()` state-peeking methods, similar to issue #3917 resolved via #4023.\r\n\r\nThe fix includes a node-walk for new subscribers that skips old entries. Some unit tests weren't logically considering the emission pattern (i.e., items timed out shouldn't appear) and have been fixed as well.\r\n\r\nReported in #5139.", "NaN"], ["5141", "1.x: fix timed replay() not terminating when all items timeout", "David Karnok", "akarnokd", "02/27/17, 06:25:54 PM", "The timed `replay()` operator didn't terminate a late subscriber if all the items timed out in the meantime.\r\n\r\nRelated: #5139.", "NaN"], ["5146", "1.x: add unsubscribeOn to Single type (#5138)", "Yasuhiro SHIMIZU", "yshrsmz", "03/12/17, 11:53:47 AM", "resolve #5138 \r\n\r\nadd unsubscribeOn to Single type.", "NaN"], ["5153", "2.x: Java 9 compatibility fixes (March 3)", "David Karnok", "akarnokd", "03/03/17, 10:57:37 PM", "Java 9 has changed its overload resolution algorithm and things that resolved unambiguously in Java 8 no longer resolve:\r\n\r\n```java\r\nFlowable<? extends T> source = ...\r\n\r\nsource.subscribe(new FlowableSubscriber<T>() { ... });\r\n```\r\n\r\nWith the code above, javac 8, Eclipse and IntelliJ 2017 EAP picks `Flowable.subscribe(FlowableSubscriber<? super T> s)` as expected. However, javac 9 finds it ambiguous with `Flowable.subscribe(Subscriber<? super T> s)` despite IntelliJ 2017 EAP not indicating any error and still jumping to the right method via CTRL+Click.\r\n\r\nThe problem may come from the `? extends T` part of the declaration. Having just `Flowable<T>` compiles properly with javac9.\r\n\r\nLuckily, we don't need `? extends T` and this PR changes the internal signatures of the affected components.", "NaN"], ["5155", "2.x: improve BaseTestConsumer with awaitCount & timeout", "David Karnok", "akarnokd", "03/07/17, 08:33:43 AM", "This PR enhances the timeout detection and reporting of the `TestSubscriber`/`TestObserver` base class `BaseTestConsumer`:\r\n\r\n   - `awaitCount(int atLeast [, Runnable waitStrategy [, timeout]])`: wait until at least the given amount of onNext events have been observed or the upstream terminated.\r\n  - Enhance `awaitX` methods to set a `timeout` flag.\r\n  - Show the `timeout!` string in the assertion failures set by the `awaitX` methods.\r\n  - Show the `disposed!` string in the assertion failures if the consumer has been cancelled/disposed.\r\n  - `assertTimeout` and `assertNoTimeout` to assert explicitly after an `awaitX` method.\r\n  - `isTimeout` and `clearTimeout` to check and clear the flag status.\r\n\r\nIn addition, the internal array that collects the items has been replaced with a new custom `List` implementation: `VolatileSizeArrayList` that makes sure `size()` is a volatile read and happens before the committing the size in another thread due to `add()`. (In theory, one shouldn't cast `values()` unconditionally to `ArrayList` anyway.)", "NaN"], ["5156", "Add @NonNull to the methods of Emitter", "Hiroshi Kurokawa", "hkurokawa", "03/05/17, 04:59:21 PM", "This PR is a part of #4876 \r\n\r\nThis PR adds `@NonNull` annotation to some methods of `Emitter` so that the users of RxJava migrating from 1.x to 2.x can easily know passing null to the methods will cause NPE.", "NaN"], ["5161", "2.x: add Observable.switchMapSingle and switchMapSingleDelayError", "Dave Moten", "davidmoten", "03/09/17, 08:48:38 AM", "This is a new operator discussed in #4853. The issue refers to a goodly number of new operators which I'll do bit by bit as my time allows and to ensure review is not too daunting.\r", "NaN"], ["5163", "2.x: Single.subscribe() to report isDisposed() true on success/error", "David Karnok", "akarnokd", "03/08/17, 05:05:18 PM", "The `ConsumerSingleObserver` didn't report `isDisposed` consistently with its state.\r\n\r\nReported in #5160.", "NaN"], ["5170", "2.x: fix LambdaObserver not cancelling the upstream", "David Karnok", "akarnokd", "03/10/17, 05:22:23 PM", "The `LambdaObserver` didn't cancel the upstream when its `onSubscribe` and `onNext` callbacks crashed. Also reported on the mailing list:\r\n\r\n> Dave Smith: When I am using an operator in Observable that calls subscribe (forEach as a example) and the onNext function throws an Exception the underlying class (LambdaObserver) marks the subscription disposed but does not notify upstream that is is disposed. What is the reason for this?\r\n\r\nThe `LambdaSubscriber` was working correctly. Both received unit tests to ensure the correct behavior.", "NaN"], ["5174", "2.x: WIP removes anonymous inner classes.", "Sleiman Jneidi", "SleimanJneidi", "03/11/17, 09:48:01 PM", "This is a WIP. Since the changes are big, an incremental review and PR was recommended by @akarnokd \r\n\r\n - Removes them  from flowable/observable/operators.\r\n- Issue [#5150](https://github.com/ReactiveX/RxJava/issues/5150)", "NaN"], ["5176", "2.x: fix private field access, few generics problems", "David Karnok", "akarnokd", "03/11/17, 10:40:03 PM", "This PR fixes some private field accessor problems introduced by #5174 as well as a couple of generics warnings.\r\n\r\nNote that in IntelliJ, there is a J2ME inspection for private access checks between parent and inner classes.", "NaN"], ["5177", "Removes all anonymous inner classes", "Sleiman Jneidi", "SleimanJneidi", "03/12/17, 11:32:29 AM", "This is a what left to complete [this one](https://github.com/ReactiveX/RxJava/pull/5174) :\r\n\r\n  - Removes all AICs\r\n\r\n  - Issue [#5150](https://github.com/ReactiveX/RxJava/issues/5150)\r", "NaN"], ["5181", "1.x: replay().refCount() avoid leaking items between connections", "David Karnok", "akarnokd", "03/15/17, 04:31:09 PM", "This PR updates `replay()` to not leak items between reconnections when run with `.refCount()`. The `replay()` operator is designed to hold onto the buffer even after its completion so late subscribers can still receive the cached data. Only a new `connect()` clears this data which may or may not happen. Since `refCount` ensures that there won't be any latecommers to an already completed connection (because it also drops its current subscribers on termination or when reaching zero), the `replay()` can be reset to an empty state.\r\n\r\nReported in #5172 \r", "NaN"], ["5182", "2.x: fix replay().refCount() leaking items between connections", "David Karnok", "akarnokd", "03/14/17, 08:57:08 AM", "This PR updates `Observable.replay()` and `Flowable.replay()` **for 2.x** to not leak items between reconnections when run with `.refCount()`. The `replay()` operator is designed to hold onto the buffer even after its completion so late subscribers can still receive the cached data. Only a new `connect()` clears this data which may or may not happen. Since `refCount` ensures that there won't be any latecommers to an already completed connection (because it also drops its current subscribers on termination or when reaching zero), the `replay()` can be reset to an empty state.\r\n\r\nRelated: #5172, #5181.", "NaN"], ["5183", "2.x: test to disallow anonymous inner classes", "David Karnok", "akarnokd", "03/14/17, 11:58:20 AM", "This PR adds an unit test that scans the compiled .class files for anonymous inner classes naming (i.e., dollar sign followed by a number). Since all the main, test and perf classes end up in the same place, the test has exceptions for file names containing `Perf` or `Test`.\r\n\r\nThe PR also fixes a few Checkstyle warnings from #5177 and fixes a couple classes from tests that don't have the word `Test` in their name and thus were detected.", "NaN"], ["5184", "2.x: add offer() method to Publish & Behavior Processors", "David Karnok", "akarnokd", "03/16/17, 08:39:41 AM", "This PR adds the `boolean offer(T item)` method to `PublishProcessor` and `BehaviorProcessor` to prevent `MissingBackpressureException` when one of the `Subscriber`s is not ready to receive element by indicating a false return value. The sender can then retry the offer with any wait strategy it choses.\r\n\r\nIn addition, this PR adds Reactive-Streams Publisher TCK checks to verify `AsyncProcessor`, `BehaviorProcessor`, `PublishProcessor`, `ReplayProcessor` and `UnicastProcessor` as being `Publisher`s. Unfortunately, the TCK can't verify them as `Processor's because the TCK has certain expectations about how a `Processor` should behave (namely: expects fail-fast, refCount-like nature).", "NaN"], ["5187", "2.x: reflection-based parameter validator & fixes", "David Karnok", "akarnokd", "03/15/17, 04:37:37 PM", "This PR adds a reflection-based parameter validator to check the base reactive classes for proper parameter validation: null checks and argument ranges. The problems detected are fixed as well.", "NaN"], ["5188", "2.x: fix flatMap emitting the terminal exception indicator on cancel", "David Karnok", "akarnokd", "03/16/17, 08:26:14 AM", "This PR fixes the case when `Flowable.flatMap` and `Observable.flatMap` would emit the `ExceptionHelper.TERMINTED` indicator exception to downstream due to emission-cancellation race.\r\n\r\nReported on [StackOverflow](http://stackoverflow.com/questions/42580195/what-is-the-meaning-of-no-further-exceptions).", "NaN"], ["5189", "2.x: fix concatMapEager should accept 0 for prefetch", "Naoki Morioka", "nmorioka", "03/15/17, 07:16:13 PM", "Fixes a bug that  Flowable.concatMapEager(mapper , maxConcurrency , prefetch) and Observable.concatMapEager(mapper , maxConcurrency , prefetch) operators will not accept 0 and negative numbers.\r\n\r\nReported in #5185.", "NaN"], ["5191", "Correct java doc for refCount() return type. v2.0.7", "Sadegh", "sadegh", "03/16/17, 05:19:01 PM", "Java doc for `ConnectableObservable.refCount()` says  it returns a `Flowable`, but it should be `Observable`", "NaN"], ["5195", "1.X: UnicastSubject fail-fast and delay-error behavior", "Maksym Ostroverkhov", "mostroverkhov", "03/18/17, 04:47:15 PM", "This PR adds support for delay-error behavior to `UnicastSubject` with methods `UnicastSubject<T> create(boolean delayError)`, `UnicastSubject<T> create(int capacityHint, Action0 onTerminated, boolean delayError)`. Behavior of existing factory methods was not changed, and is fail-fast.\r\n\r\nRelates to #5165 \r", "NaN"], ["5196", "2.x: Add a few more @Nullable & @NonNull annotations to public interfaces", "Niklas Baudy", "vanniktech", "03/19/17, 03:17:52 PM", "- adds the @Nullable & @NonNull annotations to\r\n  - Emitters\r\n  - Observer\r\n  - OnSubscribe\r\n  - Operator\r\n  - Source\r\n  - Transformer\r\n\r\nfor Observable, Maybe, Single, Completable & Flowable.", "NaN"], ["5197", "2.x: add ParallelTransformer interface, params-validation", "David Karnok", "akarnokd", "03/20/17, 08:56:04 AM", "This PR adds the `ParallelTransformer` interface to match the other `XTransformer` interfaces, adds `@NonNull` annotations to the `ParallelFlowable` operators and adds the `ParallelFlowable` class to the parameter validator test set.", "NaN"], ["5199", "2.x: increase timeout on parallel & completable tests", "David Karnok", "akarnokd", "03/20/17, 10:28:13 AM", "This PR increases the timeout on `CompletableTest` test methods and on `ParallelFlowableTest.parallelismAndPrefetchAsync`.\r\n\r\nRelated: #5154, #5179.", "NaN"], ["5202", "2.x: add resilient versions of parallel map(), filter() & doOnNext()", "David Karnok", "akarnokd", "03/23/17, 05:27:59 PM", "This PR adds 2 new overloads to `ParallelFlowable` operators `map`, `filter` and `doOnNext` to enable per item error handling in case the main function fails with some exception.\r\n\r\n```java\r\nFlowable.range(0, 2)\r\n.parallel(1)\r\n.map(v -> 1 / v, ParallelFailureHandling.SKIP)\r\n.sequential()\r\n.test()\r\n.assertResult(1);\r\n```\r\n\r\nThe new `ParallelFailureHandling` has some default enumeration values to handle the common cases. In addition, the `BiFunction` overload allows bounded retries and/or conditional handling of failures.\r\n\r\n\r\nRelated: #5128.", "NaN"], ["5207", "2.x: prevent tasks to self interrupt on the standard schedulers", "David Karnok", "akarnokd", "03/22/17, 12:51:57 PM", "Task wrappers of the various schedulers and modes (direct & worker) were able to get cancelled via interruption from the same thread they were running.\r\n\r\nRelated #5203.", "NaN"], ["5208", "2.x: fix images of firstElement, flattenAsX, flatMapIterable", "David Karnok", "akarnokd", "03/21/17, 01:59:00 PM", "This PR links in the new images from #5130 for previously misleading marble diagrams of the operators.", "NaN"], ["5209", "1.x: add marble diagram to UnicastSubject, fix javadoc", "David Karnok", "akarnokd", "03/21/17, 10:14:02 PM", "This PR fixes a missing javadoc entry for `<T>` in `UnicastSubject` and adds a marble diagram to the class itself:\r\n\r\n![Image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/UnicastSubject.v1.png)", "NaN"], ["5210", "2.x: better documentation on the abstract consumer classes", "David Karnok", "akarnokd", "03/21/17, 09:43:12 PM", "This PR improves the documentation of the abstract consumer classes such as `DisposableSubscriber`, `ResourceSubscriber` and their counterparts for the other base reactive types.\r\n\r\nIt contains a lot of copy-paste so please read through all of the text in case the text was not properly adapted to the abstract class at hand.\r\n\r\nRelated: #5148.", "NaN"], ["5212", "1.x: add link rel=canonical to 1.x javadoc files (semi auto)", "David Karnok", "akarnokd", "03/22/17, 11:36:57 AM", "This PR adds `<link rel=\"canonical\" href=\"...\"/>` nodes to the 1.x javadoc via the following program:\r\n\r\nhttps://github.com/akarnokd/akarnokd-misc/blob/master/src/main/java/hu/akarnokd/rxjava/javadoc/AddCanonical.java\r\n\r\nHow to use it:\r\n- Within a Java 8 project, replace the file directories that point to your checked-out `gh-pages` branch.\r\n- Unpack the rxjava-1.2.x-javadoc.jar into the two places\r\n- Run `AddCanonical`\r\n- Push a PR with the changes.", "NaN"], ["5213", "2.x: fix window() with time+size emission problems", "David Karnok", "akarnokd", "03/22/17, 07:54:35 PM", "The `window()` operator overload with time and size bound didn't work correctly when some windows were terminated by the timeout and others by the size. This PR fixes:\r\n\r\n  - the case when the operator restarts the time windows when the size bound is reached,\r\n  - leaking of the worker,\r\n  - the item counter not reset to zero when the time bound is reached,\r\n  - periodic window bound stopped working after the first window.\r\n\r\nRelated #5104 (again).", "NaN"], ["5217", "[2.x] UnicastSubject fail fast support", "Maksym Ostroverkhov", "mostroverkhov", "03/23/17, 04:51:29 PM", "This PR adds support for fail-fast behavior to `UnicastSubject` with methods `UnicastSubject<T> create(boolean delayError)`, `UnicastSubject<T> create(int capacityHint, Runnable onTerminated, boolean delayError)`.  Relates to #5165\r", "NaN"], ["5219", "2.x: safeguard against building with v1 tags", "David Karnok", "akarnokd", "03/24/17, 10:07:16 AM", "This PR adds the same version guard that 1.x has: stop the build when the version tag doesn't start with \"v2.\" to prevent releasing a 2.x version under the 1.x numbering.\r\n\r\nThis almost happened with today's botched 1.2.8 release where I forgot to set the target tag to 1.x, but noticed the mistake and stopped the build.\r\n\r\nSince tags can't be deleted or retargeted, the fix can't prevent the wrong target tag mistake on itself. A small workaround is to mark bad tagged releases as pre-release.\r\n\r\nEither way, the 2.x snapshots have a fixed `2.0.0-DP0-SNAPSHOT` and don't draw a custom version number from the latest release tag on their branch, unlike 1.x.", "NaN"], ["5222", "2.x: cleanup based on IntelliJ 2017.1 inspections", "David Karnok", "akarnokd", "03/24/17, 06:06:57 PM", "This PR is the result of running IntelliJ inspections on the code:\r\n\r\n  - replace `unsubscribe` with `cancel` and `dispose` in the main classes to better match the 2.x terminology\r\n  - write out a couple of local variables\r\n  - remove unnecessary `return` and `continue` statements\r\n  - remove unnecessary variable writes\r\n  - remove unnecessary and unused fields\r\n  - add `final` to some fields\r\n  - fix typos ", "NaN"], ["5223", "2.x: improve the documentation of Schedulers utility class.", "David Karnok", "akarnokd", "03/24/17, 05:49:55 PM", "This PR improves the javadoc of the `io.reactivex.schedulers.Schedulers` utility class plus adds a missing `SchedulerSupport` constant for the `single()` scheduler.\r\n\r\nLet me know if something needs further explanation (or some new case needs explanation).\r\n\r\nRelated: #5145.", "NaN"], ["5225", "1.x: fix Completable.onErrorResumeNext unsubscribe not propagated", "David Karnok", "akarnokd", "03/24/17, 07:39:32 PM", "The `Completable.onErrorResumeNext` did not properly propagate the downstream `unsubscribe()` call to upstream.\r\n\r\nReported in #5224.", "NaN"], ["5226", "2.x UnicastProcessor fail-fast support", "Maksym Ostroverkhov", "mostroverkhov", "03/24/17, 06:34:24 PM", "This PR adds support for fail-fast behavior to `UnicastProcessor` with methods `UnicastProcessor<T> create(boolean delayError)`, `UnicastProcessor<T> create(int capacityHint, Runnable onTerminated, boolean delayError)`. Relates to #5165, #5217 ", "NaN"], ["5230", "2.x: Fix wrong comments in Functions.java \u201cFunction3\u201d -> \u201cBiFunction\u201d", "Jihong Park", "ggikko", "03/26/17, 12:33:23 PM", "I'm using this library in my company(KakaoBank in Korea) and interested in this library.. so I read whole code these days. I feel really thanks for all people who make awesome library and I just wanted to contribute this library.  ", "NaN"], ["5231", "Add TimeUnit null check test case in Timed", "Jihong Park", "ggikko", "03/26/17, 04:49:40 PM", "1. It's about Timed.java test case that is null check TimeUnit parameter.\r\n2. formatting in BasicIntQueueDisposable\r\n3. add testcase blockingIterableNegativeBufferSizeFail for blockingIterable\r\n4. modify BlockingMultiObserver field\u2019s modfier\r\n\r", "NaN"], ["5240", "2.x: fix CallbackCompletableObserver calling onError, ResourceX wording", "David Karnok", "akarnokd", "03/27/17, 07:37:01 PM", "This PR contains the fix for incorrect call of the `onError` handler within `CallbackCompletableObserver.onComplete()` reported in [5099](https://github.com/ReactiveX/RxJava/issues/5099#issuecomment-289544756) as well as wording fixes to the `ResourceX` javadoc.", "NaN"], ["5247", "2.x: fix Flowable.toList() onNext/cancel race", "David Karnok", "akarnokd", "03/31/17, 11:16:01 AM", "This PR fixes the `NullPointerException` that can happen because `cancel` nulls out the value and `onNext` simply dereferences that value in `FlowableToList`.\r\n\r\nReported in #5246 .", "NaN"], ["5250", "Defer creation of the TimeoutException when using the Single.timeout() operator", "Dan Hendry", "dhendry", "04/02/17, 08:48:07 AM", "Use a defer instead of simply `other = Single.error(new TimeoutException())` since instantiating an exception will cause the current stack trace to be inspected and that overhead should only be incurred when a timeout actually happens.\r\n\r\nI caught this problem as I was investigating unusually high CPU usage in one of the systems I operate. When measuring the impact of this change in a real world situation that makes only moderate use of this operator, I observed a *11%* reduction in CPU usage.", "NaN"], ["5251", "More nullability annotations", "Michael", "mibac138", "04/01/17, 07:11:23 PM", "Added nullability annotations to:\r\n- Disposables\r\n- Observers\r\nand some others", "NaN"], ["5255", "Add nullPointerException comments and ObjectHelper test code.", "Jihong Park", "ggikko", "04/01/17, 03:49:27 PM", ":)", "NaN"], ["5256", "2.x: fix flatMapIterable appearing to be empty when fused", "David Karnok", "akarnokd", "04/01/17, 06:00:20 PM", "The wrong logical expression in the `isEmpty()` method made `flatMapIterable` complete earlier, even if data was available in the current iterable.\r\n\r\nSomewhat related: https://github.com/reactor/reactor-core/issues/508 (different logical bug in the same method).", "NaN"], ["5257", "Remove @NonNull annotations in BiConsumer method parameter", "Bloder", "bloderxd", "04/02/17, 08:46:56 AM", "This PR is part of https://github.com/ReactiveX/RxJava/issues/5216\r\n\r\nThis PR remove @NonNull annotations from ```BiConsumer``` method parameters, there's no sense use these annotations in ```Single``` context because in this case ```BiConsumer``` always brings you a null parameter.\r", "NaN"], ["5258", "1.x Use IntelliJ IDE friendly assertion failure message", "Marko Tiidla", "mtiidla", "04/02/17, 10:42:11 AM", "The `assertItem` failure message pattern in `TestSubscriber` does not match any of the regex patterns defined by IntelliJ to show `<Click to see difference>` link. \r\n![before](https://cloud.githubusercontent.com/assets/2339109/24586365/9239290c-179f-11e7-8178-38425448d3a1.jpg)\r\n\r\nBy changing the \"_expected to be_\" to \"_expected:_\", the pattern is recognised by IntelliJ and the helpful link is presented.\r\n![after](https://cloud.githubusercontent.com/assets/2339109/24586364/9238f414-179f-11e7-9b12-e6b648318550.jpg)\r\n\r\nThe original idea from #5249 was to use the \"_expected:<> but was:<>_\" pattern used in JUnit, but it is not picked up on its own by IntelliJ. The AssertionError must extend from JUnit's ComparisonFailure, to get it recognised. This however requires dependency on JUnit.\r\n![junit](https://cloud.githubusercontent.com/assets/2339109/24586389/fefd6c38-179f-11e7-8841-884bc07db404.jpg)\r\n\r\nSo in the end, the fix is just a very simple change in the message.\r", "NaN"], ["5262", "2.x: Fixed broken links in Readme file", "Mahach Imangazaliev", "ImangazalievM", "04/03/17, 07:25:19 AM", "Fixed broken links for @Beta and @Experimental annotations\r\n\r\nThank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [x] Please give a description about what and why you are contributing, even if it's trivial.\r\n\r\n  - [ ] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n\r\n  - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r", "NaN"], ["5268", "2.x: Remove commented out code in IoScheduler", "Marvin Ramin", "Mauin", "04/06/17, 06:21:21 PM", "Removes some code that was commented out in `IoScheduler`. Those lines were last edited in 2 years ago, so I assume they should be safe to delete.", "NaN"], ["5271", "2.x: enable link to external JDK, fix Schedulers style", "David Karnok", "akarnokd", "04/07/17, 07:25:58 PM", "This PR enables the generated Javadoc to `{@link }` to JDK classes properly (current 2.0.8 doc [shows them](http://reactivex.io/RxJava/2.x/javadoc/2.0.8/io/reactivex/schedulers/Schedulers.html#io()) as plain text). I'm linking to the v7 docs because v6 is ugly.\r\n\r\nIn addition, I've fixed the style of the `Schedulers` documentation by separating the **Supported system properties** properly into a new paragraph.", "NaN"], ["5277", "2.x: Single.subscribe(BiConsumer) consistent isDisposed", "David Karnok", "akarnokd", "04/10/17, 12:44:37 PM", "Fixes the `Single.subscribe(BiConsumer)` to report `isDisposed` when terminating.\r\n\r\nReported in #5276.", "NaN"], ["5281", "2.x: BehaviorProcessor & Subject terminate-subscribe race", "David Karnok", "akarnokd", "04/12/17, 01:24:43 PM", "This PR fixes the race condition in `BehaviorProcessor` and `BehaviorSubject` when `onComplete()` or `onError()` is called concurrently with `subscribe` and the consumer throws a `NullPointerException` instead of relaying the terminal event.\r\n\r\nThe fix involves having a separate `terminalEvent` atomic field, CAS-ing in the actual or marker `Throwable` and reading that field in `subscribe`.", "NaN"], ["5286", "2.x: cleanup for text and javadoc 04/15", "David Karnok", "akarnokd", "04/15/17, 08:29:03 PM", "This PR \r\n\r\n- fixes a couple of documentation and message copy-paste errors\r\n- fixed FlowableFlattenIterable not checking for null returned by `Iterator::next()`\r\n- replace `publisher` with the appropriate name", "NaN"], ["5287", "2.x: fix Flowable.flatMapMaybe/Single maxConcurrency not requesting more", "David Karnok", "akarnokd", "04/17/17, 10:40:42 AM", "This PR fixes `Flowable.flatMapMaybe` and `Flowable.flatMapSingle` not replenishing from the upstream when they complete/error per inner source.", "NaN"], ["5288", "2.x: add/remove empty lines in ConnectableObservable and Observable", "smartbeng", "smartbeng", "04/17/17, 10:44:40 AM", "**Edit:**\r\n\r\nThis PR adds a newline to `ConnectableObservable` and removes one excess empty line from `Observable`.", "NaN"], ["5296", "Improve doOnDispose JavaDoc", "Marvin Ramin", "Mauin", "04/19/17, 06:46:24 PM", "Sorry for the earlier PR #5295... :/ \r\n\r\nThis addresses the JavaDoc issues discussed in #5283.\r\n\r\n- Removes the Note in `Observable.doOnDispose` which claims its action would be called on terminal events.\r\n- Slightly adjusts the JavaDocs of the `Maybe`/`Single`/`Completable` variants.\r\n- Adds `@throws` note to some `Observable`/`Single`/`Maybe` `.doOnDispose` as it was present in the `Completable` variant.", "NaN"], ["5297", "Fix JavaDoc image for Single#flatMapObservable", "Veyndan Stuart", "veyndan", "04/20/17, 09:09:46 AM", "[`Single.flatMapObservable.png`](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapObservable.png) should be used for `Single#flatMapObservable` instead of [`Single.flatMap.png`](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMap.png).", "NaN"], ["5301", "2.x: more detailed no-multi-subscribe with std consumers error message", "David Karnok", "akarnokd", "04/20/17, 09:23:14 PM", "This PR changes the \"Disposable already set!\" and \"Subscription already set!\" messages on the standard consumer classes (`DisposableSubscriber`, `DisposableObserver`, etc.) to something more meaningful:\r\n\r\n\"It is not allowed to subscribe with a(n) `<class name>` multiple times. Please create a fresh instance of `<class name>` and subscribe that to the target source instead.\"\r\n\r\nWhere `<class name>` is a placeholder for the `getClass().getName()` of the subclass of those consumer types. It should clearly state to avoid subscribing with them multiple times as well as printing the full class name to indicate the problem is with the use of the implementor class, and not with the abstract RxJava class.\r\n\r\nInspired by [this StackOverflow](http://stackoverflow.com/questions/43482263/rxjava2-protocolviolationexception-disposable-already-set) question, one of many such questions.\r\n\r\nFor the internal operators, the original error message stays because when they appear, that is still likely due to an implementation bug (or a misbehaving user-created custom implementation).", "NaN"], ["5302", "2.x: add Single.unsubscribeOn()", "David Karnok", "akarnokd", "04/20/17, 05:20:53 PM", "This PR adds the `Single.unsubscribeOn()` operator.\r\n\r\nRelated: #5300.", "NaN"], ["5304", "Correct documented return type of Single#flatMapObservable Function argument", "Veyndan Stuart", "veyndan", "04/20/17, 09:11:50 PM", "The argument of `Single#flatMapObservable` clearly states that it is expecting a `Function` which returns an `ObservableSource` but the documentation contradicts that.", "NaN"], ["5306", "2.x: Change ObservableSource.defer to Observable.defer in Observable.scan() documentation.", "Niklas Baudy", "vanniktech", "04/21/17, 01:32:28 PM", "- changes `ObservableSource.defer` to `Observable.defer()`", "NaN"], ["5307", "2.x: Apply promotions for v2.1", "David Karnok", "akarnokd", "04/21/17, 06:02:26 PM", "This PR applies the promotions listed in #5243.\r\n\r\nSuggested review strategy:\r\n\r\n- Check if the `@Experimental` annotation has been removed or turned into `@Beta`.\r\n- Check if the `<p>History: 2.0.x` matches the original value of the updated `@since 2.0.x`.", "NaN"], ["5309", "2.x: Fix Javadoc of Flowable.toObservable", "David Karnok", "akarnokd", "04/21/17, 08:19:18 PM", "The `Flowable.toObservable()` javadoc was referring to `Publisher` instead of `Observable`.", "NaN"], ["5310", "2.x: improve coverage of some classes (no functional changes)", "David Karnok", "akarnokd", "04/22/17, 08:43:48 AM", "Improve the coverage of some classes, plus re-add the unit test that validates the `StrictSubscriber`.\r\n\r\nOnly test changes, no functional changes.", "NaN"], ["5318", "1.x: apply API promotions for 1.3", "David Karnok", "akarnokd", "04/27/17, 03:57:52 PM", "This PR applies the API promotions of #5201.\r\n\r\nNote that `Single.unsubscribeOn` remainded experimental and `Observable.fromEmitter` was removed.\r\n\r\nWhere the experimental version was available, it was moved up as `<p>History: 1.x.y - experimental` similar to how 2.x versioning/promotions happen.\r\n\r\nSuggested review strategy:\r\n\r\n- verify `@Experimental` and `@Beta` annotations are removed from the method and from Javadoc\r\n- verify `@since 1.3` is present", "NaN"], ["5324", "Mark VolatileSizeArrayList as RandomAccess list", "Marek Langiewicz", "langara", "05/01/17, 11:54:17 AM", "This is needed for generic functions to select appropriate algorithm when searching etc.\r\nDetails are in RandomAccess interface javadoc.", "NaN"], ["5326", "Add missing bracket to example code", "Cypress Frankenfeld", "cypressf", "05/02/17, 07:30:09 AM", "Difficult to count those with all the java 7 boilerplate!", "NaN"], ["5332", "Add the cast operator to Single.", "Michael Burns", "Mikey-Burns", "05/08/17, 09:10:28 PM", "Adding the cast operator to Single.  This exists in the 2.x branch but not in the 1.x branch, so callers have had to do unnatural operations like `.map(SomeClass.class:cast)` to get around this.  Added tests similar to those for Observable.cast. \r\n\r\nSigned-off-by: Mike Burns <burnsm523@gmail.com>", "NaN"], ["5343", "Fix Javadoc for Maybe.toSingle", "Paul Blessing", "paulblessing", "05/15/17, 09:38:57 PM", "The Javadoc for the `Maybe.toSingle()` overload that accepts a `defaultValue` incorrectly states that it will convert an empty `Maybe` into a `Single` that signals `NoSuchElementException` (likely copied from the version of `Maybe.toSingle()` that does not accept a default value).\r\n\r\nThis change updates the Javadoc to indicate that the returned `Single` will emit `defaultValue` if called on an empty `Maybe`.\r\n\r\nRelevant existing test: https://github.com/ReactiveX/RxJava/blob/8819cc933e26449751535bc48ba2f10852c9b96d/src/test/java/io/reactivex/maybe/MaybeTest.java#L2730", "NaN"], ["5344", "2.x: add tryOnError to create/XEmitter API", "David Karnok", "akarnokd", "05/16/17, 06:24:19 PM", "This PR adds the `tryOnError` method to the various `Emitter` types used in the `create` operators that allows the developer to avoid the `UndeliverableException` in case a cancellation is racing with the emission of an error. The return value indicates a success of the delivery; in case of `false`, the developer can decide to log/drop the specific error if that makes sense for him/her.", "NaN"], ["5347", "2.x: Fix Javadoc of FunctionX", "bruce3x", "bruce3x", "05/17/17, 07:20:55 AM", "fix the mistake for  `FunctionX` javadoc", "NaN"], ["5351", "2.x: update some marbles of Observable", "David Karnok", "akarnokd", "05/18/17, 07:57:12 AM", "Update/fix to a couple of marble diagrams in `Observable`:\r\n\r\n- `singleOrError`: [reuse existing](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/singleOrError.png)\r\n- `combineLatestDelayError`: [reuse existing](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/combineLatestDelayError.png)\r\n- `concatArrayEager`: [new diagram](https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-302041653)\r\n- `erro`r: [new diagrams](https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-302043293)\r\n- `fromFuture`: [new diagrams](https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-302054241)\r\n- `fromIterable`: [new diagram](https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-302054967)", "NaN"], ["5353", "1.x: remove semicolon that Eclipse thinks is compile error", "Dave Moten", "davidmoten", "05/18/17, 07:53:35 AM", "as per title, gradle build works fine but Eclipse doesn't like it.", "NaN"], ["5354", "2.x: Fix typo in error message.", "Ragunath Jawahar", "ragunathjawahar", "05/18/17, 03:01:50 PM", "When `BaseTestConsumer` receives fewer items than expected, the error shown has a typo. Replaced *Fever* with *Fewer*.", "NaN"], ["5367", "2.x: make sure interval+trampoline can be stopped", "David Karnok", "akarnokd", "05/28/17, 10:14:37 AM", "This PR fixes the case where a `trampoline` scheduler is used with the `interval` or `intervalRange` operator, the periodic emissions can't be cancelled properly. The synchronous and blocking nature of the periodic schedule is that the `Disposable` is never connected with the downstream and the `interval` stays in a drain-sleep loop per emission indefinitely.\r\n\r\nThis PR changes the operators to use the `Worker` of a trampoline scheduler that is available before the drain-sleep loop thus a downstream cancellation can stop the loop. Any other \"async\" scheduler will still use the direct periodic scheduling facility.\r\n\r\nIn addition, the trampoline loop has been fixed to check for the worker `disposed` state in the inner loop.\r", "NaN"], ["5378", "2.x: make SingleMap not allow map function return null", "Koji Lin", "kojilin", "05/30/17, 08:29:48 AM", "Found code like below can works\r\n```\r\nSingle.just(\"1234\").map(s -> null)\r\n              .subscribe(s -> {\r\n                  System.out.println(s);\r\n              });\r\n```\r\nBecause Single#just not allow null, so prevent mapper return null.", "NaN"], ["5379", "2.x: add missing null checks on values returned by user functions", "David Karnok", "akarnokd", "06/01/17, 07:35:43 AM", "This PR adds null checks to places where it was missing.\r\n\r\nIn addition, the `XMapNotification` operators now report a composite exception of the original `Throwable` and the error thrown by the function that should return the continuation source.\r\n\r\nAlso fixed `TestSubscriber`/`TestObserver` not cancelling the sequence if the fused poll crashed.", "NaN"], ["5383", "Fixed Javadoc for SingleFlatMapIterableObservable.", "Leonardo Lima", "leonardortlima", "06/01/17, 07:35:01 AM", "Fixed Javadoc for `SingleFlatMapIterableObservable`.", "NaN"], ["5386", "2.x: add subscribeOn overload to avoid same-pool deadlock with create", "David Karnok", "akarnokd", "06/04/17, 01:36:57 PM", "This PR adds an overload to `subscribeOn` that exposes the existing feature to optionally request on the same scheduler where the subscription happened. This is necessary to avoid same-pool deadlock when the upstream contains `create` logic that blocks the emission thread, preventing any scheduled request to get through and leading to excess buffering or dropping data excessively. By not scheduling the request, it can directly update the emitter's request tracking and let the emitter continue.\r\n\r\nFormerly, the existing `subscribeOn` automatically disabled scheduling the requests if the immediate upstream was a `FlowableCreate`. However, if there were operators between `create` and `subscribeOn` (as often happening on Android with composing the schedulers at the end of the chain), the `subscribeOn` operator run in scheduled request mode by default. \r\n\r\nThis change allows specifying this behavior through the new overload and thus distance between the `create` and `subscribeOn` operators no longer matters.\r\n\r\n(Note that 1.x already has this overload.)", "NaN"], ["5391", "Changed minimum value of rx2.buffer-size to 1", "Heikki Vesalainen", "hvesalai", "06/03/17, 10:42:42 AM", "Before the minimum value you could set with the system variable `rx2.buffer-size` was 16. With this commit, that is changed to 1.\r", "NaN"], ["5395", "Update README.md", "R\u00e9mon S.", "Coffee2CodeNL", "06/05/17, 03:58:23 PM", "Added Gitter.im chat for support.\r\n\r\nAs discussed in #5394", "NaN"], ["5403", "2.x: Fix documentation of Single.doAfterTerminate.", "Maciej G\u00f3rski", "mg6maciej", "06/09/17, 02:01:44 PM", "Fix the copy-paste error in the javadoc of `Single.doAfterTeminate` mentioning `doAfterSuccess`.\r", "NaN"], ["5405", "DefaultObserver javadoc example fix", "Volker Leck", "devisnik", "06/09/17, 10:13:18 PM", "The example in the javadoc of `DefaultObserver` is not compiling, `DefaultObserver` is not a `Disposable`. \r\nThis PR updates the javadoc to provide a compiling example.", "NaN"], ["5406", "Fix javadoc for Observable.reduce() and Observable.reduceWith()", "Volker Leck", "devisnik", "06/11/17, 05:23:36 PM", "The sample code given in the javadoc for `Observable.reduce()` isn't compiling, since the function returns a `Single`. \r\nThis PR changes it to a compiling example. \r\nIt also updates the javadoc for `reduceWith()` to better match its actual behaviour.\r\n\r\n*Remark*\r\nI'm not sure whether the sample code for `reduce()` is needed at all. The problem that it addresses might be solved better by using `reduceWith()`, imho.\r\n\r\n*Update*\r\n- similar changes applied to `Flowable.reduce()` and `Flowable.reduceWith()`", "NaN"], ["5407", "DefaultSubscriber javadoc sample fix", "Volker Leck", "devisnik", "06/11/17, 04:39:15 PM", "The example in the javadoc of `DefaultSubscriber` is not compiling, `DefaultSubscriber` is not a `Disposable`. \r\nThis PR updates the javadoc to provide a compiling example.\r\n\r\nFix is similar to #5405 for `DefaultObserver`.", "NaN"], ["5409", "#5382 Corrected Single.delay documentation", " Mithun Sasidharan", "mithunsasidharan", "06/12/17, 10:39:41 AM", "Corrected Single.delay documentation that says that success or error signals will be delayed by the specified amount, but in fact errors are not delayed, only successes.", "NaN"], ["5413", "2.x: Add empty source clauses to javadocs of combineLatest operators \u2026", null, "Sroka", "06/28/17, 08:58:59 AM", "\u2026accepting unspecified number of sources. This commit resolves #5412", "NaN"], ["5415", "2.x: fix doOnNext failure not triggering doOnError when fused", "David Karnok", "akarnokd", "06/16/17, 08:08:20 AM", "This PR fixes an issue when in a fused chain of `doOnNext` and `doOnError` the `doOnNext` function fails, the `doOnError` consumer is not called.\r\n\r\nOriginally reported in Reactor-Core: https://github.com/reactor/reactor-core/issues/664", "NaN"], ["5419", "2.x: fix periodic scheduling with negative period causing IAE", "David Karnok", "akarnokd", "06/17/17, 06:23:24 AM", "This PR adds unit tests to verify the `Scheduler.schedulePeriodicallyDirect` and `Scheduler.Worker.schedulePeriodically` works with non-positive period as required by the Javadoc. \r\n\r\nThe `computation` and `single` schedulers were not working properly and the underlying `ScheduledExecutorService` crashed with `IllegalArgumentException` thus these are now fixed with custom handler for the `period <= 0L` cases.\r\n\r\nRelated: #5416.", "NaN"], ["5421", "2.x: attempt to fix a few time-sensitive tests.", "David Karnok", "akarnokd", "06/16/17, 04:22:14 PM", "As of lately, the Travis CI runs much slower than usual and causes some time-sensitive tests to fail for some reason. This PR tries to figure out why this happens.", "NaN"], ["5422", "2.x: more eager cancellation in flatMapX", "David Karnok", "akarnokd", "06/17/17, 06:23:45 AM", "The FlatMapX tests kept failing because there was a race between the cancellation and the disposing of their inner set: the cancel may have interrupted the test wait and ended up in the inner subscribe before `set.isDisposed()` would become true in the `dispose()` call of the operator that run on the main thread. The change adds/uses a boolean field that gets set first and is checked before the inner are subscribed.", "NaN"], ["5427", "2.x: fix buffer(time, maxSize) duplicating buffers on time-size race", "David Karnok", "akarnokd", "06/20/17, 08:02:06 AM", "The PR fixes both the time+maxSize bound `buffer` operators of `Flowable` and `Observable`. The logic didn't properly mutually exclude the timer action and the `onNext` action, resulting in probabilistic emission of the same buffer twice.\r\n\r\nReported in #5426.", "NaN"], ["5430", "1.x: fix premature cleanup in AsyncOnSubscribe when the last Observable is still running", "yurgis", "yurgisbaykshtis", "06/23/17, 09:16:14 AM", "The issue is caused by premature cleanup when onCompleted is emitted from the callback function which may happen while a requested async sequence is still not completed.\r\nThe unit test is provided which will fail without the fix.\r\nMore cases are provided in the issue https://github.com/ReactiveX/RxJava/issues/5429.", "NaN"], ["5432", "2.x: fix/clarify the Observable class' javadoc", "David Karnok", "akarnokd", "06/23/17, 09:16:48 AM", "This PR rewords the javadoc of the `Observable` class a bit and adds a couple of extra clarifying sentences.", "NaN"], ["5434", "2.x: fix time bounded replaySubject getValue() inconsistency with getValues() on old items", "Nathan Kooij", "nathankooij", "06/21/17, 04:12:46 PM", "See https://github.com/ReactiveX/RxJava/issues/5433.", "NaN"], ["5436", "2.x: Gradle to use less memory, missed an export command", "David Karnok", "akarnokd", "06/23/17, 12:45:53 PM", "Looks like there was a missing \"export\" keyword in the build options and thus gradle ate all 3 GB memory dancing on the edge of the OOMKiller.", "NaN"], ["5437", "1.x: TestSubscriber::assertValuesAndClear should reset valueCount", "Matt Laux", "mlaux", "06/24/17, 11:34:48 AM", "During the time between calling `assertValuesAndClear` and providing the next `onNext` event, the `valueCount` is inconsistent with the size of the internal `values` list.", "NaN"], ["5440", "2.x: concat to report isDisposed consistently with termination", "David Karnok", "akarnokd", "06/27/17, 01:11:34 PM", "This PR makes sure the `Disposable` of a `concat` operator reports `true` when the sequence terminates.\r\n\r\nReported in #5439", "NaN"], ["5441", "2.x: fix periodic scheduler purging config not honored", "David Karnok", "akarnokd", "06/27/17, 01:11:51 PM", "The `SchedulerPoolFactory` did not act properly on the system properties setup.\r\n\r\nReported on StackOverflow: https://stackoverflow.com/q/44717193/61158", "NaN"], ["5444", "2x: Fix wording in Async and Publish processors javadoc.", "Serj Lotutovici", "serj-lotutovici", "06/26/17, 10:14:26 PM", "Seams that these are some leftovers from the 1.x -> 2.x refactoring.", "NaN"], ["5447", "Remove @NonNull annotation in Consumer method parameter", "Nicklas Ansman Giertz", "ansman", "06/27/17, 01:11:09 PM", "This fixes #5442 ", "NaN"], ["5449", "Remove the @NonNull annotation from Function", "Nicklas Ansman Giertz", "ansman", "06/28/17, 08:43:25 AM", "As per per the discussion in #5447", "NaN"], ["5454", "2.x: Replace duplicate calling method setAccessible on the same object in FunctionsTest class.", null, "youngam", "07/03/17, 05:34:28 PM", "I would like to add unit tests to my project and decided to watch tests in this repository. During reviewing testing class <code>FunctionsTest</code> I watch duplicated calling method <code>setAccessible(true)</code> at the same object.\r", "NaN"], ["5457", "2.x: See if sudo required results in consistent & faster build times", "David Karnok", "akarnokd", "07/09/17, 10:18:17 PM", "I asked the Travis support about the slow build times of lately and they suggested I try `sudo:required` to have an isolated build VM instead of the shared container-based one. I'll rerun this PR a couple of times to see the effects.", "NaN"], ["5460", "2.x: fix Javadoc mistakes and some style", "David Karnok", "akarnokd", "07/03/17, 06:20:34 PM", "This PR fixes most JavaDoc errors discovered from RxJava 3 preview's javadoc generator (doclint enabled). \r\n\r\n(I was unable to make gradle in RxJava 2 to report the same errors regardless of source level and underlying Java 8 runtime locally.)\r\n\r\nChanges include:\r\n\r\n- Fix closing tag of `<dt>` in `<dl>`s\r\n- Fix `<td>` to `<dt>` in `<dl>`s\r\n- Replace `>` in `<code>` blocks with `&gt;`  (as it is forbidden in doclint of Java 8)\r\n- Replace `<` in `<code>` blocks with `&lt;`\r\n- Add source code checker for the previous mistakes\r\n- Remove `initialSeed` mentions from `scan` operators that take a `seedSupplier` and remove the deferred example as well\r\n- Switch the order of `<code><pre>` to `<pre><code>`.\r\n- A couple of end-sentence punctuation.\r\n\r\n\r", "NaN"], ["5462", "Refactoring SingleSchedulerTest", "Piotr Wittchen", "pwittchen", "07/05/17, 08:46:17 AM", "Hi,\r\n\r\nI refactored `SingleSchedulerTest`. Now it extends `AbstractSchedulerTests`, so redundant tests (with duplicated code) could be removed in favor of abstract tests. Now, thanks to the abstract test class, `SingleScheduler` has 21 unit tests instead of just 7. This approach is consistent with the test classes for other Schedulers.\r\n\r\nRegards,\r\nPiotr", "NaN"], ["5465", "2.x: fix wording of toList, fix a/an in subscribeOn", "David Karnok", "akarnokd", "07/05/17, 01:46:57 PM", "This PR\r\n\r\n- fixes the wording of `toList()` putting emphasis of the need for finite sources and removes a misleading/incorrect sentence about unstoppability;\r\n- corrects a/an spelling errors in `subscribeOn`.\r\n- removes the mention of `toBlocking` from the `toFuture` javadoc", "NaN"], ["5466", "2.x: FlowableTimeoutTimed - replace AtomicReference with mutable field", "Dave Moten", "davidmoten", "07/05/17, 12:48:11 PM", "As per discussion in #5461. The timer fields in the Subscriber classes in [FlowableTimeoutTimed](https://github.com/ReactiveX/RxJava/blob/4c22f969927a98bc35458645d373bcb94b7df622/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java) are `AtomicReference`s but this is not required as the fields are accessed synchronously.\r\n\r\nThe `timer` field in `TimeoutTimedOtherSubscriber` did require an `AtomicReference` because of the dispose call [here](https://github.com/ReactiveX/RxJava/blob/4c22f969927a98bc35458645d373bcb94b7df622/src/main/java/io/reactivex/internal/operators/flowable/FlowableTimeoutTimed.java#L173) but this call is not required if we just call `worker.dispose()`.\r\n\r\nNo unit test additions.\r\n\r\nP.S. 9321 unit tests in RxJava 2.x! An outrageous amount of work, thanks @akarnokd (and other contributors)!", "NaN"], ["5467", "2.x: Removing commented code from tests", "Piotr Wittchen", "pwittchen", "07/05/17, 10:04:43 PM", "Hi,\r\n\r\nIn this PR I'm removing commented code from tests as it's generally considered as bad practice.\r\nPart of this code is even not available in the current RxJava API. It does not resolve all of the issues like that, but only part of them. I didn't want to create PR with more changes because it will be harder to review. Rest of the similar issues could be resolved in the future PRs.\r\n\r\nRegards,\r\nPiotr\r", "NaN"], ["5470", "fix #5468: eager hooks onError call", "Gene Taylor", "DeepSpawn", "07/06/17, 09:54:01 AM", "Move the call to RxJavaHooks into the catch block, so we only report and it if the underlying subscriber throws in its onError method.\r\n\r\nThis brings its behaviour in line with that of SafeSubscriber\r\n\r\n\r", "NaN"], ["5471", "1.x: increase timeout of some tests", "David Karnok", "akarnokd", "07/06/17, 08:23:11 PM", "Increase timeouts of tests that started failing due to slower CI.", "NaN"], ["5476", "Fixed Javadoc for Flowable and Observable reduce.", "Leonardo Lima", "leonardortlima", "07/09/17, 10:32:15 PM", "Fixed Javadoc for `Flowable.reduce(T, BiFunction)` and `Observable.reduce(T, BiFunction)` mentioning the wrong return type.\r\n\r\n#5456 ", "NaN"], ["5478", "Fixed  doc for F.reduce(seed, reducer), F.reduceWith(seedSupplier, reducer) and O.reduce(seed, reducer)", "Ganapathi Vara Prasad", "ganapathi004", "07/10/17, 05:16:43 PM", "Corrected the doc for Issue No: #5476\r", "NaN"], ["5481", "Fix a typo in the changelog", "Nicklas Ansman Giertz", "ansman", "07/11/17, 03:14:01 PM", "Fixed a typo in the work `changelog`", "NaN"], ["5486", "2.x: small note on Maybe.defaultIfEmpty regarding toSingle", "David Karnok", "akarnokd", "07/15/17, 10:52:39 AM", "Ths PR replaces #5485 regarding the issue of #5480 because our javadoc validation did not allow that type of wording (i.e., mentioning `Single` when the method signature is not related to it).", "NaN"], ["5492", "Indent comments", "Jeremy Tecson", "jemaystermind", "07/17/17, 05:23:45 AM", "Indent comments to be consistent to other comment's indentation", "NaN"], ["5493", "2.x: fix ReplayProcessor backpressure and NotificationLite emission bug", "David Karnok", "akarnokd", "07/18/17, 08:42:48 AM", "This PR upgrades the replaying algorithms of the `ReplayProcessor` to the standard queue-drain and as an added effect, fixes a request-emission race where the internal `NotificationLite.complete` could be emitted to the consumers.", "NaN"], ["5494", "FlowableWithLatestFrom forgets request", "Mathieu Gabriel", "matgabriel", "07/18/17, 07:32:45 AM", "The following scenario did not work with FlowableWithLatestFrom:\r\nFlowable<?> result = source.combineWithLatest(other, someCombiner)\r\n- client subscribe to the result stream\r\n- source stream emits\r\n- other stream emits\r\n- source stream emits\r\n\r\nexpected result: result stream emits the combined event\r\nactual result: result stream does not emit anything", "NaN"], ["5495", "2.x: make withLatestFrom conditional subscriber, test cold consumption", "David Karnok", "akarnokd", "07/18/17, 05:04:31 PM", "This PR adjusts #5494 by converting the `withLatestFrom` operators into conditional subscribers and adds unit tests that verify a cold source is consumed fully if there is no event(s) from the other source(s).\r\n\r\n(Also there was a missing space before the bracked and the new unit test name had the `test` prefix.)", "NaN"], ["5507", "2.x: fix SpscLAQ nepotism, FlowableRefCountTest.testRefCountAsync flaky", "David Karnok", "akarnokd", "07/20/17, 01:52:14 PM", "This PR fixes the so-called GC Nepotism (see #3794) in `SpscLinkedArrayQueue` by not nulling out the previous buffer's next pointer upon switching buffers in the `peek()`/`poll()` methods.\r\n\r\nIn addition, the FlowableRefCountTest.testRefCountAsync has been reworked to be more forgiving towards unexpected delays due to system load (reported in #5506).", "NaN"], ["5511", "Remove unnecessary generic type parameters for delaySubscription methods in Single", "Pat Lackemacher", "plackemacher", "07/21/17, 03:26:55 PM", "I was running into an issue with using the `delaySubscription(long time, TimeUnit unit)` while testing a `Single` and I saw that the `U` generic type parameter was there unnecessarily. I believe this is only a Kotlin specific issue as I tried playing around in Java and there was no inference error upon compilation. To get it to compile for Kotlin, I would need to specify the generic type parameter and it didn't matter what I set it to as `Any` was a valid option: `.delaySubscription<Any>(5, TimeUnit.SECONDS)`. I also went through `Flowable`, `Observable`, and `Maybe` and saw that the generics were missing for the time-specific `delaySubscription` methods so I believe they should be removed from `Single` as well to help keep things consistent and remove this compilation error for future Kotlin users.\r\n\r\n![kotlin_error](https://user-images.githubusercontent.com/1130517/28450952-83ad8468-6db8-11e7-841e-85be4ddf0c26.png)\r", "NaN"], ["5517", "2.x: add missing null check to fused Observable.fromCallable", "David Karnok", "akarnokd", "07/25/17, 05:33:22 PM", "There was a missing null check on the fusion path in `ObservableFromCallable` which meant the consumer considered the source to be empty. (The `FlowableFromCallable` was okay.)\r\n\r\nDiscovered on StackOverflow: https://stackoverflow.com/questions/45304226/null-handling-in-rx-java2-flatmap\r\n\r\nUnit test mirrored and updated to verify both `Flowable` and `Observable` versions.", "NaN"], ["5524", "2.x: add/update Observable marbles (07/30)", "David Karnok", "akarnokd", "07/31/17, 08:32:52 PM", "This PR updates the marbles of the following `Observable` operators:\r\n\r\n- `just` ([image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/just.item.png)) by @leonardortlima \r\n- `rangeLong` ([image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/rangeLong.png)) by @leonardortlima \r\n- `startWith` ([image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/startWith.item.png)) by @leonardortlima \r\n- `startWithArray` ([image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/startWithArray.png)) by @leonardortlima \r\n- `sorted` ([image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/sorted.png)) by @leonardortlima \r\n\r\nSee #5319.", "NaN"], ["5529", "Add assertValueAt(int, value) to TestObserver", " Nick Firmani", "NickFirmani", "08/02/17, 04:02:03 PM", "I found myself frequently writing tests that want to check that an observable emitted a certain value second or third, but I don't care what the first or other values one, so `assertValues(Object...))` is more brittle.\r\n\r\nThis PR implements an `assertValueAt(index, value)` method, similar to `assertValue(value)`. Tests are also added.  ", "NaN"], ["5531", "2.x: Try fixing Travis CI lack of java", "David Karnok", "akarnokd", "08/01/17, 09:29:12 PM", "Travis CI has replaced the previous Precise image with the Trusty image as part of an ongoing rollout. Unfortunately, the Trusty image fails for `oraclejdk7` because probably it is no longer supported (although I couldn't find anything about it).\r\n\r\nThis PR tries to identify what's available by trying a matrix of build setups.", "NaN"], ["5541", "2.x: Fix flaky MaybeFromCallableTest.noErrorLoss", "David Karnok", "akarnokd", "08/08/17, 02:34:46 PM", "The `MaybeFromCallableTest.noErrorLoss` failed occasionally because the `await` didn't throw `InterruptedException` as expected. \r\n\r\nThe reason for this is that if the main `to.cancel();` and the subsequent `cdl2.countDown();` happened just before `await()` was called, the `await` didn't even look at the thread's interrupt status but returned immediately as there was nothing to wait for.\r\n\r\nThe fix just removes that `cdl2.countDown` and adds a regular timeout to the inner `await`.\r\n\r\n*(Detected while verifying RxJava 2 against JDK 9b181.)*", "NaN"], ["5546", "2.x: upgrade Reactive-Streams dependency to 1.0.1", "David Karnok", "akarnokd", "08/10/17, 07:25:50 AM", "This PR upgrades the dependency to Reactive-Streams 1.0.1 final, and\r\n\r\n- organizes the other dependency versions into nice variables,\r\n- allows the javadoc generator to link to the RS javadoc.\r\n\r\nA couple of remarks on the other dependency versions:\r\n\r\n- *JMH 1.16*: last version that supports Java 6\r\n- *TestNG 6.9.10*: last version that doesn't break the RS TCK and works with the TestNG Eclipse plugin\r\n- *Mockito 2.1.0*: I guess upgrading within the minor version has little advertising value.\r\n- *JUnit 4.12*: Latest version everything supports as of now.", "NaN"], ["5552", "[Typo] Update Schedulers.java", "Allan Wang", "AllanWang", "08/13/17, 07:55:44 AM", "Just a typo I came across while reading the javadocs.", "NaN"], ["5560", "2.x: fix Obs.combineLatestDelayError sync initial error not emitting", "David Karnok", "akarnokd", "08/22/17, 04:59:54 PM", "This PR fixes the case reported in #5558 where a synchronous first, non-empty source triggered an error completion immediately instead of giving a chance to the other sources to form combinations.\r\n\r\nThe fix also includes:\r\n\r\n- initialization of the `CombineObserver`s now happen in the constructor,\r\n- the `AtomicReference<Disposable>` of the inner observers are now inlined into `CombineObserver`,\r\n- cleaned up drain logic\r\n- unit tests verifying `FlowableCombineLatest` (no changes required there).\r", "NaN"], ["5568", "2.x: Add assertValuesOnly to BaseTestConsumer.", "Niklas Baudy", "vanniktech", "08/25/17, 09:54:52 AM", "Adds `assertValuesOnly` that asserts that the TestObserver/TestSubscriber received only the specified values in the specified order without terminating.\r\n\r\nFixes #5555 ", "NaN"], ["5571", "Added formatting to license section", "Tyler Wong", "tylerbwong", "08/27/17, 09:16:52 PM", "The license section did not previously contain markdown syntax formatting. Added 4 spaces to add it.\r", "NaN"], ["5572", "Remove unnecessary git command from build instructions", "Tyler Wong", "tylerbwong", "08/28/17, 07:55:54 AM", "Removing line to match wiki instructions and since 2.x is the default branch\r", "NaN"], ["5578", "Add NullPointerException comment", "Jihong Park", "ggikko", "08/30/17, 04:44:35 PM", "Add comments in Single.java", "NaN"], ["5582", "implement Maybe.switchIfEmpty(Single)", "Boris Maslakov", "bmaslakov", "09/04/17, 12:28:24 PM", "Adds `Maybe.switchIfEmpty(Single)`, fixes #4544.", "NaN"], ["5586", "2.x: fix Single.timeout unnecessary dispose calls", "David Karnok", "akarnokd", "09/10/17, 11:35:24 AM", "This PR fixes the unnecessary `dispose` call towards the main source when the source terminates and reworks the internals to use less allocation and indirection.", "NaN"], ["5590", "Implement LambdaConsumerIntrospection", "Zac Sweers", "ZacSweers", "09/12/17, 11:45:58 AM", "Followup from #5569, and allows you to introspect if the resulting observer has missing error consumption and subsequently supplies a default (throwing) one.", "NaN"], ["5594", "2.x: fix assertValueSequence reversed error message", "David Karnok", "akarnokd", "09/12/17, 11:28:11 AM", "The error message/variable names in `TestBaseConsumer.assertValueSequence` was reversed: if more items were expected, it said \"Fewer\" and vice versa.", "NaN"], ["5600", "Updating JavaDoc with correct return types", "Igor Levaja", "levaja", "09/14/17, 02:18:32 PM", "A small PR with updated JavaDoc, mentioned in the issue #5595 (thanks to @RobLewis for reporting it).\r\n\r\nUpdated documentation about return types, where `Observable` was incorrectly mentioned instead of `Single`.\r", "NaN"], ["5602", "1.x: Workaround for CHM.keySet bad type with Java 8 compiler", "David Karnok", "akarnokd", "09/15/17, 07:27:07 AM", "This PR fixes the problem that `ConcurrentHashMap::keySet`, when compiled on JDK 8, adds the `KeySetView` type in the bytecode which is not available in JDK 7 and before. The change forces the offending place to use the the standard `Map::keySet` which returns a standard `Set`.\r", "NaN"], ["5609", "2.x: Fix Observable.concatMapEager queueing of source items", "David Karnok", "akarnokd", "09/18/17, 05:43:37 PM", "This PR fixes the wrong queue type in `Observable.concatMapEager` to be the `SpscLinkedArrayQueue` instead of the `SpscArrayQueue` (the latter basically ignored items from the main source when it got full - a remnant from its bounded `Flowable` cousin). Unit tests added that ensure both `Flowable` and `Observable` variants work properly.\r\n\r\nReported in: #5608 ", "NaN"], ["5615", "2.x: Add missing license headers", "Phil Glass", "PhilGlass", "09/23/17, 10:30:28 PM", "`FixLicenseHeaders` is currently failing when run locally (it's skipped on CI).", "NaN"], ["5616", "2.x: Add Single.delay overload that delays errors", "Phil Glass", "PhilGlass", "09/24/17, 10:48:49 AM", "Much like #5382, I discovered when trying to fake a slow/flaky backend that `Single.delay` doesn't delay errors.\r\n\r\nThis PR adds an overload that does, bringing `Single.delay` in line with `Observable.delay`. It also corrects the javadoc for existing overloads (#5409 only updated 1/2).", "NaN"], ["5617", "2.x: Fix Observable.delay & Flowable.delay javadoc", "Phil Glass", "PhilGlass", "09/24/17, 06:22:00 AM", "Error notifications can be delayed when using the overloads with a `delayError` parameter.", "NaN"], ["5623", "2.x: fix incorrect error message at SubscriptionHelper.setOnce", null, "takuaraki", "09/27/17, 07:42:16 AM", "I found an incorrect error message at `SubscriptionHelper.setOnce`.\r\nThe error message should mention that the second argument `Subscription s` is null, but the error message says `\"d is null\"`.", "NaN"], ["5624", "2.x: add onTerminateDetach to Single and Completable", "David Karnok", "akarnokd", "09/28/17, 04:23:33 PM", "This PR adds the `onTerminateDetach` operator to `Single` and `Completable`. It was available on `Flowable`, `Observable` and `Maybe` already.\r\n\r\nPlus:\r\n\r\n- Fixes the javadoc for `Maybe.onTerminateDetach`\r\n- Adds unit tests for verifying terminal events do release references with `Maybe` as well.\r\n\r\nTheir non-existence came up on [StackOverflow](https://stackoverflow.com/questions/46397082/disposablecompletableobserver-leaking-activity-even-though-im-clearing-composit?noredirect=1#comment79870549_46397082).\r\n\r\n**Update**\r\n\r\nTurns out the downstream's `actual` references were not cleared in `Maybe` after all. Updated the PR to ensure that in all 3 of them and improved coverage.", "NaN"], ["5633", "Upgrade to Gradle 4.2.1, remove nebula plugin dependency", "David Karnok", "akarnokd", "10/03/17, 07:59:14 AM", "This PR upgrades the Gradle runtime to 4.2 (which supports Java 9) and gets rid of the `rxjava-nebula` plugin. Its two features, publishing a snapshot and publishing a release has been manually implemented in `build.gradle` based on some [online examples] and [RxAndroid's](https://github.com/ReactiveX/RxAndroid/blob/2.x/rxandroid/build.gradle) variant.\r\n\r\nThe snapshot publication [works](https://oss.jfrog.org/artifactory/libs-snapshot/io/reactivex/rxjava2/rxjava/2.2.0-SNAPSHOT/) and to test the release, we may have to burn a couple of version tags from 2.1.x.\r\n\r\nThe PR also renamed the `perf` directory into `jmh` because the replacement JMH plugin expects those files there.", "NaN"], ["5637", "2.x: Fixing JavaDoc warnings", "Igor Levaja", "levaja", "10/03/17, 01:35:50 PM", "Minor fixes for warnings reported by `javadoc` tool, mentioned in #5634 ", "NaN"], ["5640", "2.x: additional warnings for fromPublisher()", "David Karnok", "akarnokd", "10/04/17, 04:32:58 PM", "This PR adds JavaDoc warnings for `fromPublisher` as people still try to implement a source through it and fail to follow the specification like this:\r\n\r\n```java\r\n// DON'T DO THIS!\r\nFlowable.fromPublisher((Subscriber<Integer> s) -> s.onNext(1));\r\n```\r\n\r\nEven though `Publisher` is a single abstract method (SAM) type, it is almost never reasonable to write a source with it that doesn't require a per-subscriber state. The example above fails to setup backpressure properly and it didn't call `s.onSubscribe()` for that, causing `NullPointerException` whenever the `Subscription` would be needed (i.e., for cancellation and requesting) by the downstream operator.\r\n\r\n`Maybe` doesn't have `fromPublisher`.", "NaN"], ["5644", "2.x: Added Automatic-Module-Name instruction in build.gradle", "Igor Levaja", "levaja", "10/04/17, 01:51:12 PM", "Credits to @zyxist for pointing this out in the issue #5618 \r\n\r\nThis will assign a module name to RxJava 2 according to the the recommended module naming conventions in the generated manifest.", "NaN"], ["5645", "2.x: Readme.md update snapshot links", "David Karnok", "akarnokd", "10/05/17, 07:58:15 AM", "Update the snapshot link to the upcoming 2.1.5+ and 2.2.x versions. Also I've added a convenience link to the actual directory listing of the various snapshots hosted by JFrog.", "NaN"], ["5647", "2.x: Fix subscribeWith documentation examples", null, "dimsuz", "10/09/17, 08:19:57 AM", "This PR improves a documentation of `subscribeWith` functions in `Single`, `Maybe`, `Completable` by making sure examples are compilable (by using classes which implement `Disposable`).\r\n\r\nThis should fix issue #5642 .\r\n\r\nIn that issue @akarnokd approved my idea to use `DisposableMaybeObserver` in the example, but as I looked in other classes, I noticed that `Observable.subscribeWith()` documentation uses a `ResourceObserver` (which implements `Disposable`), so I thought that this is the way to go in all other top-classes?\r\n\r\nIf you think that this is not the case, and instead all of them should be switched to use `Disposable*Observer` in their examples, let me know, I will do it in this way then.\r\n\r\nI think that all those example should use similar classes.", "NaN"], ["5648", "2.x: improve package JavaDoc", "David Karnok", "akarnokd", "10/06/17, 01:18:00 PM", "Add `Maybe` to the `io.reactivex` package Javadoc. Reword `io.reactivex.observers` and `io.reactivex.subscribers` as there are no utility classes in 2.x in them to create consumers from callbacks (those are internal and offered by the `subscribe()` overloads only).", "NaN"], ["5649", "2.x Add concatMapCompletable() to Observable", "Peter Hewitt", "dweebo", "10/09/17, 08:44:36 AM", "Add `concatMapCompletable()` to `Observable` as discussed in #4853\r\nI didn't think it made sense in other reactive types.\r\n\r\nCode is mostly a copy of `ObservableConcatMap`.  Let me know if there is a better style of code to base this off instead.  It also does not have the option to delay errors as concatMap() does, not sure if that is needed.", "NaN"], ["5651", "2.x: update Obs.just(2..10) & switchOnNextDelayError marbles", "David Karnok", "akarnokd", "10/09/17, 12:19:02 PM", "This PR updates the marble diagrams of the 2..10 argument `Observable.just()` and two overloads of `Observable.switchOnNextDelayError`.\r\n\r\nImages in [Issue 5319](https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-335124895).", "NaN"], ["5652", "2.x: inline disposability in Obs.concatMap(Completable)", "David Karnok", "akarnokd", "10/09/17, 07:31:41 PM", "The inner `Observer` type and the `SequentialDisposable` of the `concatMap` and `concatMapCompletable` can be combined into a single instance, saving on indirection and allocation.\r\n\r\n(I've noticed this when reviewing #5649.)", "NaN"], ["5653", "2.x Upgrade testng to fix issue #5641", "Peter Hewitt", "dweebo", "10/09/17, 08:00:10 PM", "Fix for #5641 \r\n\r\nMethod names now show up in gradle console when tests are skipped and in testng html output (previously no test names were showing up in html output for skipped or completed tests).", "NaN"], ["5655", "2.x: add limit() to limit both item count and request amount", "David Karnok", "akarnokd", "10/18/17, 01:39:34 PM", "This PR adds the operator `limit` to limit the number of items as well as the total request amount.\r\n\r\nSome asynchronous boundary-like sources, such as network libraries that translate from/to `Flowable`/`Publisher`, may not modulate or limit downstream requests and thus the other side may produce items unnecessarily. \r\n\r\nAlternatives, such as `take(N)` is designed to go unbounded if its downstream requests more than N to improve performance of local flows and `rebatchRequests(M)` will keep requesting once 75% of M has been received.\r\n\r\nNote that requests are negotiated on an operator boundary and `limit`'s amount may not be preserved further upstream. For example, `source.observeOn(Schedulers.computation()).limit(5)` will still request the default (128) elements from the given `source`.\r\n\r\nRelated discussion: #5077.\r\nBlog: [Java 9 Flow API: taking and skipping - Limiting the request amount](http://akarnokd.blogspot.hu/2017/09/java-9-flow-api-taking-and-skipping.html)", "NaN"], ["5660", "1.x: fix timeout (timed, selector) unsubscribe bug", "David Karnok", "akarnokd", "10/13/17, 07:11:13 PM", "This PR fixes an unsubscribe bug somewhere in the timed `timeout` operator reported in #5657 by implementing it in a algorithmically fresh manner.", "NaN"], ["5661", "2.x: improve Flowable.timeout()", "David Karnok", "akarnokd", "10/13/17, 08:53:02 PM", "This PR improves the internal overhead of the `Flowable.timeout` operator (its 2 timed and 2 selector-based versions) to use the adapted [indexed atomic state transition approach](http://akarnokd.blogspot.hu/2017/09/java-9-flow-api-timing-out-events.html).\r\n\r\nIn addition, there was a race condition and potential event loss in `TestScheduler`: \r\n- `peek()` could return `null` if the task was removed from the queue (via disposing it) between the `isEmpty()` check and `peek()` itself. \r\n- In addition, if the task was disposed between the `peek` and `remove`, the `remove` could remove the new head of the queue which is no longer what `peek` saw and results in tasks being dropped.", "NaN"], ["5662", "Fix broken license link", "Ben Wicks", "benwicks", "10/11/17, 01:48:27 PM", "I found a broken link in the CONTRIBUTING docs. The link was referencing the LICENSE document on master (which doesn't exist currently). I fixed it to point to the correct document on the 2.x branch.", "NaN"], ["5668", "Fix a misleading documentation of Observable.singleElement()", "VeskoI", "VeskoI", "10/15/17, 10:06:24 AM", "This PR improves the documentation of `Observable.singleElement()`, as mentioned in  https://github.com/ReactiveX/RxJava/issues/5317.\r\n\r\nAn appropriate unit test to verify the `empty` behaviour already exist (`ObservableSingleTest. testSingleWithEmpty()`), I just added one more check there to make it very explicit that an error is not thrown.\r\n\r\nAs a side note, I'm attaching an updated Marble diagram for the method that includes all 3 states of the resulting Maybe (empty, success, error). I believe this is listed in https://github.com/ReactiveX/RxJava/issues/5319.\r\n\r\n\r\n![singleelement](https://user-images.githubusercontent.com/4089934/31583261-a6da996a-b18f-11e7-8682-dffa647c7e4a.png)\r", "NaN"], ["5669", "2.x: fix PublishProcessor cancel/emission overflow bug", "David Karnok", "akarnokd", "10/15/17, 09:25:28 PM", "This PR should fix the bug that caused the test failure in #5545.\r\n\r\nThe bug manifested itself when a cancellation was happening the same time a request 1 was being fulfilled. Since the same request accounting was used for cancellation indicator, if the cancel happened between the `onNext()`'s `get()` check and `decrementAndGet`, this `decrementAndGet` decremented Long.MIN_VALUE unconditionally, which lead to a state that would appear the Subscriber still can receive events. A concurrent `offer`, which saves the current array of registered `Subscriber`s, then would emit an item and overflow the `Subscriber`.\r\n\r\nThe fix is to use the cancellation-aware `BackpressureHelper.producedCancel()` utility.\r\n\r\nUnit test were added to verify the correct behavior on both `PublishProcessor` and `BehaviorProcessor` (the latter uses different cancellation mechanism via a dedicated field).", "NaN"], ["5673", "2.x: coverage, add SingleToFlowableTest", "Jihong Park", "ggikko", "10/16/17, 04:03:50 PM", "Add \"SingleToFlowableTest\" to cover toFlowable with test.", "NaN"], ["5675", "2.x: Add PublishProcessor JMH perf comparison", "David Karnok", "akarnokd", "10/17/17, 09:23:45 AM", "This PR adds a Perf class to measure the overhead of request management inside `PublishProcessor` and a comparison with `PublishSubject`.\r\n\r\nNote that running JMH with RxJava under Windows is currently not possible because Gradle adds so many of its own jar dependencies that the resulting command line classpath exceeds the 32k limit.\r\n\r\nResults with 2.1.5 release (separate gradle project, Windows 7, i7 4790, Java 8u144)\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/31654835-74257c76-b327-11e7-801f-49c46e0321b2.png)\r\n\r\nThe bounded benchmark indicates a 4x the throughput for some reason I don't understand yet.", "NaN"], ["5677", "2.x: make parallel() a fusion-async-boundary", "David Karnok", "akarnokd", "10/17/17, 07:57:50 PM", "The `parallel()` supports front-fusion but since the operator is almost always followed by the separate `runOn` operator, the parallel version of the `observeOn` operator, such front-fusion should be considered a `BOUNDARY`-type fusion just like with `observeOn`. \r\n\r\nA `requestFusion` with `BOUNDARY` tells the upstream operator(s) that when fused, their actions would be executed behind an async boundary and possibly on an unwanted thread. Operators, such as `map` and `doOnNext`, who are generally expected to be thread-confined, can then refuse to fuse, restoring the traditional queue hopping behavior (`source -> queue -> op -> queue -> op -> queue -> consumer`).\r\n\r\nReported in #5676.\r\n\r\n/cc @smaldini & @simonbasle ", "NaN"], ["5680", "2.x: More Observable marble fixes (10/18)", "David Karnok", "akarnokd", "10/18/17, 01:53:48 PM", "Update several `Observable` marble diagrams. Images can be viewed [here](https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-337563753).\r\n\r\n- `zipIterable`\r\n- `ambWith`\r\n- `blockingForEach`\r\n- `blockingIterable`\r\n- `blockingLast`\r\n- `blockingLast(T)`\r\n- `blockingMostRecent`\r\n- `blockingNext`\r\n- `blockingSingle`\r\n- `blockingSingle(T)`\r\n- `cacheWithInitialCapacity`\r", "NaN"], ["5682", "Update 'java' \u2192 'java-library' Gradle plugin, update deps configurations.", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "10/27/17, 07:52:36 AM", "Documentation: https://docs.gradle.org/4.2.1/userguide/java_library_plugin.html\r\n\r\nReasoning:\r\n\r\n- `api` instead of `compile` shows intention better, ie RS should be available for RxJava users\r\n- `testImplementation` instead of `testCompile` [should hide dependencies from RxJava pom.xml](https://search.maven.org/remotecontent?filepath=io/reactivex/rxjava2/rxjava/2.1.5/rxjava-2.1.5.pom)\r\n- If [RxJava 3.x will actually be split into multiple modules](https://github.com/ReactiveX/RxJava/issues/5621), `api/implementation` configurations might be handy\r\n\r\nIssues:\r\n\r\n- JMH Gradle Plugin doesn't seem to properly support `api`, so I had to manually declare RS for `jmh` configuration\r\n\r\n@akarnokd can you please check if Eclipse works ok with this?\r\n\r\nIf not, we probably need to add:\r\n\r\n```groovy\r\nplugins.withType(EclipsePlugin) {\r\n    project.eclipse.classpath.plusConfigurations += [ configurations.api ]\r\n}\r\n```", "NaN"], ["5683", "2.x: Add TCK test for limit()", "David Karnok", "akarnokd", "10/19/17, 07:00:43 PM", "This PR adds a Reactive-Streams TCK test for `limit()` .", "NaN"], ["5695", "2.x: fix Completable.concat to use replace (don't dispose old)", "David Karnok", "akarnokd", "10/31/17, 06:58:55 PM", "`Completable.andThen`, `concat(Iterable)` and `concatArray()` disposed the previous `Disposable` when receiving the new `Disposable` from the next source which could lead to interruption. `concat(Publisher)` already uses `replace` instead of `update`.\r\n\r\nThere is a peculiar interplay between `subscribeOn`, `observeOn` and the trampoline in `concat` which can trigger such an interruption: the task of the `observeOn` is cancelled with `mayInterruptIfRunning == true` because the `dispose` call chain shuts down the worker of the `observeOn` from the `subscribeOn`'s thread.\r\n\r\nReported in #5694", "NaN"], ["5696", "1.x: fix Completable.concat to use replace (don't dispose old)", "David Karnok", "akarnokd", "10/31/17, 06:37:55 PM", "Fixes the same bug as with the 2.x `Completable.andThen` and `Completable.concat`.\r\n\r\nSee #5694 & #5695.", "NaN"], ["5705", "2.x: Moved tests to FromCallableTest from FromCompletableTest", "Daniel Rees", "dsrees", "11/04/17, 05:05:34 PM", "Fixes #5698. There was a test class named `ObservableFromCompletableTest` which actually was targeting `ObservableFromCallableTest`. This was most likely just a naming issue. Copied all tests from `ObservableFromCompletableTest` to `ObservableFromCallableTest` and deleted the former class.\r", "NaN"], ["5706", "Remove mentions of Main thread from Schedulers.single() javadoc.", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "11/06/17, 08:31:10 AM", "To avoid confusion. \r\n\r\nOne could think that `single()` can be used to execute code on \"Main\" thread.", "NaN"], ["5709", "2.x: Improve Javadocs of flatMapSingle and flatMapMaybe", "David Karnok", "akarnokd", "11/09/17, 12:07:55 AM", "Clarify that `flatMapSingle` and `flatMapMaybe` merge in no particular order and fix the copy-paste error from `flatMapCompletable` as they have values to merge, not just waiting.\r\n\r\nRelated: [StackOverflow question](https://stackoverflow.com/questions/47176437/rxjava-2-observable-flatmapsingle-clarification)", "NaN"], ["5713", "2.x: BaseTestConsumer values() and errors() thread-safety clarifications", "David Karnok", "akarnokd", "11/09/17, 09:50:30 PM", "This PR adds clarifications to the `BaseTestConsumer.values()` and `BaseTestConsumer.errors()` method in regard to accessing elements while the upstream is still actively emitting events.\r\n\r\nRelated discussion: #5712", "NaN"], ["5715", "2.x: distinguish between sync and async dispose in ScheduledRunnable", "David Karnok", "akarnokd", "11/15/17, 10:24:46 AM", "This PR adds logic to distinguish between synchronous and asynchronous dispose calls when `setFuture` is executing. It should prevent interrupting the currently running task body if it requested cancellation indirectly before the `setFuture` was executed by the Thread which scheduled the task.\r\n\r\nFixes #5711", "NaN"], ["5717", "2.x: Javadocs: add period to custom scheduler use sentences", "David Karnok", "akarnokd", "11/10/17, 07:48:05 PM", "There were missing `.` from sentences in the operator Javadocs detailing certain overloads use custom `Scheduler`s.", "NaN"], ["5718", "2.x: Add a sentence to documentation of take() operator.", "Sadegh", "sadegh", "11/11/17, 12:25:46 PM", "#5716 ", "NaN"], ["5719", "1.x: Add a sentence to documentation of take() operator", "Sadegh", "sadegh", "11/11/17, 01:30:47 PM", "#5716 ", "NaN"], ["5721", "2.x : Rename variable name \"subject\" to \"processor\" for exact expression", "Jihong Park", "ggikko", "11/14/17, 12:26:15 PM", "Rename variable name \"subject\" to \"processor\" in processor pacakage", "NaN"], ["5723", "Remove duplicate nullity check line from Observable.toMap()", "Philip Leonard", "philleonard", "11/14/17, 11:55:48 AM", "Small cleanup to remove duplicate nullity check line from `Observable#toMap`", "NaN"], ["5726", "1.x: fix broken backpressure through unsubscribeOn()", "David Karnok", "akarnokd", "11/16/17, 08:36:47 AM", "The `unsubscribeOn` did not properly forward the upstream's `Producer` to the downstream, thus the default `Subscriber` request behavior of `Long.MAX_VALUE` was incorrectly in effect.\r\n\r\nFixes: #5725", "NaN"], ["5729", "2.x: Implement as()", "Zac Sweers", "ZacSweers", "11/19/17, 10:39:00 AM", "This implement `as()` support as discussed in #5654\r\n\r\nI took the opportunity to try to standardize the docs and tests for it (which vary a little bit across implementations of `to()`)\r\n\r\nRelated: #5654", "NaN"], ["5734", "2.x: RxJavaPlugins unwrapRunnable", "\u0141ukasz Guz", "lukaszguz", "12/04/17, 12:12:13 PM", "Hi,\r\nRxJava2 version: [2.1.6]\r\nIt is reference to https://github.com/ReactiveX/RxJava/issues/5733", "NaN"], ["5735", "Restore license to correct text.", "Jake Wharton", "JakeWharton", "11/21/17, 09:19:03 PM", "This section is a template on how to apply the header and not something that actually should have been changed.\r\n\r\nRefs #4980.", "NaN"], ["5737", "Improved code formatting for README.md", "Kevin YongJun Kim", "kimkevin", "11/22/17, 08:36:45 AM", "Modifications:\r\n\r\n- Inserted indents for code readability in code blocks\r\n\r", "NaN"], ["5738", "2.x: fix javadoc for ConnectableFlowable and others", "Dave Moten", "davidmoten", "11/22/17, 12:13:41 PM", "Some javadoc fixes for ConnectableFlowable, GroupedFlowable and FlowableAutoConnect", "NaN"], ["5740", "2.x: marbles for Observable all, fromPublisher, zipArray", "David Karnok", "akarnokd", "11/24/17, 07:37:47 AM", "This PR adds a marble diagram to `fromPublisher` and updates the marbles of `all` and `zipArray` inside `Observable`.\r\n\r\nThe images can be seen in [this comment](https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-346585222) of #5319.", "NaN"], ["5741", "2.x: internal API to get distinct Workers from some Schedulers", "David Karnok", "akarnokd", "11/27/17, 10:12:44 PM", "This PR adds an internal interface `SchedulerMultiWorkerSupport` that allows retrieving multiple workers from a `Scheduler` that implements this interface.\r\n\r\nThe standard `Scheduler.getWorker()` can be invoked as many times as necessary, but specific implementations such as the `computation()` `Scheduler` and the [`ParallelScheduler`](https://github.com/akarnokd/RxJava2Extensions#parallelscheduler) is not guaranteed to return workers that are backed by distinct single-threaded thread pools. \r\n\r\nThis does not effect other scheduler types because: \r\n- they are single threaded (`single()`) or don't use threads at all (`trampoline()`) and \r\n- already hand out distinct workers (`io()`, `newThread()`).\r\n\r\nSuch worker reuse can happen when in a highly concurrent application, typical tasks are mixed with parallel tasks and both pull out workers from these `Scheduler`s. If this is happens, it is possible there will be duplicate threads used by the parallel operations and thus not utilize the originally intended parallelism level.\r\n\r\nBy implementing this suggested interface, a batch-retrieval can be supported by the `Scheduler`s and they can make sure the caller gets as many distinct thread-pool as possible. If more workers are requested than the `Scheduler`'s parallelism, the workers are handed out in round-robin fashion similar to the standard `createWorker()`.\r\n\r\nWhy a callback instead of returning an array? \r\n- even if both require an allocation to set up, there is no need to have all workers visible at once,\r\n- simply less memory usage, and\r\n- avoids looping twice: once for filling in the array and once for using the elements of the array.\r\n\r", "NaN"], ["5743", "2.x: Check isdisposed before emitting in SingleFromCallable", "Nelson Osacky", "runningcode", "11/25/17, 05:38:03 PM", "Previously SingleFromCallable did not check if the subscriber was\r\nunsubscribed before emitting onSuccess or onError. This fixes that\r\nbehavior and adds tests to SingleFromCallable, CompletableFromCallable,\r\nand MaybeFromCallable.\r\n\r\nFixes #5742\r", "NaN"], ["5745", "2.x: add/update Observable marbles 11/28", "David Karnok", "akarnokd", "11/30/17, 08:49:09 AM", "This PR adds or updates mable diagrams of `Observable`:\r\n\r\n- [`blockingFirst`](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingFirst.o.png)\r\n- [`blockingFirst` with default](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingFirst.o.default.png)\r\n- [`toFuture`](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFuture.o.png)\r\n- [`blockingSubscribe` no arguments](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingSubscribe.o.0.png)\r\n- [`blockingSubscribe` with 1 argument](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingSubscribe.o.1.png)\r\n- [`blockingSubscribe` with 2 arguments](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingSubscribe.o.2.png)\r\n- [`blockingSubscribe` with 3 arguments](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingSubscribe.o.png)\r\n- [`collectInto`](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/collectInto.o.png)\r\n- [`doOnComplete`](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnComplete.o.png)\r\n- [`doOnError`](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnError.o.png)\r\n- [`doOnLifecycle`](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnLifecycle.o.png)\r\n- [`doOnNext`](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnNext.o.png)\r\n- [`doOnDispose`](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnDispose.png)\r\n\r\n\r\nRelated #5319: [comment](https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-347482919).", "NaN"], ["5746", "2.x: improve wording and links in package-infos + remove unused imports", "David Karnok", "akarnokd", "11/29/17, 11:14:01 PM", "This PR is to improve the wording of a few `package-info.java` JavaDocs and removes two unused imports.", "NaN"], ["5747", "2.x: Fix TrampolineScheduler not calling RxJavaPlugins.onSchedule(), add tests for all schedulers.", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "11/30/17, 08:35:07 AM", "Noticed during figuring out how #5734 works.", "NaN"], ["5748", "2.x: Check runnable == null in *Scheduler.schedule*().", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "12/07/17, 08:52:36 AM", "To enforce `@NotNull` guarantee for the PR #5734, see  https://github.com/ReactiveX/RxJava/pull/5734/files#r153951238", "NaN"], ["5753", "2.x: Add retry(times, predicate) to Single & Completable and verify behavior across them and Maybe.", "Niklas Baudy", "vanniktech", "12/07/17, 11:02:48 PM", "- Add retry(times, predicate) to Single & Completable (Maybe had it already) which just forwards to Flowable for now\r\n- verify behavior across the three reactive types\r\n\r\nHappy to get better testing names\r", "NaN"], ["5755", "2.x: Add marbles for Observable (12/06)", "David Karnok", "akarnokd", "12/07/17, 08:37:03 AM", "This PR adds some missing marbles to `Observable`:\r\n\r\n- [concatMapCompletable](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapCompletable.o.png)\r\n- [concatMapDelayError](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapDelayError.o.png)\r\n- [concatMapEager](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapEager.o.png)\r\n- [concatMapEagerDelayError](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapEagerDelayError.o.png)\r\n- [concatMapIterable](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapIterable.o.png)\r\n- [doAfterNext](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doAfterNext.o.png)\r\n- [doFinally](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doFinally.o.png)\r\n\r\nTracked in #5319, images in [comment](https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-349595094).", "NaN"], ["5756", "2.x: improve autoConnect() Javadoc + add its marble", "David Karnok", "akarnokd", "12/07/17, 09:08:00 AM", "This PR improves the JavaDoc of `ConnectableObservable.autoConnect()` and `ConnectableFlowable.autoConnect()` operators and adds the respective marble diagrams:\r\n\r\n![autoConnect](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.o.png)\r\n\r\n![autoConnect](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/autoConnect.f.png)", "NaN"], ["5758", "2.x: add a couple of @see to Completable", "David Karnok", "akarnokd", "12/10/17, 06:51:19 PM", "This PR adds a couple of `@see` cross references to `Completable` JavaDoc.", "NaN"], ["5759", "2.x: marble additions and updates (12/11)", "David Karnok", "akarnokd", "12/12/17, 11:04:05 PM", "This PR adds or updates mable diagrams of `Observable`:\r\n\r\n- [doOnTerminate](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnTerminate.o.png)\r\n- [elementAt](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/elementAt.o.png)\r\n- [elementAt](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/elementAtDefault.o.png) with default\r\n- [elementAtOrError](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/elementAtOrError.o.png)\r\n- [firstOrError](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/firstOrError.o.png)\r\n- [flatMap](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flatMapDelayError.o.png) with error delayed\r\n- [flatMap](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flatMapMaxConcurrency.o.png) with maximum concurrency\r\n\r\nRelated: https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-350682783\r\n\r", "NaN"], ["5760", "2.x: Subject NPE fixes, add UnicastProcessor TCK", "David Karnok", "akarnokd", "12/15/17, 10:13:50 AM", "This PR adds the `Subject.refCount()` and `FlowableProcessor.refCount()` that capture the upstream's `Disposable`/`Subscription` and disposes/cancels them if the number of `Observer`s/`Subscriber`s decreases to zero. The Reactive-Streams TCK and thus other implementations may expect such behavior from a `Processor` implementation and this wrapper is required to pass the TCK tests.\r\n\r\nWhile implementing the TCK tests, it turned out the `null`-handling of the `Subject`s and `FlowableProcessor`s were not following the Reactive-Streams specification. They have to throw a `NullPointerException` immediately and not turn them into NPEs for the downstream. These classes and the tests have been fixed as well. Their error messages have been uniformed too.", "NaN"], ["5761", "2.x: fix timed exact buffer calling cancel unnecessarily", "David Karnok", "akarnokd", "12/15/17, 08:26:30 AM", "This PR removes the unnnecessary `cancel`/`dispose` call from the exact-boundary timed `buffer()` operators in `Observable` and `Flowable` when the upstream completes normally.\r\n\r\nOriginally appeared in a [StackOverflow question](https://stackoverflow.com/questions/47772415/rxjava2-completing-a-cold-source-flowable-explicitly).", "NaN"], ["5766", "Rename interface parameters", "Shaishav Gandhi", "ShaishavGandhi", "12/19/17, 05:36:32 PM", "#5762 \r\n\r\nSigned-off-by: shaishavgandhi05 <shaishgandhi@gmail.com>\r", "NaN"], ["5771", "2.x: Upgrade to Reactive Streams 1.0.2 final", "David Karnok", "akarnokd", "12/19/17, 03:38:06 PM", "Reactive Streams 1.0.2 just went final.", "NaN"], ["5773", "2.x: Improve JavaDoc of retryWhen() operators", "David Karnok", "akarnokd", "12/22/17, 12:36:57 PM", "This PR improves the Javadoc of the `retryWhen` operators in the 5 base classes, adds example to handling an asynchronous source with delay where an early `onComplete` may cause unexpected terminations otherwise.\r\n\r\nRelated: #5772.", "NaN"], ["5778", "2.x: Improve BehaviorProcessor JavaDoc", "David Karnok", "akarnokd", "12/27/17, 11:00:49 AM", "A [StackOverflow](https://stackoverflow.com/q/47982511/61158) question prompted me to look at `BehaviorProcessor` to find it quite lacking of a detailed JavaDoc. This PR adds sentences and examples (I could think of) to it that explain the available features and behavior of this `Processor` implementation.\r\n\r\nIf the sentences are reviewed, the `BehaviorSubject` will be updated with the applicable information (i.e., everything minus backpressure related sentences).", "NaN"], ["5780", "2.x: Improve BehaviorSubject JavaDoc + related clarifications", "David Karnok", "akarnokd", "01/03/18, 11:16:45 AM", "This PR adds detailed behavior and feature description to the `BehaviorSubject` JavaDoc.\r\n\r\nIn addition, small mistakes in the `BehaviorProcessor` JavaDoc have also been fixed and both received an extra section: `Error handling` that points at the global error handler for undeliverable errors. Due to this link, the `RxJavaPlugins.onError` JavaDoc has been also expanded.", "NaN"], ["5781", "2.x: Describe merge() error handling.", "David Karnok", "akarnokd", "01/03/18, 11:35:54 AM", "This PR adds some clarifications about how `merge` handles (multiple) errors in a new *Error handling* section in its `<dl>` JavaDoc entry.\r\n\r\nThere exist several dozen variants of `merge` in the various base classes that could also include such JavaDoc addition. Once the wording has been reviewed, the other places will receive a separate PR.\r\n\r\nRelated: #5779, #5780", "NaN"], ["5783", "2.x: Fix JavaDoc wording of onTerminateDetach", "David Karnok", "akarnokd", "12/29/17, 04:22:00 PM", "A missing `nulls` word from `Flowable.onTerminateDetach` and `Observable.onTerminateDetach` JavaDoc. The other types have this word already.\r\n\r\nRelated: #5782.", "NaN"], ["5785", "2.x: Update Maybe doOn{Success,Error,Complete} JavaDoc", "David Karnok", "akarnokd", "01/03/18, 12:01:17 PM", "This PR updates the JavaDoc of the `Maybe.doOnSuccess`, `Maybe.doOnError` and `Maybe.doOnComplete` marble diagrams and adds an explicit sentence about mutually exclusive events.\r\n\r\n![DoOnSuccess](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnSuccess.m.png)\r\n-----\r\n![DoOnError](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnError.m.png)\r\n-----\r\n![DoOnComplete](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/doOnComplete.m.png)", "NaN"], ["5786", "2.x: add error handling section to merge() operator docs", "David Karnok", "akarnokd", "01/06/18, 02:19:15 PM", "This PR adds the **Error handling** JavaDoc section to the other `merge` operators throughout the base reactive classes.\r\n\r\nNote though that the following `mergeDelayError` methods don't exist yet:\r\n\r\n- `Maybe.mergeDelayError(Publisher, int)`\r\n- `Single.mergeDelayError(*)` (`*` all variants of their respective `merge` methods are missing)\r\n\r\nThese can be added in a separate PR and don't require implementing new operators but to configure existing ones with `delayError == true`.", "NaN"], ["5790", "2.x: improve request accounting overhead in retry/repeat", "David Karnok", "akarnokd", "01/05/18, 10:34:32 PM", "This PR improves the request accounting overhead in the `retry` and `repeat` operators.\r\n\r\nPreviously, every individual `onNext` invocation signaled a an item production, which had a lot of overhead since the `SubscriptionArbiter` has to serialize invocations of `setSubscription`, `request` and `produced`. The improved algorithm counts the `onNext` calls in a field and calls `produced` once with the total count before subscribing to the upstream again.\r\n\r\nOther small changes:\r\n- rename inner class to `RetrySubscriber` (sloppy copy-paste),\r\n- add `isCancelled()` check to `repeatUntil` subscription loop, which was somehow missing.", "NaN"], ["5792", "2.x: Fix flatMap inner fused poll crash not cancelling the upstream", "David Karnok", "akarnokd", "01/05/18, 11:26:30 PM", "This PR fixes the lack of upstream `cancel()` call when an inner, fused source's `queue.poll()` crashes in a non-delayed error mode.\r\n\r\nUnit tests were added to verify `Observable.flatMap`, `Flowable.flatMapIterable` and `Observable.flatMapIterable` as well.\r\n  \r\nFixes #5791", "NaN"], ["5793", "Remove apostrophe to correct grammar.", "Brian Donovan", "eventualbuddha", "01/05/18, 08:10:28 PM", "  - [x] Please give a description about what and why you are contributing, even if it's trivial.\r\n\r\nThis pull request corrects a minor grammar issue in the README. In this case we want the 3rd person present form of \"let\", not the contraction \"let us\".\r\n\r\n  - [x] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n\r\nn/a\r\n\r\n  - [x] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r\n\r\nn/a", "NaN"], ["5795", "2.x: More marbles 01/08-a", "David Karnok", "akarnokd", "01/08/18, 12:08:34 PM", "This PR adds 5 marble diagrams to `Observable`:\r\n\r\n- `flatMapCompletable` (2 overloads)\r\n- `forEach`\r\n- `forEachWhile`\r\n- `hide`\r\n\r\nImages in https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-355932289\r", "NaN"], ["5797", "2.x: Observable marble fixes 01/08-b", "David Karnok", "akarnokd", "01/08/18, 04:32:58 PM", "This PR adds and updates marbles of the following `Observable` operators:\r\n\r\n- [lastOrError](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/lastOrError.png)\r\n- [onErrorReturn](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorReturn.o.png)\r\n- [onErrorReturnItem](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorReturnItem.o.png)\r\n- [onTerminateDetach](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onTerminateDetach.o.png)\r\n- [publish(Function)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/publishFunction.o.png)\r\n- [reduce(seed, f)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/reduceSeed.o.png)\r\n- [reduceWith](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/reduceWith.o.png)\r\n- [repeat()](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/repeatInf.o.png)\r\n- [repeat(long)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/repeatCount.o.png)\r\n- [repeatUntil](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/repeatUntil.o.png)\r\n- [replay()](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.png)\r\n- [replay(int)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.n.png)  \r\n- [replay(int, long, TimeUnit)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.nt.png)\r\n- [replay(int, long, TimeUnit, Scheduler)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.nts.png)\r\n- [replay(int, Scheduler)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.ns.png)\r\n- [replay(long, TimeUnit)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.t.png)\r\n- [replay(long, TimeUnit, Scheduler)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.ts.png)\r\n- [replay(Scheduler)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.s.png)\r\n\r\nImages in https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-355986927 .", "NaN"], ["5798", "2.x: Observable.replay(Function, ...) marble fixes", "David Karnok", "akarnokd", "01/09/18, 02:46:11 PM", "This PR updates the marble diagrams of the 8 `Observable.replay()` overload that take a `Function` and various other parameters:\r\n\r\n- [no arguments](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.f.png)\r\n- [scheduler](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fs.png)\r\n- [bufferSize](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fn.png)\r\n- [bufferSize, scheduler](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fns.png)\r\n- [time](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.ft.png)\r\n- [time, scheduler](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fts.png)\r\n- [bufferSize, time](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fnt.png)\r\n- [bufferSize, time, scheduler](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/replay.o.fnts.png)\r\n\r\nImages in https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-356286139 .\r\n  ", "NaN"], ["5799", "2.x: Add missing {Maybe|Single}.mergeDelayError variants", "David Karnok", "akarnokd", "01/09/18, 07:18:27 PM", "This PR adds `mergeDelayError` overloads to `Maybe` and `Single`; the infrastructure was there from the beginning but the `delayErrors == true` settings were not exposed publicly.\r\n\r\n- `Maybe.mergeDelayError(Publisher, int)`\r\n- `Single.mergeDelayError(Iterable)`\r\n- `Single.mergeDelayError(Publisher)`\r\n- `Single.mergeDelayError(SingleSource, SingleSource)`\r\n- `Single.mergeDelayError(SingleSource, SingleSource, SingleSource)`\r\n- `Single.mergeDelayError(SingleSource, SingleSource, SingleSource, SingleSource)`", "NaN"], ["5802", "2.x: Improved XSubject JavaDocs", "David Karnok", "akarnokd", "01/10/18, 08:27:15 AM", "This PR adds more detailed JavaDoc descriptions to the various `XSubject` types.\r\n\r\nSome of them are missing a marble diagram which will be created (or found) in a separate PR after this PR.\r\n\r\nThe `package-info.java` has been extended as well.", "NaN"], ["5804", "2.x: More Observable marbles, 01/10-a", "David Karnok", "akarnokd", "01/10/18, 02:00:06 PM", "More marbles for `Observable`:\r\n\r\n- [retry(int)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.o.n.png)\r\n- [retry(BiFunction)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.o.ne.png)\r\n- [retry(Predicate)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.o.e.png)\r\n- [retry(int, Predicate)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.o.nfe.png)\r\n- [retryUntil(BooleanSupplier)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/retryUntil.o.png)\r\n- [share](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/publishRefCount.o.png)\r\n- [switchMapSingle](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchMapSingle.o.png)\r\n- [switchMapSingleDelayError](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchMapSingleDelayError.o.png)\r\n\r\nImages in https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-356560596 .", "NaN"], ["5805", "2.x: Final planned Observable marble additions/fixes", "David Karnok", "akarnokd", "01/10/18, 05:15:58 PM", "This is the final part of the `Observable` marble fixes and additions as planned in #5319.\r\n\r\n- [toList(Callable)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toList.o.c.png)\r\n- [toFlowable(BUFFER)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFlowable.o.buffer.png)\r\n- [toFlowable(DROP)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFlowable.o.drop.png)\r\n- [toFlowable(LATEST)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFlowable.o.latest.png)\r\n- [toFlowable(ERROR)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFlowable.o.error.png)\r\n- [toFlowable(MISSING)](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toFlowable.o.missing.png)\r\n- [unsubscribeOn](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/unsubscribeOn.o.png)\r\n- Fixed position and spacing of the marbles in the `zipWith` overloads (no image change).\r\n\r\nImages in https://github.com/ReactiveX/RxJava/issues/5319#issuecomment-356630375 .", "NaN"], ["5811", "2.x: Fix buffer(open, close) not disposing indicators properly", "David Karnok", "akarnokd", "01/19/18, 09:36:39 AM", "The PR fixes the resource management in the `buffer` operator that uses other reactive sources to indicate when a buffer starts and ends. Both `Flowable` and `Observable` implementations had to be fixed.\r\n\r\nFixes: #5809", "NaN"], ["5816", "2.x: Add Subject and Processor marbles", "David Karnok", "akarnokd", "01/22/18, 09:06:23 AM", "This PR adds the missing marble diagrams to the various `Subject` and `Processor` implementations:\r\n\r\n### AsyncSubject\r\n\r\n![AsyncSubject](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/AsyncSubject.png)\r\n\r\n### PublishSubject\r\n\r\n![PublishSubject](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/PublishSubject.png)\r\n\r\n### ReplaySubject\r\n\r\n![ReplaySubject1](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplaySubject.u.png)\r\n![ReplaySubject2](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplaySubject.ue.png)\r\n![ReplaySubject3](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplaySubject.n.png)\r\n![ReplaySubject4](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplaySubject.t.png)\r\n![ReplaySubject5](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplaySubject.nt.png)\r\n\r\n### CompletableSubject\r\n\r\n![CompletableSubject](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/CompletableSubject.png)\r\n\r\n### SingleSubject\r\n\r\n![SingleSubject](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/SingleSubject.png)\r\n\r\n### MaybeSubject\r\n\r\n![MaybeSubject](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/MaybeSubject.png)\r\n\r\n### AsyncProcessor\r\n\r\n![AsyncProcessor](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/AsyncProcessor.png)\r\n\r\n### PublishProcessor\r\n\r\n![PublishProcessor](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/PublishProcessor.png)\r\n\r\n### ReplayProcessor\r\n\r\n![ReplayProcessor1](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplayProcessor.u.png)\r\n![ReplayProcessor2](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplayProcessor.ue.png)\r\n![ReplayProcessor3](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplayProcessor.n.png)\r\n![ReplayProcessor4](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplayProcessor.t.png)\r\n![ReplayProcessor5](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/ReplayProcessor.nt.png)\r", "NaN"], ["5820", "1.x: Plugin lookup workaround for System.properties access restrictions", "David Karnok", "akarnokd", "01/25/18, 12:40:00 PM", "The PR adds a `try-catch` around the System property lookup inside the `RxJavaPlugins` in case a security manager prevents reading arbitrary property entries.\r\n\r\nThis mainly affects the `rxjava.plugin.[index].class` lookup which were introduced due to the 31 character key limit on Android.\r\n\r\nHowever, when running in a container such as Tomcat, a security manager may prevent reading these type of prefixed entries (where `[index]` can't be known upfront), crashing the initialization.\r\n\r\n**Update**:\r\n\r\nThe `System.getProperties()` can also fail, therefore, retrieving the properties has been factored out into a separate method that returns an empty properties.\r\n\r\nFixes #5819.", "NaN"], ["5824", "2.x: Improve the wording of the share() JavaDocs", "David Karnok", "akarnokd", "01/28/18, 01:31:38 PM", "This PR improves the wording of the `Flowable.share()` and `Observable.share()` operators and fixes a JavaDoc link display mistake:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/35439076-7a9816c4-0299-11e8-97ca-462238c6489f.png)\r", "NaN"], ["5826", "2.x: Fix O.blockingIterable(int) & add O.blockingLatest marbles", "David Karnok", "akarnokd", "01/30/18, 11:18:25 PM", "This PR fixes the `Observable.blockingIterable(int)` marble by using the `blockingIterable` redone earlier.\r\n\r\nIn addition, the PR adds a marble diagram to `Observable.blockingLatest`:\r\n\r\n![blockingLatest](https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/blockingLatest.o.png)", "NaN"], ["5828", "2.x: Document replay(N) emission retention caveat", null, "BenTilbrook", "01/31/18, 09:34:51 AM", "Adds javadocs indicating a caveat regarding size-bounded replay operators, subjects, and processors. See #5827 for details.", "NaN"], ["5830", "2.x: Reword the just() operator and reference other typical alternatives", "David Karnok", "akarnokd", "02/01/18, 06:36:52 AM", "This PR updates the `Flowable.just` and `Observable.just` JavaDocs to clarify its behavior, namely it re-emits a constant reference and does not compute it. In addition, links to the other typical source operators are added. The redundant sentence about `just` were removed as well.", "NaN"], ["5833", "2.x: Fix Observable.switchMap main onError not disposing the current inner source", "David Karnok", "akarnokd", "02/02/18, 09:56:25 AM", "The `Observable.switchMap` had bad logic in its main `onError` handler which didn't dispose the current inner `Observable`.\r\n\r\nThe `Flowable` version didn't have this logic error. Both variants received an unit test to verify the correct behavior.\r\n\r\nFixes #5832.", "NaN"], ["5834", "2.x: Fix copy-paste errors in SingleSubject JavaDoc", "David Karnok", "akarnokd", "02/02/18, 03:09:30 PM", "The `SingleSubject` JavaDoc was derived from the `MaybeSubject` JavaDoc and thus some mentions of `onComplete` remained in there. This PR fixes copy-paste errors.", "NaN"], ["5836", "Add JavaDoc links to the base reactive classes to Readme: Getting started", "David Karnok", "akarnokd", "02/02/18, 03:09:49 PM", "Turn the listing of the base reactive classes in the \"Getting started\" ReadMe section.", "NaN"], ["5837", "2.x: Detail distinct() & distinctUntilChanged() in JavaDoc", "David Karnok", "akarnokd", "02/03/18, 04:28:57 PM", "The PR clarifies the comparison and retention behavior of the `distinct` and `distinctUntilChanged` operators (in both `Flowable` and `Observable`).", "NaN"], ["5838", "Added nullability annotation for RxJavaPlugins.onCompletableAssembly", "Ilnar Karimov", "afeozzz", "02/03/18, 02:17:32 PM", "Just annotation that didn't exist ", "NaN"], ["5841", "2.x: Improve JavaDoc of XObserver types.", "David Karnok", "akarnokd", "02/08/18, 10:02:49 PM", "This PR improves the JavaDoc of the 4 RxJava main consumer types:\r\n\r\n- `Observer`\r\n- `SingleObserver`\r\n- `MaybeObserver`\r\n- `CompletableObserver`", "NaN"], ["5843", "2.x: Expand the JavaDocs of the Scheduler API", "David Karnok", "akarnokd", "02/13/18, 07:28:00 AM", "This PR adds more details to the `Scheduler` and `Worker` API, rewords some older sentences and fixes a few mistakes in others.\r\n\r\nIn addition, the wording of the `SchedulerRunnableIntrospection` felt a bit clumsy and has been updated as well.", "NaN"], ["5844", "2.x: Explain the properties of the XEmitter interfaces in detail", "David Karnok", "akarnokd", "02/13/18, 08:56:24 AM", "This PR explains the properties of the 5 specifc `Emitter` types in more details:\r\n\r\n- error handling\r\n- resource handling\r\n- concurrent use aspects\r\n- the difference between `Disposable` and `Cancellable` resource handling\r\n- terminal state effects", "NaN"], ["5845", "2.x: Add efficient concatWith(Single|Maybe|Completable) overloads", "David Karnok", "akarnokd", "02/16/18, 11:37:38 AM", "This PR adds specialized overloads to the `concatWith` operator in `Flowable` and `Observable`.\r\n\r\nIf accepted, the marbles will be updated in a separate PR.\r\n\r\nRelated: #5350.", "NaN"], ["5847", "2.x: Add efficient mergeWith(Single|Maybe|Completable) overloads.", "David Karnok", "akarnokd", "02/19/18, 08:18:42 PM", "This PR adds specialized overloads to the `mergeWith` operator in `Flowable` and `Observable`.\r\n\r\nIf accepted, the marbles will be updated in a separate PR.\r\n\r\nRelated: #5350.", "NaN"], ["5848", "2.x: Improve the wording of the Maybe.fromCallable JavaDoc", "David Karnok", "akarnokd", "02/13/18, 09:19:46 AM", "This PR improves the wording and details of the `Maybe.fromCallable` operator's JavaDoc.", "NaN"], ["5850", "Fix a race condition that may make OperatorMaterialize emit too many terminal notifications", "Piotr Ko\u0142aczkowski", "pkolaczk", "02/15/18, 06:49:26 PM", "We're using RxJava 1.3.5 and one of our tests occasionally fails (very hard to reproduce). The test asserts that `anObservable.toBlocking.toList` (RxScala) expression throws a particular exception, because we expect the observable to be in error state by emitting a single `onError`. However, in rare cases, we observe that there is no exception thrown, and an empty list is returned instead. We verified that the problem is not the observable we use. The observable properly fires the `doOnError` handler prior to  the test assertion failure. Therefore we suspected something wrong happening in the `toBlocking.toList` conversion. I debugged that in fact this conversion uses `OperatorMaterialize` as a part of `BlockingOperatorToIterator`. \r\n\r\nI took a look at the `OperatorMaterialize` and found an obvious bug. The `busy` variable is never set to true anywhere, despite the comments showing the author of the code intended it to be true when the `drain` loop was running.\r\n\r\nThe PR fixes this problem by setting `busy` to true at the entry of the `drain` method. \r\n\r\nHowever I still have some doubts about the original code: \r\n- Why does `drain` have to be called from `requestMore`? Why isn't it enough to call it from `onCompleted` and `onError`? It looks like the `drain` logic does anything only if the `terminalNotification` is set, and it can be set only by `onCompleted` and `onError`.\r\n- What is this `drain` logic supposed to do? Looks rather complex and the intent of it is not obvious. If we don't call it from `requestMore` then maybe we don't need the `drain` logic at all? Why not emit the terminal notifications directly from `onError` and `onCompleted` ?\r\n\r\nThanks,\r\nPiotr Ko\u0142aczkowski", "NaN"], ["5851", "Fix a race condition in OperatorMerge.InnerSubscriber#onError", "Piotr Ko\u0142aczkowski", "pkolaczk", "02/15/18, 10:15:44 AM", "Inner subscriber must queue the error first before setting done, so that after `emitLoop` removes the subscriber,`emitLoop` is guaranteed to notice the error. Otherwise it would be possible that inner subscribers count was 0, and at the same time the error queue was empty.\r\n\r\nWe observed that sometimes a result of flattening two observables doesn't properly mark the resulting observable as failed, despite the inner observable properly reporting onError. Instead, the error condition was ignored and the result observable was completing normally.\r\n\r\n\r", "NaN"], ["5856", "2.x: Add finite requirement to various collector operators JavaDoc", "David Karnok", "akarnokd", "02/19/18, 08:41:01 PM", "Add notes to the following operators to state their sources has to be finite. It has been already done to `toList` in #5465.\r\n\r\n- `collect`\r\n- `collectInto`\r\n- `reduce`\r\n- `reduceWith`\r\n- `toMap`\r\n- `toMultimap`\r\n- `toSortedList`", "NaN"], ["5857", "2.x: Unify race test loop counts and invocations", "David Karnok", "akarnokd", "02/17/18, 11:18:16 PM", "This PR replaces the individual race-test loop counts with global constants and removes the unnecessary custom `Scheduler` value from the invocations of `TestHelper.race()`.\r\n\r\nThe default loop count is now 2500 and should elimitate the +/- 0.1% coverage fluctuations.", "NaN"], ["5858", "2.x: Remove unnecessary comment from Observable.timeInterval(TimeUnit)", "Vladislav Zhukov", "zhukic", "02/18/18, 05:30:45 PM", "\r", "NaN"], ["5860", "2.x: Flowable.groupBy add overload with evicting map factory", "Dave Moten", "davidmoten", "02/22/18, 12:24:21 PM", "As per discussion in #5763, this PR adds an overload for `Flowable.groupBy` that specifies an `evictingMapFactory`. \r\n\r\nAn example of usage taken from the new javadoc:\r\n\r\n```java\r\nFunction<Consumer<Object>, Map<Integer, Object>> evictingMapFactory = \r\n   notify ->\r\n       CacheBuilder\r\n         .newBuilder() \r\n         .maximumSize(3)\r\n         .removalListener(entry -> { \r\n              try {\r\n                  // emit the value not the key!\r\n                  notify.accept(entry.getValue());\r\n              } catch (Exception e) {\r\n                  throw new RuntimeException(e);\r\n              }\r\n            })\r\n         .<Integer, Object> build()\r\n         .asMap();\r\n         \r\n // Emit 1000 items but ensure that the\r\n // internal map never has more than 3 items in it           \r\n Flowable\r\n   .range(1, 1000)\r\n   // note that number of keys is 10\r\n   .groupBy(x -> x % 10, x-> x, true, 16, evictingMapFactory)\r\n   .flatMap(g -> g)\r\n   .forEach(System.out::println);\r\n```\r\n\r\nNote that I based this operator on the 1.x version which I think may have a bug that goes as far as the signature of that method. The eviction consumer should not be given a key but rather the value from the map. I'll pursue the 1.x issue after dealing with this.\r", "NaN"], ["5861", "2.x: Fix Javadoc warnings, links to the JDK types", "David Karnok", "akarnokd", "02/23/18, 10:07:53 AM", "The definition of multiple external links was wrong in `build.gradle` where the `options.links()` is actually defined as `String...` and multiple calls are not additional. This made the generated JavaDoc not have links to the JDK types. The fix now properly uses the varargs of the method. In addition, somehow the plain `http://` still wouldn't generate the proper links probably because they are redirected to `https://` for which the javadoc tool is not prepared.\r\n\r\nIn addition, 4 dangling `<p>` tags were showing up as warnings and have been removed.", "NaN"], ["5863", "2.x: Expand the documentation of the Flowable.lift() operator", "David Karnok", "akarnokd", "02/26/18, 11:45:36 AM", "This PR expands the documentation of the `Flowable.lift()` operator used for inserting custom operators into flows in a functional and fluent fashion.\r\n\r\nThe other reactive base classes feature similar `lift()` operators for which the text can be adapted and contributed in a separate PR once the content of this PR is stabilized by review feedback.\r\n\r\nRelated: #5862 ", "NaN"], ["5865", "2.x: Improve the JavaDoc of the other lift() operators", "David Karnok", "akarnokd", "02/28/18, 08:41:25 AM", "Improve the JavaDoc of the `{Observable | Maybe | Single | Completable}.lift()` operator, adapting the text from #5863.", "NaN"], ["5867", "2.x: enhance test for groupBy with evicting map factory", "Dave Moten", "davidmoten", "02/26/18, 11:22:45 PM", "Enhance `FlowableGroupByTest.SingleThreadEvictingHashMap` so that it actually evicts and be a bit defensive by supporting `putAll` and `clear` properly. No change to `src/main/java`.", "NaN"], ["5870", "2.x: Add Flowable.switchMapCompletable{DelayError} operator", "David Karnok", "akarnokd", "03/01/18, 04:46:05 PM", "This PR adds the `Flowable.switchMapCompletable` and `Flowable.switchMapCompletableDelayError` operators as requested by #4853.\r\n\r\nThe associated new marbles are:\r\n\r\n![switchMapCompletable](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchMapCompletable.f.png)\r\n\r\n![switchMapCompletableDelayError](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchMapCompletableDelayError.f.png)", "NaN"], ["5871", "2.x: Add Flowable.concatMapCompletable{DelayError} operator", "David Karnok", "akarnokd", "03/01/18, 12:05:53 PM", "This PR adds the `Flowable.concatMapCompletable` and `Flowable.concatMapCompletableDelayError` operators as requested by #4853.\r\n\r\nThe marbles will be updated in a separate PR.", "NaN"], ["5872", "2.x: Add Flowable.concatMap{Maybe,Single}{DelayError} operators", "David Karnok", "akarnokd", "03/01/18, 06:46:57 PM", "This PR adds operators that allow concatenating a mapped sequence of `Maybe`s or `Single`s, with or without delaying their errors:\r\n\r\n- `concatMapMaybe` (+1 overload with prefetch)\r\n- `concatMapMaybeDelayError` (+2 overloads with error mode and prefetch)\r\n- `concatMapSingle` (+1 overload with prefetch)\r\n- `concatMapSingleDelayError` (+2 overloads with error mode and prefetch)\r\n\r\nThey are in the same PR as the `Single` variant's implementation is practically the `Maybe` implementation minus the `onComplete` case.\r\n\r\nTheir marbles will be updated in a separate PR.\r\n\r\nOriginally requested in #4853.", "NaN"], ["5873", "2.x: Add Flowable.switchMap{Maybe,Single}{DelayError} operators", "David Karnok", "akarnokd", "03/02/18, 08:56:41 AM", "This PR adds `Flowable` operators that allow switching between a mapped sequence of `Maybe`s or `Single`s, with or without delaying their errors:\r\n\r\n- `switchMapMaybe`\r\n- `switchMapMaybeDelayError`\r\n- `switchMapSingle`\r\n- `switchMapSingleDelayError`\r\n\r\nThey are in the same PR as the `Single` variant's implementation is practically the `Maybe` implementation minus the `onComplete` case.\r\n\r\nTheir marbles will be updated in a separate PR.\r\n\r\nOriginally requested in #4853.", "NaN"], ["5875", "2.x: Add Observable switchMapX and concatMapX operators", "David Karnok", "akarnokd", "03/03/18, 01:36:05 PM", "This PR ports the various `switchMapX` and `concatMapX` operators from #5870, #5871, #5872 and #5873 to `Observable`:\r\n\r\n- `concatMapCompletable` (replaced by the common implementation)\r\n- `concatMapCompletableDelayError`\r\n- `concatMapMaybe`\r\n- `concatMapMaybeDelayError`\r\n- `concatMapSingle`\r\n- `concatMapSingleDelayError`\r\n- `switchMapCompletable`\r\n- `switchMapCompletableDelayError`\r\n- `switchMapMaybe`\r\n- `switchMapMaybeDelayError`\r\n- `switchMapSingle` (dedicated implementation)\r\n- `switchMapSingleDelayError` (dedicated implementation)\r\n\r\nThis PR concludes the requested set of operators in #4853.\r\n\r\nMarbles will be updated/adjusted in a separate PR.", "NaN"], ["5876", "2.x: Add note about NoSuchElementException to Single.zip().", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "03/03/18, 10:38:45 AM", "NaN", "NaN"], ["5883", "2.x: Improve coverage and fix small mistakes/untaken paths in operators", "David Karnok", "akarnokd", "03/04/18, 11:39:29 AM", "This PR improves the coverage of RxJava while adjusting some code paths and fixing other types of smaller bugs.\r\n\r\n- Fix `Maybe.merge(Publisher)` to define a 1 element buffer only.\r\n- Fix `Maybe.mergeDelayError(Publisher)` to use the dedicated `FlowableFlatMapPublisher` similar to the plain `merge()`.\r\n- In `Flowable.flatMap`, checking for empty or cancelled arrays in `removeInner()` can be replaced with a length check.\r\n- Make sure in `Flowable.reduce(seed, f)` the terminal events can't be called a second time if the reducer crashes.\r\n- Turn the `FlowableReplay.MultiCastPublisher` into a `Flowable` and rename it to `MulticastFlowable`.\r\n- Fix `FlowableWindowBoundary` not cancelling the upstream on a missing backpressure case, causing `NullPointerException`.\r\n- Remove unused override of `accept()` in `FlowableWindowBoundary`.\r\n- Remove the ineffective done flag from `OperatorWindowBoundaryOpenSubscriber`.\r\n- Replace the timer CASs with the `replace()` call in `FlowableWindowTimed`.\r\n- Remove the unused `RepeatWhen`, `ErrorMapperFilter` and `RetryWhen` components from `ObservableInternalHelper`.\r\n- Make sure the value is cleared at most once in `ObservableReduceSeedSingle`.\r\n- Simplify `ObservableWindowBoundarySelector`'s inner consumer's `onNext` handling.\r\n- Simplify `FlowableWindowBoundarySelector`'s inner consumer's `onNext` handling.\r\n- Inline the finally actions in `InstantPeriodicTask.call()`.\r\n- Fix `InstantPeriodicTask.setFirst` and `setRest` to return from the loop when the task has been cancelled to prevent excess looping and overwriting the `CANCELLED` indicator.\r\n- Inline the finally actions in `ScheduledDirectPeriodicTask.call()`.\r\n- Slight adjustment of crash propagation in the `SchedulerWhen` constructor.\r\n- In `BehaviorProcessor`, checking for empty or cancelled arrays in `remove()` can be replaced with a length check.\r\n- In `BehaviorSubject`, checking for empty or cancelled arrays in `remove()` can be replaced with a length check.", "NaN"], ["5886", "2.x: Upgrade the algorithm of Observable.timeout(time|selector) operators", "David Karnok", "akarnokd", "03/04/18, 01:38:27 PM", "This PR improves the algorithms of the `Observable.timeout(time)` and `Observable.timeout(selector)` operators to match their `Flowable` counterparts implemented in #5661.\r\n\r\nIn addition, coverage of the `Flowable` counterparts have been improved by synchronizing the unit tests.\r\n\r\nNote that they were the last users of `ObserverFullArbiter` and `FullArbiterObserver` which are now removed.\r\n\r\nCloses #5882.", "NaN"], ["5887", "2.x: Fix window(Observable|Callable) upstream handling", "David Karnok", "akarnokd", "03/04/18, 06:19:12 PM", "This PR fixes the upstream handling in `Observable.window(ObservableSource)` and `Observable.window(Callable<ObservableSource>)` operators to make sure if both the main output and the inner windows have been disposed, the upstream is also disposed.\r\n\r\nFixes #5881.\r\n\r\n*Remark:*\r\n\r\nThere are a couple of `w != null` checks showing up as partially covered. In theory, with the right interleaving, `w` can become `null`, but unfortunately the usual `TestHelper.race()` testing is unlikely to trigger that case. There would be a higher chance with 3 threads (one disposing, one completing the main and one completing the inner window) but the current CI is effectively 1.5 - 2 cores/threads that tend to not produce a thorough interleaving.", "NaN"], ["5888", "2.x: Fix Flowable.window(Publisher|Callable) upstream handling", "David Karnok", "akarnokd", "03/04/18, 11:54:21 PM", "This PR fixes the upstream handling in `Flowable.window(Publisher)` and `Flowable.window(Callable<Publisher>)` operators to make sure if both the main output and the inner windows have been cancelled, the upstream is also cancelled.\r\n\r\nRelated: #5887, #5881.\r\n\r\nIn addition, the Jacoco code coverage has been updated to 0.8.0 mainly due to the [automatic filtering of difficult-to-impossible code paths](https://github.com/jacoco/jacoco/releases/tag/v0.8.0).", "NaN"], ["5889", "2.x: Cleanup, coverage and related component fixes", "David Karnok", "akarnokd", "03/05/18, 12:08:39 AM", "This PR improves the coverage of various components and contains the following additional fixes:\r\n\r\n- Remove a very unlikely cancellation check in `FlowableConcatMapEager`.\r\n- Improve backpressure tracking in `FlowablePublishMulticast` to avoid atomic decrement per items emitted (part of `publish(Function)`).\r\n- Improve check for empty or terminated state in `FlowablePublishMulticast` by using the array length.\r\n- `UnicastProcessor` termination to use a one-step `getAndSet`\r\n- `BehaviorSubject` termination to use a one-step `getAndSet`\r\n- Remove impossible try-finally in `BehaviorSubject.setCurrent` as the body could never crash.\r", "NaN"], ["5890", "Added nullable annotations to subjects", "Harshit Bangar", "bangarharshit", "03/05/18, 10:00:51 AM", "Adding nullable annotations to subjects. The `throwable` and `getValue` methods are annotated with Nullable.\r\n\r\nQuick question about styling - In some places, javadocs has trailing whitespaces but it is absent in other places. Is there a styling policy around that? Intellij is removing the trailed whitespace automatically.", "NaN"], ["5891", "2.x: Improve coverage & related cleanup 03/05", "David Karnok", "akarnokd", "03/05/18, 04:41:10 PM", "Improve the coverage of various components, fix impossible paths and other fixes. See the comments attached to the code changes.", "NaN"], ["5892", "2.x: Fix the extra retention problem in ReplaySubject", "David Karnok", "akarnokd", "03/07/18, 11:21:54 AM", "In the bounded buffers of `ReplaySubject`, the head reference may retain one extra item when the trimming happens. Nulling out this reference is not possible at this point because old consumers may be still walking through the underlying linked list of nodes. However, replacing a head with the same next pointer (which is always not null if value is not null) but no value will eventually let the value get GCd. This cleanup doesn't happen on every `onNext` because it doubles the node allocation and thus the overhead.\r\n\r\nThis PR modifies the code so that terminal events do perform this head swapping and introduces the `ReplaySubject.cleanupBuffer()` method to allow the user to perform the head swapping while the `ReplaySubject` is not yet terminated and the cleanup is needed.\r\n\r\nIf this type of change is accepted, the `ReplayProcessor` can also be refitted. For the `replay()` operators, the terminal cleanup can be implemented but the on demand cleanup can't as there is no API surface for its internal buffer available.", "NaN"], ["5893", "2.x: Fix Flowable.publish(-|Function) subscriber swap possible data loss", "David Karnok", "akarnokd", "03/07/18, 05:32:48 PM", "This PR fixes an avoidable dataloss in the following subscriber-swap scenario with the `publish()` and `publish(Function<Flowable, Publisher>)`.\r\n\r\nWhen an `onNext` changes the current array of subscribers (an existing consumer cancelled or a new one arrived), the change detection is delayed and items may get dropped even though a fresh consumer could take those values.\r\n\r\nThe algorithms were updated to fix this case as well as the emission tracking in `FlowableMulticastProcessor`: a global `emitted` value is not good here after all (subscribers joining late would indicate an incorrect aggregate demand and get overflown).\r\n\r\nOne of the advanced uses of `publish(Function)` is to implement consumption mode changes by having a mode cancel the subscription to the shared `Flowable` and synchronously subscribe a new consumer with a different behavior. \r\n\r\nThe discovery of this shortcoming was due to a special transformation pattern: apply a transformer if the source is not empty, and in this case, deliver all items of it.\r\n\r\n```java\r\nFlowableTransformer<T, U> transformer = ...\r\nsource.publish(shared ->\r\n   // let's see if there is at least 1 source item\r\n   shared.take(1)\r\n   // if there is one item, stop this phase and keep the item\r\n   .concatMap(first ->\r\n       // given the very first item, apply the transformation\r\n       // on the \"original\" sequence by reattaching the first\r\n       // item to the rest of the source\r\n       transformer.apply(shared.startWith(first))\r\n   )\r\n)\r\n.subscribe(/* ... */);\r\n```", "NaN"], ["5895", "Fix buffer() documentation to correctly describe onError behaviour", "Adam Speakman", "adamsp", "03/07/18, 10:46:53 AM", "Fixes #5894. I just copied the sentence from the fixed docs in 1.x and updated to use ObservableSource/Publisher naming.", "NaN"], ["5897", "2.x: clarify dematerialize() and terminal items/signals", "David Karnok", "akarnokd", "03/07/18, 11:06:50 AM", "Specify in both `Flowable` and `Observable` that a terminal notification item or a regular terminal signal ends the flow.\r\n\r\nFixes: #5261", "NaN"], ["5898", "2.x: Fix excess item retention in the other replay components", "David Karnok", "akarnokd", "03/07/18, 05:49:10 PM", "This is a follow-up PR to #5892 in order to avoid item retention in the head node. For the `ReplayProcessor`, the cleanup can be triggered with `cleanupBuffer`. For the `replay()` operators, such trigger is not possible. However, the terminal events will perform the cleanup internally at least.", "NaN"], ["5900", "2.x: Fix Observable.flatMap scalar maxConcurrency overflow", "David Karnok", "akarnokd", "03/07/18, 05:15:26 PM", "Since `Observable` is not backpressured, the `flatMap` of it has to manage the buffering of inner sources so that only a limited number of them are active at the same time. However, when most outstanding inner sources were scalar (`just()` is such a source) but the drain loop was busy, the operator overflow its bounded scalar queue (as it is supposed to be holding at most maxConcurrency scalar items), causing an `IllegalStateException`.\r\n\r\nThe PR fixes this corner case by making sure the `tryScalarEmit` returns false if it had to queue up the scalar, which in turn prevents the next inner source to be subscribed to until the queued item is cleared. In addition, the terminal state check has to include the buffer holding the remaining inner sources: being done, having an empty scalar queue and having no active inner observers is just not enough.\r\n\r\n`Flowable.flatMap` is not affected as it uses backpressure to ensure only a limited number of sources or scalars are mapped in.\r\n\r\nOriginally reported in the chat of this [StackOverflow question](https://stackoverflow.com/q/49151111/61158):\r\n\r\n```\r\n\r\nAndroidRuntime: FATAL EXCEPTION: RxCachedThreadScheduler-1 \r\nProcess: com.hackerli.girl, PID: 6030 \r\njava.lang.IllegalStateException: Scalar queue full?! \r\nat io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.tryEmitScalar(ObservableFlatMap.java:250) \r\nat io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.subscribeInner(ObservableFlatMap.java:146) \r\nat io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.drainLoop(ObservableFlatMap.java:475) \r\nat io.reactivex.internal.operators.observable.ObservableFlatMap$MergeObserver.drain(ObservableFlatMap.java:323) \r\nat io.reactivex.internal.operators.observable.ObservableFlatMap$InnerObserver.onComplete(ObservableFlatMap.java:579) \r\nat io.reactivex.internal.observers.BasicFuseableObserver.onComplete(BasicFuseableObserver.java:119) \r\nat io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeOnObserver.onComplete(ObservableSubscribeOn.java:68) \r\nat retrofit2.adapter.rxjava2.BodyObservable$BodyObserver.onComplete(BodyObservable.java:66) \r\nat retrofit2.adapter.rxjava2.CallExecuteObservable.subscribeActual(CallExecuteObservable.java:47)\r\nat io.reactivex.Observable.subscribe(Observable.java:11442) \r\nat retrofit2.adapter.rxjava2.BodyObservable.subscribeActual(BodyObservable.java:34) \r\nat io.reactivex.Observable.subscribe(Observable.java:11442) \r\nat io.reactivex.internal.operators.observable.ObservableSubscribeOn$SubscribeTask.run(ObservableSubscribeOn.java:96) \r\nat io.reactivex.Scheduler$DisposeTask.run(Scheduler.java:571) \r\nat io.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:66) \r\nat io.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:57) \r\nat java.util.concurrent.FutureTask.run(FutureTask.java:237) \r\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:269) \r\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113) \r\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588) \r\nat java.lang.Thread.run(Thread.java:818)\r\n```", "NaN"], ["5902", "2.x: Perf measure of Flowable flatMap & flatMapCompletable", "David Karnok", "akarnokd", "03/09/18, 09:02:24 AM", "This PR adds two benchmarks that measure the synchronous and asynchronous behavior of `Flowable.flatMap` and `Flowable.flatMapCompletable` when both are run with a `Completable` source.\r\n\r\nApart from the `item == 1` case, which is due to lack of scalar optimizations with `flatMapCompletable`, the `flatMapCompletable` is faster by a good margin:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37175444-de62c1fe-2319-11e8-90ce-1f0b0dbd661b.png)\r\n\r\nI'd say the asynchronous use is slightly faster in general with `flatMapCompletable`:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37175490-fa38bd8e-2319-11e8-84ff-e01d1ec18129.png)\r\n\r\n-----------\r\n\r\nOriginally, this PR started out as an attempt to optimize the inner consumer tracking in `flatMapCompletable` when the `maxConcurrency` is non-default by using a special containers for 1..8 instead of the `CompositeDisposable`. Unfortunately, this made it slightly slower in general (PR column):\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37175604-4b4c8bb0-231a-11e8-8f28-a18b364c4d64.png)\r\n\r\nThe async benchmark is within +/- 3% most of the time, and generally inconclusive.\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37175638-64e9e806-231a-11e8-8c42-682c53b986e7.png)\r\n\r\nAn additional test method was added to verify the new tracking classes, which is left as an additional mean to verify `flatMapCompletable`'s behavior in general.\r", "NaN"], ["5904", "2.x: Fix Flowable.singleOrError().toFlowable() not signalling NoSuchElementException", "David Karnok", "akarnokd", "03/09/18, 08:43:45 AM", "When a `singleOrError` is followed by `toFlowable()`, the assembly process switches the `Flowable->Single` operator into a `Flowable->Flowable` operator implementing the `singleOrError` behavior (saving the back-and-forth type conversion). The backing implementation was shared with `singleElement` and as such, did not properly handle the `orError` case for an empty source. The PR fixes the lack of `NoSuchElementException` in this case.\r\n\r\nFixes #5903.\r\n\r\nThe `Observable` variant doesn't have such optimization but the test has been converted to make sure `Observable` is verified for this aspect in case the optimization is implemented with it in the future.", "NaN"], ["5905", "2.x: Coverage improvements, logical fixes and cleanups 03/08", "David Karnok", "akarnokd", "03/09/18, 09:29:57 AM", "This PR fixes a couple of logical errors and cleans up some other components as well as improves the coverage of some classes. See the change comments below about the relevant details.", "NaN"], ["5906", "2.x: Add public constructor for TestScheduler that takes the time.", "Niklas Baudy", "vanniktech", "03/09/18, 01:22:54 PM", "- adds a time constructor to TestScheduler\r\n- should I make it experimental or will it just be stable?\r\n\r\nFixes #5901", "NaN"], ["5907", "2.x: Cleanup test local variable names", "David Karnok", "akarnokd", "03/09/18, 01:56:09 PM", "Add an unit test that scans the unit test files for common local variable misnaming due to copy-pasting between the types, such as:\r\n\r\n- `TestObserver ts` <-> `TestSubscriber to`\r\n- `PublishSubject pp` <-> `PublishProcessor ps`\r\n\r\nSee the new `CheckLocalVariablesInTests` for other patterns described with a regexp.", "NaN"], ["5910", "2.x: Improve coverage, fix operator logic 03/12", "David Karnok", "akarnokd", "03/13/18, 08:55:04 PM", "Improve coverage of RxJava internal components. See the change explanation as comments below.", "NaN"], ["5914", "2.x: Benchmark X-Map-Z operators", "David Karnok", "akarnokd", "03/14/18, 10:36:22 PM", "This PR adds JMH benchmarks to measure operators mapping onto other types, such as `flatMapCompletable`, `concatMapSingle`, etc. In addition, two new benchmarks were added to measure the `flatMapIterable` performance in additional situations.\r\n\r\n#### Baseline results\r\n\r\ni7 4770K, Windows 7 x64, Java 8u162\r\n\r\n[JMH Compare GUI](https://github.com/akarnokd/jmh-compare-gui/releases/tag/v1.3.2) workspace file: [xmapz_ws.xml](https://gist.github.com/akarnokd/317e2d38128f45c8fbb1ec8ebd20d970)\r\n\r\nThe first diagram compares the dedicated, plain (same inner type as the outer type) and conversion-based flows:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37431058-6df2d0f2-27d4-11e8-9d6a-b9d8a0f34e0b.png)\r\n\r\nThe switchMap-based `Observable` operators look like they could use some optimizations. Overall, `count == 1` is not optimized with the dedicated versions.\r\n\r\nFrom the `Observable`'s perspective:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37431169-c1f69d46-27d4-11e8-8159-c598e7f50e68.png)\r\n\r\nLooks like the `concatMapX` operators could use some optimizations.\r\n\r\nThe `flatMapIterable` measures are as follows:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37431246-00fab8ba-27d5-11e8-94b5-67b94e1869a7.png)\r\n\r\nThe `Flowable` version seem to be considerably slower, probably not explainable due to backpressure overhead.", "NaN"], ["5915", "2.x: Optimize ObservableConcatMapCompletable", "David Karnok", "akarnokd", "03/15/18, 08:49:48 AM", "This PR reduces the overhead in the `Observable.concatMapCompletable` operator by:\r\n\r\n- adding front-queue fusion to eliminate queue allocations (although this didn't improve the performance beyond a +/- 3% noise),\r\n- moving the `error` and `errorMode` fields into local variables, saving on the mandatory volatile re-read of other fields,\r\n- adding a scalar shortcut in case the upstream is known to be 0-1.\r\n\r\n#### Benchmark comparison:\r\n\r\ni7 4770K, Windows 7 x64, Java 8u162\r\n\r\nThe PR improves the dedicated case considerably:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37437588-44960732-27ee-11e8-9f91-00c3313ac60b.png)\r\n\r\nand it is now better across the board compared to a `toFlowable` conversion and the main `concatMap`:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37437618-7490a244-27ee-11e8-99de-cb20d5828555.png)\r", "NaN"], ["5917", "1.x: fix and deprecate evicting groupBy and add new overload", "Dave Moten", "davidmoten", "03/19/18, 02:21:41 PM", "See #5868\r\n\r\nThere is a problem with the existing 1.x `Observable.groupBy` overload with an evicting map factory where depending on the eviction behaviour of the supplied map factory, groups may not be completed and may leak memory. The problem extends to the method signature in that the eviction action should report the evicted `GroupedObservable` not the corresponding key.\r\n\r\nThis PR\r\n\r\n* fixes the existing method at the expense of doubling up the internal map `groups` ( into `groupsCopy`) so that we can always successfully lookup the evicted group from the `groupsCopy` map. Evictions from `groups` are mirrored in `groupsCopy` after the lookup.\r\n* deprecates the problematic overload indicating that it uses more memory than the preferred new overload\r\n* adds a new method `groupBy` that has the corrected signature and offers `bufferSize` and `delayError` parameters for a bit more flexibility and to differentiate the erased signature from the deprecated method\r\n* adds tests that were ported from the 2.x tests\r\n\r\n\r", "NaN"], ["5918", "2.x: Improve the scalar source performance of Observable.(concat|switch)MapX", "David Karnok", "akarnokd", "03/15/18, 10:35:57 AM", "This PR adds scalar source optimizations to `Observable` operators:\r\n\r\n- `concatMapCompletable`\r\n- `concatMapSingle`\r\n- `concatMapMaybe`\r\n- `switchMapCompletable`\r\n- `switchMapSingle`\r\n- `switchMapMaybe`\r\n\r\n#### Benchmark\r\n\r\ni7 4770K, Windows 7 x64, Java 8u162\r\n\r\nThe baseline is taken from #5914. The target is to be faster than using the plain `concatMap` or `switchMap` with a `toObservable` conversion. The apparent shortcomings of longer `concatMapMaybe` and `concatMapSingle` will be addressed in a subsequent PR.\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37457267-c41bb4a4-2841-11e8-87a4-3951514a7f8f.png)\r", "NaN"], ["5919", "2.x: Add fusion support to ObservableSwitchMap inner source", "David Karnok", "akarnokd", "03/15/18, 01:22:29 PM", "This PR improves the performance of the `Observable.switchMap` operator by adding fusion support as well as upgrading the `Completable` and `Single` conversion to `Observable` to be fuseable. The PR also fixes an error in the `DeferredScalarDisposable` implementation as the protocol requires calling with `null`.\r\n\r\nThe plain (`Observable.switchMap(Observable)`) conversion has promising performance improvements:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37464461-ba6d5c0c-2858-11e8-8aa0-96d53350cfed.png)\r\n\r\nThe conversion `Observable.switchMap(Maybe.toObservable)` has promising performance improvements:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37464488-cf9b1290-2858-11e8-8ac7-462a58f61a13.png)\r\n\r\nThe conversion `Observable.switchMap(Completable.toObservable)` is also promising, but there is a 11% loss in the scalar case for some reason:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37464621-2ad6b1c8-2859-11e8-9a0a-d34c8ff8048b.png)\r\n\r\nFinally, the conversion  `Observable.switchMap(Single.toObservable)` got a bigger hit for the scalar case, 21% loss, but the rest are impressive:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/37464636-41ea983e-2859-11e8-9258-6c1c85ee8347.png)\r\n\r\n\r\n\r", "NaN"], ["5923", "2.x: Fix JavaDoc warnings of buffer(Publisher|Callable)", "David Karnok", "akarnokd", "03/19/18, 02:26:10 PM", "Text is not allowed between `<dl>` and its child tags.\r\n\r\nFixes #5916.", "NaN"], ["5924", "2.x: Update Single.flatMapPublisher marble", "David Karnok", "akarnokd", "03/21/18, 09:39:42 AM", "Renamed the operator in the box. For #5788.\r\n\r\n![flatMapPublisher](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMapPublisher.png)", "NaN"], ["5925", "Add @Nullable annotations to Processors", "Aaron He", "aaronweihe", "03/22/18, 08:32:32 AM", "Add `@Nullable` annotations to Processors. \r\n\r\nUpdated our project to use 2.11.1, and discovered there's this PR https://github.com/ReactiveX/RxJava/pull/5890 which added `@Nullable` annotations to Subjects. Thought might as well add `@Nullable` to Processors.", "NaN"], ["5926", "2.x: Expand the Getting Started", "David Karnok", "akarnokd", "03/23/18, 08:19:17 AM", "This PR expands the Readme.md with further examples and details, plus adds headers so that (former and new) sections can be easily linked in answers on issue lists or StackOverflow.\r\n\r\n(Note that it was written offline without proper markdown rendering so I may update the PR a couple of times to get the render mistakes fixed).", "NaN"], ["5928", "2.x: Fix concatMapSingle & concatMapMaybe dispose-cleanup crash", "David Karnok", "akarnokd", "03/23/18, 10:31:48 AM", "This PR fixes the accidental logical mistake in the `cancel`/`dispose` logic of the new `concatMapSingle` and `concatMapMaybe` operators of both `Flowable` and `Observable` where the internal queue cleanup should happen in a serialized fashion only, which is the state when the work-in-progress counter changes from 0 to 1 ensured by a `==` check.\r\n\r\nFixes #5927", "NaN"], ["5930", "Add @NonNull annotations to create methods of Subjects and Processors", "Vedran Pri\u0161\u0107an", "vpriscan", "03/23/18, 08:55:59 PM", "I am annotating *Subject's and *Processor's create methods with @NonNull annotations to remove compiler's nullability warnings when calling the methods from Kotlin language.", "NaN"], ["5935", "1.x: Fix take() to route late errors to RxJavaHooks", "David Karnok", "akarnokd", "03/26/18, 01:45:53 PM", "If there is a late exception after take has unsubscribed from the upstream, this exception was ignored by the operator. This fix makes sure such late exceptions are routed to the `RxJavaHooks.onError` handler, just like 2.x does.\r\n\r\nFixes: #5934.", "NaN"], ["5936", "2.x: Fix Completable.toMaybe() @return javadoc.", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "03/27/18, 03:19:58 PM", "Current javadoc:\r\n\r\n```java\r\n@return a {@link Maybe} that emits a single item T or an error.\r\n```\r\n\r\nBut in reality, converting `Maybe` to `Completable` should never emit `item T`.", "NaN"], ["5938", "fix typo `ingored`", "zhyuri", "zhyuri", "03/30/18, 07:25:44 AM", "just fix few typos.\r\n\r\nThank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [x] Please give a description about what and why you are contributing, even if it's trivial.\r\n         Just fix typos.\r\n\r\n  - [x] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n          Just typo fix, I assume an issue is unnecessary.\r\n\r\n  - [x] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r\n          No.\r", "NaN"], ["5940", "2.x: Allow @SchedulerSupport on constructors.", "Niklas Baudy", "vanniktech", "03/31/18, 06:37:26 AM", "Motivation behind this is having a class which takes multiple constructor parameters where one can be a Scheduler with a default and a custom overload. In both cases I'd want to slam `@SchedulerSupport` on it so it can be handled properly by static analysis as well.", "NaN"], ["5942", "Removed TERMINATED check in onNext", "Kevin Krumwiede", "kjkrum", "04/01/18, 09:42:28 PM", "`TERMINATED` is an empty array, so iterating over it would be harmless. The cost of the check is probably minuscule, but it was imposed on the common case where the subject is not terminated. In essence, it was optimizing for misuse of the API.", "NaN"], ["5947", "2.x: fix groupBy cancellation with evicting map factory", "Dave Moten", "davidmoten", "05/29/18, 12:14:34 PM", "Fixes #5933.\r\n\r\nWhen the outer stream is cancelled there may be evicted groups present in the queue to be completed.\r\n\r\nI've added code to complete the evicted groups in the `cancel` method as suggested by @akarnokd. To protect against a race condition where the EvictionAction is called just after the evicted groups are completed in `cancel` I've added a `cancelled` check to `EvictionAction`. \r\n\r\nHowever, I am concerned about a race that I'll place in the comments on the code below.", "NaN"], ["5948", "Fix Observable javadoc (#5944)", "Roman Wuattier", "RomanWuattier", "04/03/18, 09:09:38 AM", "* Replace `doOnCancel` by `doOnDispose` in Observable javadoc\r\n\r\nThank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [x] Please give a description about what and why you are contributing, even if it's trivial.\r\n\r\nReplace `doOnCancel` by `doOnDispose` in Observable javadoc\r\n\r\n  - [x] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n\r\n#5944\r\n\r\n  - [x] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r\n\r\nJavadoc only", "NaN"], ["5951", "2.x: blockingX JavaDoc to mention wrapping of checked Exceptions", "David Karnok", "akarnokd", "04/05/18, 06:38:42 PM", "This PR adds an **Error handling** section to various `blockingX` operators to specify checked exceptions from their source will be wrapped into `RuntimeException`s.", "NaN"], ["5952", "AppendOnlyLinkedArrayList#forEachWhile is not breaking iteration properly", "Viacheslav Makarov", "mekarthedev", "04/07/18, 11:03:23 AM", "`AppendOnlyLinkedArrayList#forEachWhile(NonThrowingPredicate)` was `break`-ing from inner loop instead of `return`-ing when predicate returned `true`.\r\n\r\nThis caused iteration to continue with items from the next array bucket.", "NaN"], ["5955", "Add missing parenthesis on README.md", "Andr\u00e9 Vicente Milack", "andre-vm", "04/11/18, 06:32:27 PM", "NaN", "NaN"], ["5957", "2.x: Add Single.ignoreElement, deprecate toCompletable", "David Karnok", "akarnokd", "04/13/18, 07:53:38 AM", "Rename-deprecate `Single.toCompletable` to `ignoreElement` to be in line with the same operator in the other classes and also indicate more clearly in the method name that it ignores the element.\r\n\r\nIn addition, the marbles have been updated on both `Single` and `Maybe` of this operator.\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.ignoreElement.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.ignoreElement.png)", "NaN"], ["5959", "2.x: Fix some grammar mistakes", "David Karnok", "akarnokd", "04/14/18, 02:44:26 PM", "This PR fixes a bunch of typos (in many files) and grammar mistakes in `Flowable` (based on Grammarly checks).\r\n\r\nThe PR also fixes the `JavadocWording` checks to start from the beginning of the method's javadoc as well as checking for cross-line a/an typos.", "NaN"], ["5960", "Fix typo", "Siddharth Jain", "sidjain270592", "04/13/18, 10:25:15 AM", "Update 'Dependend sub-flows' to 'Dependent sub-flows'\r\n\r\nThank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [ ] Please give a description about what and why you are contributing, even if it's trivial.\r\n\r\n  - [ ] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n\r\n  - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r", "NaN"], ["5966", "2.x: Workaround for Objects.requireNonNull inserted by javac", "David Karnok", "akarnokd", "04/20/18, 01:04:41 PM", "For some reason, when compiling RxJava with Java 9 or 10 and target 8, there is an implicit `Objects.requireNonNull` added by the compiler to `us.new X` which makes AnimalSniffer detect a non-Java 6 API usage. Interestingly, this does not happen with:\r\n\r\n- Java 8 target 6, \r\n- Java 8 target 8, \r\n- Java 9 target 6, \r\n- Java 9 target 9, \r\n- Java 10 target 6, \r\n- Java 10 target 9,\r\n- Java 10 target 10\r\n\r\nor AnimalSniffer doesn't detect it for non-8 targets somehow. I know that the latest AnimalSniffer doesn't work with (some?) Java 9 class files, but it doesn't explain why the fully supported Java 8 target 8 does not trigger this error but Java 9 target 8 does.\r\n\r\nI have reported this anomaly as a potential javac bug.\r\n\r\nThe build matrices and outcomes for RxJava 2 can be found here: https://travis-ci.org/akarnokd/RxJava2_9/builds", "NaN"], ["5967", "Fix few typos in README.", "Ankit Saliya", "Apsaliya", "04/21/18, 05:00:10 PM", "3 of them. All in README.", "NaN"], ["5972", "2.x: Fix Observable.concatMapSingle dropping upstream items", "David Karnok", "akarnokd", "04/24/18, 08:06:16 AM", "The internal queue of `Observable.concatMapSingle` was incorrectly the bounded one from its `Flowable` counterpart, causing it to drop upstream items if the current `Single` was delayed. The right queue for `Observable`s is the `SpscLinkedArrayQueue`.\r\n\r\nAdded unit tests to both `concatMapSingle` and `concatMapMaybe` to verify the correct behavior.\r\n\r\nFixes: #5971.", "NaN"], ["5975", "2.x: Fix refCount() connect/subscribe/cancel deadlock", "David Karnok", "akarnokd", "04/29/18, 08:39:43 AM", "This PR fixes a deadlock issue with the `refCount` operator when a subscription leads to a blocking execution while the lock is being held, preventing other subscription or cancellation from executing on other threads.\r\n\r\nThe bug was discovered as the cause of a reported hang on [the Google groups](https://groups.google.com/forum/#!topic/rxjava/G0axw5PbOF4).\r\n\r\nThe [code](https://github.com/akarnokd/RxJava2Extensions/blob/master/src/main/java/hu/akarnokd/rxjava2/operators/FlowableRefCountTimeout.java) has been developed in the extensions project where the operator has [more features](https://github.com/akarnokd/RxJava2Extensions#flowabletransformersrefcount). The overloads supporting these features can be added in a separate enhancement PR.", "NaN"], ["5976", "Adding eager concats to Single", null, "Desislav-Petrov", "04/29/18, 08:23:20 AM", "  - Adding concatEager operator for Singles covering:\r\n   concatEager(Publisher<? extends SingleSource<? extends T>> sources)\r\n   concatEager(Iterable<? extends SingleSource<? extends T>> sources)\r\n   concatArrayEager(SingleSource<? extends T>... sources)\r\n  \r\n- Issue: https://github.com/ReactiveX/RxJava/issues/5974\r\n\r\n - Added tests for both methods, I wasn't sure if I should add tests covering just a single element in the vararg list and respectively an iterable with a single element.. any thoughts on this?\r", "NaN"], ["5977", "2.x: Maybe/Single Javadoc; annotation cleanup", "David Karnok", "akarnokd", "04/29/18, 10:00:09 AM", "The PR cleans up some wording around \"Single source\" and \"Maybe source\", plus removes some unnecessary annotations.", "NaN"], ["5978", "2.x: Fix Flowable.take to route post-cancel errors to RxJavaPlugins.onError", "David Karnok", "akarnokd", "04/29/18, 01:56:29 PM", "This PR makes sure errors emitted by the upstream just after the `Flowable.take` has received the specified amount of items get routed to `RxJavaPlugins.onError`.\r\n\r\n`Observable.take()` and `Flowable.limit()` were already doing this. Added unit tests to verify the behavior across the board.", "NaN"], ["5979", "2.x: Add throttleLatest operator", "David Karnok", "akarnokd", "05/17/18, 08:11:13 AM", "This PR adds the `throttleLatest` operator to `Observable` and `Flowable`, also known as `conflate` (#4856): it is a combination of `throttleFirst` and `sample` whereby frequent items are sampled but the first item outside the sampling window will be emitted immediately:\r\n\r\n![throttleLatest](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/throttleLatest.png)\r\n\r\n![throttleLatest](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/throttleLatest.se.png)\r\n\r\nResolves: #4856\r\nReplaces: #5968", "NaN"], ["5981", "2.x: improve JavaDocs of the subscribeActual methods", "David Karnok", "akarnokd", "04/29/18, 05:47:26 PM", "The PR improves the wording of the abstract `subscribeActual` method across the base reactive types.", "NaN"], ["5982", "2.x: deprecate getValues() in Subjects/Processors", "David Karnok", "akarnokd", "04/30/18, 09:16:18 AM", "This PR deprecates the `getValues()` and `getValues(T[])` methods in `AsyncSubject`, `BehaviorSubject`, `AsyncProcessor` and `BehaviorProcessor`.\r\n\r\nThese methods were remnants of an early 2.x API design where `Subject` itself had these methods for the sake of `ReplaySubject`  and `SerializedSubject` and thus every other subject type had to implement them. The listed subjects and processors above have at most one value accessible via `getValue()` which can then be assigned to an array index manually if needed.", "NaN"], ["5984", "2.x: Add blockingSubscribe JavaDoc clarifications", "David Karnok", "akarnokd", "04/30/18, 10:47:07 AM", "This PR adds some clarifications to the `blockingSubscribe` methods on `Flowable` and `Observable`.", "NaN"], ["5985", "2.x: Small cleanups in the Scheduler class", "David Karnok", "akarnokd", "04/30/18, 10:28:42 AM", "- Remove `@NonNull` from a primitive type\r\n- Make the package-private `PeriodicDirectTask` final\r\n- Add `@NonNull` to other fields", "NaN"], ["5986", "2.x: Add refCount with count & disconnect timeout", "David Karnok", "akarnokd", "05/09/18, 07:44:35 AM", "This PR exposes the additional `refCount` operation modes from #5975:\r\n\r\n- Connect only when the specified number of `Subscriber`s/`Observer`s have subscribed\r\n- Disconnect when the given amount of time elapsed since the very last `Subscriber`/`Observer` cancelled/disposed.\r\n- The combination of both.\r\n\r\nIn addition, the original `refCount` received extra JavaDocs details.", "NaN"], ["5987", "Add marble diagrams to a few Single.doOnX methods.", "VeskoI", "VeskoI", "05/01/18, 09:43:30 AM", "This should tick a few tasks from this issue: https://github.com/ReactiveX/RxJava/issues/5788.\r\n\r\nThe urls are a bit ugly, as they're from the uploads in the issue. I'm happy to update the urls with different ones if there's a better place to upload the diagrams.", "NaN"], ["5991", "2.x: Fix switchMap to indicate boundary fusion", "David Karnok", "akarnokd", "05/04/18, 03:47:22 PM", "Fix `Flowable.switchMap` and `Observable.switchMap` to request for boundary fusion in order to prevent a thread-confined but otherwise fusion-capable sub-sequence from running on the unintended thread.\r\n\r\nFixes: #5990", "NaN"], ["5992", "Observable's javadoc cleanup", "Anthony Musyoki", "anthonyms", "05/04/18, 02:25:31 PM", "The sample code in the Observable javadoc erroneously uses `onNext(Integer t)` for a `DisposableObserver<String>`\r\n\r\nThis has been corrected to be `onNext(String t)`\r", "NaN"], ["5995", "Implement 'toString' method for some Emitters", "Dmitry Strekha", "strekha", "05/06/18, 07:33:10 PM", "When use `.create` method it's unclear why `emitter` is null (if call `toString` or observe object via debugger). \r", "NaN"], ["5996", "2.x: Automatically publish the generated JavaDocs from CI", "David Karnok", "akarnokd", "05/06/18, 02:31:08 PM", "This PR adds a script that publishes the generated JavaDocs from CI back to the `gh-pages` branch upon successful snapshot and release builds (this latter needs testing though via -RC releases).\r\n\r\nThe snapshot JavaDocs will go into the same directory: http://reactivex.io/RxJava/2.x/javadoc/snapshot/\r\n\r\nThe release builds update\r\n- http://reactivex.io/RxJava/javadoc/ while preserving the old `rx` links,\r\n- http://reactivex.io/RxJava/2.x/javadoc/ for the latest 2.x and\r\n- http://reactivex.io/RxJava/2.x/javadoc/2.1.13/ for the specific release version.\r\n\r\nThe `push.sh` script uses a Travis-CI secured token `GITHUB_TOKEN` to talk to the GitHub API. This token was created for my account via https://github.com/settings/tokens (requires repo direct push access), and provided to Travis via \"Environment variables\" on the page https://travis-ci.org/ReactiveX/RxJava/settings .\r\n\r\nIf, for some reason the publishing fails, the build still counts as successful. The reason for this is that restarting the otherwise successful build will try to reupload the same library version into maven which fails. In this case, the JavaDocs can be updated via the old manual method.", "NaN"], ["5997", "2.x: readme: mention 1.x eol; 2.x snapshot javadoc url", "David Karnok", "akarnokd", "05/09/18, 10:55:22 AM", "Small update to the `README.md`:\r\n\r\n- 1.x end-of-life notice\r\n- link to the snapshot Javadocs", "NaN"], ["6002", "2.x: Add MulticastProcessor", "David Karnok", "akarnokd", "05/17/18, 09:17:55 PM", "This PR adds the `MulticastProcessor` from the [extensions project](https://github.com/akarnokd/RxJava2Extensions#multicastprocessor) to be a standard processor option.\r\n\r\nThis type of processor fills the gap of having a backpressure-coordinating processor type as `PublishProcessor` doesn't coordinate backpressure on its own and `Flowable.publish()` often can't be used because the upstream may not yet exist when the dowstream consumers are setup.\r\n\r\n![MulticastProcessor](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/MulticastProcessor.png)\r\n\r\nExample:\r\n\r\n```java\r\nMulticastProcessor<Integer> mp = Flowable.range(1, 10)\r\n    .subscribeWith(MulticastProcessor.create());\r\n\r\nmp.test().assertResult(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\r\n\r\n// --------------------\r\n\r\nMulticastProcessor<Integer> mp2 = MulticastProcessor.create(4);\r\nmp2.start();\r\n\r\nassertTrue(mp2.offer(1));\r\nassertTrue(mp2.offer(2));\r\nassertTrue(mp2.offer(3));\r\nassertTrue(mp2.offer(4));\r\n\r\nassertFalse(mp2.offer(5));\r\n\r\nmp2.onComplete();\r\n\r\nmp2.test().assertResult(1, 2, 3, 4);\r\n```\r\n\r\nResolves: #5999", "NaN"], ["6003", "Fix typo in documentation", null, "antego", "05/09/18, 10:32:42 AM", "Rewrote `sameSource` to `someSource` because `someSource` is used in code snippets.\r", "NaN"], ["6005", "2.x: Javadoc space cleanup", "David Karnok", "akarnokd", "05/09/18, 05:13:18 PM", "This PR adds a gradle task to replace the excessive whitespaces generated into the Javadocs between method arguments and after method argument annotations.\r\n\r\nThis task should run before the javadoc gets packaged up for maven and before it gets pushed back to the gh-pages.\r\n\r\n(This was created as a repo branch so that the snapshot pushback is triggered, see the comparison links below.)\r\n\r\nResolves: #6004\r\n\r\n#### Comparison\r\n\r\nMultiple parameters before: [combineLatest](http://reactivex.io/RxJava/2.x/javadoc/2.1.13/io/reactivex/Flowable.html#combineLatest-io.reactivex.functions.Function-org.reactivestreams.Publisher...-)\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/39813943-b841e820-5392-11e8-9a01-8f79b521f76b.png)\r\n\r\nMultiple parameters after: [combineLatest snapshot](http://reactivex.io/RxJava/2.x/javadoc/snapshot/io/reactivex/Flowable.html#combineLatest-io.reactivex.functions.Function-org.reactivestreams.Publisher...-)\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/39813959-cc80385a-5392-11e8-8084-7ca89c0686d7.png)\r\n\r\n----------------\r\n\r\nNewline after parameter annotation before: [as](http://reactivex.io/RxJava/2.x/javadoc/2.1.13/io/reactivex/Flowable.html#as-io.reactivex.FlowableConverter-)\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/39813894-86bc22c0-5392-11e8-8748-aba6a214d4fc.png)\r\n\r\nNewline after parameter annotation after: [as snapshot](http://reactivex.io/RxJava/2.x/javadoc/snapshot/io/reactivex/Flowable.html#as-io.reactivex.FlowableConverter-)\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/39813906-97f7aca8-5392-11e8-981f-9ff93396c35f.png)\r", "NaN"], ["6010", "2.x: Add assertValueSetOnly and assertValueSequenceOnly to TestObserver + TestSubscriber", "Niklas Baudy", "vanniktech", "05/18/18, 08:58:51 AM", "This basically copies the behavior of `assertValuesOnly` to the `assertValueSet` and `assertValueSequence` equivalent methods.\r\n\r\nCoped the tests exactly from `assertValuesOnly` and adjusted them with the new added methods.", "NaN"], ["6014", "2.x: Fix & prevent null checks on primitives", "David Karnok", "akarnokd", "05/23/18, 07:23:11 AM", "This PR removes the accidental null checks on primitives in two `Observable` methods and adds a trap method to `ObjectHelper` to both highlight and fail the tests in case the null checks are still attempted. The method is marked as deprecated so it will also show up in (Eclipse's) problems window.\r\n\r\nReplaces #6012 \r\nResolves #6013", "NaN"], ["6017", "2.x: benchmark (0..1).flatMap, andThen & flattenAs performance", "David Karnok", "akarnokd", "05/23/18, 06:35:40 PM", "This PR adds JMH benchmarks to measure the overhead of `{Single|Maybe}.flatMap{Publisher|Observable}`, `{Single|Maybe}.flattenAs{Flowable|Observable}` and `Completable.andThen({Publisher|Observable})`.\r\n\r\n### Results \r\n\r\non i7 4770K, Windows 7 x64, Java 8u172, JMH 1.20 (larger is better):\r\n\r\n#### comparing based on the final output type\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/40439189-7effb8b6-5eba-11e8-9581-8bec8d770f40.png)\r\n\r\nObservable should be generally lower overhead yet some cases it has more overhead.\r\n\r\n#### comparing what to flatten\r\n\r\n(**flatMapHide** = without fusion, **flatMap** = reactive source, **flattenAs** = list source)\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/40439286-c07cf2ae-5eba-11e8-9692-4f6836f8b6cd.png)\r\n\r\nThe **hide** case is expected to have the most overhead, yet the two reactive classes have uneven boosts with a supposedly fuseable cases:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/40439592-ab3a8388-5ebb-11e8-9e4b-a0b4109452ce.png)\r\n\r\n#### comparing based on source type\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/40439448-3e4cfa08-5ebb-11e8-9655-14c4f097a3bc.png)\r\n\r\n`Single` and `Maybe` should be practically the same here, yet in some cases `Maybe` is quite worse. Also `Completable` should effectively win over the others on each line.\r\n\r\n\r\n-------\r\n\r\nPlenty of optimization opportunities.", "NaN"], ["6019", "2.x: Fix Single.takeUntil, Maybe.takeUntil dispose behavior", "David Karnok", "akarnokd", "05/25/18, 10:35:35 AM", "Fix the dispose behavior of the `Single.takeUntil` and `Maybe.takeUntil` operators.\r\n\r\nTests were also added to the other 3 `takeUntil` variants (for `Completable`, it is delegated to `amb`).\r\n\r\nFixes: #6018", "NaN"], ["6021", "2.x: Single.flatMapPublisher full implementation", "Dave Moten", "davidmoten", "05/27/18, 10:14:19 AM", "See discussion in #6015.\r\n\r\nResolves: #6015", "NaN"], ["6022", "2.x: Add TCK for MulticastProcessor & {0..1}.flatMapPublisher", "David Karnok", "akarnokd", "05/26/18, 04:41:23 PM", "This PR adds Reactive Streams TCK tests to:\r\n\r\n- `MulticastProcessor` (both externally and internally refcounted`\r\n- `Single.flatMapPublisher`\r\n- `Maybe.flatMapPublisher`\r\n- `Completable.andThen(Publisher)`", "NaN"], ["6023", "2.x: More time to BehaviorProcessor & Interval TCK tests", "David Karnok", "akarnokd", "05/27/18, 12:09:52 PM", "This PR increases the timeout of the Reactive Streams TCK tests targeting `BehaviorProcessor` and `interval()` from 25ms to 50ms to have some slack on Travis-CI.", "NaN"], ["6024", "2.x: Dedicated {Single|Maybe}.flatMap{Publisher|Observable} & andThen(Observable|Publisher) implementations", "David Karnok", "akarnokd", "05/27/18, 09:06:40 PM", "This PR implements the following operators directly instead of conversions between base types:\r\n\r\n- `Single.flatMapObservable`\r\n- `Maybe.flatMapObservable`\r\n- `Maybe.flatMapPublisher`\r\n- `Completable.andThen(Observable)`\r\n- `Completable.andThen(Publisher)`\r\n\r\nThe `Single.flatMapPublisher` was reimplemented in #6021 already.", "NaN"], ["6026", "Fix Flowable.blockingSubscribe is unbounded and can lead to OOME", "Roman Wuattier", "RomanWuattier", "06/14/18, 08:04:00 AM", "Create and bound new `blockingSubscribe` overloads to `bufferSize`.\r\n* Create new overloads with `bufferSize`\r\n* Create a `boundedConsumer`\r\n* Create a `BoundedSubsciber`\r\n\r\nClose: #5988 \r", "NaN"], ["6028", "2.x: Improve Observable.takeUntil", "David Karnok", "akarnokd", "05/30/18, 08:12:02 PM", "This PR upgrades the `Observable.takeUntil` to a newer algorithm (the `Flowable` version is up-to-date).\r\n\r\nSome unit test remnants from the v1 era were upgraded too as the new algorithm no longer disposes the source or other if they terminate on their own (the Reactive Streams specification doesn't allow that anyway).", "NaN"], ["6029", "2.x: Upgrade to Gradle 4.3.1, add TakeUntilPerf", "David Karnok", "akarnokd", "05/30/18, 09:16:03 AM", "The JMH plugin 0.4.4 has some shortcomings that prevent the execution of unit tests on Windows 10 (and on some very restricted Linuxes). Version 0.4.5 has been fixed in this regard but it also requires Gradle 4.3.x. Unfortunately, there are no newer versions to the JMH plugin so this is likely as far as we can go with versions.\r\n\r\nI've also added a new benchmark to measure the overhead in `takeUntil`. Here are the results:\r\n\r\ni7 4790, Windows 10 x64, Java 8u172, JMH 1.20:\r\n\r\n```\r\nBenchmark                        Mode  Cnt         Score       Error  Units\r\nTakeUntilPerf.flowable          thrpt    5    341933,112   13328,573  ops/s\r\nTakeUntilPerf.flowable:items    thrpt    5  21128765,548  677544,832  ops/s\r\nTakeUntilPerf.observable        thrpt    5    366931,108    8202,644  ops/s\r\nTakeUntilPerf.observable:items  thrpt    5  10733841,643  112853,358  ops/s\r\n```\r\n\r\nThe `observable` here uses an older algorithms & structure and is generally relaying half the items under the same time amonut than the `flowable` version. PR #6028  can then be evaluated with this benchmark.", "NaN"], ["6030", "2.x: Fix MulticastProcessor JavaDoc warnings", "David Karnok", "akarnokd", "05/30/18, 08:50:30 AM", "Add two missing `&gt;` tags to avoid the javadoc tool warnings.", "NaN"], ["6031", "2.x: Inline CompositeDisposable JavaDoc", "David Karnok", "akarnokd", "06/01/18, 08:12:00 AM", "Normally, overriding a method will reuse the JavaDoc unless specified directly on the new method. Unfortunately, when the base type is part of a javadoc exclude, such as everything below `**/internal`, the documentation is not copied and public facing methods have no HTML documentation:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/40828381-b8cdd07e-6580-11e8-84cf-783f1cf892f9.png)\r\n\r\nThis PR copies the javadoc of the internal `DisposableContainer` onto `CompositeDisposable` so it shows up properly:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/40828451-ea8c4122-6580-11e8-8ad9-e2cd606d6a39.png)\r\n\r\n\r\nThe IDEs still show the documentation correctly.", "NaN"], ["6033", "Update DESIGN.md", "Francisco Joshua", "fjoshuajr", "06/01/18, 06:17:02 PM", "I've just read the DESIGN.md and noticed some things that I could do to improve the quality of the DESIGN.md. So as a result of my \"proofreading\" I mainly:\r\n- Added periods at the ending of some sentences.\r\n- Did case matching of certain types and terms. e.g. `OnSubscribe` -> `onSubscribe` OR flowable -> `Flowable`.\r\n\r\nHope it helps! :smile:", "NaN"], ["6036", "2.X: Fix disposed LambdaObserver onError to route to global error handler", "Hans", "HansChua", "06/09/18, 11:25:55 AM", "Fix the behaviour of LambdaObserver when disposed to route to the global error handler\r\n\r\nFixes #6025 ", "NaN"], ["6042", "fix MulticastProcessor javadoc comment", "Sato Shun", "satoshun", "06/14/18, 07:45:50 AM", "fix wrong javadoc comment of MulticastProcessor. \r\nI think `#create(boolean)` is an optional refcount behavior.\r", "NaN"], ["6045", "Fix check that would always be false", null, "Kiskae", "06/16/18, 01:18:50 PM", "Checking `BlockingSubscriber.TERMINATED` (`new Object()`) against `o` would always be false since `o` is a publisher. Since `v` comes from the queue this is presumably the variable that should be checked.\r\n\r\nHowever the check might even be redundant with this change since that variable can only appear in the queue after the subscriber has been cancelled. I am not familiar enough with the memory model to say whether the object appearing in the queue implies the cancelled subscriber is visible.", "NaN"], ["6047", "2.x: Add the wiki pages as docs", "David Karnok", "akarnokd", "06/17/18, 01:31:04 PM", "This PR adds the `RxJavaWiki.git` subgit markdown files under the `docs` directory, allowing external contribution through the same workflow as for the code.", "NaN"], ["6049", "Make it explicit that throttleWithTimout is an alias of debounce", "Roman Petrenko", "romanzes", "06/18/18, 11:14:55 AM", "The documentation implies that these two methods are somewhat different. Fixing that confusion, as discussed in #6043:\r\n- Made the descriptions of these methods the same\r\n- Mentioned that it is an alias in the first paragraphs of `throttleWithTimeout` javadoc comments\r\n- Removed the links to third-party websites", "NaN"], ["6052", "#5980 made subscribeActual protected", "Marc Bramaud", "sircelsius", "06/21/18, 07:22:21 AM", "### Proposal\r\n\r\nChanged `subscribeActual` from `public` to `protected`, as described in #5980.\r\n\r\n### How I tested\r\n\r\nRan tests locally, please let me know if I missed part of the contributing guidelines \ud83d\udc7c \r\n\r\nFixes: #5980.", "NaN"], ["6053", "2.x: Add Maybe marble diagrams 06/21/a", "David Karnok", "akarnokd", "06/21/18, 09:32:34 AM", "Resolved the following diagrams of #5806:\r\n\r\n#### amb: missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.amb.png)\r\n\r\n#### ambArray: missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.ambArray.png)\r\n\r\n#### concat(Iterable): missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concat.i.png)\r\n\r\n#### concat(Publisher): missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concat.p.png)\r\n\r\n#### concat(Publisher, int): missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concat.pn.png)\r\n\r\n#### concatArray: missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatArray.png)\r\n\r\n#### concatArrayDelayError: indicate error delayed, 1 marble per source\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatArrayDelayError.png)\r\n\r\n#### concatArrayEager: missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatArrayEager.png)\r\n\r\n#### concatDelayError(Iterable): missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatDelayError.i.png)\r\n\r\n#### concatDelayError(Publisher): missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatDelayError.p.png)\r\n\r\n#### concatEager(Iterable): missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatEager.i.png)\r\n\r\n#### concatEager(Publisher): missing diagram\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatEager.p.png)\r", "NaN"], ["6054", "2.x: Expand {X}Processor JavaDocs by syncing with {X}Subject docs", "David Karnok", "akarnokd", "06/21/18, 10:38:19 PM", "This PR expands and adapts the JavaDocs of `AsyncProcessor`, `BehaviorProcessor`, `PublishProcessor`, `ReplayProcessor` and `UnicastProcessor` with the details of their already documented `Subject` variants.\r\n\r\nIn addition, some wording has been fixed with `UnicastSubject` as it was refering to plural `Observer`s in some sentences even though it only supports one.\r\n\r\nSince the basis of this expansion is copy-paste, please read through the changes carefully to verify the terminology and described behavior matches what's usually expected from `Flowable`s/`FlowableProcessor`s (i.e., subjects don't have to deal with backpressure and thus nothing much to elaborate on that in a subject doc).", "NaN"], ["6057", "2.x: Use different wording on blockingForEach() JavaDocs", "David Karnok", "akarnokd", "06/21/18, 09:24:00 PM", "Change the wording on the `blockingForEach()` method to clarify it runs the `Consumer` on the current thread. Since there is no onError callback, the extra sentence about the error behavior was removed. There is an error handling section already that explains it properly.", "NaN"], ["6060", "2.x: Fix concatMap{Single|Maybe} null emission on dispose race", "David Karnok", "akarnokd", "06/22/18, 01:58:45 PM", "This PR fixes a bug in all 4 specialized `concatMap` implementation that allows `null` to be emitted when the success signal of the inner source races with the dispose signal of the sequence.\r\n\r\nLikely fixes: #6059", "NaN"], ["6066", "Fix links for Single class", "Aleksandr Podkutin", "apodkutin", "06/30/18, 11:20:06 AM", "* Change observable.html to single.html\r\n* Delete completable.html link which doesn't exist\r", "NaN"], ["6070", "2.x: Adjust JavaDocs dl/dd entry stylesheet", "David Karnok", "akarnokd", "07/04/18, 09:13:18 AM", "The default JavaDocs stylesheet uses monospaced for the **Scheduler**/**Backpressure**/etc definitions list entries which practically makes any `{@code }` marking practically invisible. This PR set up a stylesheet with that specific style definition reverted to default. There was an unused `stylesheet.css` in the project from long before.\r\n\r\nBefore:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/42266803-b4701698-7f77-11e8-8255-b5221f1f3e23.png)\r\n\r\nAfter:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/42266818-c0735f5e-7f77-11e8-8786-14ad4fc9a5a9.png)\r", "NaN"], ["6074", "Add marble diagram to the Single.never method", "Aleksandar Simic", "UMFsimke", "07/08/18, 10:58:18 AM", "First of all, I'm extremely grateful to open my first PR for RxJava. I hope that I'll be able to tick more of the marbles from #5788 but for now this should tick off the `never` operator.\r\n\r\nPlease let me know if I need to change anything on the diagram itself. If not, please send me URL when you upload image within the project so I can change URL for the marble in the PR.", "NaN"], ["6075", "Add marble diagram to the Single.filter method", "Aleksandar Simic", "UMFsimke", "07/08/18, 06:27:19 PM", "Hopefully this should tick off the `filter` operator in #5788\r\n\r\nPlease let me know if I need to change anything on the diagram itself. If not, please send me URL when you upload image within the project so I can change URL for the marble in the PR.\r\n\r\nAlthough, I had a doubt and wanted to double check. Operator `filter` returns `Maybe` which essentially will call `onSuccess` or `onComplete`. By running jUnit tests, I could observe that this is a behavior but if I use `TestObserver` then both `assertValue()` and `assertComplete()` are invoked when there are elements that satisfy `filter` condition.", "NaN"], ["6076", "Add marble diagrams to the Single.delay method", "Aleksandar Simic", "UMFsimke", "07/10/18, 07:44:54 AM", "Here are marbles for `delay` operator in #5788\r\n\r\nPlease let me know if I need to change anything on the diagram itself. If not, please send me URL when you upload image within the project so I can change URL for the marble in the PR.", "NaN"], ["6077", "Add marble diagram for Single.hide operator", "Aleksandar Simic", "UMFsimke", "07/12/18, 07:28:58 AM", "This should complete `hide` operator in #5788\r\n\r\nPlease let me know if I need to change anything on the diagram itself. If not, please send me URL when you upload image within the project so I can change URL for the marble in the PR.\r\n\r\nAlthough I wasn't sure if I should represent somehow that `Disposable` is hidden as well. If so, can you please tell me how to represent that on marble?", "NaN"], ["6078", "2.x: Add Maybe.hide() marble diagram", "David Karnok", "akarnokd", "07/09/18, 08:35:46 AM", "Add marble to `Maybe.hide()`:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.hide.png)", "NaN"], ["6079", "2.x: Add Completable.takeUntil(Completable) operator", "David Karnok", "akarnokd", "07/11/18, 07:19:03 AM", "This PR adds the missing dedicated `takeUntil` operator to `Completable`.\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.takeuntil.c.png)\r\n\r\nPreviously, the same effect could be achieved via the `ambWith` but there are two benefits of a dedicated operator:\r\n- easier to discover based on the `takeUntil` operator in other types\r\n- more direct implementation unlike `ambWith` which is built upon an N-ary `amb` operator with additional overhead.\r\n\r\nThere was a feature request in #3708 some time ago but apparently the issue got closed off after `Single.takeUntil` was implemented.", "NaN"], ["6080", "2.x: Improve class Javadoc of Single, Maybe and Completable", "David Karnok", "akarnokd", "07/14/18, 07:42:02 PM", "This PR expands the Javadocs of `Single`, `Maybe` and `Completable` where the latter also receives an explanation marble:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.png)\r\n\r\nPlease let me know if there is any property worthy of mentioning in the class' JavaDocs as well as please look out for copy-paste mistakes.", "NaN"], ["6081", "Add marble diagrams for Single.repeat operators", "Aleksandar Simic", "UMFsimke", "07/17/18, 01:06:11 PM", "Here are marbles for `repeat`, `repeat(times)` and `repeatWhen` operator in #5788\r\n\r\nPlease let me know if I need to change anything on the diagram itself. If not, please send me URL when you upload image within the project so I can change URL for the marble in the PR.\r\n\r\nI intentionally added two diagrams for `repeatWhen` as I would say its interesting case that people should be aware of.\r\n\r\n**EDIT:**\r\nHere are marbles\r\n\r\n`repeat` operator:\r\n![repeat](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/Repeat.png)\r\n\r\n`repeat(count)` operator:\r\n![repeat with count](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/RepeatCount.png)\r\n\r\n`repeatWhen` operator:\r\n![repeatWhen](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/RepeatWhen.png)", "NaN"], ["6083", "2.x: Add Completable marble diagrams (07/17a)", "David Karnok", "akarnokd", "07/17/18, 09:19:14 AM", "This PR adds the following marble diagrams to `Completable` operators (#5789):\r\n\r\n#### amb, ambArray\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.ambArray.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.amb.png)\r\n\r\n#### complete\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.complete.png)\r\n\r\n#### concatArray, concat\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concatArray.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concat.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concat.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concat.pn.png)\r\n\r\n#### defer\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.defer.png)\r\n\r\n#### error\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.error.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.error.f.png)\r\n\r", "NaN"], ["6084", "Add marble diagram for Single.repeatUntil operator", "Aleksandar Simic", "UMFsimke", "07/17/18, 01:45:36 PM", "Here is marble for `repeatUntil` operator in #5788\r\n\r\n![repeatUntil](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/RepeatUntil.png)\r\nPlease let me know if I need to change anything on the diagram itself. If not, please send me URL when you upload image within the project so I can change URL for the marble in the PR.", "NaN"], ["6085", "2.x: More Completable marbles (+18), add Completable.fromMaybe", "David Karnok", "akarnokd", "07/17/18, 01:15:26 PM", "This PR adds marble diagrams (#5789) to the following operators as well as adds the missing `Completable.fromMaybe` operator (`fromX` of other types were already there, uses existing `Maybe.ignoreElement`'s underlying implementation).\r\n\r\n#### fromAction\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromAction.png)\r\n\r\n#### fromCallable\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromCallable.png)\r\n\r\n#### fromFuture\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromFuture.png)\r\n\r\n#### fromMaybe\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromMaybe.png)\r\n\r\n#### fromObservable\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromObservable.png)\r\n\r\n#### fromPublisher\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromPublisher.png)\r\n\r\n#### fromSingle\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromSingle.png)\r\n\r\n#### mergeArray & mergeArrayDelayError\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.mergeArray.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.mergeArrayDelayError.png)\r\n\r\n#### merge\r\n\r\n(both `Iterable` and `Publisher` variants)\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.merge.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.merge.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.merge.pn.png)\r\n\r\n#### mergeDelayError\r\n\r\n(both `Iterable` and `Publisher` variants)\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.mergeDelayError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.mergeDelayError.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.mergeDelayError.pn.png)\r\n\r\n#### never\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.never.png)\r\n\r\n#### timer\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.timer.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.timer.s.png)\r\n\r\n\r", "NaN"], ["6086", "Single error operators marbles", "Aleksandar Simic", "UMFsimke", "07/18/18, 07:36:26 AM", "Here are marbles for #5788 \r\n\r\nFor `error(Callable)`\r\n![errorCallable](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/ErrorCallable.png)\r\n\r\nFor `error(Throwable)`, only added error event to be red:\r\n![errorThrowable](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/Error.png)\r\n\r\nFor `onErrorReturn`\r\n![onErrorReturn](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/onErrorReturn.png)\r\n\r\nFor `onErrorReturnItem`\r\n![onErrorReturnItem](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/onErrorReturnItem.png)\r\n\r\nFor `onErrorResumeNext(SingleSource)`\r\n![onErrorResumeNext](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/onErrorResumeNext.png)\r\n\r\nFor `onErrorResumeNext(Function)`\r\n![onErrorResumeNextFn](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/onErrorResumeNextWithFn.png)", "NaN"], ["6087", "Add marbles for Single.from operators", "Aleksandar Simic", "UMFsimke", "07/18/18, 07:22:44 AM", "Here are marbles for `fromCallable`, `fromPublisher` and `fromObservable` operators from #5788 \r\n\r\nMarble for `fromCallable`\r\n![fromCallable](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/fromCallable.png)\r\n\r\n\r\nMarble for `fromPublisher`\r\n![fromPublisher](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/fromPublisher.png)\r\n\r\n\r\nMarble for `fromObservable`\r\n![fromObservable](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/fromObservable.png)", "NaN"], ["6090", "2.x: Add missing Completable marbles (+17, 07/18a)", "David Karnok", "akarnokd", "07/18/18, 10:21:03 AM", "This PR adds marble diagrams to various `Completable` operators:\r\n\r\n#### wrap\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.wrap.png)\r\n\r\n#### using\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.using.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.using.b.png)\r\n\r\n#### ambWith\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.ambWith.png)\r\n\r\n#### andThen\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.andThen.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.andThen.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.andThen.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.andThen.o.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.andThen.p.png)\r\n\r\n#### as, to\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.as.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.to.png)\r\n\r\n#### compose\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.compose.png)\r\n\r\n#### cache\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.cache.png)\r\n\r\n#### blockingAwait\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.blockingAwait.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.blockingAwait.t.png)\r\n\r\n#### blockingGet\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.blockingGet.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.blockingGet.t.png)", "NaN"], ["6091", "Add marbles for Single.amb operators", "Aleksandar Simic", "UMFsimke", "07/18/18, 11:12:28 AM", "Here are operators for `amb` and `ambArray` from #5788 \r\n\r\nMarble for `amb`:\r\n![amb](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/amb.png)\r\n\r\nMarble for `ambArray`:\r\n![ambArray](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/ambArray.png)", "NaN"], ["6095", "Add marbles for Single.timer, Single.defer and Single.toXXX operators", "Aleksandar Simic", "UMFsimke", "08/02/18, 07:34:24 AM", "Here are marbles for `defer`, `timer(delay, unit)`, `timer(delay, unit, scheduler)`, `toFlowable`, `toMaybe`, `toFuture` operators in #5788 \r\n\r\nMarble for `defer`:\r\n![defer](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/Defer.png)\r\n\r\nMarble for `timer(delay, unit)`:\r\n![timer](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/Timer.png)\r\n\r\nMarble for `timer(delay, unit, scheduler)`:\r\n![timerScheduler](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/TimerScheduler.png)\r\n\r\nMarble for `toFuture`, although for this one I believe we should add case when there is no event sent from Single as there will be timeout exception thrown:\r\n![toFuture](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/toFuture.png)\r\n\r\nMarble for `toMaybe`:\r\n![toMaybe](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/toMaybe.png)\r\n\r\nMarble for `toFlowable`, although here I didnt figured out what will happen if we request more than 1 event from flowable:\r\n![toFlowable](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/toFlowable.png)", "NaN"], ["6096", "2.x: Improve Completable.delay operator internals", "David Karnok", "akarnokd", "07/19/18, 08:45:26 AM", "This PR improves the `Completable.delay()` operator internals, reducing allocation and indirection.", "NaN"], ["6097", "2.x: Add missing Completable marbles (+19, 07/19a)", "David Karnok", "akarnokd", "07/19/18, 11:27:57 AM", "This PR add even more missing marbles to `Completable` (tracked by #5789):\r\n\r\n#### delay\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.delay.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.delay.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.delay.sb.png)\r\n\r\n#### doOnX\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnComplete.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnDispose.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnEvent.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnSubscribe.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnTerminate.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doAfterTerminate.png)\r\n\r\n#### doFinally\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doFinally.png)\r\n\r\n#### onErrorComplete\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onErrorComplete.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onErrorComplete.f.png)\r\n\r\n#### onErrorResumeNext\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onErrorResumeNext.png)\r\n\r\n#### onTerminateDetach\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onTerminateDetach.png)\r\n\r\n#### mergeWith\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.mergeWith.png)\r\n\r\n#### concatWith\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concatWith.png)\r\n\r\n#### observeOn\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.observeOn.png)\r\n\r\n#### hide\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.hide.png)", "NaN"], ["6098", "2.x: Several more Completable marbles (7/19b)", "David Karnok", "akarnokd", "07/19/18, 02:11:02 PM", "This PR adds a couple of more marble diagrams to `Completable` (#5789):\r\n\r\n#### subscribeOn\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.subscribeOn.png)\r\n\r\n#### unsubscribeOn\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.unsubscribeOn.png)\r\n\r\n#### toSingle, toSingleDefault\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toSingle.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toSingleDefault.png)\r\n\r\n#### toFlowable\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toFlowable.png)\r\n\r\n#### toMaybe\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.toMaybe.png)", "NaN"], ["6099", "Update TestHelper.java: trivial typo fix", "Jason Neufeld", "jnlopar", "07/19/18, 07:54:38 PM", "Thank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [x] Please give a description about what and why you are contributing, even if it's trivial.\r\nJust a small typo fix. I grepped for the same misspelling and it only appeared in this file.\r\n\r\n  - [x] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\nN/A\r\n\r\n  - [x] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r\nN/A", "NaN"], ["6101", "2.x: Final set of missing Completable marbles (+26)", "David Karnok", "akarnokd", "07/20/18, 11:15:10 AM", "This PR contains the final set of missing `Completable` marbles (#5789):\r\n\r\n#### repeat\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.repeat.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.repeat.n.png)\r\n\r\n-------------------------\r\n\r\n#### repeatUntil\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.repeatUntil.png)\r\n\r\n-------------------------\r\n\r\n#### repeatWhen\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.repeatWhen.png)\r\n\r\n-------------------------\r\n\r\n#### retry\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retry.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retry.n.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retry.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retry.ff.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retry.nf.png)\r\n\r\n-------------------------\r\n\r\n#### retryWhen\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retryWhen.png)\r\n\r\n-------------------------\r\n\r\n#### startWith\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.startWith.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.startWith.o.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.startWith.p.png)\r\n\r\n-------------------------\r\n\r\n#### timeout\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.timeout.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.timeout.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.timeout.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.timeout.sc.png)\r\n\r\n-------------------------\r\n\r\n#### create\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.create.png)\r\n\r\n-------------------------\r\n\r\n#### unsafeCreate\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.unsafeCreate.png)\r\n\r\n-------------------------\r\n\r\n#### lift\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.lift.png)\r\n\r\n-------------------------\r\n\r\n#### subscribe\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.subscribe.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.subscribe.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.subscribe.ff.png)\r\n\r\n-------------------------\r\n\r\n#### subscribeWith\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.subscribeWith.png)\r\n\r\n-------------------------\r\n\r\n#### test\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.test.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.test.b.png)", "NaN"], ["6102", "2.x: Adjust JavaDoc stylesheet of dt/dd within the method details", "David Karnok", "akarnokd", "07/20/18, 12:26:45 PM", "This PR adjusts the JavaDoc stylesheet so that the `dt`/`dd` listings in the detailed method descriptions no longer use monospaced font (which should be generally reserved for `{@code }`s and {@link }`s) for better readability.\r\n\r\nBefore:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/43001178-8edcff7c-8c24-11e8-9622-e7ee3515f0ca.png)\r\n\r\nAfter:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/43001192-9c937754-8c24-11e8-84b0-f23518ae8a40.png)\r\n\r", "NaN"], ["6103", "2.x: Fix Completable mergeX JavaDoc missing dt before dd", "David Karnok", "akarnokd", "07/20/18, 12:44:11 PM", "Couple of the `<dt><b>Error handling:</b></dt>` subheaders were missing from various `Completable.mergeX` operators in the JavaDocs.", "NaN"], ["6104", "Fixing javadoc's code example of Observable#lift.", null, "lcybo", "07/22/18, 11:26:53 AM", "Code example in javadoc for Observable#lift seems not compilable in 2.x.\r\nAlso, parameter name of ObservableOperator#apply should be downstream I think.\r", "NaN"], ["6105", "2.2: Promote all Experimental/Beta API to standard", "David Karnok", "akarnokd", "07/30/18, 01:56:38 PM", "This PR promotes all `@Experimental`/`@Beta` APIs to standard with version number **2.2**.\r\n\r\n(In addition, it also fixes remnant markers from earlier promotions in internal files.)\r\n\r\n### Operators\r\n\r\n- **`Flowable`**: \r\n  - `as`\r\n  - `blockingSubscribe(..., prefetch)` + 2\r\n  - `concatMapCompletable` + 1\r\n  - `concatMapCompletableDelayError` + 2\r\n  - `concatMapMaybe` + 1\r\n  - `concatMapMaybeDelayError` + 2\r\n  - `concatMapSingle` + 1\r\n  - `concatMapSingleDelayError` + 2\r\n  - `concatWith` + 2\r\n  - `groupBy(..., evictingMapFactory)`\r\n  - `limit`\r\n  - `mergeWith` + 2\r\n  - `parallel` + 2\r\n  - `subscribe(FlowableSubscriber)`\r\n  - `subscribeOn(..., requestOn)`\r\n  - `switchMapCompletable`\r\n  - `switchMapCompletableDelayError`\r\n  - `switchMapMaybe`\r\n  - `switchMapMaybeDelayError`\r\n  - `switchMapSingle`\r\n  - `switchMapSingleDelayError`\r\n  - `throttleLatest` + 3  \r\n- **`Observable`**:\r\n  - `as`\r\n  - `concatMapCompletable` + 1\r\n  - `concatMapCompletableDelayError` + 2\r\n  - `concatMapMaybe` + 1\r\n  - `concatMapMaybeDelayError` + 2\r\n  - `concatMapSingle` + 1\r\n  - `concatMapSingleDelayError` + 2\r\n  - `concatWith` + 2\r\n  - `mergeWith` + 2\r\n  - `switchMapCompletable`\r\n  - `switchMapCompletableDelayError`\r\n  - `switchMapMaybe`\r\n  - `switchMapMaybeDelayError`\r\n  - `switchMapSingle`\r\n  - `switchMapSingleDelayError`\r\n  - `throttleLatest` + 3  \r\n- **`Maybe`**:\r\n  - `mergeDelayError(Publisher, int)`\r\n  - `as`\r\n  - `switchIfEmpty`\r\n- **`Single`**:\r\n  - `mergeDelayError` + 4\r\n  - `as`\r\n  - `delay(..., delayError)` + 1\r\n  - `onTerminateDetach`\r\n  - `retry(long, Predicate)`\r\n  - `unsubscribeOn`\r\n- **`Completable`**: \r\n  - `fromMaybe`\r\n  - `as`\r\n  - `onTerminateDetach`\r\n  - `retry(long, Predicate)`\r\n  - `takeUntil`\r\n- **`ConnectableFlowable`**:\r\n  - `refCount` + 4\r\n- **`ConnectableObservable`**:\r\n  - `refCount` + 4\r\n- **`ParallelFlowable`**:\r\n  - `as`\r\n  - `map(errorHandling)` + 1\r\n  - `filter(errorHandling)` + 1\r\n  - `doOnNext(errorHandling)` + 1\r\n  - `sequentialDelayError` + 1\r\n- **`TestSubscriber`/`TestObserver`** (**`BaseTestConsumer`**):\r\n  - `assertValueAt`\r\n  - `assertValuesOnly`\r\n  - `assertValueSetOnly`\r\n  - `assertValueSequenceOnly`\r\n- **`RxJavaPlugins`**:\r\n  - `setOnParallelAssembly`\r\n  - `getOnParallelAssembly`\r\n  - `onAssembly(ParallelFlowable)`\r\n- **`Subject`s/`FlowableProcessor`s**:\r\n  - `BehaviorProcessor.offer`\r\n  - `PublishProcessor.offer` \r\n  - `ReplayProcessor.cleanupBuffer`\r\n  - `ReplaySubject.cleanupBuffer`\r\n  - `UnicastProcessor.create([...], delayError)` + 1\r\n  - `UnicastSubject.create([...], delayError)` + 1\r\n\r\n### Interfaces\r\n\r\n- `CompletableConverter`\r\n- `CompletableEmitter`\r\n- `FlowableConverter`\r\n- `FlowableEmitter`\r\n- `FlowableSubscriber`\r\n- `MaybeConverter`\r\n- `MaybeEmitter`\r\n- `ObservableConverter`\r\n- `ObservableEmitter`\r\n- `SingleConverter`\r\n- `SingleEmitter`\r\n- `LambdaConsumerIntrospection`\r\n- `ParallelFlowableConverter`\r\n- `ParallelTransformer`\r\n- `SchedulerRunnableIntrospection`\r\n\r\n### Enums\r\n\r\n- `ParallelFailureHandling`\r\n\r\n### Classes\r\n\r\n- `OnErrorNotImplementedException`\r\n- `ProtocolViolationException`\r\n- `UndeliverableException`\r\n- `ParallelFlowable`\r\n- `MulticastProcessor`\r\n\r\n### Other components\r\n\r\n- `SchedulerSupport.SINGLE`\r", "NaN"], ["6116", "6108 changed README to use Gradle's implementation instead of compile", "Marc Bramaud", "sircelsius", "07/31/18, 08:14:27 AM", "fixes #6108 \r\n\r\nChanged `README.md` to reflect Gradle's more recent version of the [library plugin](https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation).\r\n\r\nI believe that RxJava should be using `implementation`, but I'm not a Gradle expert, feel free to let me know if clients should be using `api`.", "NaN"], ["6117", "2.x: Update Readme.md about the parallel() operator", "David Karnok", "akarnokd", "07/31/18, 08:04:42 AM", "Update wording on the now standard `parallel()` operator in the getting started.\r\n\r\nResolves: #6110", "NaN"], ["6119", "2.x: Test cleanup", "David Karnok", "akarnokd", "08/01/18, 08:23:12 AM", "This PR cleans up the tests:\r\n\r\n- Reduce stacktrace printouts due to undeliverable errors and turn them into assertions instead.\r\n- Rename local variables & arguments of `Subscriber`s from `o` and `observer` to the proper `subscriber`\r\n- Rename local variables & arguments of `Flowable`s from `o` and `observable` to the more appropriate `f` and `flowable`\r\n- Add more naming tests to `CheckLocalVariablesInTests` to support the previous two points.", "NaN"], ["6121", "2.x: Flowable.onErrorResumeNext improvements", "David Karnok", "akarnokd", "08/02/18, 08:02:07 AM", "This PR improves the structure of the `onErrorResumeNext` operator by inlining the subscription-arbiter and not updating the outstanding request amount one by one. The change reduces the per-item overhead, some indirection cost and the memory cost (+8 bytes for the field, -16/-28 bytes due to the inlined header+field)\r\n\r\nIn addition, the null-check has been inlined into the resume function call so that the crash will now include the original exception as well as the NPE in a `CompositeException`, just like almost all other cases throughout RxJava.", "NaN"], ["6123", "2.x: Improve Completable.onErrorResumeNext internals", "David Karnok", "akarnokd", "08/01/18, 08:20:37 PM", "This PR improves the internals of the `Completable.onErrorResumeNext` operator:\r\n\r\n- Inline the `Disposable` management.\r\n- Reuse the same instance for observing the fallback `CompletableSource`.\r\n- Report null return of the `errorMapper` the same way as a crash via `CompositeException`.\r\n- The exceptions in the composite should be in the order **original** -> **mapper exception**.", "NaN"], ["6125", "Fixed broken link under RxJS in docs/Additional-Reading.md", null, "ChanHoHo", "08/01/18, 04:08:30 PM", "Fix outdated links in the wiki docs.", "NaN"], ["6128", "2.x: Remove fromEmitter() in wiki", "JianxinLi", "CoXier", "08/02/18, 12:42:01 PM", "Remove the mentions of `fromEmitter` from the `Creating-Observables.md` wiki page.", "NaN"], ["6129", "2.x: Cleaunp - rename fields to upstream and downstream", "David Karnok", "akarnokd", "08/05/18, 07:14:22 PM", "This PR cleans up the field namings and some local variable namings:\r\n\r\n- Use `upstream` for the connection `Disposable` or `Subscription` instead of `d`, `s`, etc., including `AtomicReference<*>` declarations.\r\n- Use `downstream` for the consumer field name in operators instead of `actual` for example.\r\n- Fix one-two letter abbreviated naming to match the type, such as `Disposable s` -> `Disposable d`, etc.\r\n\r\nThe `CheckLocalVariablesInTests` has been extended with the relevant regexp checks.", "NaN"], ["6131", "2.x: Expand Creating-Observables.md wiki", "David Karnok", "akarnokd", "08/04/18, 05:05:06 PM", "This PR expands and updates the `Creating-Observables.md` wiki page to 2.x terminology and feature set. \r\n\r\nThis also serves as a discussion basis about how to detail the various operators. The PR suggests the following structure:\r\n\r\n- Top outline with links to the family of operators\r\n- Each operator lists:\r\n  - an availability list for the various reactive types: ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) available, ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) not available\r\n  - ReactiveX documentation link if available\r\n  - Short description\r\n  - Example, named as `operator example` so that the heading generated can be linked to directly (i.e., `Creating-Observables.md#justexample`.\r\n\r\nRelated tracking issue: #6132", "NaN"], ["6133", "2.x: Update _Sidebar.md with new order of topics", "David Karnok", "akarnokd", "08/03/18, 08:37:06 PM", "Change the sidebar to support the v2 features and suggest new topic orderings.\r\n\r\nRelated tracking issue: #6132", "NaN"], ["6134", "Update RxJava Android Module documentation", "Ahmed El-Helw", "ahmedre", "08/04/18, 05:21:32 PM", "This patch updates the RxJava Android wiki page to point to the RxAndroid project and the RxAndroid wiki page. This refs #6132.", "NaN"], ["6135", "Initial clean up for Combining Observables docs", "Ahmed El-Helw", "ahmedre", "08/04/18, 04:33:03 PM", "This patch updates the style of the combining observables documentation to be similar to that of #6131 and adds examples for most of the operators therein. Refs #6132.\r\n\r\nWhat's left for combining observables:\r\n- documentation for `join`, `groupJoin`, and `rxjava-joins`\r\n- add documentation for `concat`, `concatEager`, and `withLatestFrom`", "NaN"], ["6136", "2.x: Update Getting started docs", "Ashish Krishnan", "ashishkrishnan", "08/05/18, 08:01:52 AM", "This patch the following changes to the Getting started docs as per Issue No: #6132 \r\n- Remove Troubleshooting guide\r\n- Bump RxJava versions to 2.2.0 for Gradle, Maven etc.\r\n\r\nQuestions: \r\n- ~Looks like JFrog for RxJava 2 is broken or invalid now. Can we add Jitpack?~\r\n- Need suggestions for `Getting started from readme.md`. Although, `How to use RxJava` or `Alphabetical List of Operators`, `Additional-Reading.md` can be great next steps. ", "NaN"], ["6137", "2.x: Add marbles for Single.concat operator", "Aleksandar Simic", "UMFsimke", "08/05/18, 12:31:08 PM", "Here are marbles for `concat(Iterable)`, `concat(Publisher)`, `concat(Publisher, prefetch)`, `concat(Observable)`,  `concat(source1, source2)`, `concat(source1, source2, source3)`, `concat(source1, source2, source3, source4)` and `concatArray` operators that should close them at #5788 .\r\n\r\nMarble for `concat(Iterable)`\r\n![concatIterable](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatIterable.png)\r\n\r\nMarble for `concat(Publisher)`\r\n![concatPublisher](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatPublisher.png)\r\n\r\nMarble for `concat(Publisher, prefetch)`\r\n![concatPublisherN](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatPublisherPrefetch.png)\r\n\r\nMarble for `concat(Observable)`\r\n![concatObservable](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatObservable.png)\r\n\r\nMarble for `concat(source1, source2)`\r\n![concat2](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatTwo.png)\r\n\r\nMarble for `concat(source1, source2, source3)`\r\n![concat3](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatThree.png)\r\n\r\nMarble for `concat(source1, source2, source3, source4)`\r\n![concat4](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatFour.png)\r\n\r\nMarble for `concatArray`\r\n![concatArray](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatArray.png)\r\n\r\nPlease pay attention to file names in javadoc as I was not sure how to name `concat(Iterable)` so I've added at the end `i`, for `concat(Observable)` I've added `o`. For `concat(source1, source2, source3)` and `concat(source1, source2, source3, source4)` I've used `n` and `m` as they are numerical values.\r\n\r\nAlso, is there an error in `concat(Publisher)` and `concat(Publisher, prefetch)` with `request()` commands? I did used as a reference `Completable.concat(Publisher)` marble but I do not understand why do we have `request(1)` after first event as we already requested prefetching of multiple ones. Is it because others are still not produced?\r\n\r\nThanks", "NaN"], ["6140", "2.x: Update Mathematical and Aggregate Operators docs", "Lorenz Pahl", "lorenzpahl", "08/05/18, 06:28:03 PM", "This PR updates the `Mathematical-and-Aggregate-Operators.md` wiki page as per issue #6132:\r\n  \r\n  - Remove obsolete operators\r\n  - Link to the [RxJava2Extensions](https://github.com/akarnokd/RxJava2Extensions) project\r\n  - Add examples\r\n\r\nThe page now follows the structure that was defined in #6131.\r\n\r\n__Question__: Should __Available in__ in the *Mathematical Operators* section be renamed to something else (e.g. __Defined for__), because the operators are not part of the core RxJava operators?\r", "NaN"], ["6141", "Add marble diagrams for various Single operators", "Aleksandar Simic", "UMFsimke", "08/05/18, 08:40:17 PM", "Here are marble diagrams for various Single operators that will close some of the #5788 \r\n\r\nMarble for `concatEager(Publisher)`\r\n![concateEagerP](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatEagerPublisher.png)\r\n\r\nMarble for `concatEager(Iterable)`\r\n![concateEagerI](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/concatEagerIterable.png)\r\n\r\nMarble for `create`\r\n![create](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/create.png)\r\n\r\nMarble for `ambWith`\r\n![ambWith](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/ambWith.png)\r\n\r\nMarble for `equals`\r\n![equals](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/equals.png)\r\n\r\nMarble for `merge(source1, source2)`\r\n![merge](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeTwo.png)\r\n\r\nMarble for `merge(source1, source2, source3)`\r\n![mergeThree](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeThree.png)\r\n\r\nMarble for `merge(source1, source2, source3, source4)`\r\n![mergeFour](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeFour.png)\r\n\r\nMarble for `merge(SingleSource<SingleSource>)`\r\n![mergeSingleSource](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeSingleSource.png)\r\n\r\nMarble for `mergeWith`\r\n![mergeWith](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeWith.png)\r\n\r\nMarble for `doAfterTerminate`\r\n![doAfterTerminate](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/doAfterTerminate.png)\r\n\r\nMarble for `to`\r\n![to](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/to.png)\r\n\r\nMarble for `as`\r\n![as](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/as.png)\r\n\r\nMarble for `compose`\r\n![compose](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/compose.png)\r\n\r\nMarble for `doAfterSuccess`\r\n![doAfterSuccess](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/doAfterSuccess.png)\r\n\r\nMarble for `merge(Publisher)`\r\n![mergePublisher](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergePublisher.png)\r\n\r\nMarble for `merge(Iterable)`\r\n![mergeIterable](https://raw.githubusercontent.com/UMFsimke/RxJava/Images/Images/mergeIterable.png)", "NaN"], ["6143", "2.x: Add concatArrayEagerDelayError operator (expose feature)", "David Karnok", "akarnokd", "08/07/18, 06:57:13 AM", "This PR exposes the existing `delayError` capability of the `concatMapEager` operator as `concatArrayEagerDelayError` for both `Flowable` and `Observable`.\r\n\r\nIn addition, the `concatArrayEager` and these new methods receive marble diagrams:\r\n\r\n#### Observable\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEager.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEager.nn.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEagerDelayError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatArrayEagerDelayError.nn.png)\r\n\r\n#### Flowable\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEager.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEager.nn.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEagerDelayError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatArrayEagerDelayError.nn.png)\r\n\r\nResolves: #6082 \r\n\r\n*(Sidenote: one of the validators had to be adjusted due to false positive it produced.)*", "NaN"], ["6145", "2.x: Fix boundary fusion of concatMap and publish operator", "David Karnok", "akarnokd", "08/08/18, 07:42:26 AM", "This PR fixes the lack of boundary fusion marker in the `concatMap` and `publish` operators that can break the thread-confinement expectation when using `observeOn` upstream and a thread-sensitive operator:\r\n\r\n```java\r\nsource.observeOn(scheduler)\r\n    .map(/* some thread-sensitive operation */)\r\n    .publish() // or concatMap\r\n```\r\n\r\nBy default, these operators may call `poll` from any of the participating threads which would otherwise dequeue `observeOn` and execute `map` on that thread.\r\n\r\nThe fix adds the necessary flag to both operator's `onSubscribe` logic. For a temporary workaround, one should use `hide()` before such operators to make sure fusion doesn't happen.\r\n\r\nFixes: #6144", "NaN"], ["6149", "Grammar fix in README Scheduler description", "Siva Prathap Reddy N", "spreddy2714", "08/09/18, 07:54:36 AM", "Scheduler description is grammatically error. Replaced **an unifrom** with **a uniform**.", "NaN"], ["6150", "2.x: cleanup newline separation, some field namings", "David Karnok", "akarnokd", "08/09/18, 02:35:13 PM", "This PR cleans up some source code style inconsistencies:\r\n\r\n- Rename some atomic-subscription fields to `upstream` (left out from #6129).\r\n- Make sure `@Test` methods are separated by at most one empty newline\r\n- Make sure a closing curly brace and an annotation is only followed by one empty newline.\r\n- Add a test that checks for the above.", "NaN"], ["6152", "2.x: Clarify TestObserver.assertValueSet in docs and via tests", "David Karnok", "akarnokd", "08/10/18, 08:15:22 AM", "Clarify that `{TestObserver|TestSubscriber}.assertValueSet` checks for all received items to be in the provided set, but that set can contain additional elements that could have been received. Unit tests have been added to demonstrate the expected behavior.\r\n\r\nResolves: #6151.", "NaN"], ["6155", "2.x: Fix marble of Maybe.flatMap events to MaybeSource", "David Karnok", "akarnokd", "08/10/18, 10:08:24 AM", "Fix the marble diagram of the event-mapping [`Maybe.flatMap`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Maybe.html#flatMap-io.reactivex.functions.Function-io.reactivex.functions.Function-java.util.concurrent.Callable-) operator:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMap.mmm.png)\r\n\r\nTracked in: #5806", "NaN"], ["6158", "2.x: Make Flowable.fromCallable consistent with the other fromCallables", "David Karnok", "akarnokd", "08/14/18, 12:53:55 PM", "`Flowable.fromCallable` is one of [the oldest](https://github.com/ReactiveX/RxJava/commits/2.x/src/main/java/io/reactivex/internal/operators/flowable/FlowableFromCallable.java) 2.x operators and was overlooked when the handling of beyond-cancellation error delivery, aka the undeliverable exception handling was implemented across RxJava. This PR resolves this shortcoming by making it consistent with its sibling implementations.\r\n\r\nResolves: #6156", "NaN"], ["6165", "Error handle on Completable.fromCallable with RxJavaPlugins", "Muh Isfhani Ghiath", "isfaaghyth", "08/21/18, 05:56:59 PM", "NaN", "NaN"], ["6167", "2.x: Make observeOn not let worker.dispose() called prematurely", "David Karnok", "akarnokd", "08/22/18, 02:58:18 PM", "Some operators may call `dispose()`/`cancel` from `onError`/`onComplete` which could trigger a permature call to `worker.dispose()` that was about to happen anyway. This PR prevents this by moving the operator into its disposed/cancelled state before signaling the terminal event, thus a downstream `cancel()`/`dispose()` call won't trigger this premature cleanup.\r\n\r\nSuch premature cleanups may cause unwanted `Schedulers.io()` reuse in some scenarios.\r\n\r\nRelated: #6146", "NaN"], ["6171", "2.x: Add explanation text to Undeliverable & OnErrorNotImplemented exs", "David Karnok", "akarnokd", "08/25/18, 07:53:05 AM", "This PR adds detailed error message to the `UndeliverableException` and `OnErrorNotImplementedException` as they are the most common exception-related questions around.\r\n\r\n#### UndeliverableException\r\n\r\n> The exception could not be delivered to the consumer because it has already canceled/disposed the flow or the exception has nowhere to go to begin with. Further reading: https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0#error-handling | `<original exception message>`\r\n\r\n#### OnErrorNotImplementedException\r\n\r\n> The onError handler in the subscribe() method is not provided. Please specify it to avoid this type of exception. Further reading: https://github.com/ReactiveX/RxJava/wiki/Error-Handling | `<original exception message>`\r", "NaN"], ["6174", "Auto-clean up RxJavaPlugins JavaDocs HTML (#6173)", "Aaron Friedman", "ajsf", "08/26/18, 08:42:57 AM", "Add 'plugins/RxJavaPlugins.html' to the javadocCleanup task in javadoc_cleanup.gradle. \r\n\r\nResolves: #6173 ", "NaN"], ["6175", "2.x: explain null observer/subscriber error reports in detail from RxJavaPlugins", "PunitD", "punitda", "08/26/18, 11:14:52 AM", "This PR is related to issue [#6172](https://github.com/ReactiveX/RxJava/issues/6172).\r\nWith these changes, all reactive types will emit detailed error message when `onSubscribe` hook installed using RxJavaPlugins returns null `observer/subscriber`:\r\n\r\n**Observable**\r\n> \"The RxJavaPlugins.onSubscribe hook returned a null Observer. Please check the handler provided to RxJavaPlugins.setOnObservableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins\"\r\n\r\n**Flowable**\r\n> The RxJavaPlugins.onSubscribe hook returned a null FlowableSubscriber. Please check the handler provided to RxJavaPlugins.setOnFlowableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins\r\n\r\n**Single**\r\n> The RxJavaPlugins.onSubscribe hook returned a null SingleObserver. Please check the handler provided to RxJavaPlugins.setOnSingleSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins\r\n\r\n**Maybe**\r\n> The RxJavaPlugins.onSubscribe hook returned a null MaybeObserver. Please check the handler provided to RxJavaPlugins.setOnMaybeSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins\r\n\r\n**Completable**\r\n> The RxJavaPlugins.onSubscribe hook returned a null CompletableObserver. Please check the handler provided to RxJavaPlugins.setOnCompletableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins\r\n\r\n\r\n**Note :** \r\nThere was no null check on `observer` returned from `RxJavaPlugins.onSubscribe(this, observer)` method call in `Completable`'s subscribe() method. \r\nSo, I've added it in this PR. Is that fine? \r", "NaN"], ["6180", "Update Additional-Reading.md", "Maciej Bia\u0142orucki", "mbialorucki", "08/28/18, 08:54:20 AM", "Check existing links, add new links about RxAndroid #6132\r", "NaN"], ["6182", "2.x: Cleanup multiple empty lines in sources", "David Karnok", "akarnokd", "08/28/18, 03:33:11 PM", "Remove 2+ empty lines from the sources.", "NaN"], ["6187", "2.x: Fix refCount termination-reconnect race", "David Karnok", "akarnokd", "08/30/18, 01:29:59 PM", "This PR modifies the `refCount` operator (in both `Flowable` and `Observable` types) to avoid certain termination-reconnection races.\r\n\r\nThe original race could happen when the refCounted source terminated at the same time as new observers arrived, leaving those new observers hanging as they practically joined a dying connection and got possibly undercut by the `dispose` call.\r\n\r\nThe change involve a new internal interface `ResettableConnection` that will allow resetting the connection object inside the connectable source if it is equal to the connection object known by the initiator of the original `connect` call.\r\n\r\nFixes #6185 ", "NaN"], ["6193", "Add \"error handling\" java docs section to from callable & co", "Luis Cortes", "luis-cortes", "09/03/18, 12:33:37 PM", "Resolves #6179\r\n\r\nAdded JavaDocs describing the regular and canceled/disposed behavior for\r\n\r\n- `Observable.fromCallable()`\r\n- `Single.fromCallable()`\r\n- `Maybe.fromAction()`\r\n- `Completable.fromCallable()`\r\n- `Completable.fromAction()`\r\n- `Flowable.fromCallable()`\r\n\r\nDid not alter `Maybe.fromCallable()` because the existing JavaDoc appears to be adequate.", "NaN"], ["6197", "#6195 Fix Flowable.reduce(BiFunction) JavaDoc", "Yannick Lecaillez", "ylecaillez", "09/03/18, 12:05:59 PM", "Empty source does not signal NoSuchElementException.\r\n\r\nResolves #6195 ", "NaN"], ["6199", "Fix terminology of cancel/dispose in the JavaDocs", "Luis Cortes", "luis-cortes", "09/04/18, 04:08:07 PM", "Resolves #6196\r\n\r\nChanging terminology from cancel -> dispose wherever appropriate in the following classes:\r\n\r\n- `Observable.java`\r\n- `Single.java`\r\n- `Maybe.java`\r\n- `Completable.java`\r\n\r\nAreas where I did _not_ change from cancel -> disposal include: \r\n\r\n- where the cancellation was in reference to a `Flowable`, `Publisher`, or a `Future`\r\n- `test()` methods where the `TestObserver` returned actually has a `cancel()` method", "NaN"], ["6200", "2.x: Fix toFuture marbles and descriptions", "David Karnok", "akarnokd", "09/04/18, 08:28:24 AM", "This PR fixes the marble diagrams of `Flowable.toFuture` and `Observable.toFuture` to indicate:\r\n\r\n- multi-valued sources signal `IndexOutOfBoundsException`\r\n- Source has to be finite for the `Future` to terminate.\r\n\r\n![image](https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/Flowable.toFuture.png)\r\n![image](https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/toFuture.o.png)\r\n\r\n\r\nResolves #6198\r\n\r\n(also fixes the diagram for #5813).", "NaN"], ["6205", "2.x: Assert instead of print Undeliverable in some tests", "David Karnok", "akarnokd", "09/07/18, 01:00:31 PM", "Set plugin error tracking in some tests to avoid printing out `UndeliverableExceptions` (sometimes repeatedly in race tests) and assert the specific exception(s) instead.", "NaN"], ["6220", "2.x JavaDocs: Remove unnecessary 's' from ConnectableObservable", "David Karnok", "akarnokd", "09/21/18, 06:13:26 PM", "Remove the unnecessary 's' from the JavaDocs of `ConnectableObservable.autoConnect`.", "NaN"], ["6223", "Fix typos", null, "raiym", "09/23/18, 12:12:57 PM", "- Remove space and semicolon on README.md page", "NaN"], ["6232", "2.x: Cleanup Observable.flatMap drain logic", "David Karnok", "akarnokd", "09/30/18, 09:38:07 AM", "Cleanup the drain logic of `Observable.flatMap` by removing unnecessary loops and fixing the index management in case of a fused failure in one of the sources triggering another round over the same source unnecessarily.\r\n\r\nResolves: #6231", "NaN"], ["6234", "Add timeout and unit to TimeoutException message", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "10/02/18, 07:52:43 AM", "This is a small enhancement to help with crash/log debugging.\r\n\r\nRight now often times you get a stacktrace that points only to RxJava:\r\n\r\n```java\r\njava.util.concurrent.TimeoutException\r\n        at\r\nio.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutSubscriber.onTimeout(FlowableTimeoutTimed.java:137)\r\n        at\r\nio.reactivex.internal.operators.flowable.FlowableTimeoutTimed$TimeoutTask.run(FlowableTimeoutTimed.java:169)\r\n        at\r\nio.reactivex.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:66)\r\n        at\r\nio.reactivex.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:57)\r\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n        at\r\njava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n        at\r\njava.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n        at\r\njava.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n        at\r\njava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n        at java.lang.Thread.run(Thread.java:748) \r\n```\r\n\r\nAdding `timeout` and `unit` values can help find related user code faster.\r\n\r\nI'm not advocating for particular message, it can be something even shorter, like `$timeout $unit`. \r\n\r\nIt can also be extracted in a method if you see value in that. ", "NaN"], ["6235", "Fix docs typos", "Vadym Shavalda", "m3sv", "10/02/18, 04:16:16 PM", "Fix typos in documentation.\r\n\r\n~~I also fixed them in wiki, but since GitHub doesn't support wiki contributions I don't know how to proceed with the changes. They're in a separate [repo](https://github.com/m3sv/RxJava-wiki/commit/a1b88eb71bc68ca517cab11d1d5d68ed4c05a50d).~~\r", "NaN"], ["6236", "2.x: Adjust Undeliverable & OnErrorNotImpl message to use full inner exception", "David Karnok", "akarnokd", "10/03/18, 07:57:24 PM", "With `UndeliverableException` and `OnErrorNotImplementedException`, the wrapped exception may not have a message and the top line simply contains an unhelpful `null`:\r\n\r\n    io.reactivex.exceptions.UndeliverableException: The exception could not be delivered to the \r\n            consumer because it has already canceled/disposed the flow or the exception \r\n            has nowhere to go to begin with. Further reading: \r\n            https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0#error-handling | null\r\n        at io.reactivex.plugins.RxJavaPlugins.onError(RxJavaPlugins.java:367)\r\n        at io.reactivex.internal.operators.observable.ObservableCreate$CreateEmitter\r\n            .onError(ObservableCreate.java:73)\r\n        at io.reactivex.internal.operators.observable.ObservableCreate\r\n            .subscribeActual(ObservableCreate.java:43)\r\n        at io.reactivex.Observable.subscribe(Observable.java:12090)\r\n     Caused by: java.io.InterruptedIOException\r\n \r\nThis PR adds the full `toString()` value of the wrapped exception to the main line. This is also more useful when the user posting the stacktrace doesn't provide the `Caused by:` part for some reason.", "NaN"], ["6241", "2.x Wiki: Remove mention of i.r.f.Functions", "David Karnok", "akarnokd", "10/09/18, 01:01:05 PM", "The `io.reactivex.functions.Functions` utility method has been made internal a long ago and should not be mentioned.\r\n\r\nResolves: #6239", "NaN"], ["6242", "Add delaySubscription() methods to Completable #5081", null, "soshial", "10/19/18, 08:16:05 AM", "Since Observable, Single already have `delaySubscription()`, but Completable doesn't, I added these methods to the code.", "NaN"], ["6244", "Add Nullable annotations for blocking methods in Completable", "Dmitry Fisenko", "Oknesif", "10/12/18, 05:07:35 PM", "\r\nJust add @Nullable annotations to blockingGet() methods in Completable class.", "NaN"], ["6252", "2.x: Expand and fix Completable.delaySubscription tests", "David Karnok", "akarnokd", "10/19/18, 08:54:27 AM", "Expand, fix and move the tests of #6242 into a dedicated test file.", "NaN"], ["6254", "2.x: Fix flaky sample() backpressure test, improve coverage", "David Karnok", "akarnokd", "10/19/18, 10:26:01 AM", "Use processors to trigger the `MissingBackpressureException` case instead of the timer, which could fire prematurely and stop the sequence before the first item was sent by the `BehaviorProcessor`.\r\n\r\nAlso small improvements to the code coverage of `FlowableSample`.\r\n\r\nFixes #6253. ", "NaN"], ["6255", "2.x: Cleanup code style, commas, spaces, docs", "David Karnok", "akarnokd", "10/19/18, 10:49:01 AM", "- Add missing spaces after commas and semicolons\r\n- Add or fix first sentences without commas in javadocs", "NaN"], ["6257", "2.x: Add Completable.delaySubscription marble, fix some javadoc", "David Karnok", "akarnokd", "10/19/18, 08:16:33 PM", "- Add marbles to the new `Completable.delaySubscription` operator.\r\n- Fix the method name referenced in the `ConditionalSubscriber` javadoc.\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.delaySubscription.t.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.delaySubscription.ts.png)", "NaN"], ["6258", "2.x: Fix cancel/dispose upon upstream switch for some operators", "David Karnok", "akarnokd", "10/27/18, 09:08:09 PM", "This PR extends the `SubscriptionArbiter` to optionally allow or disallow cancelling the current `Subscription` if it is replaced by a new one. Some operators do not need to cancel the current `Subscription`: `concat`, `concatMap`, `repeat`, `repeatWhen`, `retry` and `retryWhen`. \r\n\r\nIn addition `repeatWhen` and `retryWhen` were cancelling when the handler sequence itself terminated. The code has been updated to disconnect the upstream upon the completion/failure but before signaling the handler.\r\n\r\nThe Reactive Streams specification also disallows synchronous cancellation after the terminal event anyway.\r\n\r\nOthers may actually need to cancel, such as `Timeout`. \r\n\r\n`Observable`s don't have a specific arbiter, they use the `DisposableHelper` methods and the relevant ones were changed to `replace()` instead of the disposing `set` call.\r\n\r\nSome tests actually checking if the dispose/cancel happens and had to be updated.\r\n\r\nThe `Flowable.delaySubscription(Publisher)` also used `SubscriptionArbiter` but it was unnecessary. The code has been replaced with a more apt deferred requesting scheme as the downstream requests need to be delayed until the main subscription happens, the other publisher is always consumed unbounded.\r\n\r\nResolves: #6259", "NaN"], ["6260", "Add generate examples to Creating-Observables.md in Wiki", "Elijah Verdoorn", "elijahverdoorn", "10/26/18, 07:32:27 AM", "Add documentation and example to the wiki for generate. \r\n\r\nResolves: #6226\r", "NaN"], ["6262", "Use JUnit's assert format for assert messages to enable better suppor\u2026", "Bj\u00f6rn Quentin", "bjoernQ", "10/26/18, 02:01:53 PM", "This changes the message format of \"assert\" to match that of JUnit. This way IDEs like IntelliJ IDEA are able to parse it and offer functionality like \"compare values\".\r", "NaN"], ["6263", "Inline SubscriptionHelper.isCancelled()", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "10/28/18, 10:06:45 AM", "Addresses https://github.com/ReactiveX/RxJava/pull/6258#discussion_r228725602", "NaN"], ["6266", "2.x: Update Error Handling Operators docs", "Lorenz Pahl", "lorenzpahl", "10/30/18, 03:20:47 PM", "This PR updates the `Error-Handling-Operators.md` wiki page as per issue #6132:\r\n\r\n- Update operator list\r\n- Add examples\r\n\r\nThe page now follows the structure that was defined in #6131.  \r", "NaN"], ["6267", "2.x: Update Creating Observables docs", "Lorenz Pahl", "lorenzpahl", "10/29/18, 12:30:47 PM", "This PR adds a link to the `generate` section to the outline and fixes a broken image link.\r\n\r\nRelates to: #6260 \r", "NaN"], ["6269", "2.x: Call the doOn{Dispose|Cancel} handler at most once", "David Karnok", "akarnokd", "10/29/18, 05:17:14 PM", "This PR makes sure the `doOnDispose`, `doOnCancel` and `doOnLifecycle` execute their cancellation handler once.\r\n\r\nResolves: #6268.", "NaN"], ["6273", "Fix broken markdown", "OH JAE HWAN", "ojh102", "10/30/18, 02:44:24 PM", "Fix broken mark down and change the link to CONTRIBUTING", "NaN"], ["6275", "2.x: Improve the Observable/Flowable cache() operators", "David Karnok", "akarnokd", "11/01/18, 06:31:31 AM", "This PR rewrites the `Observable.cache` and `Flowable.cache` operators to allocate less and be more up-to-date algorithmically.\r\n\r\nI've also added comments to help understand its inner workings in case someone is interested.\r\n\r\nResolves: #6270", "NaN"], ["6278", " 2.x: Add materialize() and dematerialize()", "David Karnok", "akarnokd", "11/06/18, 07:57:06 AM", "This PR adds the `materialize` operator to `Maybe`, `Single` and `Completable` to turn their signals into the corresponding `Notification` object. This operator has been available for `Observable`s (and `Flowable`s) from the beginning of the Rx API. The methods return `Single<Notification<T>>`.\r\n\r\nTo complement, the `dematerialize` operator is only defined for `Single` and results in a `Maybe`.\r\n\r\nIf accepted, I'll draw the correct marble diagrams for them in a separate PR.\r\n\r\nResolves: #6272", "NaN"], ["6280", "2.x: Improve the package docs of io.reactivex.schedulers", "David Karnok", "akarnokd", "11/02/18, 09:45:24 AM", "This adds some links to the important components within the package (allows faster navigation from the Overview page of the JavaDocs).", "NaN"], ["6281", "2.x: Add dematerialize(selector), deprecate old", "David Karnok", "akarnokd", "11/06/18, 08:17:28 AM", "This PR adds the `dematerialize(Function<T, Notification<R>> selector)` overload to allow type-safe dematerialization of `Notification` signals. The pre-existing `dematerialize()` forced the return type and assumed the items of the source are `Notification` objects, which could not be enforced via the type system. This selector variant establishes the type link from `T` to `Notification<R>` to `R` (where R == T is allowed).\r\n\r\nThe intended use is\r\n\r\n```java\r\nObservable<Notification<T>> source = ...\r\n\r\nObservable<T> result = source.dematerialize(notification -> notification);\r\n```\r\n\r\naka identity mapping.\r\n\r\nThe pre-existing `dematerialize()` methods are marked as deprecated now.\r\n\r\n*(Also the actual operator were missing from the examples in the respective Javadocs).*", "NaN"], ["6283", "2.x: Fix Observable.flatMap to sustain concurrency level", "David Karnok", "akarnokd", "11/05/18, 10:34:15 AM", "If the `Observable.flatMap` operator run in limited concurrency mode and multiple sources completed at the same time while the operator was in its drain loop, the operator only started with one new inner source instead of trying to run replace all the completed inner sources with new ones.\r\n\r\nThe solution is to count the completed sources and replenish them in a loop.\r\n\r\n*(The `Flowable` variant works properly because it uses backpressure and inner source counting already to replenish those completed inner sources. The `Observable` doesn't have backpressure so it has to emulate it via the work-in-progress counting and the secondary queue for available inner sources.)*\r\n\r\nFixes: #6282", "NaN"], ["6287", "2.x: Expose the Keep-Alive value of the IO Scheduler as System property. (#6279)", "Pawe\u0142 \u0141ozi\u0144ski", "pawellozinski", "11/05/18, 12:41:01 PM", "Configuring Keep-Alive through System property.\r\n\r\nResolves: #6279", "NaN"], ["6291", "2.x: Update Transforming Observables docs", "Lorenz Pahl", "lorenzpahl", "11/12/18, 08:54:07 AM", "This PR updates the `Transforming-Observables.md` wiki page as per issue #6132:\r\n\r\n- Add examples\r\n- Revised descriptions\r\n- Add more operators\r\n\r\nThe page now follows the structure that was defined in #6131 .\r", "NaN"], ["6297", "2.x: Fix refCount eager disconnect not resetting the connection", "David Karnok", "akarnokd", "11/12/18, 09:26:15 AM", "This PR fixes the case when an observer/subscriber disposes/cancels immediately upon subscribing to a `refCount` operator before it establishes the connection and ends up with a disposed but non-reset connection, preventing further interactions with the connectable source.\r\n\r\nThe fix is to detect this case and reset the connection when the `connect()` method signals the dispose handler.\r\n\r\nBoth `ConnectableFlowable.refCount` and `ConnectableFlowable.refCount` is affected.\r\n\r\nFixes: #6296", "NaN"], ["6301", "Add missing onSubscribe null-checks to NPE docs on Flowable/Observable subscribe", "Zac Sweers", "ZacSweers", "11/11/18, 12:06:38 PM", "Happened to notice these today", "NaN"], ["6303", "Javadoc: Fix incorrect image placement", "Lorenz Pahl", "lorenzpahl", "11/11/18, 08:58:03 PM", "Add `<p>` before image elements in Javadoc.\r\n\r\nResolves: #6302 \r", "NaN"], ["6305", "Javadoc : Explain explicitly about using Emitter interface methods synchronously", "PunitD", "punitda", "11/13/18, 02:16:51 PM", "Add note in Javadoc explicitly explaining about using Emitter interface methods synchronously.\r\n\r\n- Add notes for `generate` methods in Observable and Flowable.\r\n- Plus, add the similar note to Emitter interface.\r\n\r\nResolves: #6299 \r\n\r\n\r", "NaN"], ["6308", "Javadoc updates for RXJava Issue 6289", "Purnima Kamath", "pkamath2", "11/16/18, 01:52:04 PM", "Updates to io.reactivex.Flowable javadocs as per #6289. \r\nUpdated docs for all 6 Flowable.groupBy(...) methods. \r\n\r", "NaN"], ["6311", "Javadoc: explain that distinctUntilChanged requires non-mutating data to work as expected", "PunitD", "punitda", "11/16/18, 05:00:18 PM", "- Add note in javadoc for all `distinctUntilChanged()` methods in `Flowable` and `Observable` class explaining about unexpected results to expect when using mutable data sources like **Mutable CharSequence** or **Lists**.\r\n\r\nResolves: #6290 ", "NaN"], ["6313", "Adding NonNull annotations to Observable & Single", "Abhimithra Karthikeya", "freakomonk", "12/19/18, 10:23:44 AM", "Adding NonNull annotations in factory methods for improved code compilation\r\n\r\nResolves: #6309", "NaN"], ["6314", "Change javadoc explanation for Mutable List", "PunitD", "punitda", "11/19/18, 04:37:24 PM", "As per [this](https://github.com/ReactiveX/RxJava/pull/6311#discussion_r234462497) discussion, change javadoc for `distinctUntilChanged()` method for Mutable List.", "NaN"], ["6321", "Fix Flowable#toObservable backpressure support", "Philip Leonard", "philleonard", "11/23/18, 07:41:08 AM", "Resolves #6320", "NaN"], ["6324", " #6323 Java 8 version for Problem-Solving-Examples-in-RxJava", null, "hoangnam2261", "12/10/18, 09:18:16 AM", "I am adding Java 8 version for Problem-Solving-Examples-in-RxJava. \r\nPlease help me review. \r\nThanks!\r", "NaN"], ["6335", "Replace indexed loop with for-each java5 syntax", "Igor Suhorukov", "igor-suhorukov", "12/19/18, 10:42:57 AM", "Thank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [ ] Please give a description about what and why you are contributing, even if it's trivial.\r\n\r\n  - [ ] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n\r\n  - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r", "NaN"], ["6343", "2.x: Update Filtering Observables docs", "Lorenz Pahl", "lorenzpahl", "12/19/18, 09:41:10 AM", "This PR updates the `Filtering-Observables.md` wiki page as per issue #6132:\r\n\r\n- Update operator list\r\n- Revised descriptions\r\n- Add examples\r\n\r\nThe page now follows the structure that was defined in #6131.", "NaN"], ["6344", "Javadoc: Incorrect  Return Types in Javadoc Comments", "Lorenz Pahl", "lorenzpahl", "12/19/18, 09:57:55 AM", "This PR fixes some mistakes in Javadoc comments of some methods inside `Flowable.java` and `Observable.java` where the actual return type differs from what is described in the documentation.\r\n\r\nRelates to: #4535 \r", "NaN"], ["6346", "Javadoc: fix examples using markdown instead of @code", "David Karnok", "akarnokd", "12/24/18, 02:40:50 PM", "In javadoc, backtick has no meaning and caused javadoc compilation errors:\r\n\r\nhttps://travis-ci.org/akarnokd/RxJava2_9/jobs/469904725#L516", "NaN"], ["6351", "Update outdated java example in wiki #6331", "Kemal \u00d6zcan", "yekeoe", "12/28/18, 10:11:53 PM", "Updated java example in docs/How-To-Use-RxJava.md file with java 8 version.\r\n\r\nResolves: #6331", "NaN"], ["6353", "2.x: Update README", "Lorenz Pahl", "lorenzpahl", "01/02/19, 05:00:45 PM", "This PR updates the [Converting to the desired type](https://github.com/ReactiveX/RxJava#converting-to-the-desired-type) section in the README to use [`Single::ignoreElement`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Single.html#ignoreElement--) instead of [`Single::toCompletable`](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/Single.html#toCompletable--) to convert a `Single` to a `Completable`. The reason for that is that the Javadoc mentions that `Single::toCompletable` is considered deprecated and `Single::ignoreElement` should be used instead.\r", "NaN"], ["6359", "2.x: Fix the error/race in Observable.repeatWhen due to flooding repeat signal", "David Karnok", "akarnokd", "01/04/19, 11:39:21 PM", "This PR fixes a race condition in the `ObservableRepeatWhen` operator for the case when the repeat signal is not 1-for-1 and a new subscription may race with the clearing of the previous disposable because `active` is set to `false` too early. The fix is to swap the two operations. \r\n\r\n`Observable.retryWhen` and the `Flowable` versions do not have this bug. Unit tests were added to all 4 operators to verify the correct behavior regardless.\r\n\r\nFixes: #6358 ", "NaN"], ["6362", "2.x: Fix Completable.andThen(Completable) not running on observeOn scheduler.", "Pawe\u0142 Jastrz\u0119bski", "pjastrz", "01/12/19, 06:06:24 PM", "This PR fixes unpredictable scheduler/thread used by `Completable.observeOn(...)andThen(Completable)`, since sometimes scheduler defined in observeOn(...) was not used. It was inconsistent with similar `.andThen(Maybe)` and `.andThen(Single)`, since those are guaranteed to run second Completable using proper scheduler if defined with `.observeOn`.\r\nFixes: https://github.com/ReactiveX/RxJava/issues/6354.\r", "NaN"], ["6364", "2.x: Fix publish not requesting upon client change", "David Karnok", "akarnokd", "01/15/19, 10:37:23 AM", "Due to a bug in the `Flowable.publish` operator, it is not requesting more if there was a change in the subscriber array during an emission run in the non-fused operation mode.\r\n\r\nFixes: #6363", "NaN"], ["6365", "Indicate source disposal in timeout(fallback)", "Artem Zinnatullin :slowpoke:", "artem-zinnatullin", "01/15/19, 11:27:26 AM", "Some of the overloads of `timeout(\u2026, fallback)` operator didn't indicate that source gets disposed on timeout in the javadoc.", "NaN"], ["6370", "2.x: Add interruptible mode to Schedulers.from", "David Karnok", "akarnokd", "01/17/19, 01:41:03 PM", "By default, the `Schedulers.from` uses a trampoline to ensure worker tasks are executed FIFO and non-overlappingly on any potentially multi-threaded `Executor`. This old setup didn't allow task interruption due to this disconnect between the trampoline task and the operator task. (In contrast, the standard schedulers use single threaded executors and their `Future` is linked and interruptible when the operator task is cancelled).\r\n\r\nThis PR add an interruptible mode to the `Schedulers.from` via a paramerer in a new overload and some internal dispatching based on this mode selector. Existing `Schedulers.from(Executor)` users should still behave the same.\r\n\r\nResolves: #6368", "NaN"], ["6371", "2.x: Fix bounded replay() memory leak due to bad node retention", "David Karnok", "akarnokd", "01/17/19, 02:02:36 PM", "This PR fixes a memory leak caused by node retention in the bounded `replay()` implementations. When the consumer disposed/canceled the flow, the `index` field was not cleared. In certain situations, such out-of-comission consumers were still reachable via thread local stack and through it, the node they were last refencing. Further items through it would then keep referencing an ever increasing number of linked nodes, causing OOME eventually.\r\n\r\nThe fix is to clear the `index` field upon dispose/cancellation. The subject/processor variants were working properly. Tests were added to verify them though as well.\r\n\r\nIssue discovered on StackOverflow: https://stackoverflow.com/q/54191190/61158", "NaN"], ["6375", " 2.x: Don't dispose the winner of {Single|Maybe|Completable}.amb()", "David Karnok", "akarnokd", "01/17/19, 02:28:31 PM", "This PR fixes the `Single.amb`, `Maybe.amb` and `Completable.amb` operators to not dispose the winner source, causing potential interruptions as a side-effect on the current thread.\r\n\r\nThe fix is to [delete](http://reactivex.io/RxJava/2.x/javadoc/io/reactivex/disposables/CompositeDisposable.html#delete-io.reactivex.disposables.Disposable-) the winner from the composite before disposing the rest to avoid the interruption race.\r\n\r\nUnit tests were added to verify this behavior on all `amb` implementations. `Flowable` and `Observable` were already working correctly.\r\n\r\nFixes: #6373", "NaN"], ["6377", "Expand `Observable#debounce` and `Flowable#debounce` javadoc", "Roman Wuattier", "RomanWuattier", "01/23/19, 12:33:31 PM", "Mention that if the processing of a task takes too long\r\nand a newer item arrives then the previous task will\r\nget disposed interrupting a long running work.\r\n\r\nFixes: #6288 \r", "NaN"], ["6380", "Fix bug in CompositeException.getRootCause", "Guillermo Calvo", "guillermocalvo", "01/21/19, 09:16:34 AM", "I found what I believe is a bug in `CompositeException.getRootCause`.\r\n\r\nThe [original code](https://github.com/ReactiveX/RxJava/commit/487a0ba52137e13d996ad12fc73bfeabb03c4fb7#diff-63dcdf1ecfc9f44d938e86154f465e41R306) use to be `if (root == null || root == e)`, but apparently after some refactoring it ended up as `if (root == null || cause == root)`.\r\n\r\nAs a side note, I think this method should be made `static` (that would have prevented the bug).\r\n\r\n<!--\r\nThank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [ ] Please give a description about what and why you are contributing, even if it's trivial.\r\n\r\n  - [ ] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n\r\n  - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r\n-->", "NaN"], ["6386", "Add doOnTerminate to Single/Maybe for consistency", "Sergey Kryvets", "skryvets", "01/29/19, 12:45:38 PM", "This PR adds doOnTerminate operator to Single and Maybe.\r\n\r\nResolves: #6379.", "NaN"], ["6398", "2.x: Fix window() with start/end selector not disposing/cancelling properly", "David Karnok", "akarnokd", "02/13/19, 08:51:09 AM", "This PR fixes the start-end selector variant of `Observable.window` and `Flowable.window` to properly \r\n\r\n- dispose the window-opening sequence upon disposing the main output flow and \r\n- disposing the main upstream upon disposing the main output flow provided there are no windows open.\r\n\r\nFixes: #6397", "NaN"], ["6405", "2.x: Fix concatEager to dispose sources & clean up properly.", "David Karnok", "akarnokd", "02/12/19, 10:24:47 PM", "This PR fixes the `concatMapEager` operator (which drives the static variants as well) to properly dispose and clean up the state of the operator upon cancelling/disposing the sequence.\r\n\r\n- `Flowable.concatMapEager` did not cancel the current active inner consumer, only the ones coming after\r\n- `Observable.concatMapEager` did not dispose the main source of the inner observables.\r\n\r\nBoth variants have received the same two unit tests to verify their behavior.\r\n\r\nFixes: #6404", "NaN"], ["6408", "Improving Javadoc of flattenAsFlowable and flattenAsObservable method", "Thiyagarajan", "thiyagu-7", "02/16/19, 07:02:31 PM", "Improving the javadoc of the `flattenAsFlowable` and `flattenAsObservable` methods of `Single` and `Maybe` classes.\r\n\r\nResolves: #6276 ", "NaN"], ["6421", "3.x: Adjust infrastructure version markers", "David Karnok", "akarnokd", "06/06/19, 01:58:09 PM", "This PR updates the `2.x` and `rxjava2` indicators in some documents and build scripts to target RxJava 3 to `io.reactivex.rxjava3`.", "NaN"], ["6432", "2.x composite disposable docs", "Vasileios Chroniadis", "chronvas", "03/15/19, 06:21:26 PM", "On CompositeDisposable add and addAll methods, if the param is null, currently the NPE error message (produced by ObjectHelper) is \"d is null\" which is not very helpful.\r\n\r\nThis is a small refactor for making the message a bit more helpful.\r\n\r\nResolves #6430 ", "NaN"], ["6433", "Make error messages of parameter checks consistent", "Lorenz Pahl", "lorenzpahl", "03/21/19, 01:00:27 PM", "This PR updates error messages of parameter checks. Most of the changes are due to the renaming of a parameter without changing the error message used when the parameter check fails.", "NaN"], ["6434", "2.x: Improve subjects and processors package doc", "David Karnok", "akarnokd", "03/18/19, 11:33:15 AM", "- Fix a typo in the subjects doc\r\n- Expand the processors doc", "NaN"], ["6436", "refactor: improves Creating-Observables wiki doc", "vikas kumar", "worstkiller", "03/21/19, 01:45:53 PM", "This PR improves the documentation for creating observables \r\nhttps://github.com/ReactiveX/RxJava/blob/2.x/docs/Creating-Observables.md\r\nsuggestions from @lorenzpahl also included. \r\nCloses: #6435 \r", "NaN"], ["6442", "Undeliverable error handling logic for Completable operators", "mgb", "BharathMG", "03/26/19, 03:06:21 PM", "`Completable.fromAction` and `Completable.fromRunnable` operators were missing `RxJavaPlugins` calls to handle Undeliverable errors. This behaviour is fixed in this PR.\r\n\r\n Also added missing error handling java doc for Completable.fromRunnable.", "NaN"], ["6452", "Remove dependency of Schedulers from ObservableRefCount", "Kuan-Yu Tseng", "mycallmax", "04/04/19, 06:37:17 PM", "Resolves #6451.\r\n\r\nIn the constructor of `ObservableRefCount` that takes `ConnectableObservable<T> source` as the argument, we set `timeout` to `0L`. In that specific use case of `ObservableRefCount`, `scheduler` is never needed. It's only referenced in `cancel()` method but if timeout is 0, it won't be triggered at all because there is early return. This commit removes the need to depend on `Schedulers.trampoline()` and instead passes null to be scheduler when the ref count is not time-based. Similarly, applies the same change to `FlowableRefCount`.\r\n\r\nThe reasons for this change are the following:\r\n\r\n1. In projects that don't depend on `Schedulers` class, if there is no reference to `Schedulers`, the whole `Schedulers` can be stripped out of the library after optimizations (e.g., proguard). With constructor that references `Schedulers`, the optimizer can't properly strip it out. In our quick test of our Android app, we were able to reduce the RxJava library size dependency from 51KB to 37KB (after optimization but before compression) by simply avoiding access to `Schedulers` in `ObservableRefCount`.\r\n2. In terms of modularity, `ObservableRefCount` is just an operator so it by itself should probably not have dependency on what available pool of schedulers (`Schedulers`) there are. It should just know that there is some `Scheduler` that could be passed to `ObservableRefCount` when `ObservableRefCount` needs it.", "NaN"], ["6453", "Fixed typos for comments", "Alexis H. Munsayac", "LXSMNSYC", "04/04/19, 06:56:17 PM", "I was looking at the docs and found that some details does not match the given code.\r\n\r\nFor example:\r\n\r\n![Screenshot from 2019-04-04 10-01-00](https://user-images.githubusercontent.com/4783372/55524641-9da42280-56c0-11e9-8190-e3618418e993.png)\r\n\r\nIt says 'new Completable instance' when, in fact, it returns a Maybe.", "NaN"], ["6458", "Update the Javadoc of the `retry` operator", "Roman Wuattier", "RomanWuattier", "04/12/19, 12:03:33 PM", "Specify that the `times` function parameter describes \"the number of times\r\nto resubscribe if the current Observable fails\".\r\n\r\nSolves: #6402\r", "NaN"], ["6461", "Change error message in ObservableFromArray", null, "IRuizM", "04/13/19, 12:59:20 PM", "Changed the error message when an element at position i is null to what was suggested in #6460 . \r", "NaN"], ["6469", "Remove redundant methods from Sample(Observable)", "Alexis H. Munsayac", "LXSMNSYC", "04/26/19, 10:49:28 AM", "Resolves: #6468", "NaN"], ["6470", "remove unused import in Flowable.java", "OH JAE HWAN", "ojh102", "04/28/19, 07:46:10 PM", "remove unused import in Flowable.java", "NaN"], ["6480", "Update README.md", "Cristiano Gavi\u00e3o", "cvgaviao", "05/18/19, 05:14:18 PM", "fix issue #6479\r\n\r", "NaN"], ["6483", "Correction for Maybe.count doc typo", "Alexis H. Munsayac", "LXSMNSYC", "05/20/19, 09:01:04 AM", "Resolves #6481 ", "NaN"], ["6485", "remove unused else from the Observable", "Volodymyr", "VovaStelmashchuk", "05/23/19, 05:17:32 PM", "Remove unused else from the Observable class.\r", "NaN"], ["6488", "2.x: Fix zip not stopping the subscription upon eager error", "David Karnok", "akarnokd", "05/27/19, 08:23:33 AM", "The `Observable.zip` did not stop subscribing to the next sources if the previous one failed with an `onError`. `Flowable.zip` works as intended.\r\n\r\nFixes #6487", "NaN"], ["6496", "Update Additional-Reading.md", "-", "khkong", "06/04/19, 10:44:42 AM", "#6132\r\n- First line was edited.\r\n- 'What is Reactive Programming?' was wrong link, so deleted.", "NaN"], ["6497", "Update Alphabetical-List-of-Observable-Operators.md", "-", "khkong", "06/04/19, 02:09:55 PM", "#6132\r\nInvalid link edited.\r\n\r", "NaN"], ["6498", "3.x: Merge in changes from 2.x since the initial branching", "David Karnok", "akarnokd", "06/13/19, 11:50:31 AM", "### Version 2.2.9\r\n#### Bugfixes\r\n- #6488: Fix zip not stopping the subscription upon eager error.\r\n#### Documentation changes\r\n- #6453: Fixed wrong type referenced in Maybe and Single JavaDocs.\r\n- #6458: Update the Javadoc of the retry operator.\r\n#### Other\r\n- #6452: Remove dependency of Schedulers from ObservableRefCount.\r\n- #6461: Change error message in ObservableFromArray.\r\n- #6469: Remove redundant methods from sample(Observable).\r\n- #6470: Remove unused import from Flowable.java.\r\n- #6485: Remove unused else from the Observable.\r\n\r\n### Version 2.2.8 - March 26, 2019 (Maven)\r\n#### Bugfixes\r\n- #6442: Add missing undeliverable error handling logic for Completable.fromRunnable & fromAction operators.\r\n#### Documentation changes\r\n- #6432: Improve the docs of CompositeDisposable.\r\n- #6434: Improve subjects and processors package doc.\r\n- #6436: Improve Creating-Observables wiki doc.\r\n#### Other\r\n- #6433: Make error messages of parameter checks consistent.", "NaN"], ["6499", "Null check for BufferExactBoundedObserver", "Jan Knotek", "JanKn", "06/17/19, 12:43:36 PM", "- [*] Please give a description about what and why you are contributing, even if it's trivial:\r\n\r\n**Improve stability of the library.**\r\nOther variants of the onComplete method include this Null check already, e.g. BufferExactUnboundedObserver, this check should fix the case when there is a race condition and buffer is already set to \"null\" by the time onComplete is called.\r\n\r\nIt is causing 0.1% crashes in our production app, this should improve stability of other apps too.\r\n ", "NaN"], ["6504", "2.x: Fix javadocs & imports", "David Karnok", "akarnokd", "06/15/19, 07:30:31 PM", "- Fix some errors in the Javadoc links.\r\n- Remove unused imports.\r\n- Add the ParallelFlowable page to the javadoc cleanup routine.", "NaN"], ["6505", "2.x: Fix publish().refCount() hang due to race", "David Karnok", "akarnokd", "06/20/19, 07:30:05 PM", "This PR adds a workaround implementation to the `publish()` implementations `ObservablePublish` and `FlowablePublish` so that when used with `refCount`, a connection-disconnection race won't leave consumers hanging in certain situations.\r\n\r\nThis was necessary to avoid the behavior change with the classic implementations used without `refCount`. In the alternate implementation, when the connectable terminates, the terminal event is signaled to late consumers until the operator is reset via the `ResettableConnectable`.\r\n\r\nThe `refCount` operator detects the classic implementations through the `ObservablePublishClassic` and `FlowablePublishClassic` internal interfaces and replaces them via the new implementations. The introduction of these interfaces were necessary to support 3rd party hooks that would intercept the classic connectable implementations via an arbitrary class which `refCount` wouldn't recognize or replace.\r\n\r\nFixes #6501 ", "NaN"], ["6506", "2.x: Expand the Javadoc of Flowable", "David Karnok", "akarnokd", "06/17/19, 12:51:05 PM", "- Add links to Reactive Streams\r\n- Fix hyphenation\r\n- Turn some `@code` into `@link`s.\r\n- Add a short protocol description\r\n- Add basic example usage\r\n- Add example to use `create` for custom sources\r\n- Mention the synchronous/sequential nature and link in some operators.", "NaN"], ["6507", "3.x: Sync up with 2.2.10 snapshot", "David Karnok", "akarnokd", "06/17/19, 01:16:55 PM", "The Changes.md always comes up conflicting. I'll leave it as it is for now.", "NaN"], ["6510", "2.x: Correct Reactive-Streams to Reactive Streams in Documentation", "Jonathan Sawyer", "JonathanSawyer", "06/17/19, 01:49:57 PM", "* Changes `Reactive-Streams` to `Reactive Streams` in line with the rest of the documentation. ", "NaN"], ["6511", "3.x: Widen functional interface throws, replace Callable with Supplier", "David Karnok", "akarnokd", "06/19/19, 07:19:34 AM", "This PR widens the `throws Exception` into `throws Throwable` in the functional interfaces and adjusts `catch (Exception` to `catch(Throwable` where needed.\r\n\r\nThe major change is the replacement of `java.util.concurrent.Callable` in almost all API with `io.reactivex.functions.Supplier` which is defined with `throws Throwable`. Since subinterfaces can't widen the throws clause, only narrow it, `Supplier` can't extend `Callable`.\r\n\r\n`fromCallable` remained in all base classes and a separate PR will introduce `fromSupplier`.\r\n\r\nThe single-valued fusion now works with `Supplier` and `ScalarSupplier` types instead of `Callable` and `ScalarCallable` (removed).", "NaN"], ["6514", "3.x: Merge as() into to()", "David Karnok", "akarnokd", "06/19/19, 08:50:05 AM", "In 2.x, the `to()` operator used the generic `Function` to allow assembly-time conversion of flows into arbitrary types. The drawback of this approach was that each base reactive type had the same `Function` interface in their method signature, thus it was impossible to implement multiple converters for different reactive types within the same class. To work around this issue, the `as` operator and `XConverter` interfaces have been introduced in 2.x, which interfaces are distinct and can be implemented on the same class. Changing the signature of `to` in 2.x was not possible due to the pledged binary compatibility of the library.\r\n\r\nFrom 3.x, the `as()` methods have been removed and the `to()` methods now each work with their respective `XConverer` interfaces:\r\n\r\n- `Flowable.to(Function<Flowable<T>, R>)` is now `Flowable.to(FlowableConverter<T, R>)`\r\n- `Observable.to(Function<Observable<T>, R>)` is now `Observable.to(ObservableConverter<T, R>)`\r\n- `Maybe.to(Function<Flowable<T>, R>)` is now `Maybe.to(MaybeConverter<T, R>)`\r\n- `Single.to(Function<Flowable<T>, R>)` is now `Maybe.to(SingleConverter<T, R>)`\r\n- `Completable.to(Function<Completable, R>)` is now `Completable.to(CompletableConverter<R>)`\r\n- `ParallelFlowable.to(Function<ParallelFlowable<T>, R)` is now `ParallelFlowable.to(ParallelFlowableConverter<T, R>)`\r\n\r\nIf one was using these methods with a lambda expression, only a recompilation is needed:\r\n\r\n```java\r\n// before\r\nsource.to(flowable -> flowable.blockingFirst());\r\n\r\n// after\r\nsource.to(flowable -> flowable.blockingFirst());\r\n```\r\n\r\nIf one was implementing a Function interface (typically anonymously), the interface type, type arguments and the `throws` clause have to be adjusted\r\n\r\n```java\r\n// before\r\nsource.to(new Function<Flowable<Integer>, Integer>() {\r\n    @Override\r\n    public Integer apply(Flowable<Integer> t) throws Exception {\r\n        return t.blockingFirst();\r\n    }\r\n});\r\n\r\n// after\r\nsource.to(new FlowableConverter<Integer, Integer>() {\r\n    @Override\r\n    public Integer apply(Flowable<Integer> t) {\r\n        return t.blockingFirst();\r\n    }\r\n});\r\n```\r\n\r\nResolves: #5654", "NaN"], ["6516", "3.x: remove getValues() from some subjects/processors", "David Karnok", "akarnokd", "06/19/19, 09:15:13 AM", "The `getValue()` and `getValues(T[])` methods were a remnant from a time where `Subject` and `FlowableProcessor` was unifying all state peeking methods for every kind of subject/processor. These have been marked as `@Deprecated` in 2.x and are now removed from 3.x. They can be trivially replaced with `getValue()` if necessary, for example:\r\n\r\n```java\r\nObject value = subject.getValue();\r\nif (value == null) {\r\n   return new Object[1];\r\n}\r\nreturn new Object[] { value };\r\n```\r\n\r\nRelated: #5622", "NaN"], ["6517", "3.x: Various small API changes and removals", "David Karnok", "akarnokd", "06/19/19, 09:46:04 AM", "- `Maybe.defaultIfEmpty()` returns `Single`.\r\n- Removal of `Maybe.toSingle(T)`.\r\n- Removal of `Flowable.subscribe(4 args)`\r\n- Removal of `Observable.subscribe(4 args)`\r\n- Removal of `Single.toCompletable()`\r\n- Removal of `Completable.blockingGet()`\r\n- Removal of `Flowable.subscribe(/* 4 args */)`\r\n- Removal of `Observable.subscribe(/* 4 args */)`", "NaN"], ["6519", "3.x: ConnectableFlowable/ConnetableObservabe redesign", "David Karnok", "akarnokd", "06/20/19, 06:18:07 AM", "This PR changes the connectable API to have a specific `reset` method to reset a terminated connectable source as part of the official API.\r\n\r\nIn 2.x, when `publish()` terminated, it reset itself to a fresh state which could lead to late consumers not receiving events as there might be no one to call `connect()` again (see #6501). However, `replay()` did not reset itself, thus late consumers got the cached events, however, a reconnect started the sequence and new consumers may have missed items.\r\n\r\nIn 3.x, this two corner cases have been fixed by the introduction of `reset()`. Both `publish` and `replay` now remain in their terminated state until `reset` is called. If the connection is disposed, it will automatically reset their state just like before. The state transitions are as follows:\r\n\r\n1. **fresh** -> `connect()` -> **running** -> `onComplete()`/`onError()` -> **terminated** -> `reset()` -> **fresh**\r\n2. **fresh** -> `connect()` -> **running** -> `dispose()` -> **fresh**\r\n3. **fresh** -> `connect()` -> **running** -> `onComplete()`/`onError()` -> **terminated** -> `dispose()` -> **fresh**\r\n4. **fresh** -> `connect()` -> **running** -> `onComplete()`/`onError()` -> **terminated** -> `connect()` -> **running**\r\n\r\nThis does resolve the race condition with `publish().refCount()` described in #6501.\r\n\r\nIn addition, there are some changes to `Flowable.publish()`'s behavior:\r\n\r\nIt no longer keeps consuming the upstream if there are no subscribers. This implies if the source terminates while there are unconsumed items in the internal buffer, those will be available for observation.\r\n*I have no strong preference on this property and in comparison, `Observable.publish` drops items because there is no backpressure buffer in its implementation.*\r\n\r\nUpstream errors are not reported to the `RxJavaPlugins.onError` handler when if there are no subscribers but have to be observed via a subscriber.\r\n*Because terminal events are available until `reset` now, we can't know really if there is going to be a subscriber or not. However, it might be possible to detect the no-consumer case upon an error and still report it when `reset` or `dispose` is called.*\r\n\r\nResolves #5628\r\nResolves #5899", "NaN"], ["6522", "2.x: Fix concatMapDelayError not continuing on fused inner source crash", "David Karnok", "akarnokd", "06/20/19, 12:34:48 PM", "The `Callable` fused path didn't consider the error-delay settings and cut the sequence short.\r\n\r\nFixes: #6520 ", "NaN"], ["6523", "3.x: Fix concatMapDelayError not continuing on fused inner source crash", "David Karnok", "akarnokd", "06/20/19, 05:25:41 PM", "The `Supplier` fused path didn't consider the error-delay settings and cut the sequence short.\r\n\r\nFixes: #6520 ", "NaN"], ["6525", "3.x: remove `test` from `testXXX` method names, create a validator", "Maksim Moiseikin", "maksim-m", "06/20/19, 04:43:51 PM", "Fix #6518.\r\n\r\n- [X] Create validator\r\n- [X] Automatically rename methods \"testXXX\" to \"xxx\" (analog to [FixLicenseHeaders](https://github.com/ReactiveX/RxJava/blob/3.x/src/test/java/io/reactivex/validators/FixLicenseHeaders.java) check)\r\n- [x] Rename methods", "NaN"], ["6526", "3.x: Remove methods from test consumers, make internal versions", "David Karnok", "akarnokd", "06/20/19, 04:15:30 PM", "Remove methods from the standard test consumers based on feedback in [6153 comment](https://github.com/ReactiveX/RxJava/issues/6153#issuecomment-463184785).\r\n\r\nSome test support has been moved into the `io.reactivex.testsupport` package in the form of `TestObserverEx` and `TestSubscriberEx`.\r\n\r\nResolves: #6153", "NaN"], ["6528", "Rename test methods and enable the check", "Maksim Moiseikin", "maksim-m", "06/20/19, 07:09:52 PM", "Fix #6518.", "NaN"], ["6529", "3.x: Add X.fromSupplier()", "David Karnok", "akarnokd", "06/20/19, 07:47:56 PM", "This PR adds the `fromSupplier` operator to support the new `Supplier` interface.\r\n\r\nThe marble diagrams will be updated in a separate PR.", "NaN"], ["6530", "3.x: disambiguate startWith+1 to startWithItem & startWithIterable", "David Karnok", "akarnokd", "06/21/19, 09:12:26 AM", "`startWith(T)` and `startWith(Iterable)` was causing some trouble with `startWith(Publisher)`. This PR will rename the former two.\r\n\r\nThe diagrams will be updated in a separate PR.\r\n\r\nResolves: #6122", "NaN"], ["6531", "3.x: add marbles to X.fromSupplier", "David Karnok", "akarnokd", "06/21/19, 09:26:30 AM", "This PR adds marbles to the new `fromSupplier` operators:\r\n\r\n#### Flowable:\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromSupplier.png)\r\n\r\n#### Observable:\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.fromSupplier.png)\r\n\r\n#### Maybe:\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.fromSupplier.png)\r\n\r\n#### Single:\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.fromSupplier.png)\r\n\r\n#### Completable:\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.fromSupplier.png)", "NaN"], ["6532", "3.x: Add eager truncation to bounded replay() to avoid item retention", "David Karnok", "akarnokd", "06/24/19, 07:30:33 AM", "This PR adds the `eagerTruncate` option to the `replay` operator so that the `head` node will lose the item reference it holds upon truncation.\r\n\r\nThe bounded buffers in `replay` implement a linked list that when truncated, moves the head reference forward along the links atomically. This allows late consumers to pick up the head and follow the links between them to get items replayed. However, the truncation may happen concurrently with a consumer working on some prior nodes so if the truncation would `null` out the value, the consumer reaching the same node would see `null` as well and fail.\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/59920898-55c5a980-942c-11e9-8dc1-b9e07264a36f.png)\r\n\r\nTo avoid this type of retention, the head node has to be refreshed with a new node still pointing to the next node in the chain but without any value. \r\n\r\n![image](https://user-images.githubusercontent.com/1269832/59921066-dbe1f000-942c-11e9-92a9-d2e06f1839a0.png)\r\n\r\nThe reason this is not the default is that it requires an additional allocation for each new incoming value when the buffer is full, which would reduce performance in cases where the excess retention is not a problem.\r\n\r\nOverloads to both the direct and function-variants of both `Flowable.replay()` and `Observable.replay()` have been added. To avoid too many overloads, only one extra overload has been added extending the signature of the longest parameterized method per each bounds mode (size, time, time+size).\r\n\r\nTheir unit test files have been cloned so that both the non-eager (original) behavior and the eager behavior is tested separately.\r\n\r\nFixes #6475", "NaN"], ["6533", "3.x: Remove Changes.md", "David Karnok", "akarnokd", "06/21/19, 01:41:54 PM", "An unnecessary duplication of the [releases](https://github.com/ReactiveX/RxJava/releases) tab. Changing the file triggers an unecessary build that has to be canceled on Travis CI so that the actual release runs without interference. \r\n\r\nResolves #5646", "NaN"], ["6534", "3.x: Make using() resource disposal order consistent with eager-mode", "David Karnok", "akarnokd", "06/24/19, 08:06:11 AM", "Make the resource disposal order in all `using` implementations are consistent with the eagerness of the operator:\r\n\r\n**eager**: dispose resource then dispose the upstream\r\n**non-eager**: dispose the upstream then dispose the resource.\r\n\r\nFixes: #6347", "NaN"], ["6535", "3.x: JavaDocs: clarify create emitters are per consumer", "David Karnok", "akarnokd", "06/24/19, 07:49:48 AM", "This PR adds this documentation part to the various `create` JavaDocs (adapted):\r\n\r\nWhenever an `Observer` subscribes to the returned `Observable`, the provided\r\n`ObservableOnSubscribe` callback is invoked with a fresh instance of an `ObservableEmitter`\r\nthat will interact only with that specific `Observer`. If this `Observer`\r\ndisposes the flow (making `ObservableEmitter#isDisposed` return true),\r\nother observers subscribed to the same returned `Observable` are not affected.\r\n\r\n\r\nResolves #6390", "NaN"], ["6537", "3.x: Promote Beta/Experimental to Standard", "David Karnok", "akarnokd", "06/24/19, 12:22:40 PM", "Promote the following experimental operators to standard:\r\n\r\n- `Completable.delaySubscription(long, TimeUnit [, Scheduler])`\r\n- `Completable.materialize()`\r\n- `Flowable.dematerialize(Function)`\r\n- `Maybe.doOnTerminate()`\r\n- `Maybe.materialize()`\r\n- `Observable.dematerialize(Function)`\r\n- `Single.dematerialize(Function)`\r\n- `Single.materialize()`\r\n\r\nThere were no `Beta` operators in 2.2.x.", "NaN"], ["6538", "3.x: Add concatMap with Scheduler guaranteeing where the mapper runs", "David Karnok", "akarnokd", "06/24/19, 01:37:53 PM", "This PR adds an overload to `concatMap` and `concatMapDelayError` in both `Flowable` and `Observable` which makes sure the `mapper` function is always executed on a dedicated scheduler.\r\n\r\nBy default `concatMap` may execute the `mapper` function on various threads: the subscribing thread, the upstream thread generating the items to be mapped or the thread where the generated inner source terminates. These overloads remove this kind of uncertainty.\r\n\r\nThe implementation is a copy of the original concatMap instead of an extension so that optimizations for the non-scheduled variants still work without extra overhead.\r\n\r\nOverloads to the `concatMap{Single|Maybe|Completable}` and `concatMap{Single|Maybe|Completable}DelayError` *may be added* in a separate PR later.\r\n\r\nResolves #6447", "NaN"], ["6539", "3.x: remove no-arg dematerialize(); remove replay(Scheduler) variants", "David Karnok", "akarnokd", "06/24/19, 02:55:57 PM", "This PR removes some obsolete API.\r\n\r\nThe `Flowable.dematerialize()` and `Observable.dematerialize()` were inherently type-unsafe and have been removed. In Rx.NET, the extension methods allowed `dematerialize()` to be applied to `Observable<Notification<T>>` only, but there is no way for doing it in Java as it has no extension methods and one can't restrict a method to appear only with a certain type argument scheme.\r\n\r\nThe`replay(Scheduler)` and other overloads were carried over from the original Rx.NET API set but I can't rememeber if they had any use in the field. Most use cases capture the connectable anyway so there is no much benefit from inlining an `observeOn` into a connectable:\r\n\r\n```java\r\nConnectableFlowable<Integer> connectable = source.replay();\r\n\r\nFlowable<Integr> flowable = connectable.observeOn(Schedulers.io());\r\n\r\n// hand flowable to consumers\r\nflowable.subscribe();\r\n\r\nconnectable.connect();\r\n```", "NaN"], ["6544", "Fixing version tag on Schedulers.from(Executor, boolean)", "Luis Cortes", "luis-cortes", "06/26/19, 09:31:30 PM", "Resolves #6543 \r\n\r\nUpdating the version tag on `Schedulers.from(Executor, boolean)` since it was promoted.\r", "NaN"], ["6545", "2.x: Remove unnecessary static imports from unit tests", "jimin", "slievrly", "06/28/19, 05:22:01 AM", "2.x: Remove unnecessary static imports from unit tests.", "NaN"], ["6546", "2.x: Simplify JUnit tests with more appropriate assert methods", "jimin", "slievrly", "06/27/19, 03:00:04 PM", "Simplify unit tests by using the more appropriate JUnit assert methods.", "NaN"], ["6549", "3.x: Simplify JUnit tests with more appropriate assert methods", "jimin", "slievrly", "06/30/19, 10:20:36 AM", "Simplify JUnit tests with more appropriate assert methods.", "NaN"], ["6550", "3.x: remove unnecessary static imports from unit tests", "jimin", "slievrly", "07/03/19, 11:19:38 AM", "Remove unnecessary static imports from unit tests.", "NaN"], ["6556", "3.x rename on error resume next methods to disambiguate when calling from kotlin (#6551)", "Luis Cortes", "luis-cortes", "07/04/19, 08:19:14 AM", "Resolves #6551 \r\n\r\n- Renamed `onErrorResumeNext(Source)` to `onErrorResumeWith(Source)` for `Observable`, `Maybe`, `Single`, and `Flowable`\r\n- Renamed some unit tests and their classes to reflect the method name change\r\n- Changed parameter type of `Single.onErrorResumeWith` from `Single` to `SingleSource`  \r\n- Updated JavaDocs for all renamed methods\r\n- Removed redundant casts for unit tests\r\n- Deleted duplicate unit test that arose from no longer needing to cast arguments ", "NaN"], ["6559", "3.x Fix NPE when debouncing empty source", "Artem Hluhovskyi", "hluhovskyi", "07/05/19, 06:10:11 AM", "**Background** Related issue #6558 \r\n\r\nDebounce with selector on the empty `Observable` leads to NPE.\r\n\r\nIt happens because of `DebounceObserver#debouncer` field is set up only when `onNext` is called. When `onNext` isn't called at all, like when debouncing `Observable.empty()`, we get a null reference from `debouncer` and call `emit` on `null` which actually leads to NPE.\r\n\r\n**Change**\r\nWrap `emit` call with null check both in `ObservableDebounce` and `FlowableDebounce`\r\n\r\n**Test plan**\r\nTo check `Observable`:\r\n```\r\n./gradlew test --tests \"io.reactivex.internal.operators.observable.ObservableDebounceTest.debounceOnEmpty\"`\r\n```\r\nTo check `Flowable`:\r\n```\r\n./gradlew test --tests \"io.reactivex.internal.operators.flowable.FlowableDebounceTest.debounceOnEmpty\"`\r\n```", "NaN"], ["6560", "2.x Fix NPE when debouncing empty source", "Artem Hluhovskyi", "hluhovskyi", "07/04/19, 09:03:43 PM", "**Background** Related issue #6558 \r\nCherry pick of #6559 for 2.x version\r\n\r\nDebounce with selector on the empty `Observable` leads to NPE.\r\n\r\nIt happens because of `DebounceObserver#debouncer` field is set up only when `onNext` is called. When `onNext` isn't called at all, like when debouncing `Observable.empty()`, we get a null reference from `debouncer` and call `emit` on `null` which actually leads to NPE.\r\n\r\n**Change**\r\nWrap `emit` call with null check both in `ObservableDebounce` and `FlowableDebounce`\r\n\r\n**Test plan**\r\nTo check `Observable`:\r\n```\r\n./gradlew test --tests \"io.reactivex.internal.operators.observable.ObservableDebounceTest.debounceOnEmpty\"`\r\n```\r\nTo check `Flowable`:\r\n```\r\n./gradlew test --tests \"io.reactivex.internal.operators.flowable.FlowableDebounceTest.debounceOnEmpty\"`\r\n```", "NaN"], ["6564", "3.x: remove buffer/window with supplier & onExceptionResumeNext", "David Karnok", "akarnokd", "07/11/19, 06:34:16 AM", "This PR removes 3 kinds of operators that had no noticeable use bases or use cases on their own in the past years.\r\n\r\n- `buffer(Supplier [, Supplier])`\r\n- `window(Supplier [, int])`\r\n- `onExceptionResumeNext(<source>)`\r\n\r\nResolves #6554 \r\nResolves #6555", "NaN"], ["6565", "Fix JavaDocs of Single.doOnTerminate refer to onComplete notification", "Supasin Tatiyanupanwong", "SupasinTatiyanupanwong", "07/15/19, 08:53:22 AM", "As mentioned in JavaDocs of this class that Single does not have \"onComplete\" notification.\r\nThis newly introduced method refer to that notification, which looks to me it should be onSuccess instead.", "NaN"], ["6566", "3.x: fix wording in Single javadocs", "David Karnok", "akarnokd", "07/12/19, 06:14:02 AM", "Some wording fixes in `Single`, includes #6565.", "NaN"], ["6570", "3.x: Code verification fixes for javac's generated switchmap classes", "David Karnok", "akarnokd", "07/15/19, 09:30:00 AM", "Java 13+ compilers generate a synthetic class for switch statements over enumerables now, so `Observable.class` (and a few others) now receive an `Observable$1.class` companion, which trips the no anonymous inner classes heuristic verification. This PR changes the respective unit test to filter out such classes in a heuristic manner too.\r\n\r\nIn addition, the `findSource` method has been moved into `TestHelper` for clarity and changed so that any capitalization of the \"rxjava\" host directory is accepted.", "NaN"], ["6572", "3.x: fix switchMaps inconsistency swallowing errors when cancelled", "David Karnok", "akarnokd", "07/16/19, 12:22:05 PM", "The various `switchMap` operators did not report any accumulated exceptions to the global error handler when the sequence was cancelled (and thus the errors would never be delivered through the regular channels).", "NaN"], ["6574", "3.x: travis use openjdk8 as oraclejdk8 stopped working?", "David Karnok", "akarnokd", "07/16/19, 12:55:00 PM", "The last [merge failed](https://travis-ci.org/ReactiveX/RxJava/builds/559419743#L166) and looks like oraclejdk8 target is broken?", "NaN"], ["6577", "Fix issue #6576 - ObservableBlockingSubscribe compares BlockingObserver.TERMINATED with wrong object", "Niklas G\u00fcrtler", "Erlkoenig90", "07/19/19, 01:01:21 PM", "Fix #6576 , compare with `v` instead of `o`.", "NaN"], ["6579", "3.x: widen throws on the XOnSubscribe interfaces", "David Karnok", "akarnokd", "07/19/19, 02:26:52 PM", "This PR widens the `throws Exception` to `throws Throwable` on the callback interfaces of the `create` methods: `{Flowable|Observable|Maybe|Single|Completable}OnSubscribe`.", "NaN"], ["6581", "3.x: Add more time for GC in RefCountTest.publishNoLeak", "David Karnok", "akarnokd", "07/19/19, 02:10:12 PM", "Few of the recent merges failed the `publishNoLeak` test because the GC apparently didn't finish in time. This PR increases the GC time to 250 milliseconds in those tests.", "NaN"], ["6582", "3.x: Fix truncation bugs in replay() and ReplaySubject/Processor", "David Karnok", "akarnokd", "07/22/19, 08:52:25 PM", "This PR fixes several truncation bugs with the time and size-bound replay() operators and their hot class versions:\r\n\r\n- Unexpected removal of the last item just added due to becoming out-of-date at the lowest time resolution, creating a hole in the linked chain and hanging the consumer. [Related failure](https://travis-ci.org/akarnokd/RxJava3_BuildMatrix/jobs/562038485#L791).\r\n- Incorrect size accounting upon removing old entries leading to more items dropped than expected.\r\n\r\n*Sidenote: The operators and classes would benefit from a rewrite to improve on allocation and indirection. I wanted first to get the bugfixes and related tests done to have a known good baseline.*", "NaN"], ["6589", "Create a base test class and have all unit tests extend it", "Roman Wuattier", "RomanWuattier", "07/26/19, 08:33:45 AM", "This commit creates the `RxJavaTest` class defining a default\r\ntimeout to 5 minutes. An ignored test announce itself for each\r\nrunning class extending it preventing Travis CI from killing the\r\nbuild.\r\n\r\nHave `Completable` tests extend from `RxJavaTest`.\r\nHave `Disposable` tests extend from `RxJavaTest`.\r\nHave `Exception` tests extend from `RxJavaTest`\r\n\r\nRelated: #6583", "NaN"], ["6594", "Have unit tests extends `RxJavaTest` - 2", "Roman Wuattier", "RomanWuattier", "07/28/19, 12:57:48 PM", "This commit updates the unit tests of the following operators:\r\n* flowable\r\n* maybe\r\n* observable\r\n* disposable\r\n* observer\r\n* parallel\r\n* processors\r\n* schedulers\r\nand RxJava plugin.\r\n\r\nRelated: #6583", "NaN"], ["6595", "Have unit tests extends `RxJavaTest` - 3", "Roman Wuattier", "RomanWuattier", "07/29/19, 05:50:13 PM", "This commit updates the unit tests of the following operators:\r\n* single\r\n* subjects\r\n* subscribers\r\nAnd for internal operators:\r\n* internal.disposable\r\n* internal.fuctions\r\n* internal.observers\r\n* internal.queue\r\n* interanl.schedulers\r\n* internal.subscribers\r\n* internal.subscriptions\r\n* internal.operator.completable\r\n\r\nRelated: #6583", "NaN"], ["6598", "3.x: Fix mergeWith not cancelling the other source if the main errors", "David Karnok", "akarnokd", "07/30/19, 07:27:04 AM", "The `mergeWith` implementations' `onError` (called by the main source) cancelled the main source instead of cancelling the other source. This mistake affects all 2 x 3 overloads of the operator.\r\n\r\nFixes #6597", "NaN"], ["6599", "2.x: Fix mergeWith not canceling other when the main fails", "David Karnok", "akarnokd", "07/30/19, 08:54:55 AM", "Fix the same bug in 2.x; mergeWith cancelling the main source when the main source errors instead of the other source.\r\n\r\nFixes #6597 \r\nRelated #6598", "NaN"], ["6600", "3.x: Have `internal.operator.flowable` unit tests extends `RxJavaTest` - 4", "Roman Wuattier", "RomanWuattier", "07/30/19, 11:50:29 AM", "This commit updates the unit tests for `internal.operator.flowable`\r\n\r\nRelated: #6583\r", "NaN"], ["6601", "2.x: ObservableBlockingSubscribe compares with wrong object", "David Karnok", "akarnokd", "07/30/19, 09:20:18 AM", "It should compare the TERMINATED instance with the value received from the blocking queue.\r\n\r\nFixes: #6576 \r\nRelated: #6577", "NaN"], ["6602", "2.x: Fix truncation bugs in replay() and ReplaySubject/Processor", "David Karnok", "akarnokd", "07/30/19, 10:47:51 AM", "This PR fixes several truncation bugs with the time and size-bound replay() operators and their hot class versions:\r\n\r\n- Unexpected removal of the last item just added due to becoming out-of-date at the lowest time resolution, creating a hole in the linked chain and hanging the consumer. [Related failure](https://travis-ci.org/akarnokd/RxJava3_BuildMatrix/jobs/562038485#L791).\r\n- Incorrect size accounting upon removing old entries leading to more items dropped than expected.\r\n\r\nRelated: #6582", "NaN"], ["6604", "3.x: Have unit tests extends `RxJavaTest` - 5", "Roman Wuattier", "RomanWuattier", "07/31/19, 05:41:39 PM", "This commit updates the unit tests of the following operators:\r\n* internal.operators.maybe\r\n* internal.operator.mixed\r\n* internal.operator.single\r\n\r\nRelated: #6583", "NaN"], ["6607", "3.x: Have `internal.operator.observable` unit tests extends `RxJavaTest` - 6", "Roman Wuattier", "RomanWuattier", "08/03/19, 07:27:51 AM", "This commit updates the unit tests for `internal.operator.observable`\r\n\r\nRelated: #6583", "NaN"], ["6609", "3.x: Fix refCount not resetting when termination triggers cross-cancel", "David Karnok", "akarnokd", "08/03/19, 08:24:01 AM", "This PR fixes both `refCount` implementation to properly reset the source when the source terminates multiple consumers.\r\n\r\nIn the original, when the source terminated multiple sources, the first termination handler cleared the connection but since the `--subscriberCount` wasn't zero, the source was not reset. If this termination triggered a cancel on the second consumer, that path would not get the source reset either due to losing the connection object. Unfortunately, one can't just take the first termination handler and reset there immediately either because that could disrupt the termination of the rest of the consumers. It has to wait for the source to terminate all consumers or have the consumers cancel all.\r\n\r\nThis affects 2.x and will be backported in a separate PR.\r\n\r\nFixes #6608", "NaN"], ["6612", "3.x: Fix many operators swallowing undeliverable exceptions", "David Karnok", "akarnokd", "08/05/19, 03:25:26 PM", "Fix many operators to emit the collected exception in case of a cancel/dispose call to the plugin error handler (i.e., becoming undeliverable excptions).\r\n\r\nIn addition, the terminal event/error delivery has been unified in many other operators so that the terminal-indicator exception is never leaked.\r\n\r\nThere will be a separate PR about cleaning up the `addThrowable` usage cases (#6611).\r\n\r\nFixes: #6587", "NaN"], ["6616", "3.x: Fix switchMap incorrect sync-fusion & error management", "David Karnok", "akarnokd", "08/14/19, 09:40:11 AM", "This PR fixes the incorrect request call inside `switchMap` when working with sync-fused sources.\r\n\r\nFixes: #6615", "NaN"], ["6618", "2.x: Fix switchMap incorrect sync-fusion & error management", "David Karnok", "akarnokd", "08/14/19, 10:12:42 AM", "This PR fixes the incorrect request call inside `switchMap` when working with sync-fused sources.\r\n\r\nFixes: #6615", "NaN"], ["6620", "3.x: elementAt, first - constrain upstream requests ", "Dave Moten", "davidmoten", "08/16/19, 09:27:40 AM", "As discussed in #6569 this PR constrains upstream requests for the `elementAt` and `first` overloads. Other operators will be covered in other PRs.", "NaN"], ["6621", "3.x: Refactor to io.reactivex.rxjava3.**", "David Karnok", "akarnokd", "08/16/19, 12:51:18 PM", "This PR refactors the package structure to match the group ID: `io.reactivex.rxjava3`. In addition, the base classes and interfaces now live in `io.reactivex.rxjava3.core`.\r\n\r\nIn addition, the Reactive Streams dependency was bumped to 1.0.3-RC1 to verify the TCK changes.", "NaN"], ["6626", "3.x: Fix blockingIterable not unblocking when force-disposed", "David Karnok", "akarnokd", "08/21/19, 03:53:05 PM", "When the iterator was cast to `Disposable` and disposed, the subsequent `hasNext` would block indefinitely. That interface is not intended to be part of the public API and `Iterator` in general does not support any form of official cancellation (unlike Stream). This PR makes sure that if that dispose is called, it unblocks the iterator.\r\n\r\nA separate PR will be posted for 2.x.\r\n\r\nRelated #6625 ", "NaN"], ["6627", "2.x: Fix blockingIterable hang when force-disposed", "David Karnok", "akarnokd", "08/21/19, 02:25:39 PM", "When the iterator was cast to `Disposable` and disposed, the subsequent `hasNext` would block indefinitely. That interface is not intended to be part of the public API and `Iterator` in general does not support any form of official cancellation (unlike Stream). This PR makes sure that if that dispose is called, it unblocks the iterator.\r\n\r\nResolves #6625 ", "NaN"], ["6628", "3.x: better leak detection via GC/sleep loop", "David Karnok", "akarnokd", "08/21/19, 03:24:21 PM", "The `publishNoLeak` and `replayNoLeak` tests tend to fail because the GC/sleep time is not enough sometimes to cleanup memory. This PR adds a main test helper that loops at most a number of times and quits when the GC has apparently done its job.", "NaN"], ["6629", "2.x: Fix refCount() not resetting when cross-canceled", "David Karnok", "akarnokd", "08/22/19, 08:08:50 PM", "This PR fixes the issue with `refCount` not resetting the connection when the termination triggers cross-cancellation over it.\r\n\r\nFixes #6608\r\n\r\nThe fix is more involved than #6609 because how 2.x uses two `publish()` implementation internally due to bugfix #6505. The old/classic implementation does not fail #6608 but the newer implementation fails #6608. If the fix is applied unconditionally, the old/classic implementation fails an older unit test verifying an error allows reconnection. Therefore, the PR checks and applies the new code path only if `refCount` isn't talking to the classic publish implementation.\r\n\r\nAs a reminder #6609 for 3.x has a redesigned `Connectable` with a much more clearer reset semantics and thus the restructuring of the termination handling had no trouble passing the aforementioned error-allows-reconnect unit test.", "NaN"], ["6631", "3.x: Update Readme.md with the new package locations", "David Karnok", "akarnokd", "08/22/19, 08:10:21 PM", "Adjust the README.md with the new package locations.", "NaN"], ["6632", "3.x: Upgrade Gradle & dependency versions", "David Karnok", "akarnokd", "08/22/19, 10:05:04 PM", "This PR upgrades to:\r\n\r\n- Gradle 5.6\r\n- TestNG 7.0.0\r\n- Mockito 3.0.0\r\n- JMH 1.21\r\n- JMH plugin 0.5.0-rc-2 (required by Gradle 5.5+)\r\n- License 0.15.0\r\n- Jacoco 0.8.4\r\n- Guava 28\r\n\r\nIn addition, the `osgi` plugin has been deprecated in Gradle 5 and has been removed in Gradle 6, therefore a separate plugin called `bnd` is required to produce the necessary jar properties.\r\n(Also the MockitoJunitRunner has been moved to a new location, hence the package change.)\r\n\r\nThis Gradle version should support working on a Java 11 runtime when executing `gradlew build`.\r\n\r\nNote that this may require further \"live\" testing as the auto-release of snapshots as well as auto-release can't be properly tested offline. ", "NaN"], ["6633", "3.x: Upgrade to Reactive Streams 1.0.3", "David Karnok", "akarnokd", "08/23/19, 01:12:38 PM", "No changes since 1.0.3-RC1. Also updated the package name of the animal sniffer suppress annotation.", "NaN"], ["6635", "3.x: Remove vararg overloads for combineLatest in Observable + Flowable", "Niklas Baudy", "vanniktech", "08/28/19, 09:48:17 AM", "Started removing the vararg function from #6634", "NaN"], ["6637", "3.x: Avoid using System.getProperties() due to security restrictions", "David Karnok", "akarnokd", "08/28/19, 10:58:51 AM", "Change the code in the `SchedulerPoolFactory` to use `System.getProperty` directly. Also fix property names to `rx3.` as now both v2 and v3 could run together.\r\n\r\nFixes #6636", "NaN"], ["6638", "3.x: Rename zipIterable, remove zip(O(O)), adjust concatMapX arg order", "David Karnok", "akarnokd", "08/28/19, 11:19:50 AM", "- Rename `zipIterable` to `zip`\r\n- Remove `zip(ObservableSource<ObservableSource<T>>)` and `zip(Publisher<Publisher<T>>)`\r\n- Change the order of the `tillTheEnd` argument in `concatMapDelayError` and `concatMapEagerDelayError` to be consistent with other operators taking a `boolean` parameter before `prefetch`/`maxConcurrency`.\r\n\r\nRelated: #6610", "NaN"], ["6639", "3.x: Cleanup addThrowable, \"2.x\" and null-value error messages", "David Karnok", "akarnokd", "08/28/19, 02:07:44 PM", "This PR renames the internal `addThrowable` to `tryAddThrowable` and introduces the `tryAddThrowableOrReport` to perform the common reporting to the global error handler. Usage places have been re-evaluated and fixed if necessary.\r\n\r\nIn addition, `null` exceptions have been made more uniform.\r\n\r\nResolves #6611", "NaN"], ["6640", "3.x: Rename combineLatest methods that take an array to combineLatestArray", "Niklas Baudy", "vanniktech", "08/28/19, 03:18:06 PM", "Renames the methods as suggested", "NaN"], ["6642", "3.x: Fix groupBy not canceling upstream due to group abandonment", "David Karnok", "akarnokd", "08/29/19, 02:33:12 PM", "This PR fixes the issue when a group is not subscribed to, the upstream may never cancel due to seemingly open groups.\r\n\r\nThe fix is a tradeoff with group abandonment and possible excessive group re-creation so that elements are not lost in case the groups do get subscribed to a bit later. Therefore, the groups should be subscribed to immediately and synchronously:\r\n\r\n```java\r\nObservable.range(1, 1000)\r\n.groupBy(v -> v % 10)\r\n.flatMap(v -> {\r\n    System.out.println(\"New group: \" + v.getKey());\r\n    return v;\r\n})\r\n.subscribe();\r\n\r\nObservable.range(1, 1000)\r\n.groupBy(v -> v % 10)\r\n.flatMap(v -> {\r\n    System.out.println(\"New group: \" + v.getKey());\r\n    return v.observeOn(Schedulers.io()); //  <-------------------------------- OK\r\n})\r\n.blockingSubscribe();\r\n```\r\n\r\nConsequently, the following setups will result in constant group recreations:\r\n\r\n```java\r\nObservable.range(1, 1000)\r\n.groupBy(v -> v % 10)\r\n.observeOn(Schedulers.io()) // <------------------------------------- TROUBLE\r\n.flatMap(v -> {\r\n    System.out.println(\"New group: \" + v.getKey());\r\n    return v;\r\n})\r\n.blockingSubscribe();\r\n\r\nObservable.range(1, 1000)\r\n.groupBy(v -> v % 10)\r\n.flatMap(v -> {\r\n    System.out.println(\"New group: \" + v.getKey());\r\n    return v.subscribeOn(Schedulers.io()); // <----------------------- TROUBLE\r\n})\r\n.blockingSubscribe();\r\n```\r\n\r\nFor the `subscribeOn` \"trouble\", since groups were essentially unicast subjects/processors, `subscribeOn` had no practical use on them and instead `observeOn` should be used to move the observation of the group's items to the desired thread.\r\n\r\nResolves #6596", "NaN"], ["6648", "3.x: Fix takeLast(time) last events time window calculation.", "David Karnok", "akarnokd", "09/12/19, 10:47:28 AM", "The logic inside the `Observable.takeLast(time)` was not using a fixed timestamp to compare against but one that could change between calls, resulting in items wrongly skipped from the accumulated buffer. The PR makes this timestamp limit fixed outside the drain loop.\r\n\r\nThe `Flowable` variant did not have the issue but both received the unit test verifying the correct behavior.\r\n\r\nThe same fix for 2.x will be posted separately.\r\n\r\nFixes: #6647", "NaN"], ["6650", "3.x: constrain upstream requests from take, remove limit operator", "Dave Moten", "davidmoten", "09/13/19, 11:53:17 AM", "As per discussion in #6569, this PR constrains upstream requests from the `take` operator and removes the `limit` operator.\r\n\r\nI've also added a couple of unit tests for coverage of `elementAt` that I didn't include in #6620.", "NaN"], ["6652", "3.x: Fix size+time bound window not creating windows properly", "David Karnok", "akarnokd", "09/17/19, 07:21:18 AM", "There was a logic error in the size+time bound `window` operator for when to close a window if timers are not restarted when the size-bound is hit.\r\n\r\nDue to this bug, two tests were not receiving and thus accounting for empty windows that are happening when the size-bound is hit followed by the periodic time-bound hit.\r\n\r\n2.x will be fixed in a separate PR.\r\n\r\nFixes #6651", "NaN"], ["6653", "2.x: Fix takeLast(time) last events time window calculation.", "David Karnok", "akarnokd", "09/13/19, 03:50:09 PM", "The logic inside the `Observable.takeLast(time)` was not using a fixed timestamp to compare against but one that could change between calls, resulting in items wrongly skipped from the accumulated buffer. The PR makes this timestamp limit fixed outside the drain loop.\r\n\r\nThe `Flowable` variant did not have the issue but both received the unit test verifying the correct behavior.\r\n\r\nFixes: #6647", "NaN"], ["6657", "2.x: Fix size+time bound window not creating windows properly", "David Karnok", "akarnokd", "09/30/19, 10:43:10 AM", "There was a logic error in the size+time bound `window` operator for when to close a window if timers are not restarted when the size-bound is hit.\r\n\r\nDue to this bug, two tests were not receiving and thus accounting for empty windows that are happening when the size-bound is hit followed by the periodic time-bound hit.\r\n\r\nFixes #6651", "NaN"], ["6662", "3.x: Multiple empty line detection to ignore whitespace", "David Karnok", "akarnokd", "10/04/19, 11:11:57 AM", "Update the empty newline detection to ignore whitespace in otherwise empty subsequent lines.", "NaN"], ["6664", "3.x: Fix groupBy group emission in some cases", "David Karnok", "akarnokd", "10/05/19, 04:12:46 PM", "This PR fixes two issues:\r\n\r\n- when the `Observable.groupBy` operator would abandon a newly created group before the group's only item was emitted, causing dataloss.\r\n- when the `groupBy`'s value selector failed for a new group, thus the new group would never be emitted and report the failure.\r\n\r\nIt should fix the first test failure of #6663 but may not be the cause for the second.", "NaN"], ["6665", "3.x: Add Reactive Programming on Android with RxJava to Additional Docs", "Chris Arriola", "arriolac", "10/04/19, 03:45:24 PM", "* Adding \"Reactive Programming on Android with RxJava\", a free e-book, to additional reading.", "NaN"], ["6668", "3.x: Add missing marble diagams to Single", "David Karnok", "akarnokd", "10/11/19, 06:44:59 AM", "Add (hopefully) all remaining missing marble diagrams to `Single`.\r\n\r\nResolves #5788\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatArrayEager.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.mergeDelayError.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.mergeDelayError.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.mergeDelayError.2.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.mergeDelayError.3.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.mergeDelayError.4.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.unsafeCreate.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.using.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.using.b.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.wrap.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.cache.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.cast.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.delaySubscription.t.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.delaySubscription.ts.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.doOnEvent.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.blockingGet.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.lift.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.contains.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.contains.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.onErrorResumeWith.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.onTerminateDetach.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.retry.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.retry.f2.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.retry.n.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.retry.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.retry.nf.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.retryWhen.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.subscribe.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.subscribe.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.subscribe.cc.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.subscribe.c2.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.subscribeWith.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.takeUntil.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.takeUntil.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.takeUntil.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.b.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeout.sb.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.unsubscribeOn.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.test.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.test.b.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.delaySubscription.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.delaySubscription.o.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.delaySubscription.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.delaySubscription.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.dematerialize.png)\r\n\r\n\r", "NaN"], ["6674", "3.x: Fix window(time) possible interrupts while terminating", "David Karnok", "akarnokd", "10/17/19, 04:23:41 PM", "Fix the case in `window(time)` variants where the timer thread is busy with window emission and the upstream terminates on some other thread, the window emission is interrupted.\r\n\r\n~~So instead of disposing the timer/worker right after the upstream termination, a `DISPOSE` message is queued up. Thus any ongoing drain loop from the timer thread can cleanup gracefully.~~\r\n\r\nAfter some additional considerations, there is no need for `DISPOSE`. The drain loop will take care of disposing the timer and the main downstream can simply be terminated.\r\n\r\nThe 2.x fix will be in a separate PR shortly.\r\n\r\nFixes #6672", "NaN"], ["6675", "Add Export-Package declarations for OSGi headers", "Mark Raynsford", "io7m", "10/17/19, 01:26:19 PM", "This adds the necessary declarations to the Bnd plugin to export all\r\nnon-internal packages for use in an OSGi environment.\r\n\r\nAffects: https://github.com/ReactiveX/RxJava/issues/6671", "NaN"], ["6676", "3.x: Fix concurrent clear() calls when fused chains are canceled", "David Karnok", "akarnokd", "10/17/19, 01:44:38 PM", "When a fuseable source backed by an SpscLinkedArrayQueue is cancelled and cleared concurrently (i.e., one thread clears while the other cancels the chain), the `clear()` method could run concurrently and either crash with NPE or end up in an infinite loop due to corrupted queue state.\r\n\r\nThis PR fixes two kinds of mistakes leading to this scenario:\r\n\r\n- Calling `clear()` from `cancel`/`dispose` when the output is fused.\r\n- Calling `clear()` from a fused drain loop when cancellation is detected.\r\n\r\nWhen fused, similar to `poll()`, calling `clear()` is the responsibility of the consumer and the producer side is not allowed to call them.\r\n\r\nThe bug affected the following operators:\r\n- `FlowableOnBackpressureBuffer`\r\n- `FlowableGroupBy`\r\n- `UnicastProcessor`\r\n- `UnicastSubject`\r\n\r\nFixes #6673", "NaN"], ["6677", "2.x: Fix concurrent clear() calls when fused chains are canceled", "David Karnok", "akarnokd", "10/17/19, 02:38:47 PM", "## Backport of #6676\r\n\r\nWhen a fuseable source backed by an SpscLinkedArrayQueue is cancelled and cleared concurrently (i.e., one thread clears while the other cancels the chain), the `clear()` method could run concurrently and either crash with NPE or end up in an infinite loop due to corrupted queue state.\r\n\r\nThis PR fixes two kinds of mistakes leading to this scenario:\r\n\r\n- Calling `clear()` from `cancel`/`dispose` when the output is fused.\r\n- Calling `clear()` from a fused drain loop when cancellation is detected.\r\n\r\nWhen fused, similar to `poll()`, calling `clear()` is the responsibility of the consumer and the producer side is not allowed to call them.\r\n\r\nThe bug affected the following operators:\r\n- `FlowableOnBackpressureBuffer`\r\n- `FlowableGroupBy`\r\n- `UnicastProcessor`\r\n- `UnicastSubject`\r\n\r\nFixes #6673", "NaN"], ["6681", "Backport marble diagrams for Single from 3.x", "Thiyagarajan", "thiyagu-7", "10/18/19, 06:17:19 AM", "This PR is to backport the marble images of Single class from 3.x. The method `onErrorResumeWith` does not exist in 2.x and hence I have left that out.\r\n\r\nCloses #6679", "NaN"], ["6682", "3.x: Fix type inference problem when compiling with newer JDKs", "David Karnok", "akarnokd", "10/18/19, 08:11:45 AM", "Code in the `FlowableGroupByTest` [didn't compile on newer JDKs](https://travis-ci.org/akarnokd/RxJava3_BuildMatrix/jobs/599488054#L546) because of type inference changes between Java 6 and them. In Java 6, this \r\n\r\n    Flowable<Integer> source = ...\r\n    Flowable<X> result = source.groupBy(Functions.identity());\r\n\r\ncomes out as `X == GroupedFlowable<Object, Integer>`. However, newer JDKs will propagate type arguments thus:\r\n\r\n    Flowable<Integer> source = ...\r\n    Flowable<Y> result = source.groupBy(Functions.identity());\r\n\r\n`Y == GroupedFlowable<Integer, Integer>` and mismatching with the rest of the types.\r\n\r\nI chose an explicit `Integer` argument for clarity.\r\n\r\n        ", "NaN"], ["6684", "2.x: Fix window(time) possible interrupts while terminating", "David Karnok", "akarnokd", "10/29/19, 08:38:45 AM", "Fix the case in `window(time)` variants where the timer thread is busy with window emission and the upstream terminates on some other thread, the window emission is interrupted.\r\n\r\nThe drain loop will take care of disposing the timer and the main downstream can simply be terminated.\r\n\r\nRelated #6674 \r\nFixes #6672", "NaN"], ["6685", "Update Backpressure.md", "Seungmin", "maryangmin", "11/01/19, 09:40:21 PM", "Fixes Backpressure.md on https://github.com/ReactiveX/RxJava/issues/6132 \r\nFix Images on Backpressure.md crashed on wrong address. Put full address of images.\r\n\r\n---\r\n\r\nThank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [v] Please give a description about what and why you are contributing, even if it's trivial.\r\n\r\n  - [v] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n\r\n  - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r", "NaN"], ["6699", "Readme: Cherry-pick fixes from #6683, add ProGuard workaround entry", "David Karnok", "akarnokd", "11/04/19, 09:31:24 AM", "- Pick the accepted changes from #6683.\r\n- Add entry about ProGuard and Reactive Streams JAR warning issue.", "NaN"], ["6700", "3.x: Update javadoc for observeOn to mention its eagerness", "Josemy Duarte", "JosemyDuarte", "11/04/19, 09:31:07 AM", "Update javadoc to reflect the eagerness property of `observeOn` in `Flowable` and `Observable` classes.\r\n\r\nResolves #6697 ", "NaN"], ["6704", "2.x: Add ProGuard rule to avoid j.u.c.Flow warnings due to RS 1.0.3", "David Karnok", "akarnokd", "11/07/19, 09:13:04 PM", "Add rule to ignore `java.util.concurrent.Flow` when using Android's R8 to prevent warnings about the `FlowAdapter.class` contained within the Reactive Streams JAR file.", "NaN"], ["6705", "2.x: ProGuard R8 dont warn Flow* classes", "David Karnok", "akarnokd", "11/08/19, 06:27:53 AM", "#6704 didn't work, probably because the filter has to match a filename `java.util.concurrent.Flow$Publisher`, not some parent class name. \r\n\r\nHaving `-dontwarn java.util.concurrent.Flow*` did work in a test project's proguard file locally.\r\n\r", "NaN"], ["6706", "3.x: Embed R8 ProGuard rules to ignore Flow* interfaces in RS 1.0.3", "David Karnok", "akarnokd", "11/08/19, 09:18:13 AM", "Add rule to ignore `java.util.concurrent.Flow*` when using Android's R8 to prevent warnings about the FlowAdapter.class contained within the Reactive Streams JAR file.", "NaN"], ["6708", "3.x: Fix concurrent clear in observeOn while output-fused", "David Karnok", "akarnokd", "11/12/19, 09:19:13 AM", "There was another cancel-clear race leading to NPE or infinite loop inside both `observeOn` implementations.\r\n\r\nRelated: #6676", "NaN"], ["6709", "3.x: cleanup of some Javadoc parts", "David Karnok", "akarnokd", "11/12/19, 11:04:23 AM", "Enabled some Javadoc validation and found a few mistakes. As far as I can tell, there is no `testUnhandledErrorIsDeliveredToThreadHandler` method or similar to reference there.", "NaN"], ["6710", "2.x: Fix concurrent clear in observeOn while output-fused", "David Karnok", "akarnokd", "11/12/19, 11:05:46 AM", "Backport of #6708\r\n\r\n------\r\n\r\nThere was another cancel-clear race leading to NPE or infinite loop inside both observeOn implementations.\r\n\r\nRelated: #6676", "NaN"], ["6711", "3.x: Upgrade to Gradle 5.6.4", "David Karnok", "akarnokd", "11/12/19, 02:56:53 PM", "There seem to be a couple of regressions with Gradle 5.6 and 5.6.1 that broke Eclipse for me today when I switched between 2.x (uses 4.3.1) and 3.x branches (5.6) that I couldn't resolve by clean import either. All my 5.6.2 and 6.0 work fine so there could be something in 5.6 badly interacting with the Buildship Eclipse plugin handling the Gradle integration.\r\n\r\nhttps://github.com/gradle/gradle/releases/tag/v5.6.2", "NaN"], ["6714", "3.x: Fix MulticastProcessor not requesting more after limit is reached", "David Karnok", "akarnokd", "11/14/19, 11:06:35 PM", "After reaching the prefetch limit, the updated `consumed` counter was not written back so the processor stopped requesting more (consumed > limit).\r\n\r\nAffects 2.x to. A separate PR will be posted for it.\r\n\r\nResolves #6713", "NaN"], ["6715", "2.x: Fix MulticastProcessor not requesting more after limit is reached", "David Karnok", "akarnokd", "11/14/19, 11:06:57 PM", "After reaching the prefetch limit, the updated `consumed` counter was not written back so the processor stopped requesting more (consumed > limit).\r\n\r\nResolves #6713", "NaN"], ["6719", " 3.x: Fix parallel() on grouped flowable not replenishing properly", "David Karnok", "akarnokd", "11/20/19, 01:56:27 PM", "Fix a case when the `GroupedFlowable` is consumed by a `parallel()` in fusion mode causing the source to stop replenishing items from the upstream, hanging the whole sequence.\r\n\r\n`parallel()` was slightly different from the usual queue consumers because it checks for `isEmpty` before trying to `pull` for an item. This was necessary because the rails may not be ready for more and an eager `pull` to check for emptyness would lose that item. The replenishing was done in `GroupedFlowable.pull` but a call to `GroupedFlowable.isEmpty` would not replenish.\r\n\r\nThe fix is to have `isEmpty` replenish similar to when `poll` detects emptyness and replenishes.\r\n\r\nReported in https://github.com/reactor/reactor-core/issues/1959", "NaN"], ["6720", "2.x: Fix parallel() on grouped flowable not replenishing properly", "David Karnok", "akarnokd", "11/21/19, 08:55:23 AM", "## Backport of #6719 \r\n\r\nFix a case when the GroupedFlowable is consumed by a parallel() in fusion mode causing the source to stop replenishing items from the upstream, hanging the whole sequence.\r\n\r\nparallel() was slightly different from the usual queue consumers because it checks for isEmpty before trying to pull for an item. This was necessary because the rails may not be ready for more and an eager pull to check for emptyness would lose that item. The replenishing was done in GroupedFlowable.pull but a call to GroupedFlowable.isEmpty would not replenish.\r\n\r\nThe fix is to have isEmpty replenish similar to when poll detects emptyness and replenishes.\r\n\r\nReported in reactor/reactor-core#1959", "NaN"], ["6722", "2.x: Update javadoc for observeOn to mention its eagerness", "David Karnok", "akarnokd", "11/21/19, 08:55:39 AM", "## Backport of #6700\r\n\r\nUpdate javadoc to reflect the eagerness property of observeOn in Flowable and Observable classes.\r\n\r\nRelated #6697", "NaN"], ["6723", "3.x: observeOn and Schedulers.from eagerness javadoc updates", "David Karnok", "akarnokd", "11/21/19, 08:45:04 AM", "- Add missing explanation to `observeOn(Scheduler)`\r\n- Remove `<p>`s that create javadoc empty-tag warnings.\r\n- Update `@see` to point to `delay`s with `delayError` parameter.\r\n- Explain that `Schedulers.from` is eager too.\r\n\r\nRelated #6700", "NaN"], ["6729", "3.x: Fix self-see references, some comments", "David Karnok", "akarnokd", "11/28/19, 09:31:02 AM", "- Some `@see` should point to the other party (plain <-> `DelayError`).\r\n- Add a few `@see` to the nearby operators.\r\n- Comments no longer apply in `BlockingXMostRecent` source code.\r\n- Add a comment from #6728 to `ActionDisposable`.\r\n\r\nReplaces #6728", "NaN"], ["6730", "3.x: Add Maybe marble diagrams (14 cases)", "David Karnok", "akarnokd", "11/29/19, 11:23:10 AM", "Related #5806\r\n----\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.zip.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.zip.n.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.zipArray.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.zipWith.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.contains.o.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.unsubscribeOn.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.onTerminateDetach.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.cast.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.lift.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.doOnEvent.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.delaySubscription.t.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.delaySubscription.ts.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.delaySubscription.p.png)\r", "NaN"], ["6732", "3.x: Update Single.zip marble diagrams (4 cases)", "David Karnok", "akarnokd", "11/28/19, 02:47:55 PM", "Related #5788\r\n-----\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zip.n.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zipArray.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.zipWith.png)", "NaN"], ["6733", "Bump jmh-gradle-plugin from 0.5.0-rc-2 to 0.5.0", null, "dependabot-preview[bot]", "12/02/19, 11:30:17 AM", "Bumps jmh-gradle-plugin from 0.5.0-rc-2 to 0.5.0.\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=me.champeau.gradle:jmh-gradle-plugin&package-manager=gradle&previous-version=0.5.0-rc-2&new-version=0.5.0)](https://dependabot.com/compatibility-score.html?dependency-name=me.champeau.gradle:jmh-gradle-plugin&package-manager=gradle&previous-version=0.5.0-rc-2&new-version=0.5.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\n\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6734", "Bump guava from 28.0-jre to 28.1-jre", null, "dependabot-preview[bot]", "12/02/19, 11:51:58 AM", "Bumps [guava](https://github.com/google/guava) from 28.0-jre to 28.1-jre.\n<details>\n<summary>Release notes</summary>\n\n*Sourced from [guava's releases](https://github.com/google/guava/releases).*\n\n> ## 28.1\n> ### Maven\r\n> \r\n> ```xml\r\n> <dependency>\r\n>   <groupId>com.google.guava</groupId>\r\n>   <artifactId>guava</artifactId>\r\n>   <version>28.1-jre</version>\r\n>   <!-- or, for Android: -->\r\n>   <version>28.1-android</version>\r\n> </dependency>\r\n> ```\r\n> \r\n> ### Javadoc\r\n> \r\n> - [28.1-jre](http://google.github.io/guava/releases/28.1-jre/api/docs/)\r\n> - [28.1-android](http://google.github.io/guava/releases/28.1-android/api/docs/)\r\n> \r\n> ### JDiff\r\n> \r\n> - [28.1-jre vs. 28.0-jre](http://google.github.io/guava/releases/28.1-jre/api/diffs/)\r\n> - [28.1-android vs. 28.0-android](http://google.github.io/guava/releases/28.1-android/api/diffs/)\r\n> - [28.1-android vs. 28.1-jre](http://google.github.io/guava/releases/28.1-android/api/androiddiffs/)\r\n> \r\n> ### Changelog\r\n> \r\n> - `collect`: Added `RangeMap.merge`, analogous to `Map.merge`. (687252d35)\r\n> - `collect`: Fixed a bug in `ImmutableSet.Builder` that could lead to infinite loops when building multiple sets from the same builder. (0007cb257)\r\n> - `io`: Fixed an issue where the `InputStream` returned by `BaseEncoding.decodingStream(Reader)` could fail to throw `DecodingException` while decoding an invalid string. (ddd4a49fb)\r\n> - `net`: Added `MediaType` for \"image/heif\" and \"image/jp2\" (508696a4c)\r\n> - `net`: Added `Upgrade-Insecure-Requests` header to `HttpHeaders`. (6a8b716af)\r\n> - `concurrent`: Fixed potential memory leak in `Futures.whenAllSucceed/whenAllComplete` (494834bd4)\n</details>\n<details>\n<summary>Commits</summary>\n\n- See full diff in [compare view](https://github.com/google/guava/commits)\n</details>\n<br />\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=28.0-jre&new-version=28.1-jre)](https://dependabot.com/compatibility-score.html?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=28.0-jre&new-version=28.1-jre)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\n\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6735", "Bump gradle-bintray-plugin from 1.7.3 to 1.8.4", null, "dependabot-preview[bot]", "12/02/19, 01:14:39 PM", "Bumps gradle-bintray-plugin from 1.7.3 to 1.8.4.\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.jfrog.bintray.gradle:gradle-bintray-plugin&package-manager=gradle&previous-version=1.7.3&new-version=1.8.4)](https://dependabot.com/compatibility-score.html?dependency-name=com.jfrog.bintray.gradle:gradle-bintray-plugin&package-manager=gradle&previous-version=1.7.3&new-version=1.8.4)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\n\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6736", "Bump build-info-extractor-gradle from 4.5.2 to 4.11.0", null, "dependabot-preview[bot]", "12/02/19, 12:55:22 PM", "Bumps build-info-extractor-gradle from 4.5.2 to 4.11.0.\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.5.2&new-version=4.11.0)](https://dependabot.com/compatibility-score.html?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.5.2&new-version=4.11.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\n\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6737", "Bump mockito-core from 3.0.0 to 3.2.0", null, "dependabot-preview[bot]", "12/02/19, 12:35:14 PM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.0.0 to 3.2.0.\n<details>\n<summary>Release notes</summary>\n\n*Sourced from [mockito-core's releases](https://github.com/mockito/mockito/releases).*\n\n> ## v3.2.0\n> <sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n> \n> #### 3.2.0\n>  - 2019-11-29 - [1 commit](https://github.com/mockito/mockito/compare/v3.1.13...v3.2.0) by [Tim van der Lippe](https://github.com/TimvdLippe) - published to [![Bintray](https://img.shields.io/badge/Bintray-3.2.0-green.svg)](https://bintray.com/mockito/maven/mockito/3.2.0)\n>  - No pull requests referenced in commit messages.\n> \n> ## v3.1.13\n> <sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n> \n> #### 3.1.13\n>  - 2019-11-26 - [1 commit](https://github.com/mockito/mockito/compare/v3.1.12...v3.1.13) by [Dmitry Timofeev](https://github.com/dmitry-timofeev) - published to [![Bintray](https://img.shields.io/badge/Bintray-3.1.13-green.svg)](https://bintray.com/mockito/maven/mockito-development/3.1.13)\n>  - Upgrade byte buddy to 1.10.3 [([#1828](https://github-redirect.dependabot.com/mockito/mockito/issues/1828))](https://github-redirect.dependabot.com/mockito/mockito/pull/1828)\n> \n> ## v3.1.12\n> <sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n> \n> #### 3.1.12\n>  - 2019-11-20 - [1 commit](https://github.com/mockito/mockito/compare/v3.1.11...v3.1.12) by [Tim van der Lippe](https://github.com/TimvdLippe) - published to [![Bintray](https://img.shields.io/badge/Bintray-3.1.12-green.svg)](https://bintray.com/mockito/maven/mockito-development/3.1.12)\n>  - Deprecate MockitoHamcrest [([#1819](https://github-redirect.dependabot.com/mockito/mockito/issues/1819))](https://github-redirect.dependabot.com/mockito/mockito/pull/1819)\n> \n> ## v3.1.11\n> <sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n> \n> #### 3.1.11\n>  - 2019-11-18 - [1 commit](https://github.com/mockito/mockito/compare/v3.1.10...v3.1.11) by [Tim van der Lippe](https://github.com/TimvdLippe) - published to [![Bintray](https://img.shields.io/badge/Bintray-3.1.11-green.svg)](https://bintray.com/mockito/maven/mockito-development/3.1.11)\n>  - Deprecate MockitoHamcrest [([#1819](https://github-redirect.dependabot.com/mockito/mockito/issues/1819))](https://github-redirect.dependabot.com/mockito/mockito/pull/1819)\n> \n> ## v3.1.10\n> <sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n> \n> #### 3.1.10\n>  - 2019-11-13 - [2 commits](https://github.com/mockito/mockito/compare/v3.1.9...v3.1.10) by [Brice Dutheil](https://github.com/bric3) (1), [Ser| Kwiatkowski](https://github.com/scadgek) (1) - published to [![Bintray](https://img.shields.io/badge/Bintray-3.1.10-green.svg)](https://bintray.com/mockito/maven/mockito-development/3.1.10)\n>  - fix a word mistake [([#1823](https://github-redirect.dependabot.com/mockito/mockito/issues/1823))](https://github-redirect.dependabot.com/mockito/mockito/pull/1823)\n> \n> ## v3.1.9\n> <sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n> \n> #### 3.1.9\n>  - 2019-11-10 - [1 commit](https://github.com/mockito/mockito/compare/v3.1.8...v3.1.9) by [Marc Philipp](https://github.com/marcphilipp) - published to [![Bintray](https://img.shields.io/badge/Bintray-3.1.9-green.svg)](https://bintray.com/mockito/maven/mockito-development/3.1.9)\n>  - Guard against multiple evaluations of before statement [([#1821](https://github-redirect.dependabot.com/mockito/mockito/issues/1821))](https://github-redirect.dependabot.com/mockito/mockito/pull/1821)\n>  - 'MismatchReportingTestListener' has already been added and not removed using MockitoJUnitRunner [([#1767](https://github-redirect.dependabot.com/mockito/mockito/issues/1767))](https://github-redirect.dependabot.com/mockito/mockito/issues/1767)\n>  - Report initialization failures per test method [([#1672](https://github-redirect.dependabot.com/mockito/mockito/issues/1672))](https://github-redirect.dependabot.com/mockito/mockito/pull/1672)\n> \n> ## v3.1.8\n> <sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n> \n> #### 3.1.8\n>  - 2019-11-07 - [1 commit](https://github.com/mockito/mockito/compare/v3.1.7...v3.1.8) by [Tim van der Lippe](https://github.com/TimvdLippe) - published to [![Bintray](https://img.shields.io/badge/Bintray-3.1.8-green.svg)](https://bintray.com/mockito/maven/mockito-development/3.1.8)\n>  - Indent with spaces using spotless [([#1820](https://github-redirect.dependabot.com/mockito/mockito/issues/1820))](https://github-redirect.dependabot.com/mockito/mockito/pull/1820)\n></tr></table> ... (truncated)\n</details>\n<details>\n<summary>Commits</summary>\n\n- [`186a966`](https://github.com/mockito/mockito/commit/186a966054aa933b5ea9463ae908aa963107ffa7) 3.2.0 release (previous 3.1.13) + release notes updated by CI build 4306\n- [`d7c5ac4`](https://github.com/mockito/mockito/commit/d7c5ac446f156ba6fa913e041441ba4f566f3749) Publish Mockito 3.2.0 to Maven Central\n- [`dc6eadc`](https://github.com/mockito/mockito/commit/dc6eadc079a3fce66354b6cdf17b839229dc4246) 3.1.13 release (previous 3.1.12) + release notes updated by CI build 4298\n- [`3dd936c`](https://github.com/mockito/mockito/commit/3dd936c7834a396f3676c2d07772e43b11578b87) Upgrade byte buddy to 1.10.3 ([#1828](https://github-redirect.dependabot.com/mockito/mockito/issues/1828))\n- [`d6cec39`](https://github.com/mockito/mockito/commit/d6cec3963eb37db6eb025c490136e277b75cc269) 3.1.12 release (previous 3.1.11) + release notes updated by CI build 4295\n- [`ad2f352`](https://github.com/mockito/mockito/commit/ad2f3526a347f37dd00c53ee664c5cd9f3738814) Revert \"Deprecate MockitoHamcrest ([#1819](https://github-redirect.dependabot.com/mockito/mockito/issues/1819))\"\n- [`b89b4ec`](https://github.com/mockito/mockito/commit/b89b4ec9d51802b639833b9a1b5bf614347ea3b6) 3.1.11 release (previous 3.1.10) + release notes updated by CI build 4293\n- [`d4544a8`](https://github.com/mockito/mockito/commit/d4544a82695324d8efb6c949e8db0a62fbd62636) Deprecate MockitoHamcrest ([#1819](https://github-redirect.dependabot.com/mockito/mockito/issues/1819))\n- [`c5f097f`](https://github.com/mockito/mockito/commit/c5f097f49eb40b09b2e25d5c507eb9109b359e6d) 3.1.10 release (previous 3.1.9) + release notes updated by CI build 4291\n- [`5fc2b84`](https://github.com/mockito/mockito/commit/5fc2b844e20109bc2b17be83d2783f5e416e94e5) Merge pull request [#1823](https://github-redirect.dependabot.com/mockito/mockito/issues/1823) from scadgek/patch-1\n- Additional commits viewable in [compare view](https://github.com/mockito/mockito/compare/v3.0.0...v3.2.0)\n</details>\n<br />\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.0.0&new-version=3.2.0)](https://dependabot.com/compatibility-score.html?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.0.0&new-version=3.2.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 5 PRs for your first few update runs. Once an update run creates fewer than 5 PRs we'll remove that limit.\n\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6738", "Bump biz.aQute.bnd.gradle from 4.2.0 to 4.3.1", null, "dependabot-preview[bot]", "12/02/19, 12:15:55 PM", "Bumps biz.aQute.bnd.gradle from 4.2.0 to 4.3.1.\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=4.2.0&new-version=4.3.1)](https://dependabot.com/compatibility-score.html?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=4.2.0&new-version=4.3.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n**Note:** This repo was added to Dependabot recently, so you'll receive a maximum of 20 PRs for your first few update runs. Once an update run creates fewer than 20 PRs we'll remove that limit.\n\nYou can always request more updates by clicking `Bump now` in your [Dependabot dashboard](https://app.dependabot.com).\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6739", "3.x: Mockito fix deprecated API use after bump to 3.2.0", "David Karnok", "akarnokd", "12/03/19, 12:25:38 PM", "Use the suggested `verifyNoInteractions` instead of `verifyZeroInteractions`.", "NaN"], ["6740", "3.x: Change Flowable.groupBy to signal MBE instead of possibly hanging", "David Karnok", "akarnokd", "12/06/19, 07:59:15 AM", "This PR changes the backpressure behavior of `Flowable.groupBy` to signal `MissingBackpressureException` instead of silently hanging if the produced groups are not ready to be accepted by the downstream. \r\n\r\nThis can happen if one `flatMap`s a `groupBy` but there are more groups produced than the concurrency level of `flatMap`. Since replenishment is tied to item consumption from the groups, not consuming them can result in none of the groups receiving any further items and the whole operator hangs.\r\n\r\nThe following changes have been applied:\r\n\r\n- Removed the queue from the main operator since it will now try to emit directly and not buffer groups.\r\n- The main `Flowable`, lacking a queue, no longer supports operator fusion. Tests checking this property have been removed as well.\r\n- When a group is drained, consumed items are replenished in batch if possible. Detecting a cancellation will also trigger a replenishment.\r\n- When a group is pulled (fusion mode), now all `pull`, `isEmpty` and `clear` will trigger replenishment so that other groups can make progress too.\r\n- Unit tests have been modified to have large enough bufferSize/prefetch amounts to allow them to pass.\r\n\r\nFixes #6641", "NaN"], ["6741", "3.x: Upgrade to Gradle 6.0.1", "David Karnok", "akarnokd", "12/03/19, 01:44:56 PM", "Upgrade to **Gradle 6.0.1** (supports building with JDK 13).\r\n\r\n```\r\n./gradlew wrapper --gradle-version=6.0.1\r\n```\r\n\r\n(Looks like there was no change to `gradle-wrapper.jar`.)", "NaN"], ["6744", "3.x: Add fair mode overload to Schedulers.from(Executor)", "David Karnok", "akarnokd", "12/03/19, 04:48:15 PM", "The default `Schedulers.from` implementation uses an eager approach to execute tasks on the underlying `Executor` which can lead to excessive thread occupation on its own, even if operators use buffering/prefetch of 1.\r\n\r\nThis PR introduces a new overload with a fairness option so that tasks are submitted to the `Executor` in a non-overlapping and FIFO manner one by one.\r\n\r\nIn addition, the scheduler retention tests have been cleaned up and reworked to not wait unnecessarily long for the GC to finish.\r\n\r\nRelated: #6696, #6697", "NaN"], ["6745", "3.x: Make DisposableContainer public API", "David Karnok", "akarnokd", "12/03/19, 04:20:46 PM", "Make the internal interface `DisposableContainer` public as it can be one safely.\r\n\r\n(I've seen some 3rd party usage in custom containers, this will make them now legit on 3.x.)\r\n\r\n**Edit**\r\nAlso [should resolve](https://travis-ci.org/ReactiveX/RxJava/builds/620175320#L219) the OSGi private reference warning.\r\n\r\nResolves #6742", "NaN"], ["6746", "Javadoc cleanup 1203", "Lugduni Desrosiers", "ddunig2", "12/06/19, 07:58:13 AM", "This PR is simply a backport of #6729 to the RxJava 2.x branch.\r", "NaN"], ["6748", "3.x: Change how the cause of CompositeException is generated", "David Karnok", "akarnokd", "12/07/19, 09:36:21 PM", "This PR changes how `CompositeException.getCause` creates a cause exception on demand. In 1.x and 2.x, the code tried to link up the various inner exceptions via their `initCause`, which was in on itself fishy as well as could lead to excessive memory usage.\r\n\r\nInstead, the new code will present the inner exceptions as part of a formatted message, which in theory, should be still picked up by IDE exception listings and allow navigation:\r\n\r\n```\r\nMultiple exceptions (2)\r\n|-- io.reactivex.rxjava3.exceptions.TestException: ex3\r\n    at io.reactivex.rxjava3.exceptions.CompositeExceptionTest.nestedMultilineMessage(CompositeExceptionTest.java:341)\r\n|-- io.reactivex.rxjava3.exceptions.TestException: ex4\r\n    at io.reactivex.rxjava3.exceptions.CompositeExceptionTest.nestedMultilineMessage(CompositeExceptionTest.java:342)\r\n  |-- io.reactivex.rxjava3.exceptions.CompositeException: 2 exceptions occurred. \r\n      at io.reactivex.rxjava3.exceptions.CompositeExceptionTest.nestedMultilineMessage(CompositeExceptionTest.java:337)\r\n    |-- io.reactivex.rxjava3.exceptions.CompositeException.ExceptionOverview: \r\n        Multiple exceptions (2)\r\n        |-- io.reactivex.rxjava3.exceptions.TestException: ex1\r\n            at io.reactivex.rxjava3.exceptions.CompositeExceptionTest.nestedMultilineMessage(CompositeExceptionTest.java:335)\r\n        |-- io.reactivex.rxjava3.exceptions.TestException: ex2\r\n            at io.reactivex.rxjava3.exceptions.CompositeExceptionTest.nestedMultilineMessage(CompositeExceptionTest.java:336)\r\n```\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/70315342-a9308600-1819-11ea-81d2-b56694dbd9e8.png)\r\n\r\nThere are a few formatting conveniences:\r\n- If there is only one inner exception, the `CompositeException`'s cause will be simply that exception. This can happen when the very same exception is aggregated into the composite and get deduplicated.\r\n- If an inner exception's message is multi-lined, the message and cause traces should be indented properly.\r\n- Reoccurring causes are not expanded over and over:\r\n\r\n```\r\nMultiple exceptions (2)\r\n|-- io.reactivex.rxjava3.exceptions.TestException: ex1\r\n    at io.reactivex.rxjava3.exceptions.CompositeExceptionTest.reoccurringException(CompositeExceptionTest.java:316)\r\n  |-- io.reactivex.rxjava3.exceptions.TestException: ex0\r\n      at io.reactivex.rxjava3.exceptions.CompositeExceptionTest.reoccurringException(CompositeExceptionTest.java:315)\r\n|-- io.reactivex.rxjava3.exceptions.TestException: ex2\r\n    at io.reactivex.rxjava3.exceptions.CompositeExceptionTest.reoccurringException(CompositeExceptionTest.java:319)\r\n  |-- io.reactivex.rxjava3.exceptions.TestException: ex1\r\n      at io.reactivex.rxjava3.exceptions.CompositeExceptionTest.reoccurringException(CompositeExceptionTest.java:316)\r\n      |-- (cause not expanded again) io.reactivex.rxjava3.exceptions.TestException: ex0\r\n```\r\n\r\nCurrently, only the first line of the stacktraces are shown because it can get quite long (and thus memory consuming) to list them all. Maybe a system parameter can be introduced to control the verbosity.\r\n\r\nFixes #6747", "NaN"], ["6750", "3.x: Update observeOn docs with links and +backpressure explanation", "David Karnok", "akarnokd", "12/07/19, 08:45:46 PM", "Fixed a style mistake and wrong classes mentioned in the `Flowable.observeOn` docs.\r\n\r\nIn addition, I've added explanation about it not preserving the request pattern across.", "NaN"], ["6752", "3.x: Do not update snapshot Javadocs from secondary branches", "David Karnok", "akarnokd", "12/10/19, 04:05:34 PM", "This PR changes `buildViaTravis.sh` to not publish a snapshot for branches other than `3.x` and `push_javadoc.sh` to not upload the generated javadocs for branches other than `3.x`. \r\n\r\nThis will prevent the unnecessary uploads when [Dependabot](https://dependabot.com/) creates a new bump branch.", "NaN"], ["6754", "2.x: Zip, CombineLatest, and Amb operators throw when supplied with ObservableSource implementation that doesn't subclass Observable", "Mark Sholte", "mgsholte", "12/11/19, 08:20:43 AM", "Fixes #6753", "NaN"], ["6756", "3.x: Fix Observable amb, combineLatest & zip ArrayStoreException", "David Karnok", "akarnokd", "12/11/19, 12:15:50 PM", "When using iterable of sources, the initial array is the wrong type and causes `ArrayStoreException`.\r\n\r\nUnit tests were added to verify the other implementations.\r\n\r\nFixes #6753", "NaN"], ["6758", "3.x: Fix Flowable.window (size, time) cancellation and abandonment", "David Karnok", "akarnokd", "12/16/19, 10:00:42 AM", "This PR fixes the `Flowable.window` operator (with size and time boundaries) so that\r\n\r\n- cancelling the inner windows allows cancelling the upstream once neither the main output nor other windows are being consumed further\r\n- ignoring a window still allows cancelling the upstream.\r\n\r\nThese fixes are necessary similar to how `groupBy` had to be updated in #6740.\r\n\r\nThe publisher-boundary and start-stop publisher boundary as well as the `Observable` variants will be updated in subsequent PRs due to the sheer number of changes.", "NaN"], ["6760", "Fix typo in Flowable javadoc", "Richard Kapolnai", "richardkapolnai-da", "12/15/19, 10:14:41 PM", "Fix compilation error in example code in javadoc", "NaN"], ["6761", "3.x: Fix Observable.window (size & time) cancellation and abandonment", "David Karnok", "akarnokd", "12/16/19, 12:04:38 PM", "This PR fixes the `Observable.window` operator (with size and time boundaries) so that\r\n\r\n- cancelling the inner windows allows cancelling the upstream once neither the main output nor other windows are being consumed further,\r\n- ignoring a window still allows cancelling the upstream.\r\n\r\nFollow-up to #6758 \r\n\r\nThe boundary and start-stop publisher boundarywill be updated in subsequent PRs.\r\n\r\nIn addition, the previous `WindowSubscribeIntercept` has been renamed to match the reactive type naming as well as removed the unnecessary serialization of the emission of window processors.", "NaN"], ["6762", "3.x: Fix window (boundary, start/end) cancel and abandonment", "David Karnok", "akarnokd", "12/17/19, 09:19:08 AM", "This PR fixes the `window` operator (with boundary and start-end sources) so that\r\n\r\n- cancelling the inner windows allows cancelling the upstream once neither the main output nor other windows are being consumed further,\r\n- ignoring a window still allows cancelling the upstream.\r\n\r\nFollow-up to #6758 and #6761", "NaN"], ["6764", "Bump mockito-core from 3.2.0 to 3.2.4", null, "dependabot-preview[bot]", "12/17/19, 07:51:22 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.2.0 to 3.2.4.\n<details>\n<summary>Release notes</summary>\n\n*Sourced from [mockito-core's releases](https://github.com/mockito/mockito/releases).*\n\n> ## v3.2.4\n> <sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n> \n> #### 3.2.4\n>  - 2019-12-16 - [1 commit](https://github.com/mockito/mockito/compare/v3.2.3...v3.2.4) by [Tim van der Lippe](https://github.com/TimvdLippe) - published to [![Bintray](https://img.shields.io/badge/Bintray-3.2.4-green.svg)](https://bintray.com/mockito/maven/mockito/3.2.4)\n>  - No pull requests referenced in commit messages.\n> \n> ## v3.2.3\n> <sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n> \n> #### 3.2.3\n>  - 2019-12-16 - [1 commit](https://github.com/mockito/mockito/compare/v3.2.2...v3.2.3) by [Tim van der Lippe](https://github.com/TimvdLippe) - published to [![Bintray](https://img.shields.io/badge/Bintray-3.2.3-green.svg)](https://bintray.com/mockito/maven/mockito-development/3.2.3)\n>  - Revert \"Add Duration overloads. Fixes [#1815](https://github-redirect.dependabot.com/mockito/mockito/issues/1815)\" [([#1845](https://github-redirect.dependabot.com/mockito/mockito/issues/1845))](https://github-redirect.dependabot.com/mockito/mockito/pull/1845)\n>  - Add Duration overloads. Fixes [#1815](https://github-redirect.dependabot.com/mockito/mockito/issues/1815) [([#1818](https://github-redirect.dependabot.com/mockito/mockito/issues/1818))](https://github-redirect.dependabot.com/mockito/mockito/pull/1818)\n> \n> ## v3.2.2\n> <sup><sup>*Release notes were automatically generated by [Shipkit](http://shipkit.org/)*</sup></sup>\n> \n> #### 3.2.2\n>  - 2019-12-12 - [5 commits](https://github.com/mockito/mockito/compare/v3.2.0...v3.2.2) by 4 authors - published to [![Bintray](https://img.shields.io/badge/Bintray-3.2.2-green.svg)](https://bintray.com/mockito/maven/mockito-development/3.2.2)\n>  - Commits: [Tim van der Lippe](https://github.com/TimvdLippe) (2), [Dr. Thomas Tautenhahn](https://github.com/DrTTom) (1), [Pavel Roskin](https://github.com/proski) (1), [Ville Saukkonen](https://github.com/villesau) (1)\n>  - Upgrade byte buddy to 1.10.5 [([#1842](https://github-redirect.dependabot.com/mockito/mockito/issues/1842))](https://github-redirect.dependabot.com/mockito/mockito/pull/1842)\n>  - Update byte-buddy to 1.10.5 [([#1841](https://github-redirect.dependabot.com/mockito/mockito/issues/1841))](https://github-redirect.dependabot.com/mockito/mockito/issues/1841)\n>  - Fixes [#1839](https://github-redirect.dependabot.com/mockito/mockito/issues/1839) : Badge improvements in README.md [([#1840](https://github-redirect.dependabot.com/mockito/mockito/issues/1840))](https://github-redirect.dependabot.com/mockito/mockito/pull/1840)\n>  - Bintray badge is out of date [([#1839](https://github-redirect.dependabot.com/mockito/mockito/issues/1839))](https://github-redirect.dependabot.com/mockito/mockito/issues/1839)\n>  - Add matchers for incompatible type matchers [([#1832](https://github-redirect.dependabot.com/mockito/mockito/issues/1832))](https://github-redirect.dependabot.com/mockito/mockito/pull/1832)\n>  - Typos and upcoming warnings [([#1795](https://github-redirect.dependabot.com/mockito/mockito/issues/1795))](https://github-redirect.dependabot.com/mockito/mockito/pull/1795)\n</details>\n<details>\n<summary>Commits</summary>\n\n- [`204f9c1`](https://github.com/mockito/mockito/commit/204f9c169aa81f613334dc4301e0a062627565a5) 3.2.4 release (previous 3.2.3) + release notes updated by CI build 4328\n- [`4898be5`](https://github.com/mockito/mockito/commit/4898be5b8ca0cf686c273cbff95824d880085e73) Publish Mockito 3.2.3 to Maven Central\n- [`f5bea9b`](https://github.com/mockito/mockito/commit/f5bea9bcf42cf8b220242fa494f222de03a5672b) 3.2.3 release (previous 3.2.2) + release notes updated by CI build 4326\n- [`1ce2078`](https://github.com/mockito/mockito/commit/1ce2078a562a4486fe4a5917a9b91aa8ef4216c2) Revert \"Add java.time.Duration overloads to `timeout` and `after` ([#1818](https://github-redirect.dependabot.com/mockito/mockito/issues/1818))\" (#...\n- [`517facc`](https://github.com/mockito/mockito/commit/517faccdcf9f9d41f3664fc7955f387608a43a5e) 3.2.2 release (previous 3.2.0) + release notes updated by CI build 4322\n- [`4c29061`](https://github.com/mockito/mockito/commit/4c290611c264adb917d935ec959f92acbcabdcd3) Update version number to Mockito 3.2.2\n- [`fe1141b`](https://github.com/mockito/mockito/commit/fe1141bcea74838fc1a5c1867ec932f180b8eb45) Fixes [#1841](https://github-redirect.dependabot.com/mockito/mockito/issues/1841) : Update byte buddy to 1.10.5 ([#1842](https://github-redirect.dependabot.com/mockito/mockito/issues/1842))\n- [`49c3b4f`](https://github.com/mockito/mockito/commit/49c3b4ffd25f574cbd64a2f85b9ea4b9bfbfe623) Fix several typos found by a spell checker ([#1795](https://github-redirect.dependabot.com/mockito/mockito/issues/1795))\n- [`dd68237`](https://github.com/mockito/mockito/commit/dd68237199b19d8dac68d4e978f41b75326689ba) Add matchers for incompatible type matchers ([#1832](https://github-redirect.dependabot.com/mockito/mockito/issues/1832))\n- [`ae8117f`](https://github.com/mockito/mockito/commit/ae8117f6b72350788f429168292bafe13e231e04) Fixes [#1839](https://github-redirect.dependabot.com/mockito/mockito/issues/1839) : Badge improvements in README.md ([#1840](https://github-redirect.dependabot.com/mockito/mockito/issues/1840))\n- See full diff in [compare view](https://github.com/mockito/mockito/compare/v3.2.0...v3.2.4)\n</details>\n<br />\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.2.0&new-version=3.2.4)](https://dependabot.com/compatibility-score.html?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.2.0&new-version=3.2.4)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6765", "3.x: [Java 8] Upgrade to Java 8, add Flowable.fromX operators", "David Karnok", "akarnokd", "12/17/19, 04:28:01 PM", "This PR upgrades RxJava to use and compile with Java 8.\r\n\r\n- Build target set to 8\r\n- AnimalSniffer set to 8\r\n- JavaDocs link to the official JDK set to 8\r\n- Implemented operators:\r\n  - `Flowable.fromOptional`\r\n  - `Flowable.fromCompletionStage`\r\n  - `Flowable.fromStream`\r\n- Applied `@SafeVarargs` to many methods\r\n- Created marbles\r\n\r\nRelated #6695\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromOptional.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromCompletionStage.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromStream.f.png)", "NaN"], ["6769", "[3.x] Remove deprecated method from 2.x", "Jake Wharton", "JakeWharton", "12/17/19, 04:48:51 PM", "NaN", "NaN"], ["6770", "[3.x] Replace some ObjecsHelpers methods with Java 8 APIs", "Jake Wharton", "JakeWharton", "12/17/19, 05:20:07 PM", "NaN", "NaN"], ["6771", "[3.x] Replace ObjectHelper.requireNonNull with Objects.requireNonNull", "Jake Wharton", "JakeWharton", "12/17/19, 07:06:45 PM", "It big.", "NaN"], ["6773", "Add FunctionalInterface annotations.", "kerr", "hepin1989", "12/17/19, 11:06:39 PM", "Resolves #6768", "NaN"], ["6775", "3.x: [Java 8] Implement mapOptional, collector, first/last/single stage", "David Karnok", "akarnokd", "12/19/19, 08:58:58 AM", "This PR implements the following `Flowable` operators:\r\n\r\n- `mapOptional` - essentially a map-filter via `Optional`s.\r\n- `collect(Collector)` - use the Java 8 `Collector` API, see [`Collectors`](https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html).\r\n- `firstStage` - return the first item or a default value as a `CompletionStage`.\r\n- `firstOrErrorStage` - return the first item or error as a `CompletionStage`.\r\n- `singleStage` - return the only item or a default value as a `CompletionStage`.\r\n- `singleOrErrorStage` - return the only item or error as a `CompletionStage`.\r\n- `lastStage` - return the last item or a default value as a `CompletionStage`.\r\n- `lastOrErrorStage` - return the last item or error as a `CompletionStage`.\r\n\r\nRelated: #6776\r\n\r\nDiagrams:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/mapOptional.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/collector.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/firstStage.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/firstOrErrorStage.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/singleStage.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/singleOrErrorStage.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/lastStage.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/lastOrErrorStage.f.png)", "NaN"], ["6778", "3.x: Javadocs package-info made nicer, update README regarding Java 8", "David Karnok", "akarnokd", "12/18/19, 03:59:39 PM", "- Update `README.md` and indicate Java 8 requirement.\r\n- Enable `@Nullable` to be put on type parameters and type uses.\r\n- Add links to components in various `package-info.java` documentations  for easier navigation in the JavaDocs summary.", "NaN"], ["6779", "3.x: [Java 8] Add blockingStream & flatMapStream to Flowable", "David Karnok", "akarnokd", "12/19/19, 05:37:59 PM", "Add Java 8 interoperation methods to `Flowable`:\r\n- `blockingStream` - essentially `blockingIterable` with close support\r\n- `concatMapStream` - map and concatenate streams\r\n- `flatMapStream` - map and concatenate streams, inherently same as `concatMapStream`\r\n\r\nRelated #6776 \r\n\r\nMarbles:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingStream.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/blockingStream.fi.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapStream.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMapStream.fi.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flatMapStream.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flatMapStream.fi.png)", "NaN"], ["6780", "3.x: [Java 8] Add AutoCloseable <-> Disposable conversions, nicen docs", "David Karnok", "akarnokd", "12/19/19, 05:18:06 PM", "Add `Disposables.fromAutoCloseable` and `Disposables.toAutoCloseable` methods. Improve JavaDocs styling.\r\n\r\nResolves #6772\r\nResolves #6777", "NaN"], ["6781", "3.x: Migrate Disposables static factories to Disposable interface", "Jake Wharton", "JakeWharton", "12/19/19, 06:39:41 PM", "NaN", "NaN"], ["6783", "3.x: [Java 8] Add fromOpt/Stage, mapOptional, toCompletionStage to M/S/C", "David Karnok", "akarnokd", "12/21/19, 10:08:18 AM", "Add the following Java 8 operators to various reactive base classes:\r\n\r\n| Operator | `Maybe` | `Single` | `Completable` |\r\n|---|:---:|:---:|:---:|\r\n| `fromOptional` | ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | (1) | (2) |\r\n| `fromCompletionStage` | ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) |\r\n| `mapOptional` | ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | (3) |\r\n| `toCompletionStage` | ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | (4) |\r\n| `toCompletionStage(T)` | ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | (5) | ![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) |\r\n\r\n1. Should it be implemented as `Optional.empty() -> Single.error(new NoSuchElementException())`?\r\n2. No reason to implement. Always `Completable.complete()`.\r\n3. No value to map.\r\n4. No value to emit thus it is better to ask the user for a completion value.\r\n5. Never empty, no reason to implement.\r\n\r\nRelated #6776 \r\n\r\nMarbles:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromOptional.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromCompletionStage.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/fromCompletionStage.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/mapOptional.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/mapOptional.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toCompletionStage.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toCompletionStage.mv.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toCompletionStage.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/toCompletionStage.c.png)\r", "NaN"], ["6785", "3.x: Cleanup and prettify Javadocs, widen XOperator throws", "David Karnok", "akarnokd", "12/21/19, 10:08:34 AM", "This PR clears up some javadocs and widens the `throws` on the various `Operator` interfaces:\r\n\r\n- Link to `Integer.MAX_VALUE` and `Long.MAX_VALUE`s.\r\n- Add links to types and `{@code TheType}` for other appearances.\r\n- Wrap event type indicators into `{@code }` tags.\r\n- Wrap boolean outcomes into `{@code }` tags.\r\n- Wrap null mentions into `{@code }` tags.\r\n- Apply nullability annotations.\r\n- Fix wording and copy-paste errors.\r", "NaN"], ["6786", "Diamond operators in unit tests, observable package", "Dmitry Volkov", "dvolkovv", "12/22/19, 10:59:45 AM", "Hello, in this pull request i've changed all IDE marked explicit types with diamond operator. Affected package is internal/operators/observable. There is one test fail in CompletableTest.repeatNormal , but diamond is not the cause, there is last stack entry: \r\njava.lang.AssertionError: expected:<6> but was:<5>\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\r\nThis PR is part of  #6767 issue resolving.", "NaN"], ["6787", "Diamond operators in unit tests, flowable package", "Dmitry Volkov", "dvolkovv", "12/22/19, 10:39:24 AM", "Hello, in this pull request i've changed all IDE marked explicit types with diamond operator. Affected package is internal/operators/flowable. \r\n\r\nThere is one test fail in CompletableTest.repeatNormal , but diamond is not the cause, there is last stack entry: \r\njava.lang.AssertionError: expected:<6> but was:<5>\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\r\nThis PR is part of  #6767 issue resolving.", "NaN"], ["6788", "Diamond operators in tests", "Dmitry Volkov", "dvolkovv", "12/22/19, 11:17:24 AM", "Hello, in this pull request i've changed all IDE marked explicit types with diamond operator. Affected packages is internal/ , internal/operators/.\r\nThere is one test fail in CompletableTest.repeatNormal , but diamond is not the cause, there is last stack entry: \r\njava.lang.AssertionError: expected:<6> but was:<5>\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\r\nThis PR is part of  #6767 issue resolving.", "NaN"], ["6789", "Diamond operators in tests, small packages", "Dmitry Volkov", "dvolkovv", "12/22/19, 11:17:38 AM", "Hello, in this pull request i've changed all IDE marked explicit types with diamond operator. Affected packages is in tests root.\r\n\r\nThere is one test fail in CompletableTest.repeatNormal , but diamond is not the cause, there is last stack entry: \r\njava.lang.AssertionError: expected:<6> but was:<5>\r\n\tat org.junit.Assert.fail(Assert.java:88)\r\n\r\nThis PR is part of  #6767 issue resolving.", "NaN"], ["6790", "3.x: Remove now unnecessary unchecked warning suppressions", "David Karnok", "akarnokd", "12/22/19, 09:05:32 PM", "Most varargs places now have `@SafeVarargs` so there is no need for `@SuppressWarnings(\"unchecked\")`. Some non-test classes need still updating though.", "NaN"], ["6791", "3.x: Add NonNull & SafeVarargs annotations + validator", "David Karnok", "akarnokd", "12/24/19, 09:18:07 AM", "This PR cleans up the main classes:\r\n\r\n- Add missing `@NonNull` annotations\r\n- Add missing `@SafeVarargs` annotations\r\n- Add validator code that scans the sources to verify the annotations are present\r\n- Remove unnecessary `@SuppressWarnings` annotations\r\n- Fix a few type arguments.\r\n\r\nRelated #6766", "NaN"], ["6792", "Bump build-info-extractor-gradle from 4.11.0 to 4.12.0", null, "dependabot-preview[bot]", "12/23/19, 12:29:04 PM", "Bumps build-info-extractor-gradle from 4.11.0 to 4.12.0.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.11.0&new-version=4.12.0)](https://dependabot.com/compatibility-score.html?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.11.0&new-version=4.12.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6795", "3.x: Add missing annotations, fix many diamonds", "David Karnok", "akarnokd", "12/25/19, 10:52:14 PM", "- Improve validation code and extend them to other classes/sources.\r\n- Add `@NonNull` annotations\r\n- Add `@SafeVarargs` annotations\r\n- Add `@CheckReturnValue` annotations\r\n- Add more `@BackpressureSupport` & `@SchedulerSupport` annotations.\r\n- Add backpressure and scheduler descriptions in `ParallelFlowable`\r\n- Remove now unnecessary `@SuppressWarnings(\"unchecked\")`\r\n- Fix wording in some javadocs\r\n- Move `toFunction` nullcheck into the caller method so the validation refers to the proper parameter name\r\n- Use diamond arguments where possible\r\n- Remove unused type arguments.\r", "NaN"], ["6797", "3.x: [Java 8] Add Observable operators + cleanup", "David Karnok", "akarnokd", "12/26/19, 12:33:31 PM", "Add the following Java 8 operators to `Observable`:\r\n\r\n- `fromOptional`\r\n- `fromCompletionStage`\r\n- `fromStream`\r\n- `firstStage`\r\n- `firstOrErrorStage`\r\n- `singeStage`\r\n- `singleOrErrorStage`\r\n- `lastStage`\r\n- `lastOrErrorStage`\r\n- `blockingStream`\r\n- `mapOptional`\r\n- `collect`\r\n- `concatMapStream` / `flatMapStream`\r\n\r\nIn addition, some validators received reporting improvements (such as using ` at ` so the IDE can jump to the exact line of the issue). Consequently, all local variable misnaming of `UnicastSubject up` and `UnicastProcessor us` have been fixed as well.\r\n\r\nRelated #6776", "NaN"], ["6798", "3.x: [Java 8] Add ParallelFlowable operators + cleanup", "David Karnok", "akarnokd", "12/26/19, 09:37:40 PM", "Add Java 8 operators to the `ParallelFlowable` class:\r\n\r\n- `mapOptional` + 2\r\n- `flatMapStream` + 1\r\n- `collect`\r\n\r\nAlso for symmetry, the `flatMapIterable` operator has also been added.\r\n\r\nCleanups:\r\n- Add missing `@since` tags, unify tag location.\r\n- Use diamond in parallel classes.\r\n- Fix error messages in the parallel-try operators.\r\n- Improve validation messages with ` at ` entries so the IDE can navigate to the problematic line.\r\n- Add some unit tests to improve coverage of some existing parallel operators.", "NaN"], ["6799", "3.x: XProcessor.offer to throw NPE immediately", "David Karnok", "akarnokd", "12/26/19, 10:43:57 PM", "Make `offer` throw a `NullPointerException` immediately instead of turning it into an error signal. In addition, have `MulticastProcessor.offer` throw an `IllegalStateException` if called when the processor is in fusion mode.\r\n\r\nResolves #6794 ", "NaN"], ["6800", "3.x: Add blockingForEach(Consumer, int) overload", "David Karnok", "akarnokd", "12/26/19, 11:33:43 PM", "The underlying `blockingIterable` already supported the custom prefetch overload and this PR exposes it as a new `blockingForEach` overload.\r\n\r\nIn addition, the Javadocs incorrectly stated `blockingForEach` operated in an unbounded-in fashion. It uses the usual stable-prefetch with 75% re-request amount.\r\n\r\nResolves #6784", "NaN"], ["6801", "3.x: Add missing throwIfFatal calls", "David Karnok", "akarnokd", "12/26/19, 11:55:37 PM", "- Add missing `Exceptions.throwIfFatal` calls in `catch (Throwable ` blocks.\r\n- Add validator that checks for the existence of these `throwIfFatal`, `wrapOrThrow` or `fail` calls.\r\n- Fix `AutoCloseableDisposable` to use `wrapOrThrow` like the other `Disposable` wrapper implementations.\r\n\r\nResolves #6796", "NaN"], ["6802", "Bump guava from 28.1-jre to 28.2-jre", null, "dependabot-preview[bot]", "12/27/19, 08:49:15 AM", "Bumps [guava](https://github.com/google/guava) from 28.1-jre to 28.2-jre.\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/google/guava/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=28.1-jre&new-version=28.2-jre)](https://dependabot.com/compatibility-score.html?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=28.1-jre&new-version=28.2-jre)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6804", "3.x: Fix diamonds, spelling, unnecessary code", "David Karnok", "akarnokd", "12/27/19, 07:01:35 PM", "- Use diamond where possible\r\n- Remove type arguments where they can be now inferred under Java 8\r\n- Fix spelling errors\r\n- Remove unnecessary `throws` declarations", "NaN"], ["6805", "3.x: [Java 8] Add flattenStreamAsX to Maybe/Single", "David Karnok", "akarnokd", "12/28/19, 05:05:31 PM", "Add\r\n- `Maybe.flattenStreamAsFlowable`\r\n- `Maybe.flattenStreamAsObservable`\r\n- `Single.flattenStreamAsFlowable`\r\n- `Single.flattenStreamAsObservable`\r\n\r\nRelated #6776\r\n\r\n(In addition, adjust the validators to appreciate the new patterns.)\r\n\r\nMarbles:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flattenStreamAsFlowable.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flattenStreamAsObservable.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flattenStreamAsFlowable.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flattenStreamAsObservable.s.png)", "NaN"], ["6806", "3.x: Prettify Flowable javadoc + validator", "David Karnok", "akarnokd", "12/31/19, 09:39:26 AM", "This PR unifies the Javadoc style of the `Flowable` type:\r\n- Mention of `Flowable` has to be `{@code Flowable}`\r\n- First mention of a set of types has to be `{@link TheType}`\r\n- Subsequent mention of a set of types has to be `{@code TheType}`\r\n- Some keywords and method names have to be `{@code methodName}`\r\n\r\nIn addition, `JavadocWording` has been modified to detect an additional set of wrong typename use.", "NaN"], ["6808", "Bump build-info-extractor-gradle from 4.12.0 to 4.13.0", null, "dependabot-preview[bot]", "01/13/20, 12:18:10 PM", "Bumps build-info-extractor-gradle from 4.12.0 to 4.13.0.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.12.0&new-version=4.13.0)](https://dependabot.com/compatibility-score.html?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.12.0&new-version=4.13.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6809", "3.x: Improve Javadocs of Completable and some others", "David Karnok", "akarnokd", "01/01/20, 01:33:29 PM", "Improve the JavaDocs of `Completable` by\r\n- Using `{@link}` and `{@code}` tags\r\n- Adding `@throws` regarding parameter validation\r\n- Fix wording of some operators", "NaN"], ["6810", "Bump junit from 4.12 to 4.13", null, "dependabot-preview[bot]", "01/07/20, 07:45:56 AM", "Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/master/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 RC 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 3</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n<h2>JUnit 4.13 Beta 1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit4/wiki/4.13-Release-Notes\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/038f7518fc1018b26df608e3e5dce6db4611be29\"><code>038f751</code></a> [maven-release-plugin] prepare release r4.13</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/8fd0197cd3710786212a5bba1545bc9513fe74cc\"><code>8fd0197</code></a> [maven-release-plugin] prepare for next development iteration</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c0bdd7d4312862dbc6e1a8430cf75024a18158c9\"><code>c0bdd7d</code></a> [maven-release-plugin] prepare release r4.13-rc-2</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ea2e22933c76f6fb64b802e3645306d4d2414406\"><code>ea2e229</code></a> [maven-release-plugin] prepare for next development iteration</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/0a5a2f81563bbc61ca55301f104aa3a90c9d09cd\"><code>0a5a2f8</code></a> [maven-release-plugin] prepare release r4.13-rc-2</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b51fa17fc6a750a17436f9f38c139a7b5228171f\"><code>b51fa17</code></a> Ensure classes annotated with <a href=\"https://github.com/OrderWith\">@OrderWith</a> do not have <a href=\"https://github.com/FixMethodOrder\">@FixMethodOrder</a>.</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/7c2f12c92bd5c66f4cac65dfdf86863c665a13ec\"><code>7c2f12c</code></a> Never reorder classes annotated with <a href=\"https://github.com/FixMethodOrder\">@FixMethodOrder</a></li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/6c5de817e7e0afdd4d09354693535520712595fc\"><code>6c5de81</code></a> Remove reference to obsolete mailing list</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/6c7cb4b23659ce877ceef230aeef73404485220f\"><code>6c7cb4b</code></a> Delete outdated docs</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/fc3938ac16947d6e62b844b92dfae103fffb9ce9\"><code>fc3938a</code></a> [maven-release-plugin] prepare for next development iteration</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.12...r4.13\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=gradle&previous-version=4.12&new-version=4.13)](https://dependabot.com/compatibility-score.html?dependency-name=junit:junit&package-manager=gradle&previous-version=4.12&new-version=4.13)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6812", "3.x: Improve Javadocs of Single", "David Karnok", "akarnokd", "01/06/20, 09:38:07 PM", "- Use `{@link}`s and `{@code}` tags\r\n- Fix some wording and copy-paste mistakes\r\n- Add `@throws` about argument validation throwing `NullPointerException`s and `IllegalArgumentException`s ", "NaN"], ["6813", "3.x: Fix Junit 4.13 deprecated API use", "David Karnok", "akarnokd", "01/07/20, 08:33:24 AM", "JUnit 4.13 deprecated the use of `ExpectedException` in favor of `assertThrows`.", "NaN"], ["6814", "3.x: Remove fromFuture(..., Scheduler) overloads", "David Karnok", "akarnokd", "01/07/20, 09:47:29 AM", "Those overloads were only applying `subscribeOn` with no other benefits.\r\n\r\nResolves: #6811", "NaN"], ["6815", "3.x: Improve JavaDocs of Maybe", "David Karnok", "akarnokd", "01/08/20, 08:02:36 AM", "Improve the javadocs by:\r\n- Adding `{@code}` and `{@link}` tags\r\n- Fixed wording and copy-paste mistakes\r\n- Added `@throws` for the parameter validation exceptions", "NaN"], ["6817", "Deleted Functions.naturalOrder", null, "slisaasquatch", "01/07/20, 06:40:16 PM", "Removes a duplication of the natural order comparator.\r\n\r\nResolves #6816", "NaN"], ["6826", "3.x: Fix Flowable.flatMap not canceling the inner sources on outer error", "David Karnok", "akarnokd", "01/08/20, 07:08:44 PM", "The outer `onError` did not cancel the inner sources. The `Observable` variant works correctly but both received an unit test to verify the behavior.\r\n\r\n2.x will be fixed in a separate PR.\r\n\r\nRelated #6825 ", "NaN"], ["6827", "2.x: Fix Flowable.flatMap not canceling the inner sources on outer error", "David Karnok", "akarnokd", "01/09/20, 07:57:23 AM", "The outer `onError` did not cancel the inner sources. The `Observable` variant works correctly but both received an unit test to verify the behavior.\r\n\r\nFixes: #6825 ", "NaN"], ["6831", "3.x: Improve JavaDocs of Observable and fix similar issues elsewhere", "David Karnok", "akarnokd", "01/10/20, 07:36:29 AM", "Improve the Javadoc of `Observable`:\r\n- Use `{@code` and `{@link}` tags uniformly.\r\n- Improve wording of many operators.\r\n- Add `@throws` declaration for validation exceptions.\r\n- Add missing or incorrect `requireNonNull` usages.\r\n- Have `skipLast` and `takeLast` throw `IllegalArgumentException` instead of `IndexOutOfBoundsException`.\r\n- Improve the various validator tests to detect more cases.\r\n- Change argument names from `prefetch` to the more appropriate `bufferSize`.", "NaN"], ["6835", "3.x: Cleanup javadoc for parameter validation all around", "David Karnok", "akarnokd", "01/11/20, 11:24:56 AM", "- Add missing `@throws` documentation\r\n- Fix wording and style of `Flowable` javadocs\r\n- Fix documentation style of many files\r\n- Improve the validator test to detect more patterns\r\n- `skip` now rejects negative amounts with `IllegalArgumentException`", "NaN"], ["6837", "3.x: Remove a pointless Observable.concatMapIterable overload", "David Karnok", "akarnokd", "01/13/20, 12:17:19 PM", "Remove the `concatMapIterable(Function, int)` overload as there is no buffering involved with the operator.\r\n\r\nResolves #6828.", "NaN"], ["6838", "3.x: Rename to combineLatestArrayDelayError", "David Karnok", "akarnokd", "01/13/20, 12:17:36 PM", "The operator missed a rename with 2.x to match the `combineLatestArray` variant.\r\n\r\nResolves #6820", "NaN"], ["6839", "3.x: enable javac parameter saving in class files", "David Karnok", "akarnokd", "01/13/20, 12:17:55 PM", "Related #6832", "NaN"], ["6840", "3.x: Add nullability annotations to type arguments", "David Karnok", "akarnokd", "01/14/20, 07:49:54 AM", "Annotate type argument use with `@NonNull`.\r\n\r\nResolves #6766", "NaN"], ["6843", "3.x: Improve wording of operators", "David Karnok", "akarnokd", "01/14/20, 11:47:15 AM", "- Reword sentences with \"modifies\" and \"instructs\".\r\n- Reword \"the source X\" to \"the current X\".\r\n- Reword a couple of other operator sentences.\r\n\r\nRelated #6819 \r\nResolves #6821", "NaN"], ["6844", "3.x: Remove Maybe.onExceptionResumeNext", "David Karnok", "akarnokd", "01/14/20, 01:16:07 PM", "It was always very peculiar to let only checked exceptions resumed.\r\n\r\nResolves #6842", "NaN"], ["6845", "3.x: Add operator matrix wiki + auto-extractor", "David Karnok", "akarnokd", "01/14/20, 01:23:18 PM", "Adds the `Operator-Matrix.md` wiki page and some code to generate the matrix of operators available in various base classes.\r\n\r\nIt should also help see missing or inconsistent operator presence. Note that many operators do not make sense everywhere.", "NaN"], ["6846", "Deleted unnecessary NPE tests", null, "slisaasquatch", "01/14/20, 09:24:01 PM", "Resolves #6830\r\n\r\nI have kept tests that arbitrarily throw NPEs like [this one](https://github.com/ReactiveX/RxJava/blob/0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8/src/test/java/io/reactivex/rxjava3/completable/CompletableTest.java#L375), and tests with `Iterable`s that return null `Iterator`s like [this one](https://github.com/ReactiveX/RxJava/blob/0bd2a0152b64723ac3daf3e2fbad3d59c7f3bbb8/src/test/java/io/reactivex/rxjava3/flowable/FlowableNullTests.java#L61).", "NaN"], ["6847", "3.x: Simplify @return sentences in Flowable JavaDocs", "David Karnok", "akarnokd", "01/16/20, 08:08:33 AM", "Simplify the wording of `@return` in JavaDocs.\r\n\r\nResolves #6834", "NaN"], ["6848", "Official Gradle Wrapper Validation GitHub Action", "Jonathan Leitschuh", "JLLeitschuh", "01/15/20, 07:56:02 PM", "As one of the most popular JVM projects on GitHub, this security measure aims to help protect your users from supply chain attacks.\r\n\r\nSee: https://github.com/gradle/wrapper-validation-action", "NaN"], ["6849", "Add `pull_request` to Wrapper Validation Triggers", "Jonathan Leitschuh", "JLLeitschuh", "01/16/20, 07:01:23 AM", "There was a bug where the action wouldn't trigger on contributions. Sorry about that.", "NaN"], ["6853", "3.x: Fix method argument naming across types", "David Karnok", "akarnokd", "01/21/20, 01:26:16 PM", "Make method argument naming consistent between the base reactive classes, adjust some of the naming for all.\r\n\r\nIn addition, the null-check was missing from `blockingMostRecent`.\r\n\r\nResolves #6832 \r\n\r\nThe utility program has to be run manually to list the inconsistencies. The remaining inconsistency is due to `merge` because its argument is `sources` for `Flowable`/`Observable` but `source` for `Single`/`Maybe` nested.", "NaN"], ["6856", "Rename Single.equals to Single.sequenceEqual", null, "slisaasquatch", "01/21/20, 09:21:10 PM", "Renamed Single.equals to Single.sequenceEqual and renamed argument names for consistent naming.\r\n\r\nResolves #6854", "NaN"], ["6857", "3.x: [Wiki] Improve Operator-Matrix with links and notes", "David Karnok", "akarnokd", "01/22/20, 01:03:54 PM", "Update the `OperatorMatrixGenerator` to add anchors and links to notes about why operators are not present in one or another class.\r\n\r\nhttps://github.com/ReactiveX/RxJava/wiki/Operator-Matrix\r\n\r\nSome operators are missing and will be added as part of #6852.\r\n\r\nResolves #6855.", "NaN"], ["6858", "3.x: Verify the use of base interfaces in operator inputs & lambdas", "David Karnok", "akarnokd", "01/22/20, 01:03:31 PM", "This PR adds a test that verifies standard operator methods use base interfaces as their input and lambdas capable of returning base types do as well. Consequently, it fixes two declarations of `Flowable.buffer` having the wrong input type.\r\n\r\nBasically, detect the following declarations:\r\n\r\n```java\r\n// direct use of the class, should be Publisher\r\n    public void method1(Flowable<?> f)\r\n\r\n// lambda returns the class, should return a Publisher\r\n    public void method2(Callable<Flowable<?>> c)\r\n\r\n// The inner Publisher emits the class, should emit Publisher\r\n    public void method3(Supplier<Publisher<Flowable<?>>> c)\r\n\r\n// Direct use of the class as array type, should be Publisher[]\r\n    public void method4(Flowable<?>[] array)\r\n\r\n// Lambda returns an array of the class, should return Publisher[]\r\n    public void method5(Callable<Flowable<?>[]> c)\r\n\r\n// The inner Publisher emits an array of the class, should emit Publisher[]\r\n    public void method6(Callable<Publisher<Flowable<?>[]>> c)\r\n```", "NaN"], ["6860", "3.x: Add last missing throws tag to JavaDocs", "David Karnok", "akarnokd", "01/22/20, 04:37:15 PM", "Added the last missing `@throws` tag to methods and one missing `@NonNull` annotation.\r\n\r\nI included a small program that will list JavaDocs without `@throws` for future use.\r\n\r\nResolves #6829", "NaN"], ["6861", "Bump biz.aQute.bnd.gradle from 4.3.1 to 5.0.0", null, "dependabot-preview[bot]", "01/23/20, 08:50:48 AM", "Bumps [biz.aQute.bnd.gradle](https://github.com/bndtools/bnd) from 4.3.1 to 5.0.0.\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/bndtools/bnd/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=4.3.1&new-version=5.0.0)](https://dependabot.com/compatibility-score.html?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=4.3.1&new-version=5.0.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6862", "3.x: Add Maybe/Single/Completable blockingSubscribe", "David Karnok", "akarnokd", "01/24/20, 04:35:56 PM", "Add the missing `blockingSubscribe` methods to `Maybe`, `Single` and `Completable` for symmetry with `Flowable` and `Observable`.\r\n\r\nUsually we'd like to avoid blocking but now that Project Loom (preview) transparently turns latch-based awaiting into suspension inside Virtual Threads, they will act as free interop operators for exiting the reactive world into the continuation world.\r\n\r\nRelated: #6852\r\n\r\nMarbles:\r\n\r\n#### Maybe\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.blockingSubscribe.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.blockingSubscribe.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.blockingSubscribe.cc.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.blockingSubscribe.cca.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.blockingSubscribe.o.png)\r\n\r\n#### Single\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.blockingSubscribe.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.blockingSubscribe.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.blockingSubscribe.cc.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.blockingSubscribe.o.png)\r\n\r\n#### Completable\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.blockingSubscribe.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.blockingSubscribe.a.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.blockingSubscribe.ac.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.blockingSubscribe.o.png)", "NaN"], ["6864", "Adding delayError to Maybe.delay", "Paul Estrada", "pestrada", "01/24/20, 07:41:41 AM", "Resolves #6863 ", "NaN"], ["6866", "3.x: Fix many marbles in Maybe", "David Karnok", "akarnokd", "01/24/20, 04:36:19 PM", "Add many missing and replace incorrect marble diagrams in `Maybe`.\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.create.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.defer.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.error.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.fromAction.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.fromRunnable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.fromCallable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.fromFuture.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.fromFuture.t.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.fromSingle.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.fromCompletable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.merge.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.merge.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.merge.pn.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.mergeArray.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.mergeArrayDelayError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.mergeDelayError.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.mergeDelayError.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.mergeDelayError.pn.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.merge.2.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.merge.3.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.merge.4.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.mergeDelayError.2.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.mergeDelayError.3.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.mergeDelayError.4.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timer.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timer.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.sequenceEqual.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.sequenceEqual.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.unsafeCreate.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.using.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.using.b.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.wrap.png)\r", "NaN"], ["6867", "3.x: Add onErrorComplete to Flowable, Observable and Single", "David Karnok", "akarnokd", "01/24/20, 09:44:23 PM", "Add the `onErrorComplete()` and `onErrorComplete(Predicate)` operators to the remaining base classes.\r\n\r\nAlso created the missing marble for `Maybe.onErrorComplete` + 1.\r\n\r\nRelated #6852, #5806 \r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.onErrorComplete.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.onErrorComplete.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.onErrorComplete.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.onErrorComplete.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.onErrorComplete.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.onErrorComplete.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.onErrorComplete.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.onErrorComplete.f.png)\r\n\r\n\r", "NaN"], ["6868", "3.x: Add Completable.onErrorResumeWith", "David Karnok", "akarnokd", "01/24/20, 11:06:06 PM", "This PR adds the missing `Completable.onErrorResumeWith` present in the rest of the base classes.\r\n\r\nAlso marbles for `Maybe.onErrorResumeNext` and `Maybe.onErrorResumeWith` have been updated.\r\n\r\nRelated #6852, #5806\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onErrorResumeWith.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.onErrorResumeNext.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.onErrorResumeWith.png)", "NaN"], ["6869", "3.x: Add Single/Completable retryUntil + marbles", "David Karnok", "akarnokd", "01/25/20, 09:56:11 AM", "`retryUntil` was missing from `Single` and `Completable`.\r\n\r\nAdded marble for `Maybe` as well.\r\n\r\nRelated #6852, #5806\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.retryUntil.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.retryUntil.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.retryUntil.png)", "NaN"], ["6870", "3.x: Add Maybe/Single/Completable switchOnNext & switchOnNextDelayError", "David Karnok", "akarnokd", "01/25/20, 12:36:50 PM", "Add the missing `switchOnNext` and `switchOnNextDelayError` operators, which are essentially delegated to the respective `Flowable::switchMapX` operators with identity mapping.\r\n\r\nRelated #6852\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.switchOnNext.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.switchOnNextDelayError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.switchOnNext.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.switchOnNextDelayError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.switchOnNext.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.switchOnNextDelayError.png)", "NaN"], ["6871", "3.x: Add Maybe.dematerialize", "David Karnok", "akarnokd", "01/25/20, 03:59:00 PM", "Add the `dematerialize` operator to `Maybe` to be in sync with the other classes.\r\n\r\nRelated #6852 \r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.dematerialize.png)", "NaN"], ["6873", "3.x: Add many fromX operators + marbles", "David Karnok", "akarnokd", "01/25/20, 09:07:49 PM", "Add a cross section of `from` operators (![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) [`fromAction`](https://github.com/ReactiveX/RxJava/wiki/Operator-Matrix#fromAction) .. `fromSingle`) :\r\n\r\nOperator | F | O | M | S | C |\r\n-|-|-|-|-|-|\r\n<a name='fromAction'></a>`fromAction`|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|![absent](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) <sup title='Never empty.'>([23](#notes-23))</sup>|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|\r\n<a name='fromCompletable'></a>`fromCompletable`|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|![absent](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) <sup title='Always error.'>([72](#notes-72))</sup>|![absent](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) <sup title='Use wrap().'>([73](#notes-73))</sup>|\r\n<a name='fromMaybe'></a>`fromMaybe`|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![absent](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) <sup title='Use wrap().'>([73](#notes-73))</sup>|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|\r\n<a name='fromObservable'></a>`fromObservable`|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![absent](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) <sup title='Use wrap().'>([73](#notes-73))</sup>|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|\r\n<a name='fromPublisher'></a>`fromPublisher`|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|\r\n<a name='fromRunnable'></a>`fromRunnable`|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|![absent](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) <sup title='Never empty.'>([23](#notes-23))</sup>|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|\r\n<a name='fromSingle'></a>`fromSingle`|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|![absent](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) <sup title='Use wrap().'>([73](#notes-73))</sup>|![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)|\r\n\r\nRelated #6852 \r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromAction.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromCompletable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromMaybe.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromObservable.buffer.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromObservable.latest.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromObservable.drop.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromObservable.error.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromObservable.missing.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromRunnable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.fromSingle.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.fromAction.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.fromCompletable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.fromMaybe.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.fromRunnable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.fromSingle.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.fromPublisher.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.fromObservable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.fromMaybe.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.fromMaybe.v.png)\r", "NaN"], ["6874", "3.x: Add timeInterval & timestamp to M/S", "David Karnok", "akarnokd", "01/26/20, 09:25:54 AM", "Add `timeInterval` and `timestamp` operators  (4 overloads each). to `Maybe` and `Single`.\r\n\r\nRelated #6852 \r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timeInterval.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timeInterval.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timestamp.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timestamp.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeInterval.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timeInterval.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timestamp.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.timestamp.s.png)", "NaN"], ["6875", "3.x: Add Maybe/Completable toFuture", "David Karnok", "akarnokd", "01/26/20, 11:36:53 AM", "Add `toFuture` to `Maybe` and `Completable`.\r\n\r\nRelated #6852 \r\n\r\n![image](https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/Maybe.toFuture.png)\r\n![image](https://github.com/ReactiveX/RxJava/wiki/images/rx-operators/Completable.toFuture.png)", "NaN"], ["6876", "3.x: Add Single.ofType", "David Karnok", "akarnokd", "01/26/20, 02:44:48 PM", "Add `ofType` to `Single` already available to the other non-empty base types.\r\n\r\nRelated #6852 \r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.ofType.png)\r\n\r\nIn addition, diagrams for `Maybe.filter` and `Maybe.ofType` have been updated:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.filter.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.ofType.png)\r\n\r\nRelated: #5806", "NaN"], ["6877", "3.x: Add doOnLifecycle to Maybe, Single & Completable", "David Karnok", "akarnokd", "01/26/20, 04:50:27 PM", "Add the `doOnLifecycle` operator to the remaining classes.\r\n\r\nRelated #6852 \r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.doOnLifecycle.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.doOnLifecycle.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.doOnLifecycle.png)", "NaN"], ["6879", "3.x: Add concatMapX operators (aliases)", "David Karnok", "akarnokd", "01/26/20, 07:13:18 PM", "Add the following operator aliases:\r\n\r\n- `Maybe.concatMapCompletable`\r\n- `Maybe.concatMapSingle`\r\n- `Single.concatMapCompletable`\r\n- `Single.concatMap`\r\n- `Single.concatMapMaybe`\r\n\r\nRelated #6852 \r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatMapCompletable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatMapSingle.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatMapCompletable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatMap.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatMapMaybe.png)\r\n\r\nIn addition, some missing or wrong `Maybe` marbles have been fixed:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatMap.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMapCompletable3.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMapSingle3.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMapSingleElement.png)\r\n\r", "NaN"], ["6881", "3.x: Add various concatXDelayError operators", "David Karnok", "akarnokd", "01/27/20, 10:09:31 AM", "Add the following concat kind of operators:\r\n\r\n- `Maybe.concatArrayEagerDelayError`\r\n- `Maybe.concatDelayError(Publisher, int)`\r\n- `Single.concatArrayDelayError`\r\n- `Single.concatArrayEagerDelayError`\r\n- `Single.concatDelayError` + 2\r\n- `Completable.concatArrayDelayError`\r\n- `Completable.concatDelayError` + 2\r\n\r\nRelated #6852 \r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatArrayEagerDelayError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatDelayError.pn.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatArrayDelayError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatArrayEagerDelayError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatDelayError.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatDelayError.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatDelayError.pn.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concatArrayDelayError.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concatDelayError.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concatDelayError.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concatDelayError.pn.png)\r\n\r\nIn addition, the `Maybe.concatDelayError(Publisher)` marble has been fixed:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatDelayError3.i.png)", "NaN"], ["6882", "3.x: Add Single.mergeArray & mergeArrayDelayError", "David Karnok", "akarnokd", "01/27/20, 11:42:58 AM", "`Single` was missing the `mergeArray` and `mergeArrayDelayError` operators already present in the other classes.\r\n\r\nRelated #6852\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.mergeArray.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.mergeArrayDelayError.png)", "NaN"], ["6884", "3.x: Add Completable.sequenceEqual", "David Karnok", "akarnokd", "01/27/20, 02:30:23 PM", "The operator was available in all other classes.\r\n\r\nRelated #6852 \r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.sequenceEqual.png)", "NaN"], ["6885", "3.x: Add missing startWith overloads", "David Karnok", "akarnokd", "01/27/20, 02:48:38 PM", "Add missing ( ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) ) `startWith` overloads \r\n\r\nsource \\ other | F | O | M | S | C |\r\n--|--|--|--|--|--|\r\nFlowable | ![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | ![absent](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)\r\nObservable | ![absent](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_off.png) | ![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)| ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)\r\nMaybe | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)\r\nSingle | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png)\r\nCompletable | ![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | ![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![add](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_half.png) | ![present](https://raw.github.com/wiki/ReactiveX/RxJava/images/checkmark_on.png)\r\n\r\nRelated #6852\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.startWith.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.startWith.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.startWith.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.startWith.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.startWith.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.startWith.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.startWith.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.startWith.o.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.startWith.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.startWith.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.startWith.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.startWith.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.startWith.o.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.startWith.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.startWith.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.startWith.c.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.startWith.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.startWith.s.png)", "NaN"], ["6886", "3.x: Add Completable.onErrorReturn[Item]", "David Karnok", "akarnokd", "01/28/20, 09:51:12 AM", "The operators were already available elsewhere.\r\n\r\nRelated #6852\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onErrorReturn.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.onErrorReturnItem.png)\r\n\r\nIn addition, the `Maybe` variants have received updated marbles as well:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.onErrorReturn.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.onErrorReturnItem.png)\r\n\r\nRelated #5806 ", "NaN"], ["6887", "3.x: Add safeSubscribe to Maybe, Single & Completable", "David Karnok", "akarnokd", "01/28/20, 11:06:38 AM", "Add the final missing method, `safeSubscribe` to `Maybe`, `Single` & `Completable`.\r\n\r\nResolves #6852", "NaN"], ["6888", "3.x: Use more appropriate operators when delegating to Flowable ops", "David Karnok", "akarnokd", "01/28/20, 02:59:55 PM", "Many `Single` and `Maybe` operators delegate to `Flowable` operators. This PR makes sure they use the most appropriate ones since there are `Single`- and `Maybe`-specific operators on `Flowable` for some time now.\r\n\r\nSome concatenating non-delayed Single operators now use the `Flowable.concatMapSingleDelayError(Functions.identity(), false)` because an array or `Iterable` of `Single`s can't just throw anytime like a `Publisher<Single<T>>`'s `Publisher` could, hence a delay-error until boundary mode works the same but without the extra coordination of the more general `Publisher` variant.\r\n\r\nResolves #6865\r\n\r\n`Completable` didn't have any delegation required changing.", "NaN"], ["6890", "3.x: Fix marble dimensions, add program that checks them", "David Karnok", "akarnokd", "01/28/20, 03:32:13 PM", "Resolves #6872\r\n\r\nAlso added 2 diagrams missing\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchMapMaybe.o.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/switchMapMaybeDelayError.o.png)\r\n\r\nand fixed 1 diagram wrongly exported\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Completable.concatArrayDelayError.png)", "NaN"], ["6891", "3.x: Swap Maybe.flatMapSingle and Maybe.flatMapSingleElement", null, "slisaasquatch", "01/28/20, 08:32:21 PM", "Resolves #6878\r\n\r\nDropped the old `Maybe.flatMapSingle` and replaced it with `Maybe.flatMapSingleElement`", "NaN"], ["6893", "3.x: Reenable XFlatMapTest.maybeSingle, add missing Single operators", "David Karnok", "akarnokd", "01/29/20, 11:52:14 AM", "Reenable the `XFlatMapTest.maybeSingle` and make sure all flatMap variants behave the same when the flow is cancelled/disposed while the mapper function is executing, thus the returned inner source doesn't get subscribed to at all.\r\n\r\nResolves #6892\r\n\r\nWhile adding the extra tests, I noticed two `flatMap` variant is missing from `Single`:\r\n\r\n- A combiner of the original and inner success item: `flatMap(Function<T, Single<U>>, BiFunction<T, U, R>)`\r\n- A notification-type mapper: `flatMap(Function<T, Single<R>>, Function<Throwable, Single<R>>)`\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMap.combiner.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.flatMap.notification.png)\r\n\r\nLastly, the same combiner variant for `Maybe` received a marble diagram too:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMap.combiner.png)\r\n\r\nRelated #5806\r", "NaN"], ["6894", "2.x: Fix groupBy not requesting more if a group is cancelled with buffered items", "David Karnok", "akarnokd", "01/29/20, 10:57:12 AM", "If a group is cancelled with unconsumed item in its buffer, the operator stopped requesting more thus hanging other groups.\r\n\r\nThe fix is to count how many items are still in the buffer upon cancellation, and issue a request for them for the parent.\r\n\r\nFixes #6889", "NaN"], ["6895", "3.x: Fix groupBy not requesting more if a group is cancelled w/ items", "David Karnok", "akarnokd", "01/29/20, 10:57:41 AM", "If a group is cancelled with unconsumed item in its buffer, the operator stopped requesting more thus hanging other groups. In 3.x the operator was somewhat strenghtened for this case except one case when the cancellation happens outside the drain loop.\r\n\r\nThe fix is to invoke `drain()` from cancel for it to have the cleanup and replenishment happen.\r\n\r\nFixes #6889", "NaN"], ["6897", "3.x: Add remaining Maybe marbles (+50)", "David Karnok", "akarnokd", "01/29/20, 05:42:52 PM", "Resolves #5806 \r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.ambWith.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.blockingGet.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.blockingGet.v.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.cache.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.compose.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatWith.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.count.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/MAybe.defaultIfEmpty.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.delay.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.delay.t.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.delay.tb.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.delay.ts.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.delay.tsb.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.doAfterSuccess.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.doAfterTerminate.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.doFinally.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.doOnDispose.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.doOnSubscribe.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.doOnTerminate.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMapObservable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.flatMapPublisher.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.isEmpty.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.mergeWith.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.repeat.n.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.repeat.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.repeatUntil.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.repeatWhen.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.retry.f.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.retry.g.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.retry.n.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.retry.nf.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.retry.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.retryWhen.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.switchIfEmpty.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.switchIfEmpty.s.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.takeUntil.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.takeUntil.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timeout.m.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timeout.mm.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timeout.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timeout.pm.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timeout.t.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timeout.tm.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timeout.ts.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.timeout.tsm.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.to.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.toFlowable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.toObservable.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.toSingle.png)\r", "NaN"], ["6899", "3.x: Add concatEagerDelayError across", "David Karnok", "akarnokd", "01/30/20, 03:14:13 PM", "`Flowable`, `Observable`, `Maybe` and `Single` now have a `concatEagerDelayError`, delegating to the appropriate `concatMapEagerDelayError` operator.\r\n\r\nIn addition, `Maybe` and `Single` received an overload `concatEager(Iterable, int)` to expose the `maxConcurrency` option already present in the rest of the types.\r\n\r\nNote that `Completable.concatEagerDelayError` is essentially the same as `mergeDelayError` because there are no items to keep emitting in order.\r\n\r\nResolves #6880\r\n\r\nThe `Flowable` and `Observable` variant of `concatEager` also received fresh marble diagrams. (Related #5813)\r\n\r\n#### Flowable\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatEager.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatEager.in.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatEager.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatEager.pn.png)\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatEagerDelayError.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatEagerDelayError.in.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatEagerDelayError.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.concatEagerDelayError.pn.png)\r\n\r\n----\r\n\r\n#### Observable\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.concatEager.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.concatEager.in.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.concatEager.o.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.concatEager.on.png)\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.concatEagerDelayError.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.concatEagerDelayError.in.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.concatEagerDelayError.o.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.concatEagerDelayError.on.png)\r\n\r\n----\r\n\r\n#### Maybe\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatEager.in.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatEager.pn.png)\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatEagerDelayError.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatEagerDelayError.in.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatEagerDelayError.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Maybe.concatEagerDelayError.pn.png)\r\n\r\n----\r\n\r\n#### Single\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatEager.in.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatEager.pn.png)\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatEagerDelayError.i.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatEagerDelayError.in.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatEagerDelayError.p.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Single.concatEagerDelayError.pn.png)", "NaN"], ["6901", "3.x: Add missing coverage, fix unused/inconsistent ops", "David Karnok", "akarnokd", "02/12/20, 03:26:53 PM", "Cleanup and coverage improvements.\r\n\r\n~~(Still many operators to review in `flowables` and `observables`.)~~", "NaN"], ["6903", "3.x: Add 'Error handling' section to Observable.blockingFirst JavaDocs", "V\u00edctor Juli\u00e1n Garc\u00eda Granado", "vjgarciag96", "02/09/20, 04:31:20 PM", "Add missing JavaDocs section.\r\n\r\nResolves #6900", "NaN"], ["6917", "3.x: Fix Flowable.switchMap not canceling properly during onNext-cancel races", "David Karnok", "akarnokd", "02/27/20, 07:48:20 PM", "There was an unnecessary `active.lazySet(null)` which prevented cancellation of the inner source under some circumstances.\r\n\r\nMore specifically, when one thread issued a `cancel`, the cancelled flag was set, then another thread in `drain` would loop around, see the `cancelled` flag and clear the reference. Back in the cancelling thread, the `disposeInner` would only see `null` and do nothing.\r\n\r\nObservable.switchMap did not have this mistake. Both received unit tests to verify the correct behavior.\r\n\r\n2.x will be fixed in a separate PR.\r\n\r\nResolves #6914", "NaN"], ["6921", "3.x: Fix replay() not resetting when the connection is disposed", "David Karnok", "akarnokd", "02/29/20, 01:02:29 PM", "Disposing a `replay()`-based connectable should reset the operator to its fresh state. This was supposed to happen but the relevant code changes were not enabled. The PR fixes this for both `Flowable` and `Observable`-based implementations.\r\n\r\nThe `publish`-based connectables work as intended.\r\n\r\nFixes #6920", "NaN"], ["6924", "Bump build-info-extractor-gradle from 4.13.0 to 4.14.1", null, "dependabot-preview[bot]", "03/02/20, 08:33:02 AM", "Bumps build-info-extractor-gradle from 4.13.0 to 4.14.1.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.13.0&new-version=4.14.1)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.13.0&new-version=4.14.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6927", "Fix typos in Backpressure.md", "Istv\u00e1n Juhos", "stewemetal", "03/08/20, 09:24:21 PM", "Fix lower case generic type declaration in reactive pull backpressure's code sample\r\nFix typo in the Further reading section\r", "NaN"], ["6934", "Add see annotation for range operators", "Volodymyr", "VovaStelmashchuk", "03/19/20, 08:57:54 AM", "  - Added @see annotation for range operators, reorder annotation to common code style.\r\n\r\n  - #4535 ", "NaN"], ["6935", "Bump mockito-core from 3.2.4 to 3.3.3", null, "dependabot-preview[bot]", "03/16/20, 08:56:13 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.2.4 to 3.3.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.3.3</h2>\n<p><sup><sup><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em></sup></sup></p>\n<h4>3.3.3</h4>\n<ul>\n<li>2020-03-13 - <a href=\"https://github.com/mockito/mockito/compare/v3.3.2...v3.3.3\">1 commit</a> by <a href=\"https://github.com/TimvdLippe\">Tim van der Lippe</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.3.3\"><img src=\"https://img.shields.io/badge/Bintray-3.3.3-green.svg\" alt=\"Bintray\" /></a></li>\n<li>No pull requests referenced in commit messages.</li>\n</ul>\n<h2>v3.3.2</h2>\n<p><sup><sup><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em></sup></sup></p>\n<h4>3.3.2</h4>\n<ul>\n<li>2020-02-28 - <a href=\"https://github.com/mockito/mockito/compare/v3.3.1...v3.3.2\">1 commit</a> by <a href=\"https://github.com/LeJeanbono\">Jean-Michel Leclercq</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.3.2\"><img src=\"https://img.shields.io/badge/Bintray-3.3.2-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Fix UnnecessaryStubbingException javadoc [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1881\">#1881</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1881\">mockito/mockito#1881</a>)</li>\n</ul>\n<h2>v3.3.1</h2>\n<p><sup><sup><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em></sup></sup></p>\n<h4>3.3.1</h4>\n<ul>\n<li>2020-02-26 - <a href=\"https://github.com/mockito/mockito/compare/v3.3.0...v3.3.1\">1 commit</a> by <a href=\"https://github.com/TimvdLippe\">Tim van der Lippe</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.3.1\"><img src=\"https://img.shields.io/badge/Bintray-3.3.1-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Revert &quot;Fixed undetected unused stubbing when matching previous stubbed call&quot; [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1878\">#1878</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1878\">mockito/mockito#1878</a>)</li>\n</ul>\n<h2>v3.3.0</h2>\n<p><sup><sup><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em></sup></sup></p>\n<h4>3.3.0</h4>\n<ul>\n<li>2020-02-21 - <a href=\"https://github.com/mockito/mockito/compare/v3.2.11...v3.3.0\">1 commit</a> by <a href=\"https://github.com/TimvdLippe\">Tim van der Lippe</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.3.0\"><img src=\"https://img.shields.io/badge/Bintray-3.3.0-green.svg\" alt=\"Bintray\" /></a></li>\n<li>No pull requests referenced in commit messages.</li>\n</ul>\n<h2>v3.2.11</h2>\n<p><sup><sup><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em></sup></sup></p>\n<h4>3.2.11</h4>\n<ul>\n<li>2020-02-06 - <a href=\"https://github.com/mockito/mockito/compare/v3.2.10...v3.2.11\">1 commit</a> by <a href=\"https://github.com/TimvdLippe\">Tim van der Lippe</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.2.11\"><img src=\"https://img.shields.io/badge/Bintray-3.2.11-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Add TestRule to MockitoJUnit [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1858\">#1858</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1858\">mockito/mockito#1858</a>)</li>\n</ul>\n<h2>v3.2.10</h2>\n<p><sup><sup><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em></sup></sup></p>\n<h4>3.2.10</h4>\n<ul>\n<li>2020-01-31 - <a href=\"https://github.com/mockito/mockito/compare/v3.2.9...v3.2.10\">2 commits</a> by <a href=\"https://github.com/scordio\">Stefano Cordio</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.2.10\"><img src=\"https://img.shields.io/badge/Bintray-3.2.10-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Update Mockito version number for deletion of deprecated classes [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1868\">#1868</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1868\">mockito/mockito#1868</a>)</li>\n<li>Upgrade assertj-core to version 3.15.0 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1867\">#1867</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1867\">mockito/mockito#1867</a>)</li>\n</ul>\n<h2>v3.2.9</h2>\n<p><sup><sup><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em></sup></sup></p>\n<h4>3.2.9</h4>\n<ul>\n<li>2020-01-27 - <a href=\"https://github.com/mockito/mockito/compare/v3.2.8...v3.2.9\">3 commits</a> by <a href=\"https://github.com/bric3\">Brice Dutheil</a> (2), <a href=\"https://github.com/TimvdLippe\">Tim van der Lippe</a> (1) - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.2.9\"><img src=\"https://img.shields.io/badge/Bintray-3.2.9-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Adds the Official Gradle Wrapper Validation GitHub Action [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1863\">#1863</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1863\">mockito/mockito#1863</a>)</li>\n<li>Revert &quot;Performance optimization by using Method.getParameterCount() where possible&quot; [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1862\">#1862</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1862\">mockito/mockito#1862</a>)</li>\n</ul>\n</tr></table> ... (truncated)\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/560adf377677a4a2c658a0b24e2f9c2e0b373c20\"><code>560adf3</code></a> 3.3.3 release (previous 3.3.2) + release notes updated by CI build 4393</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/0f38efd83ce8e104237a26f2b3a2974dfd849656\"><code>0f38efd</code></a> Publish to Maven Central</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/f61e187bc0aae4a220d3d41ef2eaa66c296e7b01\"><code>f61e187</code></a> 3.3.2 release (previous 3.3.1) + release notes updated by CI build 4390</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/06b131f7aca0ec1d7f20f1b4ed767936ad440362\"><code>06b131f</code></a> Fix UnnecessaryStubbingException javadoc (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1881\">#1881</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/434556a4bd4bb288bf7d12fd4d21ce3a244ce4ba\"><code>434556a</code></a> 3.3.1 release (previous 3.3.0) + release notes updated by CI build 4387</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/d9535098c10920c369d103a1871832e97ab5b42a\"><code>d953509</code></a> Revert &quot;Fixed undetected unused stubbing when matching previous stubbed call&quot;...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/bc2544019b9586aad264c02aa22853e1867f1162\"><code>bc25440</code></a> 3.3.0 release (previous 3.2.11) + release notes updated by CI build 4383</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/0a3064df2cbfcbf3145db54320c704971600ac6d\"><code>0a3064d</code></a> Publish Mockito 3.3.0 to Maven Central</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/2c5a2e8d244734e93f22749a22183d0fec641212\"><code>2c5a2e8</code></a> 3.2.11 release (previous 3.2.10) + release notes updated by CI build 4380</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/39e5d84e5b0fc10a2884748dfa008bbb26d5d03d\"><code>39e5d84</code></a> Add TestRule to MockitoJUnit (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1858\">#1858</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.2.4...v3.3.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.2.4&new-version=3.3.3)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.2.4&new-version=3.3.3)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6937", "Bump build-info-extractor-gradle from 4.14.1 to 4.15.0", null, "dependabot-preview[bot]", "03/17/20, 08:30:14 AM", "Bumps build-info-extractor-gradle from 4.14.1 to 4.15.0.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.14.1&new-version=4.15.0)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.14.1&new-version=4.15.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6940", "Bump build-info-extractor-gradle from 4.15.0 to 4.15.1", null, "dependabot-preview[bot]", "03/20/20, 07:35:59 AM", "Bumps build-info-extractor-gradle from 4.15.0 to 4.15.1.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.15.0&new-version=4.15.1)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.15.0&new-version=4.15.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6941", "Bump biz.aQute.bnd.gradle from 5.0.0 to 5.0.1", null, "dependabot-preview[bot]", "03/25/20, 09:18:13 AM", "Bumps [biz.aQute.bnd.gradle](https://github.com/bndtools/bnd) from 5.0.0 to 5.0.1.\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/bndtools/bnd/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.0.0&new-version=5.0.1)](https://dependabot.com/compatibility-score/?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.0.0&new-version=5.0.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6943", "docs: Quick Javadoc fixes.", "Zachary Trant", "Zachpocalypse", "04/07/20, 02:44:24 PM", "Added @code tag wherever < or > were used, also removed a few\r\nself-closing <p> tags. Both of these issues cause errors with the latest\r\nversion of Javadoc.\r\n\r\nSigned-off-by: Zachary Trant <zach@graalonline.com>", "NaN"], ["6944", "Update image urls to non-transparent version.", "Tomislav Hofman", "tomislavhofman", "04/02/20, 12:19:57 PM", "Updated image urls to use non-transparent ones as per #6883\r\n\r\nResolves #6883", "NaN"], ["6946", "3.x: Fix Observable.flatMap with maxConcurrency hangs", "David Karnok", "akarnokd", "04/04/20, 09:29:23 AM", "Queued up scalar values were not counted as completed, thus the subsequent sources where not subscribed to to fill up the allowed concurrency level.\r\n\r\nFixes #6945", "NaN"], ["6951", "Bump gradle-bintray-plugin from 1.8.4 to 1.8.5", null, "dependabot-preview[bot]", "04/11/20, 02:33:33 PM", "Bumps gradle-bintray-plugin from 1.8.4 to 1.8.5.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.jfrog.bintray.gradle:gradle-bintray-plugin&package-manager=gradle&previous-version=1.8.4&new-version=1.8.5)](https://dependabot.com/compatibility-score/?dependency-name=com.jfrog.bintray.gradle:gradle-bintray-plugin&package-manager=gradle&previous-version=1.8.4&new-version=1.8.5)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6953", "3.x: Workaround flakyness of multiThreadedWithNPE* tests", "David Karnok", "akarnokd", "04/07/20, 10:20:54 AM", "These tests tend to fail more often with JDK 9 Target 9 builds (but all the others are fine).\r\n\r\nNote that an overarching flakyness plugin could hide many of the legitimately incorrect behavior tested via races.", "NaN"], ["6956", "3.x: Fix scheduled tasks' fatal exception behavior", "David Karnok", "akarnokd", "04/27/20, 06:46:52 AM", "Fatal exceptions may be lost with scheduled direct & scheduled periodic direct tasks because `FutureTask` simply treats them as exceptional outcomes. For regular tasks, [ScheduledRunnable](https://github.com/ReactiveX/RxJava/blob/3.x/src/main/java/io/reactivex/rxjava3/internal/schedulers/ScheduledRunnable.java#L67) already avoids rethrowing fatal errors as it would go nowhere.\r\n\r\nThis PR adds this behavior to the direct runnable tasks.\r\n\r\nResolves #6954", "NaN"], ["6959", "Bump guava from 28.2-jre to 29.0-jre", null, "dependabot-preview[bot]", "04/14/20, 07:31:46 AM", "Bumps [guava](https://github.com/google/guava) from 28.2-jre to 29.0-jre.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/google/guava/releases\">guava's releases</a>.</em></p>\n<blockquote>\n<h2>29.0</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;29.0-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;29.0-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/29.0-jre/api/docs/\">29.0-jre</a></li>\n<li><a href=\"http://guava.dev/releases/29.0-android/api/docs/\">29.0-android</a></li>\n</ul>\n<h3>JDiff</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/29.0-jre/api/diffs/\">29.0-jre vs. 28.2-jre</a></li>\n<li><a href=\"http://guava.dev/releases/29.0-android/api/diffs/\">29.0-android vs. 28.2-android</a></li>\n<li><a href=\"http://guava.dev/releases/29.0-android/api/androiddiffs/\">29.0-android vs. 29.0-jre</a></li>\n</ul>\n<h3>Changelog</h3>\n<ul>\n<li><a href=\"https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ\">Guava types can no longer be sent over GWT-RPC.</a> To <em>temporarily</em> reenable support, set the <code>guava.gwt.emergency_reenable_rpc</code> system property to <code>true</code>. (5214a10b1e)\n<ul>\n<li>This is the only breaking change in this release, and it affects only users of the <code>guava-gwt</code> artifact, not people who use only the <code>guava</code> artifact. This release contains no changes that break <em>binary compatibility</em> for any users.</li>\n</ul>\n</li>\n<li>API documentation for Guava classes is now easier to reach. For example, for <code>ImmutableList</code>, visit <a href=\"https://guava.dev/ImmutableList\">guava.dev/ImmutableList</a>. Also, more easily access the index at <a href=\"https://guava.dev/api\">guava.dev/api</a>.</li>\n<li><code>collect</code>: Annotated <code>FluentIterable.from(FluentIterable)</code> with <code>@DoNotCall</code>. (b1c77b7df3)</li>\n<li><code>collect</code>: Made <code>ceiling</code>, <code>floor</code>, <code>headSet(E, boolean)</code>, and <code>tailSet(E, boolean)</code> methods available in the GWT-emulated <code>ImmutableSortedSet</code>. (7e0fe90ca8, 5f2fbf27b2)</li>\n<li><code>graph</code>: Made it possible to set a stable incident edge order by calling the newly added method <code>[Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable())</code>. (70164025a8)</li>\n<li><code>graph</code>: Added <code>incidentEdgeOrder()</code> to the <code>[Value]Graph</code> interfaces. (cde576ec00)</li>\n<li><code>util.concurrent</code>: Added <code>Duration</code>-based <code>default</code> methods to <code>ListeningScheduledExecutorService</code>. (931e83f969)</li>\n<li><code>util.concurrent</code>: Added <code>immediateVoidFuture</code>. (9f3bae5853)</li>\n<li><code>util.concurrent</code>: Removed <code>@Beta</code> from <code>Service</code> and related classes. (dc46627fea)</li>\n<li><code>util.concurrent</code>: Deprecated the 1-arg overload of <code>ServiceManager.addListener</code>. (86e3620125)</li>\n<li><code>util.concurrent</code>: Changed the return type of <code>ServiceManager.servicesByState()</code> to <code>ImmutableSetMultimap</code> (but also retained a method with the old signature for binary compatibility). (31999ae6f5)</li>\n<li><code>util.concurrent</code>: Made it safe to load the <code>AbstractFuture</code> class from a <code>ForkJoinPool</code> thread under a security manager. (6e0c5b5d50)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/google/guava/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=28.2-jre&new-version=29.0-jre)](https://dependabot.com/compatibility-score/?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=28.2-jre&new-version=29.0-jre)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6960", "2.x: Fix Observable.flatMap with maxConcurrency hangs (#6947)", "V\u00edctor Juli\u00e1n Garc\u00eda Granado", "vjgarciag96", "04/15/20, 07:50:59 AM", "Just a backport to 2.x of the fix for the scalar-queue max-concurrency issue already fixed for 3.x in #6946\r\n\r\nThe code for the fix has been added and also the test for it.\r\n\r\nIn addition, as was also done for #6946, the corresponding test for `FlowableFlatMap` has been added.\r\n\r\nResolves #6947", "NaN"], ["6967", "Bump build-info-extractor-gradle from 4.15.1 to 4.15.2", null, "dependabot-preview[bot]", "04/24/20, 12:33:58 PM", "Bumps build-info-extractor-gradle from 4.15.1 to 4.15.2.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.15.1&new-version=4.15.2)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.15.1&new-version=4.15.2)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["6969", "3.x: Allow setting the drift tolerance timeunit via system property", "David Karnok", "akarnokd", "04/27/20, 08:46:41 AM", "Adds the new system property `rx3.scheduler.drift-tolerance-unit` to allow specifying a more fine-grained tolerance amount.\r\n\r\nResolves #6968", "NaN"], ["6975", "3.x: Fix Flowable.groupBy eviction logic double decrement and hang", "David Karnok", "akarnokd", "05/10/20, 08:52:29 AM", "When a group is evicted, the group is synchronously `onComplete`d during an `onNext`. If a cancellation happened during this time (for example, when a `publish` cancels its upstream because its output completes), the cancellation would unconditionally decrement the group counter even though the `groups` map had no longer the group (because it was evicted before). Then once the eviction logic finishes, it decremented the group counter again, leading to invalid internal state and hangs.\r\n\r\nThe fix is to only decrement if there was a group actually removed from the map.\r\n\r\nFixes #6974", "NaN"], ["6979", "3.x: Fix Flowable.groupBy cancellation/cleanup/eviction race hangs", "David Karnok", "akarnokd", "05/13/20, 07:52:23 AM", "This PR fixes three additional race conditions from https://github.com/ReactiveX/RxJava/issues/6974#issuecomment-626319431\r\n\r\n1. When a cancellation arrived asynchronously to a group, the drain loop quit and left unconsumed items in the queue and thus prevented the replenishment from the main upstream. **Fix:** change the drain loop to always clean & replenish upon seeing a canceled state.\r\n\r\n2. When a cancellation was detected just after the drain loop has polled from the queue, that polled item was ignored and not replenished. **Fix:** Include the non-empty polled item in the replenishment count upon cancellation.\r\n\r\n3. When a cancellation happened concurrently with an eviction, both could end up decrementing the group counter into an invalid (negative) number, preventing the operator to function properly. **Fix:** make sure group removal accounting happens at most once.\r\n\r\nFixes: #6974", "NaN"], ["6983", "3.x: Disable fusion on the groups of Flowable.groupBy", "David Karnok", "akarnokd", "05/15/20, 10:33:28 AM", "This PR disables the async fusion capability of the groups emitted by `Flowable.groupBy` as it appears to lead to hangs due to cancellation and/or lack of requests in certain async scenarios.\r\n\r\nBy disabling fusion, the groups will manage the items they queue and cancellation will (hopefully) properly trigger replenishment requests for the unclaimed items.\r\n\r\nThis is more of a workaround than a comprehensible fix for the underlying issues. The main problem is that with `groupBy` and backpressure, each group itself and the items passing through them now count as **resources** and Reactive Streams can't cope well with items requiring their own lifecycle.\r\n\r\nRelated: #6982", "NaN"], ["6988", "3.x: Fix Flowable.groupBy eviction-completion-replenishment problems", "David Karnok", "akarnokd", "05/20/20, 07:34:07 PM", "This PR fixes the two cases from https://github.com/ReactiveX/RxJava/issues/6982#issuecomment-630290658\r\n\r\n### Case 1: completions missed\r\n\r\nWhen the upstream completed and some groups were waiting in the eviction queue, the eviction queue was cleared without completing those groups. Since they were no longer in the main map, those groups never completed and downstream operators relying on all groups completing (i.e., flatMap) would never complete.\r\n\r\nThe fix is to call `completeEvictions` upon upstream termination.\r\n\r\n### Case 2: no replenisment on evicted groups\r\n\r\nWhen an eviction happens, the groups get completed. However, unlike with the non-evicting case, a group completion no longer implies the upstream has completed. Consequently, the evicted groups emitted their items but never issued a replenishment for them, hanging the still-alive main operator.\r\n\r\nThe fix is to replenish emitted (and polled) counts whenever the group detects a completion. (Errors still imply the main operator has terminated so no need to replenish then.) \r\n\r\nResolves #6982", "NaN"], ["6990", "Add missing `@Test` annotation", "Brais Gab\u00edn", "BraisGabin", "05/19/20, 07:28:58 PM", "There was a missing `@Test` annotation in `ReplaySubjectTest`. This PR fix that.", "NaN"], ["6992", "Removed unnecessary upstream.cancel() call for casually finished upstream sequences.", "Derar Bakr", "sobersanta", "05/20/20, 06:55:40 PM", "- no upstream.cancel() in FlowablePublishMulticast when the sequence is finished normally via onComplete/onError from upstream;\r\n- minor code cleanup - unnecessary Disposable implementation to avoid method name clash\r\n- Fixes https://github.com/ReactiveX/RxJava/issues/6989\r\n- FlowablePublishFunctionTest.java  refactored to use lambdas", "NaN"], ["6994", "3.x: Fix recent groupBy tests sometimes failing with MBE", "David Karnok", "akarnokd", "05/21/20, 08:11:48 AM", "These tests can fail with `MissingBackpressureException` because groups may not complete fast enough so `flatMap` can request more groups in time. This doesn't happen consistently but could fail the test on CI. The workaround is to allow any termination, not just normal completion. The reasoning is that the aim of the tests were to verify the operator doesn't hang.\r\n\r\nThe underlying complication is that whenever there is an item replenishment, any subsequent item can result in a fresh group being created. If the concurrency level of `flatMap` is not high enough, this will result in a MBE and the sequence terminates.", "NaN"], ["6996", "Suppress UndeliverableException handling in tests (#6987)", null, "akluball", "05/24/20, 07:37:32 AM", "I used a JUnit TestRule to suppress handling of UndeliverableException for test methods annotated with @SuppressUndeliverable. This approach is coarser than the suggested approach (it suppresses the handling of all UndeliverableExceptions for the entire annotated test method).\r\nI thought this approach was clean but I can switch to the suggested approach if preferred.\r\n\r\nI added @SuppressUndeliverable to most tests that were logging UndeliverableExceptions with the test method in the stack trace. This may be more suppression than was required so just let me know.\r\n\r\nFixes #6987 ", "NaN"], ["6997", "Fixed image link and added java examples for Connectable Observable operators", "Kranthi kulli", "kranthik2", "05/26/20, 05:31:34 PM", "#6132 \r\n\r\n- Fixes  image link\r\n- updated examples with java ", "NaN"], ["7000", "3.x update Conditional-and-Boolean-Operators.md", "Kranthi kulli", "kranthik2", "05/31/20, 01:59:36 PM", "#6132\r\n\r\n- Updated documentation of conditional and boolean operators like #6131\r\n- added java examples ", "NaN"], ["7003", "Bump biz.aQute.bnd.gradle from 5.0.1 to 5.1.0", null, "dependabot-preview[bot]", "06/02/20, 07:39:40 AM", "Bumps [biz.aQute.bnd.gradle](https://github.com/bndtools/bnd) from 5.0.1 to 5.1.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/bndtools/bnd/releases\">biz.aQute.bnd.gradle's releases</a>.</em></p>\n<blockquote>\n<h2>Bnd/Bndtools 5.1.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.1.0\">Release Notes</a>.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/bndtools/bnd/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.0.1&new-version=5.1.0)](https://dependabot.com/compatibility-score/?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.0.1&new-version=5.1.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7006", "Updating SuppressUndeliverableRule to have a named inner class instead of an anonymous inner class", "Abhishek", "sh-abhi", "06/08/20, 08:21:23 AM", "Based on the discussion in https://github.com/ReactiveX/RxJava/issues/7005\r\n\r\nResolves #7005", "NaN"], ["7007", "Bump gradle-animalsniffer-plugin from 1.5.0 to 1.5.1", null, "dependabot-preview[bot]", "06/08/20, 07:59:44 AM", "Bumps gradle-animalsniffer-plugin from 1.5.0 to 1.5.1.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=ru.vyarus:gradle-animalsniffer-plugin&package-manager=gradle&previous-version=1.5.0&new-version=1.5.1)](https://dependabot.com/compatibility-score/?dependency-name=ru.vyarus:gradle-animalsniffer-plugin&package-manager=gradle&previous-version=1.5.0&new-version=1.5.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7009", "Bump biz.aQute.bnd.gradle from 5.1.0 to 5.1.1", null, "dependabot-preview[bot]", "06/18/20, 07:56:48 AM", "Bumps [biz.aQute.bnd.gradle](https://github.com/bndtools/bnd) from 5.1.0 to 5.1.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/bndtools/bnd/releases\">biz.aQute.bnd.gradle's releases</a>.</em></p>\n<blockquote>\n<h2>Bnd/Bndtools 5.1.1</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.1.1\">Release Notes</a>.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/bndtools/bnd/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.1.0&new-version=5.1.1)](https://dependabot.com/compatibility-score/?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.1.0&new-version=5.1.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7013", "Bump build-info-extractor-gradle from 4.15.2 to 4.16.0", null, "dependabot-preview[bot]", "06/26/20, 07:22:41 AM", "Bumps build-info-extractor-gradle from 4.15.2 to 4.16.0.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.15.2&new-version=4.16.0)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.15.2&new-version=4.16.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7023", "[Wiki] Edit dependency for gradle", "Tim K\u00f6rner", "timkoerner", "07/06/20, 03:47:36 PM", "Since gradle 3.0.x the `compile` keyword is deprecated. [You should](https://developer.android.com/studio/build/dependencies#dependency_configurations) use `implementation` instead.", "NaN"], ["7024", "Bump build-info-extractor-gradle from 4.16.0 to 4.16.1", null, "dependabot-preview[bot]", "07/09/20, 06:08:05 AM", "Bumps build-info-extractor-gradle from 4.16.0 to 4.16.1.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.16.0&new-version=4.16.1)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.16.0&new-version=4.16.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7027", "Bump mockito-core from 3.3.3 to 3.4.0", null, "dependabot-preview[bot]", "07/13/20, 11:54:02 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.3.3 to 3.4.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.4.0</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.4.0</h4>\n<ul>\n<li>2020-07-10 - <a href=\"https://github.com/mockito/mockito/compare/v3.3.12...v3.4.0\">19 commits</a> by 9 authors - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.4.0\"><img src=\"https://img.shields.io/badge/Bintray-3.4.0-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Commits: <a href=\"https://github.com/TimvdLippe\">Tim van der Lippe</a> (5), <a href=\"https://github.com/epeee\">Erhard Pointl</a> (4), <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> (3), <a href=\"https://github.com/grimreaper\">Eitan Adler</a> (2), adrianriley (1), akluball (1), <a href=\"https://github.com/arteam\">Artem Prigoda</a> (1), <a href=\"https://github.com/jamietanna\">Jamie Tanna</a> (1), <a href=\"https://github.com/takezoe\">Naoki Takezoe</a> (1)</li>\n<li>[Android support] Enable mocking static methods in Mockito [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1013\">#1013</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1013\">mockito/mockito#1013</a>)</li>\n<li>Document using <code>@Mock</code> with method parameters [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1961\">#1961</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1961\">mockito/mockito#1961</a>)</li>\n<li>Documentation: <code>@Mock</code> on method parameters [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1960\">#1960</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1960\">mockito/mockito#1960</a>)</li>\n<li>Update errorprone gradle plugin to v1.2.1 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1958\">#1958</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1958\">mockito/mockito#1958</a>)</li>\n<li>Update spotless Travis job name to be more descriptive [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1957\">#1957</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1957\">mockito/mockito#1957</a>)</li>\n<li>Fix a confusing typo in subclassing error message [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1953\">#1953</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1953\">mockito/mockito#1953</a>)</li>\n<li>Update bnd gradle plugin to v5.1.1 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1952\">#1952</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1952\">mockito/mockito#1952</a>)</li>\n<li>Use errorprone 2.4.0 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1951\">#1951</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1951\">mockito/mockito#1951</a>)</li>\n<li>Use jacoco v0.8.5 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1950\">#1950</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1950\">mockito/mockito#1950</a>)</li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1712\">#1712</a> : prepend description to AssertionError thrown in verification [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1949\">#1949</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1949\">mockito/mockito#1949</a>)</li>\n<li>Update gradle 6 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1948\">#1948</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1948\">mockito/mockito#1948</a>)</li>\n<li>Move spotless check to separate build task [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1946\">#1946</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1946\">mockito/mockito#1946</a>)</li>\n<li>[Travis] Replace JDK 9/10 with 14 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1945\">#1945</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1945\">mockito/mockito#1945</a>)</li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1898\">#1898</a> : Return mock name from toString method for deep stub mocks [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1942\">#1942</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1942\">mockito/mockito#1942</a>)</li>\n<li>[checkstyle] switch to new DTD [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1940\">#1940</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1940\">mockito/mockito#1940</a>)</li>\n<li>Use google-java-format in spotless [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1934\">#1934</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1934\">mockito/mockito#1934</a>)</li>\n<li>Update report message to use any() instead of anyObject() [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1931\">#1931</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1931\">mockito/mockito#1931</a>)</li>\n<li>[build] bump gradle to latest 5.x release [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1923\">#1923</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1923\">mockito/mockito#1923</a>)</li>\n<li>[build] update gradle-errorprone-plugin to 1.1.0 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1908\">#1908</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1908\">mockito/mockito#1908</a>)</li>\n<li>RETURNS_DEEP_STUBS override a mock's toString to <code>null</code> [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1898\">#1898</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1898\">mockito/mockito#1898</a>)</li>\n<li>&quot;description&quot; not printing when verify args don't match [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1712\">#1712</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1712\">mockito/mockito#1712</a>)</li>\n</ul>\n<h2>v3.3.12</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.3.12</h4>\n<ul>\n<li>2020-05-25 - <a href=\"https://github.com/mockito/mockito/compare/v3.3.11...v3.3.12\">1 commit</a> by <a href=\"https://github.com/vinischeidegger\">Vinicius Scheidegger</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.3.12\"><img src=\"https://img.shields.io/badge/Bintray-3.3.12-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Update javadoc - remove deprecated class [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1938\">#1938</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1938\">mockito/mockito#1938</a>)</li>\n</ul>\n<h2>v3.3.11</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.3.11</h4>\n<ul>\n<li>2020-05-14 - <a href=\"https://github.com/mockito/mockito/compare/v3.3.10...v3.3.11\">5 commits</a> by <a href=\"https://github.com/andreisilviudragnea\">Andrei Silviu Dragnea</a> (2), <a href=\"https://github.com/mockitoguy\">Szczepan Faber</a> (2), <a href=\"https://github.com/grimreaper\">Eitan Adler</a> (1) - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.3.11\"><img src=\"https://img.shields.io/badge/Bintray-3.3.11-green.svg\" alt=\"Bintray\" /></a></li>\n<li>JUnit 5 strict stubs check should not suppress the regular test failure [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1928\">#1928</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1928\">mockito/mockito#1928</a>)</li>\n<li>Fix import order [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1927\">#1927</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1927\">mockito/mockito#1927</a>)</li>\n<li>[build] add ben-manes dependency upgrade finder [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1922\">#1922</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1922\">mockito/mockito#1922</a>)</li>\n</ul>\n<h2>v3.3.10</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.3.10</h4>\n<ul>\n<li>2020-04-30 - <a href=\"https://github.com/mockito/mockito/compare/v3.3.9...v3.3.10\">1 commit</a> by <a href=\"https://github.com/netbeansuser2019\">netbeansuser2019</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.3.10\"><img src=\"https://img.shields.io/badge/Bintray-3.3.10-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Update dependencies.gradle [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1920\">#1920</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1920\">mockito/mockito#1920</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/05b39bfc5e4558f4c1c6853d5b454f534bdfefe0\"><code>05b39bf</code></a> 3.4.0 release (previous 3.3.12) + release notes updated by CI build 4577</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/573bf0df389964d7fdeb4de486882d4599b8033c\"><code>573bf0d</code></a> [ci maven-central-release] Include ability for static mocks</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/bdd2b10ed5b02397614324d31449d8a58f03cf72\"><code>bdd2b10</code></a> Update src/main/java/org/mockito/Captor.java</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/b3fc349e8e525e41f34ff04aca8c3140ff2b335a\"><code>b3fc349</code></a> Mockito <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1013\">#1013</a>: Defines and implements API for static mocking.</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/87aacaeca72f99941323d7d5d981cde333177b23\"><code>87aacae</code></a> Document using <code>@Mock</code> with method parameters (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1961\">#1961</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/0501e02994959c997dd0a5bdafc6288ae1e487ac\"><code>0501e02</code></a> Update errorprone gradle plugin to v1.2.1 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1958\">#1958</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/c5edffef198185ea9e5a91a71a26372e64fe2132\"><code>c5edffe</code></a> Update spotless Travis job name to be more descriptive (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1957\">#1957</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/0ed81f72359b1a0625fa22956d34e54fdfc1d7ce\"><code>0ed81f7</code></a> Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1712\">#1712</a>: prepend description to AssertionError thrown in verification (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1\">#1</a>...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/397b4d247c74bd36761007d10f9c36f74d3aa310\"><code>397b4d2</code></a> Update gradle-errorprone-plugin to 1.1.0 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1908\">#1908</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/4fd405da2e199a06ca5950af910b102a62d66b21\"><code>4fd405d</code></a> Fix a confusing typo in subclassing error message (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1953\">#1953</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.3.3...v3.4.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.3.3&new-version=3.4.0)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.3.3&new-version=3.4.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7028", "3.x: Allow MBE in FlowableGroupByTest.issue6974RunPart2NoEvict", "Lugduni Desrosiers", "ddunig2", "07/13/20, 06:30:46 PM", "Issue #7001\r\nhttps://github.com/ReactiveX/RxJava/blob/98acac218cdb04d279b5ac49bb1afc65bc6ec4fe/src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java#L2668-L2669\r\n\r\nThe above test can probabilistically throw an exception, thus:\r\n\r\nhttps://github.com/ReactiveX/RxJava/blob/98acac218cdb04d279b5ac49bb1afc65bc6ec4fe/src/test/java/io/reactivex/rxjava3/internal/operators/flowable/FlowableGroupByTest.java#L2681\r\n\r\nThe above assertion would be invalid. I have removed the invalid assertion.\r\n\r\nFixes #7001", "NaN"], ["7031", "Bump mockito-core from 3.4.0 to 3.4.2", null, "dependabot-preview[bot]", "07/17/20, 08:04:53 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.4.0 to 3.4.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.4.2</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.4.2</h4>\n<ul>\n<li>2020-07-16 - <a href=\"https://github.com/mockito/mockito/compare/v3.4.1...v3.4.2\">2 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.4.2\"><img src=\"https://img.shields.io/badge/Bintray-3.4.2-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1967\">#1967</a>: Correctly handle mocks with limited life-cycle in listeners. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1968\">#1968</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1968\">mockito/mockito#1968</a>)</li>\n<li>Static method mocks incompatible with MockitoExtension (NotAMockException) [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1967\">#1967</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1967\">mockito/mockito#1967</a>)</li>\n</ul>\n<h2>v3.4.1</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.4.1</h4>\n<ul>\n<li>2020-07-15 - <a href=\"https://github.com/mockito/mockito/compare/v3.4.0...v3.4.1\">1 commit</a> by <a href=\"https://github.com/mickroll\">mickroll</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.4.1\"><img src=\"https://img.shields.io/badge/Bintray-3.4.1-green.svg\" alt=\"Bintray\" /></a></li>\n<li>update dependency to byte buddy version 1.10.13 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1973\">#1973</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1973\">mockito/mockito#1973</a>)</li>\n<li>Update dependency to byte buddy version 1.10.13 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1972\">#1972</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1972\">mockito/mockito#1972</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/6635deec58a7931745874d5d8c6034a7375fa15a\"><code>6635dee</code></a> 3.4.2 release (previous 3.4.1) + release notes updated by CI build 4597</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/be220bbaae2da6263d9dddac9e1bf3a32b1a55ed\"><code>be220bb</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1968\">#1968</a> from mockito/runner-fix</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/9123d1e837c6740d53af3507b28686d2910ebee3\"><code>9123d1e</code></a> Fixed <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1967\">#1967</a>: Correctly handle mocks with limited life-cycle in listeners.</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/b0aa37965d8432f77663e76d0f5698cb6ffb4d89\"><code>b0aa379</code></a> 3.4.1 release (previous 3.4.0) + release notes updated by CI build 4593</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/eda22b7c8b4e2d6611d87f3c8f72f18c51bb2ed8\"><code>eda22b7</code></a> Update byte buddy to 1.10.13 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1973\">#1973</a>)</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.4.0...v3.4.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.4.0&new-version=3.4.2)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.4.0&new-version=3.4.2)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7033", "{Flowable,Observable}.collect(Collector) contravariant on T", "Jakob van Kruijssen", "cardamon", "07/28/20, 11:05:02 AM", "Added `? super` twice. Would resolve #7032.", "NaN"], ["7035", "Bump mockito-core from 3.4.2 to 3.4.4", null, "dependabot-preview[bot]", "07/20/20, 03:40:24 PM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.4.2 to 3.4.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.4.4</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.4.4</h4>\n<ul>\n<li>2020-07-18 - <a href=\"https://github.com/mockito/mockito/compare/v3.4.3...v3.4.4\">2 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.4.4\"><img src=\"https://img.shields.io/badge/Bintray-3.4.4-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1855\">#1855</a> and <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/939\">#939</a>: improve error message when the inline mock maker cannot be used. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1974\">#1974</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1974\">mockito/mockito#1974</a>)</li>\n<li>javax.tools.ToolProvider could not be found in InlineByteBuddyMockMaker [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1855\">#1855</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1855\">mockito/mockito#1855</a>)</li>\n</ul>\n<h2>v3.4.3</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.4.3</h4>\n<ul>\n<li>2020-07-17 - <a href=\"https://github.com/mockito/mockito/compare/v3.4.2...v3.4.3\">1 commit</a> by <a href=\"https://github.com/chmielowiec\">Robert Chmielowiec</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.4.3\"><img src=\"https://img.shields.io/badge/Bintray-3.4.3-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Fix Javadoc invalid syntax [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1978\">#1978</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1978\">mockito/mockito#1978</a>)</li>\n<li>Broken documentation [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1977\">#1977</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1977\">mockito/mockito#1977</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/4019d86b4fb4078c53c7522dd41e5486ad560d35\"><code>4019d86</code></a> 3.4.4 release (previous 3.4.3) + release notes updated by CI build 4637</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/6b09281bd11221fc4df60306b6b0919dac863097\"><code>6b09281</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1974\">#1974</a> from mockito/improve-erro...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/12ba5936b736a2886220f9ae4a6492558dba4e14\"><code>12ba593</code></a> Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1855\">#1855</a> and <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/939\">#939</a>: improve error message when the inline mock maker cannot...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/cbabc53c2202a8ecc93dfa86f1405463181c2bdf\"><code>cbabc53</code></a> 3.4.3 release (previous 3.4.2) + release notes updated by CI build 4625</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/4ebf513eb649ec5d1452fcce62ae5c32f2a44d96\"><code>4ebf513</code></a> Fix invalid Javadoc syntax (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1978\">#1978</a>)</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.4.2...v3.4.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.4.2&new-version=3.4.4)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.4.2&new-version=3.4.4)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7038", "Bump biz.aQute.bnd.gradle from 5.1.1 to 5.1.2", null, "dependabot-preview[bot]", "07/22/20, 09:36:38 AM", "Bumps [biz.aQute.bnd.gradle](https://github.com/bndtools/bnd) from 5.1.1 to 5.1.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/bndtools/bnd/releases\">biz.aQute.bnd.gradle's releases</a>.</em></p>\n<blockquote>\n<h2>Bnd/Bndtools 5.1.2</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.1.2\">Release Notes</a>.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/bndtools/bnd/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.1.1&new-version=5.1.2)](https://dependabot.com/compatibility-score/?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.1.1&new-version=5.1.2)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7040", "3.x: Fix map() conditional chain causing NPE", "David Karnok", "akarnokd", "07/25/20, 10:21:27 AM", "Fix the case when an (async) fused `filter`-`map`-`filter` chain does not handle the null indicator in its conditional path inside `map`.\r\n\r\nFixes #7039 ", "NaN"], ["7043", "Bump mockito-core from 3.4.4 to 3.4.6", null, "dependabot-preview[bot]", "07/30/20, 07:23:36 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.4.4 to 3.4.6.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.4.6</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.4.6</h4>\n<ul>\n<li>2020-07-29 - <a href=\"https://github.com/mockito/mockito/compare/v3.4.5...v3.4.6\">3 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> (2), <a href=\"https://github.com/valfirst\">Valery Yatsynovich</a> (1) - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.4.6\"><img src=\"https://img.shields.io/badge/Bintray-3.4.6-green.svg\" alt=\"Bintray\" /></a></li>\n<li>[Bugfixes] Do not pass static mocks to regular listener callback. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1989\">#1989</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1989\">mockito/mockito#1989</a>)</li>\n<li>MockitoJUnitRunner causes NPE when using <a href=\"https://github.com/Mock\">@Mock</a> on MockedStatic fields [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1988\">#1988</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1988\">mockito/mockito#1988</a>)</li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1985\">#1985</a> : Update README to refer the latest documentation [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1986\">#1986</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1986\">mockito/mockito#1986</a>)</li>\n<li>README should refer the latest available documentation [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1985\">#1985</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1985\">mockito/mockito#1985</a>)</li>\n</ul>\n<h2>v3.4.5</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.4.5</h4>\n<ul>\n<li>2020-07-20 - <a href=\"https://github.com/mockito/mockito/compare/v3.4.4...v3.4.5\">2 commits</a> by <a href=\"https://github.com/epeee\">Erhard Pointl</a> (1), <a href=\"https://github.com/izeye\">Johnny Lim</a> (1) - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.4.5\"><img src=\"https://img.shields.io/badge/Bintray-3.4.5-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Fix typo [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1984\">#1984</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1984\">mockito/mockito#1984</a>)</li>\n<li>Update assertj to 3.16.1 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1982\">#1982</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1982\">mockito/mockito#1982</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/019830665f97c8ba6159148e3b10086cfb894900\"><code>0198306</code></a> 3.4.6 release (previous 3.4.5) + release notes updated by CI build 4660</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/4767db122f95e5302ad6a60a6efaa69f9d7e6cb1\"><code>4767db1</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1989\">#1989</a> from mockito/listener-fix</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/724619b544096a5bdf488053865f5cccdba2fda1\"><code>724619b</code></a> Does not include static mocks in regular listener logic as it might distort e...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/0c56b3a8da97fa5ccfeef2adaa0a2314db3d6bd0\"><code>0c56b3a</code></a> Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1985\">#1985</a> : update README to refer the latest documentation (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1986\">#1986</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/c53f9b39243ac563cd40c774358fb0f7d4f2da83\"><code>c53f9b3</code></a> 3.4.5 release (previous 3.4.4) + release notes updated by CI build 4647</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/98b0d901b5bb78d66bcd68b93d336be09a9ade00\"><code>98b0d90</code></a> Fix typo (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1984\">#1984</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/361c39f82a7dad722bfb725bc12c581632a8f36c\"><code>361c39f</code></a> Update assertj to 3.16.1 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1982\">#1982</a>)</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.4.4...v3.4.6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.4.4&new-version=3.4.6)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.4.4&new-version=3.4.6)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7047", "Bump testng from 7.0.0 to 7.3.0", null, "dependabot-preview[bot]", "08/03/20, 08:05:00 AM", "Bumps [testng](https://github.com/cbeust/testng) from 7.0.0 to 7.3.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/cbeust/testng/blob/master/CHANGES.txt\">testng's changelog</a>.</em></p>\n<blockquote>\n<p>Current\nFixed: GITHUB-2328: Add ability to get test method for which configuration method was called (Krishnan Mahadevan)\nFixed: GITHUB-2327: Parameters not present on skipped Test (Eric Kubenka)\nFixed: GITHUB-2232: Null Pointer Exception in ConfigInvoker.setMethodInvocationFailure (Krishnan Mahadevan)\nFixed: GITHUB-2312: IAnnotationTransformer called multiple time Discrepancy between 6.x and 7.x (Krishnan Mahadevan)\nNew:   GITHUB-2315: TextReporter console output does not nicely print native array data parameters (James Sassano)\nFixed: GITHUB-2301: Add support for object-based reporter configurations (Scott Babcock)\nNew: Deprecate org.testng.ReporterConfig (Julien Herr)\nFixed: GITHUB-2300: Vulnerable Dependency: Please upgrade JCommander to 1.75 or above (Krishnan Mahadevan)\nFixed: GITHUB-2182: Removed exception catching as valid behaviour\nFixed: GITHUB-2273: Use SPI to load Guice modules (Bartosz Popiela)\nFixed: GITHUB-2280: Prevent Retry from happening endlessly (Pawe\u0142 Nadolski)\nFixed: GITHUB-553:  Better error message when dealing with classes having both Constructor and Factory methods (Krishnan Mahadevan)\nFixed: GITHUB-2267: RetryAnalyzer is not set properly and consistent when using dataprovider (Eric Kubenka)\nFixed: GITHUB-2266: Support Test retries via Callbacks (Krishnan Mahadevan)\nFixed: GITHUB-2209: <a href=\"https://github.com/Before\">@Before</a> and <a href=\"https://github.com/After\">@After</a> are not executed as expected when a combination of class and method level grouping is applied (Krishnan Mahadevan)\nFixed: GITHUB-2259: Missing configuration for ServiceLoader Listeners (Krishnan Mahadevan)\nFixed: GITHUB-2257: Facilitate retry of configuration methods via call backs (Krishnan Mahadevan)\nFixed: GITHUB-2223: testng 7.1.0 java.lang.ClassNotFoundException: com.google.inject.Stage (Krishnan Mahadevan)\nFixed: GITHUB-217: Configure TestNG to fail when all tests are skipped (Krishnan Mahadevan)\nFixed: GITHUB-2255: Ensure test method parameters are visible in BeforeMethod config method (Krishnan Mahadevan)\nFixed: GITHUB-2251: NullPointerException at test with timeOut (Krishnan Mahadevan)\nFixed: GITHUB-2249: Not abstract super-classes mess up test run order (Sergii Kim)\nFixed: GITHUB-2195: NPE Using groups and @Before/<a href=\"https://github.com/AfterMethod\">@AfterMethod</a> with alwaysRun and dependsOnMethods (Tomas &amp; Julien Herr)\nFixed: GITHUB-2238: Parameter values should be overridable from JVM arguments (Krishnan Mahadevan)\nFixed: GITHUB-2231: Incorrect hierarchy in testng.xml file created programmatically and failed to run. (Krishnan Mahadevan)\nFixed: GITHUB-2235: expectedExceptions mismatch because of wrapping (Krishnan Mahadevan)\nFixed: GITHUB-2220: ITestListener's methods get called multiple times for one test, when <a href=\"https://github.com/Listeners\">@Listeners</a> annotation is used in multiple test classes (Krishnan Mahadevan)\nFixed: GITHUB-2211: assertEquals for Map sometimes does not use provided message (Krishnan Mahadevan)\nFixed: GITHUB-1632: throwing SkipException sets iTestResult status to Failure instead of Skip (Krishnan Mahadevan)\nFixed: GITHUB-2207: Allow dependency injector factory to be configured via args (dmikhievich)\nFixed: GITHUB-2193: Ignore local url for DTD security check (Li.Zhao &amp; Julien Herr)\nFixed: GITHUB-1968: Upgrade to Gradle 6.0</p>\n<p>7.1.0\nNew  : GITHUB-2199: Allow users to provide their own Injector for Dependency Injection (Krishnan Mahadevan)\nFixed: GITHUB-2180: Write scenario details for Retried tests (Devendra Raju K)\nFixed: GITHUB-2124: JUnit Report should contain the output of org.testng.Reporter (Krishnan Mahadevan)\nFixed: GITHUB-2171: Ability to embed attachments and make them available on TestNG XML report (Krishnan Mahadevan)\nFixed: GITHUB-2152: Multiple Test Groups Causing <a href=\"https://github.com/BeforeMethod\">@BeforeMethod</a> and <a href=\"https://github.com/AfterMethod\">@AfterMethod</a> to be called multiple times for a single test (Krishnan Mahadevan)\nFixed: GITHUB-2172: Suite summary report table issue with EmailableReporter2.java (Devendra Raju K)\nFixed: GITHUB-2148: TestNG - configfailurepolicy=\u201ccontinue\u201d is not working for retried test (Krishnan Mahadevan)\nFixed: GITHUB-2163: Test is executed infinite number of times when the data provider returns a new object (Krishnan Mahadevan)\nFixed: GITHUB-2157: NullPointerException occurs when a Retried test has an exception in DataProvider (Krishnan Mahadevan)\nFixed: GITHUB-2150: Upgraded jQuery from 1.7.1 to 3.4.1 to resolve reported prototype pollution vulnerability\nFixed: GITHUB-2149: Handle NoClassDefFoundError when classloader fails to load a class\nNew:   GITHUB-2111: Provide an interceptor for Data Provider (Krishnan Mahadevan)\nFixed: GITHUB-1709: <a href=\"https://github.com/Ignore\">@Ignore</a> doesn't work when used on child class, and parent has multiple <a href=\"https://github.com/Test\">@Test</a> methods (Krishnan Mahadevan)\nNew:   GITHUB-2118: Default assertion message (Jiong Fu)\nFixed: GITHUB-2080: Wrong text for assertTrue (Jiong Fu)</p>\n<!-- raw HTML omitted -->\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/cbeust/testng/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.testng:testng&package-manager=gradle&previous-version=7.0.0&new-version=7.3.0)](https://dependabot.com/compatibility-score/?dependency-name=org.testng:testng&package-manager=gradle&previous-version=7.0.0&new-version=7.3.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7049", "3.x: Fix Observable.window (size, skip, overlap) dispose behavior", "David Karnok", "akarnokd", "08/06/20, 06:09:48 AM", "Disposing the main output of the `Observable.window` operator did not properly propagate the dispose call under certain circumstances, such as no current active window or the window(s) were abandoned immediately.\r\n\r\nFixes #7048", "NaN"], ["7051", "3.x: Update marbles of onErrorResume(Next|With) + cleanup", "David Karnok", "akarnokd", "08/06/20, 07:25:56 AM", "- `onErrorResumeNext` marble now indicates the error and function-callback nature:\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorResumeNext.v3.png)\r\n\r\n- `onErrorResumeWith` marble now has the correct name (and retains the original onErrorResumeNext style):\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/onErrorResumeWith.v3.png)\r\n\r\n- Address now deprecated API usage of Mockito.\r\n- Few other style corrections.\r\n\r\nFixes #7050", "NaN"], ["7053", "Bump build-info-extractor-gradle from 4.16.1 to 4.17.0", null, "dependabot-preview[bot]", "08/13/20, 07:56:47 AM", "Bumps build-info-extractor-gradle from 4.16.1 to 4.17.0.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.16.1&new-version=4.17.0)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.16.1&new-version=4.17.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7057", "Bump mockito-core from 3.4.6 to 3.5.0", null, "dependabot-preview[bot]", "08/17/20, 08:19:23 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.4.6 to 3.5.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.5.0</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.0</h4>\n<ul>\n<li>2020-08-15 - <a href=\"https://github.com/mockito/mockito/compare/v3.4.8...v3.5.0\">9 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.5.0\"><img src=\"https://img.shields.io/badge/Bintray-3.5.0-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Pre release 3.5.0 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2004\">#2004</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2004\">mockito/mockito#2004</a>)</li>\n</ul>\n<h2>v3.4.8</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.4.8</h4>\n<ul>\n<li>2020-08-09 - <a href=\"https://github.com/mockito/mockito/compare/v3.4.7...v3.4.8\">1 commit</a> by <a href=\"https://github.com/epeee\">Erhard Pointl</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.4.8\"><img src=\"https://img.shields.io/badge/Bintray-3.4.8-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Update objenesis to 3.1 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1998\">#1998</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1998\">mockito/mockito#1998</a>)</li>\n</ul>\n<h2>v3.4.7</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.4.7</h4>\n<ul>\n<li>2020-08-05 - <a href=\"https://github.com/mockito/mockito/compare/v3.4.6...v3.4.7\">1 commit</a> by <a href=\"https://github.com/perlun\">Per Lundberg</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.4.7\"><img src=\"https://img.shields.io/badge/Bintray-3.4.7-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Mockito.verify(): fix typo in Javadoc [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1991\">#1991</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1991\">mockito/mockito#1991</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/70633c4876572343a57b5f718fae8967dae27108\"><code>70633c4</code></a> 3.5.0 release (previous 3.4.8) + release notes updated by CI build 4710</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/7a56cff25d748c9dea7d10479368b36087f38705\"><code>7a56cff</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2004\">#2004</a> from mockito/pre-release-...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/5b4e61290dbd730eadf09b849784abcbb8f57f5a\"><code>5b4e612</code></a> Merging constructor mocks with safe accessibility whilst fixing use of reflec...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/8bc21ed691955e3a6c11a2758a5efe86f2af4a9c\"><code>8bc21ed</code></a> Merge branch 'safe-accessibility' into release/3.x</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/e21d620f10874a52963b27a874127f10f783b911\"><code>e21d620</code></a> Merge branch 'spy-mock' into release/3.x</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/47ef05814784183cd5c1d297078e2ad7e31cce34\"><code>47ef058</code></a> Adds support for creating spies from within a mock instance's constructor, th...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/24c0e45d1ca7a11baef3b161ed7d615f68ffe5fb\"><code>24c0e45</code></a> Add invoker API to allow for alternative invocation modes to better support t...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/19a7d84a04edfca501515b3f5cfc462f90e3ca6b\"><code>19a7d84</code></a> Implements mocking for constructor invocations.</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/12ce7ea57a721f146a2b7c8f69d45b8b7f349531\"><code>12ce7ea</code></a> Implements mocking for constructor invocations.</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/ce8cc9847a4c2a9f51da935ac31b491fb8f2d9c1\"><code>ce8cc98</code></a> 3.4.8 release (previous 3.4.7) + release notes updated by CI build 4685</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.4.6...v3.5.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.4.6&new-version=3.5.0)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.4.6&new-version=3.5.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7059", "Bump build-info-extractor-gradle from 4.17.0 to 4.17.1", null, "dependabot-preview[bot]", "08/18/20, 08:25:40 AM", "Bumps build-info-extractor-gradle from 4.17.0 to 4.17.1.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.17.0&new-version=4.17.1)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.17.0&new-version=4.17.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7060", "Bump mockito-core from 3.5.0 to 3.5.2", null, "dependabot-preview[bot]", "08/19/20, 08:55:25 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.5.0 to 3.5.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.5.2</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.2</h4>\n<ul>\n<li>2020-08-18 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.1...v3.5.2\">1 commit</a> by <a href=\"https://github.com/TimvdLippe\">Tim van der Lippe</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.5.2\"><img src=\"https://img.shields.io/badge/Bintray-3.5.2-green.svg\" alt=\"Bintray\" /></a></li>\n<li>No pull requests referenced in commit messages.</li>\n</ul>\n<h2>v3.5.1</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.1</h4>\n<ul>\n<li>2020-08-18 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.0...v3.5.1\">3 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.5.1\"><img src=\"https://img.shields.io/badge/Bintray-3.5.1-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Introduce animal sniffer [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2006\">#2006</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2006\">mockito/mockito#2006</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/31bdc245a39fc22c4bb67bf4cf0bc0c3c5292238\"><code>31bdc24</code></a> 3.5.2 release (previous 3.5.1) + release notes updated by CI build 4717</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/dd5f2c1f2fbf177c14fb90f97247abcaec7719b3\"><code>dd5f2c1</code></a> Publish to Maven Central</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/2dd7ea1eca9861a881909df159f0aa376fd62e40\"><code>2dd7ea1</code></a> 3.5.1 release (previous 3.5.0) + release notes updated by CI build 4715</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/f41ec63012d3286a6888e14083bbd0bf98c826ad\"><code>f41ec63</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2006\">#2006</a> from mockito/introduce-animal-sniffer</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/ec659f4ded5809aa0af890d588c4dea21a813138\"><code>ec659f4</code></a> Do not use invoke/invokeExact directly but from generated code to avoid break...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/d42221ccd9e77cb71cd8d7fab947b3559412aac2\"><code>d42221c</code></a> Add signature checks to assure Android and Java 8 compatibility. Exclude clas...</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.5.0...v3.5.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.0&new-version=3.5.2)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.0&new-version=3.5.2)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7062", "Bump mockito-core from 3.5.2 to 3.5.5", null, "dependabot-preview[bot]", "08/24/20, 07:48:56 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.5.2 to 3.5.5.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.5.5</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.5</h4>\n<ul>\n<li>2020-08-22 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.4...v3.5.5\">3 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.5.5\"><img src=\"https://img.shields.io/badge/Bintray-3.5.5-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Constructor dispatch [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2020\">#2020</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2020\">mockito/mockito#2020</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/065dd127fdd34b6570ae78075c12d4d4026fbbcb\"><code>065dd12</code></a> 3.5.5 release (previous 3.5.4) + release notes updated by CI build 4734</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/9ca3225051112365a5b3467583e1f468128e38a0\"><code>9ca3225</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2020\">#2020</a> from mockito/constructor-...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/c5406ae5c0c5915ffd02e49a916a261fe7d44d0c\"><code>c5406ae</code></a> Add validation to MockMethodDispatcher that this class is only ever loaded by...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/42a154f235c245740b8292e01782b009843e0090\"><code>42a154f</code></a> Add validation to MockMethodDispatcher that this class is only ever loaded by...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/c0e48cdc9b0e90b791dc54d0cd88e38dac26f155\"><code>c0e48cd</code></a> 3.5.4 release (previous 3.5.3) + release notes updated by CI build 4728</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/a11a6915527841b672dbdf0a382ede9aa75d8778\"><code>a11a691</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2017\">#2017</a> from mockito/constructor-...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/3d1405f1c431888b2641a003868ba5b9300aa611\"><code>3d1405f</code></a> Only enable mocking of types right before instantiation to avoid circular int...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/5cb5a665840a84fa90a6f9aee9a4f4b982007cb3\"><code>5cb5a66</code></a> 3.5.3 release (previous 3.5.2) + release notes updated by CI build 4723</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/7d47fad1202d039df2a09370b20a98649dfbf594\"><code>7d47fad</code></a> [ci maven-central-release]  Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2013\">#2013</a> from mockito/constructor...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/7e942c40bfad5335bb6a7219c31b4e44580f96be\"><code>7e942c4</code></a> Attempts to fix stack overflow error.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.5.2...v3.5.5\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.2&new-version=3.5.5)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.2&new-version=3.5.5)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7063", "Bump mockito-core from 3.5.5 to 3.5.6", null, "dependabot-preview[bot]", "08/25/20, 07:05:54 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.5.5 to 3.5.6.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.5.6</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.6</h4>\n<ul>\n<li>2020-08-24 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.5...v3.5.6\">5 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.5.6\"><img src=\"https://img.shields.io/badge/Bintray-3.5.6-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Only apply argument on illegal module access for inline tests if Java version is at least 9. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2022\">#2022</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2022\">mockito/mockito#2022</a>)</li>\n<li>Constructor dispatch [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2021\">#2021</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2021\">mockito/mockito#2021</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/929840ab691b2f502b9958ac9483104bfd88a9ee\"><code>929840a</code></a> 3.5.6 release (previous 3.5.5) + release notes updated by CI build 4744</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/7a350f3a902be8fef63567457fe89e9f6f824e2c\"><code>7a350f3</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2022\">#2022</a> from mockito/constructor-...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/f48b98ac940e8e9e3f0782b37247f031507566da\"><code>f48b98a</code></a> Only apply argument on illegal module access for inline tests if Java version...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/76a91f05c994afa3e66f066d53dc4c010ac281c6\"><code>76a91f0</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2021\">#2021</a> from mockito/constructor-...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/57f7db8c4c72f06cb6c94a7edce1f255847e12ac\"><code>57f7db8</code></a> Refine module openness check</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/eaa12bfc018ed00fcd35588dc900d657a9740e32\"><code>eaa12bf</code></a> Add suspension when Mockito exception is thrown.</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.5.5...v3.5.6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.5&new-version=3.5.6)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.5&new-version=3.5.6)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7064", "Bump mockito-core from 3.5.6 to 3.5.7", null, "dependabot-preview[bot]", "08/26/20, 06:26:46 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.5.6 to 3.5.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.5.7</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.7</h4>\n<ul>\n<li>2020-08-25 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.6...v3.5.7\">2 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.5.7\"><img src=\"https://img.shields.io/badge/Bintray-3.5.7-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Initializes classes prior to instrumentation to avoid uncontrolled code execution. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2023\">#2023</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2023\">mockito/mockito#2023</a>)</li>\n<li>Stackoverflow error when upgrading to v3.5.2 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2011\">#2011</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2011\">mockito/mockito#2011</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/8007df7a25d6c59eb561c1f6023d724d3b3c167f\"><code>8007df7</code></a> 3.5.7 release (previous 3.5.6) + release notes updated by CI build 4749</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/f31ba850384fa789278e11aea41efc3b1c877a48\"><code>f31ba85</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2023\">#2023</a> from mockito/explicit-ini...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/24d8d790c22913a9a92ea70bad721b06a735cd46\"><code>24d8d79</code></a> Initializes classes prior to instrumentation to avoid uncontrolled code execu...</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.5.6...v3.5.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.6&new-version=3.5.7)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.6&new-version=3.5.7)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7066", "Bump jmh-gradle-plugin from 0.5.0 to 0.5.1", null, "dependabot-preview[bot]", "08/27/20, 06:41:56 AM", "Bumps jmh-gradle-plugin from 0.5.0 to 0.5.1.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=me.champeau.gradle:jmh-gradle-plugin&package-manager=gradle&previous-version=0.5.0&new-version=0.5.1)](https://dependabot.com/compatibility-score/?dependency-name=me.champeau.gradle:jmh-gradle-plugin&package-manager=gradle&previous-version=0.5.0&new-version=0.5.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7067", "Bump build-info-extractor-gradle from 4.17.1 to 4.17.2", null, "dependabot-preview[bot]", "08/28/20, 06:36:18 AM", "Bumps build-info-extractor-gradle from 4.17.1 to 4.17.2.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.17.1&new-version=4.17.2)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.17.1&new-version=4.17.2)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7069", "Bump mockito-core from 3.5.7 to 3.5.9", null, "dependabot-preview[bot]", "09/02/20, 06:37:36 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.5.7 to 3.5.9.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.5.9</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.9</h4>\n<ul>\n<li>2020-09-01 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.8...v3.5.9\">1 commit</a> by <a href=\"https://github.com/kozaxinan\">Sinan Kozak</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.5.9\"><img src=\"https://img.shields.io/badge/Bintray-3.5.9-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2007\">#2007</a> : Downgrade objenesis version for mockito-android [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2024\">#2024</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2024\">mockito/mockito#2024</a>)</li>\n<li>Android instrumentation test packaging fails for mockito-android 3.5.0 with minSdk &lt; 26 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2007\">#2007</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2007\">mockito/mockito#2007</a>)</li>\n</ul>\n<h2>v3.5.8</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.8</h4>\n<ul>\n<li>2020-08-27 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.7...v3.5.8\">1 commit</a> by <a href=\"https://github.com/ahmadmoawad\">ahmadmoawad</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.5.8\"><img src=\"https://img.shields.io/badge/Bintray-3.5.8-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Fix typo in CONTRIBUTING.md and SpyOnInjectedFieldsHandler [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1994\">#1994</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/1994\">mockito/mockito#1994</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/fcd788cf20bdd2ead398706afeb6beb5411831b8\"><code>fcd788c</code></a> 3.5.9 release (previous 3.5.8) + release notes updated by CI build 4763</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/626d4573c702625611d2024463bae606a4e8cca4\"><code>626d457</code></a> Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2007\">#2007</a> : Downgrade objenesis version for mockito-android (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2024\">#2024</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/a8b156509fc8e35cf122e1abe8c36d1e196ed041\"><code>a8b1565</code></a> 3.5.8 release (previous 3.5.7) + release notes updated by CI build 4758</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/282855246f2428fdd8563815cb5e46ffd2d0471d\"><code>2828552</code></a> Fix typo in CONTRIBUTING.md and SpyOnInjectedFieldsHandler (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1994\">#1994</a>)</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.5.7...v3.5.9\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.7&new-version=3.5.9)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.7&new-version=3.5.9)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7070", "Bump mockito-core from 3.5.9 to 3.5.10", null, "dependabot-preview[bot]", "09/12/20, 09:08:26 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.5.9 to 3.5.10.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.5.10</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.10</h4>\n<ul>\n<li>2020-09-03 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.9...v3.5.10\">2 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.5.10\"><img src=\"https://img.shields.io/badge/Bintray-3.5.10-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Escape mock during method dispatch on mock to avoid premature garbage collection. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2034\">#2034</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2034\">mockito/mockito#2034</a>)</li>\n<li>Exception &quot;The mock object was garbage collected.&quot; [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1802\">#1802</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1802\">mockito/mockito#1802</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/b6ae6cf12b93ef9445e524224375aab1eb76129d\"><code>b6ae6cf</code></a> 3.5.10 release (previous 3.5.9) + release notes updated by CI build 4773</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/893e2f476445ce273d82ec73a93ced713610df86\"><code>893e2f4</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2034\">#2034</a> from mockito/explicit-esc...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/093d5279456ccafcaf9c56a437e4a504e7b70dc4\"><code>093d527</code></a> Escape mock during method dispatch on mock to avoid premature garbage collect...</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.5.9...v3.5.10\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.9&new-version=3.5.10)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.9&new-version=3.5.10)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7071", "3.x: fromRunnable/fromAction javadoc improvements", "David Karnok", "akarnokd", "09/12/20, 09:44:43 AM", "- Fix the wording across the base types.\r\n- Add missing error handling section.\r\n- Point to `fromAction` in `fromRunnable` docs.", "NaN"], ["7073", "3.x: Patch out duplicate @NonNull annotation in generated javadocs", "David Karnok", "akarnokd", "09/12/20, 10:13:58 AM", "There is a long-standing bug in either javac or javadocs that results in certain annotations to be put into the HTML twice:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/92935641-568b9680-f449-11ea-9f2b-75264f641292.png)\r\n\r\nhttps://bugs.openjdk.java.net/browse/JDK-8175533\r\n\r\nLooks like it happens with certain `@Documented` annotations, but not others. The issue persists up to JDK 16 preview.\r\n\r\nThis PR adds a workaround to the existing HTML patching gradle task which removes such duplicates:\r\n\r\n![image](https://user-images.githubusercontent.com/1269832/92936752-c8b0ab00-f44a-11ea-9069-e454cd4d7740.png)\r\n\r\n*Sidenote: yes, the method return also duplicates `@NonNull`, but that's across HTML elements and is much harder to fix.*", "NaN"], ["7077", "Bump mockito-core from 3.5.10 to 3.5.11", null, "dependabot-preview[bot]", "09/18/20, 06:20:53 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.5.10 to 3.5.11.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.5.11</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.11</h4>\n<ul>\n<li>2020-09-17 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.10...v3.5.11\">2 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.5.11\"><img src=\"https://img.shields.io/badge/Bintray-3.5.11-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Do not exclude synthetic constructors from instrumentation. Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2040\">#2040</a>. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2046\">#2046</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2046\">mockito/mockito#2046</a>)</li>\n<li>Mockito.spy(Activity).getBaseContext() returns null on Robolectric 4.4 and Java8 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2040\">#2040</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2040\">mockito/mockito#2040</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/5a664cfd68bd50d3f3447ce44879d60045b199ec\"><code>5a664cf</code></a> 3.5.11 release (previous 3.5.10) + release notes updated by CI build 4792</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/ce996dcee7a6c5f1c33fe95f621e8c67797b4fa9\"><code>ce996dc</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2046\">#2046</a> from mockito/include-synt...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/4a40f582397c40fbce587af3e2f1e16583228e5e\"><code>4a40f58</code></a> Do not exclude synthetic constructors from instrumentation. Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2040\">#2040</a>.</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.5.10...v3.5.11\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.10&new-version=3.5.11)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.10&new-version=3.5.11)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7080", "Change a method name to make consistent with PR#6801", "Tasuku Nakagawa", "T45K", "09/21/20, 02:50:33 PM", "Thank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [x] Please give a description about what and why you are contributing, even if it's trivial.\r\n\r\nIn #6801, a method name, `FlowableZipIterable#error` is changed to `fail`, but its similar class, `ObservableZipIterable` was not changed.\r\nI changed it for consistency.\r\n\r\n  - [x] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n\r\nThis PR is related to #6801\r\n\r\n  - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r\n\r\nThis change will not affect external behavior.\r", "NaN"], ["7082", "Bump jmh-gradle-plugin from 0.5.1 to 0.5.2", null, "dependabot-preview[bot]", "10/05/20, 12:45:00 PM", "Bumps jmh-gradle-plugin from 0.5.1 to 0.5.2.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=me.champeau.gradle:jmh-gradle-plugin&package-manager=gradle&previous-version=0.5.1&new-version=0.5.2)](https://dependabot.com/compatibility-score/?dependency-name=me.champeau.gradle:jmh-gradle-plugin&package-manager=gradle&previous-version=0.5.1&new-version=0.5.2)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7083", "3.x: Fix toFlowable(ERROR) not cancelling on MBE", "David Karnok", "akarnokd", "09/23/20, 08:47:30 AM", "There was a missing `upstream.cancel()` for when the overflow happens.\r\n\r\nFixes #7081", "NaN"], ["7084", "2.x: Fix toFlowable(ERROR) not cancelling upon MBE", "David Karnok", "akarnokd", "09/23/20, 07:22:51 AM", "There was a missing upstream.cancel() for when the overflow happens.\r\n\r\nFixes #7081", "NaN"], ["7086", "Bump mockito-core from 3.5.11 to 3.5.13", null, "dependabot-preview[bot]", "09/25/20, 06:30:33 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.5.11 to 3.5.13.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.5.13</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.13</h4>\n<ul>\n<li>2020-09-24 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.12...v3.5.13\">1 commit</a> by <a href=\"https://github.com/kozaxinan\">Sinan Kozak</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.5.13\"><img src=\"https://img.shields.io/badge/Bintray-3.5.13-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Use single version for strictly in mockito-android [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2053\">#2053</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2053\">mockito/mockito#2053</a>)</li>\n</ul>\n<h2>v3.5.12</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.12</h4>\n<ul>\n<li>2020-09-18 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.11...v3.5.12\">1 commit</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.5.12\"><img src=\"https://img.shields.io/badge/Bintray-3.5.12-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Update Byte Buddy. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2050\">#2050</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2050\">mockito/mockito#2050</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/0ddbcb689e43f6a01f549c5efdd75defb39ebc14\"><code>0ddbcb6</code></a> 3.5.13 release (previous 3.5.12) + release notes updated by CI build 4808</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/079e847891959a7a3cbb5a8390efa65eba583b7a\"><code>079e847</code></a> Use single version for strict dependency check in mockito-android (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2053\">#2053</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/e338d9167cb5a6acb4b3ec5f02bec3eb4769e4ae\"><code>e338d91</code></a> 3.5.12 release (previous 3.5.11) + release notes updated by CI build 4800</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/6ec033c1e4a2c59a636573d79620fc287ebe86ae\"><code>6ec033c</code></a> Update Byte Buddy to 1.10.15 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2050\">#2050</a>)</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.5.11...v3.5.13\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.11&new-version=3.5.13)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.11&new-version=3.5.13)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7089", "3.x: Fix Flowable.concatMap backpressure w/ scalars", "David Karnok", "akarnokd", "10/05/20, 12:07:15 PM", "In `concatMap`, there is a shortcut for when the mapped `Flowable` turns out to be a scalar value and thus the full subscription process can be skipped. This used a so-called weak subscription that expected non-concurrent requesting to emits its single value.\r\n\r\nUnfortunately, there is a race condition for when the downstream requests exactly when this weak subscription is activated, resulting in either double emission or no emission at all. The fix is to do the proper `compareAndSet` to ensure the emission happens exactly once.\r\n\r\nDiscovered while running the build matrix and a test failed with:\r\n\r\n```\r\nio.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest > boundaryFusionDelayError FAILED\r\n    java.lang.AssertionError: Error(s) present: [io.reactivex.rxjava3.exceptions.MissingBackpressureException: Queue is full?!] (latch = 0, values = 1, errors = 1, completions = 0)\r\n        at io.reactivex.rxjava3.observers.BaseTestConsumer.fail(BaseTestConsumer.java:125)\r\n        at io.reactivex.rxjava3.observers.BaseTestConsumer.assertNoErrors(BaseTestConsumer.java:212)\r\n        at io.reactivex.rxjava3.observers.BaseTestConsumer.assertResult(BaseTestConsumer.java:525)\r\n        at io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest.boundaryFusionDelayError(FlowableConcatMapSchedulerTest.java:94)\r\n        Caused by:\r\n        io.reactivex.rxjava3.exceptions.MissingBackpressureException: Queue is full?!\r\n            at io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.onNext(FlowableObserveOn.java:114)\r\n            at io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$ConcatMapDelayed.innerNext(FlowableConcatMapScheduler.java:396)\r\n            at io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$ConcatMapInner.onNext(FlowableConcatMap.java:559)\r\n            at io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMap$WeakScalarSubscription.request(FlowableConcatMap.java:343)\r\n            at io.reactivex.rxjava3.internal.subscriptions.SubscriptionArbiter.setSubscription(SubscriptionArbiter.java:99)\r\n            at io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$ConcatMapDelayed.run(FlowableConcatMapScheduler.java:531)\r\n            at io.reactivex.rxjava3.internal.schedulers.ImmediateThinScheduler$ImmediateThinWorker.schedule(ImmediateThinScheduler.java:89)\r\n            at io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$ConcatMapDelayed.schedule(FlowableConcatMapScheduler.java:431)\r\n            at io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapScheduler$BaseConcatMapSubscriber.onNext(FlowableConcatMapScheduler.java:156)\r\n            at io.reactivex.rxjava3.internal.operators.flowable.FlowableMap$MapSubscriber.onNext(FlowableMap.java:69)\r\n            at io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$ObserveOnSubscriber.runSync(FlowableObserveOn.java:337)\r\n            at io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOn$BaseObserveOnSubscriber.run(FlowableObserveOn.java:174)\r\n            at io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.run(ScheduledRunnable.java:65)\r\n            at io.reactivex.rxjava3.internal.schedulers.ScheduledRunnable.call(ScheduledRunnable.java:56)\r\n            at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n            at java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\r\n            at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130)\r\n            at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630)\r\n            at java.base/java.lang.Thread.run(Thread.java:832)\r\n```", "NaN"], ["7091", "2.x: Fix Flowable.concatMap backpressure w/ scalars", "David Karnok", "akarnokd", "10/05/20, 03:49:37 PM", "In `concatMap`, there is a shortcut for when the mapped `Flowable` turns out to be a scalar value and thus the full subscription process can be skipped. This used a so-called weak subscription that expected non-concurrent requesting to emits its single value.\r\n\r\nUnfortunately, there is a race condition for when the downstream requests exactly when this weak subscription is activated, resulting in either double emission or no emission at all. The fix is to do the proper `compareAndSet` to ensure the emission happens exactly once.\r\n\r\nBackport of #7089", "NaN"], ["7093", "Clarify the documentation for scan operators", "David Karnok", "akarnokd", "10/06/20, 08:58:23 PM", "Improves the wording the `scan` operators.", "NaN"], ["7094", "Bump junit from 4.13 to 4.13.1", null, "dependabot-preview[bot]", "10/12/20, 10:12:04 AM", "Bumps [junit](https://github.com/junit-team/junit4) from 4.13 to 4.13.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.1</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.md\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/blob/main/doc/ReleaseNotes4.13.1.md\">junit's changelog</a>.</em></p>\n<blockquote>\n<h2>Summary of changes in version 4.13.1</h2>\n<h1>Rules</h1>\n<h3>Security fix: <code>TemporaryFolder</code> now limits access to temporary folders on Java 1.7 or later</h3>\n<p>A local information disclosure vulnerability in <code>TemporaryFolder</code> has been fixed. See the published <a href=\"https://github.com/junit-team/junit4/security/advisories/GHSA-269g-pwp5-87pp\">security advisory</a> for details.</p>\n<h1>Test Runners</h1>\n<h3>[Pull request <a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1669\">#1669</a>:](<a href=\"https://github-redirect.dependabot.com/junit-team/junit/pull/1669\">junit-team/junit#1669</a>) Make <code>FrameworkField</code> constructor public</h3>\n<p>Prior to this change, custom runners could make <code>FrameworkMethod</code> instances, but not <code>FrameworkField</code> instances. This small change allows for both now, because <code>FrameworkField</code>'s constructor has been promoted from package-private to public.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1b683f4ec07bcfa40149f086d32240f805487e66\"><code>1b683f4</code></a> [maven-release-plugin] prepare release r4.13.1</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ce6ce3aadc070db2902698fe0d3dc6729cd631f2\"><code>ce6ce3a</code></a> Draft 4.13.1 release notes</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/c29dd8239d6b353e699397eb090a1fd27411fa24\"><code>c29dd82</code></a> Change version to 4.13.1-SNAPSHOT</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/1d174861f0b64f97ab0722bb324a760bfb02f567\"><code>1d17486</code></a> Add a link to assertThrows in exception testing</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/543905df72ff10364b94dda27552efebf3dd04e9\"><code>543905d</code></a> Use separate line for annotation in Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/510e906b391e7e46a346e1c852416dc7be934944\"><code>510e906</code></a> Add sub headlines to class Javadoc</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/610155b8c22138329f0723eec22521627dbc52ae\"><code>610155b</code></a> Merge pull request from GHSA-269g-pwp5-87pp</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b6cfd1e3d736cc2106242a8be799615b472c7fec\"><code>b6cfd1e</code></a> Explicitly wrap float parameter for consistency (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1671\">#1671</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/a5d205c7956dbed302b3bb5ecde5ba4299f0b646\"><code>a5d205c</code></a> Fix GitHub link in FAQ (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1672\">#1672</a>)</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/3a5c6b4d08f408c8ca6a8e0bae71a9bc5a8f97e8\"><code>3a5c6b4</code></a> Deprecated since jdk9 replacing constructor instance of Double and Float (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1660\">#1660</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.13...r4.13.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=gradle&previous-version=4.13&new-version=4.13.1)](https://dependabot.com/compatibility-score/?dependency-name=junit:junit&package-manager=gradle&previous-version=4.13&new-version=4.13.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7097", "Bump biz.aQute.bnd.gradle from 5.1.2 to 5.2.0", null, "dependabot-preview[bot]", "10/16/20, 07:45:02 AM", "Bumps [biz.aQute.bnd.gradle](https://github.com/bndtools/bnd) from 5.1.2 to 5.2.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/bndtools/bnd/releases\">biz.aQute.bnd.gradle's releases</a>.</em></p>\n<blockquote>\n<h2>Bnd/Bndtools 5.2.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.2.0\">Release Notes</a>.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/bndtools/bnd/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.1.2&new-version=5.2.0)](https://dependabot.com/compatibility-score/?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.1.2&new-version=5.2.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7098", "Bump guava from 29.0-jre to 30.0-jre", null, "dependabot-preview[bot]", "10/19/20, 07:26:10 AM", "Bumps [guava](https://github.com/google/guava) from 29.0-jre to 30.0-jre.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/google/guava/releases\">guava's releases</a>.</em></p>\n<blockquote>\n<h2>30.0</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.0-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.0-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.0-jre/api/docs/\">30.0-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.0-android/api/docs/\">30.0-android</a></li>\n</ul>\n<h3>JDiff</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.0-jre/api/diffs/\">30.0-jre vs. 29.0-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.0-android/api/diffs/\">30.0-android vs. 29.0-android</a></li>\n<li><a href=\"http://guava.dev/releases/30.0-android/api/androiddiffs/\">30.0-android vs. 30.0-jre</a></li>\n</ul>\n<h3>Changelog</h3>\n<ul>\n<li><a href=\"https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ\">Guava types can no longer be sent over GWT-RPC.</a> Even the earlier, temporary way to reenable support (<code>guava.gwt.emergency_reenable_rpc</code>) no longer has an effect. (0cb89dd110)</li>\n<li><code>cache</code>: Fixed memory leak in <code>LocalCache</code> under <a href=\"https://developers.google.com/j2objc\">j2objc</a>. (5e519d91d0)</li>\n<li><code>collect</code>: Added two-element <code>min</code> and <code>max</code> methods to <code>Comparators</code>. (958186c071)</li>\n<li><code>collect</code>: Removed <code>@Beta</code> from <code>Multimaps.toMultimap</code>. (b6b4dc49b1)</li>\n<li><code>collect</code>: Made the set returned by <code>ImmutableMap&lt;K, V&gt;.keySet()</code> serializable as long as <code>K</code> is serializable, even if <code>V</code> is not (and similarly for <code>values()</code>). (f5a69c33fc)</li>\n<li><code>collect</code>: Fixed bug in <code>powerSet.equals(otherPowerSet)</code> would erroneously return <code>false</code> if the two power sets' underlying sets were equal but had a different iteration order. (215b1f0dd7)</li>\n<li><code>collect</code>: Eliminated <a href=\"https://developers.google.com/j2objc\">j2objc</a> retain-cycle in <code>SingletonImmutableBiMap</code>. (0ad38b88bd)</li>\n<li><code>eventbus</code>: Prevented <code>@Subscribe</code> from being applied to a method that takes a primitive, as that will never be called. (554546c971)</li>\n<li><code>graph</code>: Made <code>Traverser.breadthFirst()</code> lazier, and optimized <code>Traverser</code> more generally. (32f2d770f7, b5210ca95c)</li>\n<li><code>graph</code>: Added <code>@DoNotMock</code> to <code>Traverser</code>. (6410f18c06)</li>\n<li><code>io</code>: Deprecated <code>Files.createTempDir()</code>. (fec0dbc463) (CVE forthcoming)</li>\n<li><code>io</code>: Upgraded <code>ByteStreams.copy(InputStream, OutputStream)</code> to use the faster <code>FileChannel</code> if possible. (a1e9a0bd12)</li>\n<li><code>math</code>: Added <code>roundToDouble</code> to <code>BigDecimalMath</code>, <code>BigIntegerMath</code>, and <code>LongMath</code>. (bee4f3c7ed, 2b5c096ddf, 633abf2c62)</li>\n<li><code>net</code>: Added <code>MediaType</code> constants for several font/ types. (571cf66bac)</li>\n<li><code>net</code>: Added <code>HttpHeaders</code> constants for <code>Cross-Origin-Embedder-Policy(-Report-Only)?</code>. (c3bf73187a)</li>\n<li><code>testing</code>: Made <code>EqualsTester</code> test that non-<code>String</code> objects are not equal to their <code>String</code> representations. (c9570eae69)</li>\n<li><code>util.concurrent</code>: Added <code>ClosingFuture</code>. (52e048ed6c)</li>\n<li><code>util.concurrent</code>: Removed the deprecated 1-arg <code>ServiceManager.addListener(Listener)</code>. Use the 2-arg <code>addListener(Listener, Executor)</code> overload, setting the executor to <code>directExecutor()</code> for equivalent behavior. (dfb0001714)</li>\n<li><code>util.concurrent</code>: Changed <code>AbstractFuture.toString()</code> to no longer include the <code>toString()</code> of the result. (2ebf27fd45)</li>\n<li><code>util.concurrent</code>: Added <code>awaitTerminationUninterruptibly</code>. (f07b9540dc)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/google/guava/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=29.0-jre&new-version=30.0-jre)](https://dependabot.com/compatibility-score/?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=29.0-jre&new-version=30.0-jre)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7099", "Bump mockito-core from 3.5.13 to 3.5.15", null, "dependabot-preview[bot]", "10/20/20, 08:25:56 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.5.13 to 3.5.15.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.5.15</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.15</h4>\n<ul>\n<li>2020-10-19 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.14...v3.5.15\">4 commits</a> by <a href=\"https://github.com/raphw\">Rafael Winterhalter</a> - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.5.15\"><img src=\"https://img.shields.io/badge/Bintray-3.5.15-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Mock resolver plugin [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2042\">#2042</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2042\">mockito/mockito#2042</a>)</li>\n</ul>\n<h2>v3.5.14</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.5.14</h4>\n<ul>\n<li>2020-10-17 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.13...v3.5.14\">2 commits</a> by <a href=\"https://github.com/Marcono1234\">Marcono1234</a> (1), <a href=\"https://github.com/shestee\">shestee</a> (1) - published to <a href=\"https://bintray.com/mockito/maven/mockito-development/3.5.14\"><img src=\"https://img.shields.io/badge/Bintray-3.5.14-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2061\">#2061</a>: ArgumentMatcher error messages use lambda class names [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2071\">#2071</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2071\">mockito/mockito#2071</a>)</li>\n<li>Fixed typo in osgi.gradle [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2070\">#2070</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2070\">mockito/mockito#2070</a>)</li>\n<li>Lambda used as ArgumentMatcher causes decamelized lambda name to appear in error message [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2061\">#2061</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2061\">mockito/mockito#2061</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/18da8f2a874bf0d366453d9391e78ef861a833a6\"><code>18da8f2</code></a> 3.5.15 release (previous 3.5.14) + release notes updated by CI build 4819</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/e098342c3cfad32a8b183593aa6719fb66b72674\"><code>e098342</code></a> [ci maven-central-release] Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2042\">#2042</a> from mockito/mock-resolve...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/e388e924ccc018934def0eb189a2926fca6063cb\"><code>e388e92</code></a> 3.5.14 release (previous 3.5.13) + release notes updated by CI build 4814</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/214d66fa84af85026be9791456fccc06af2f6b61\"><code>214d66f</code></a> Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2061\">#2061</a>: ArgumentMatcher error messages use lambda class names (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2071\">#2071</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/b16ec17cafdbf4fb968413c4992f044c1bb9526a\"><code>b16ec17</code></a> Fix typo in osgi.gradle (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2070\">#2070</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/c81b028f4ac121f4939341ef724465d307274cd0\"><code>c81b028</code></a> Fixing &quot;best&quot; constructor choice.</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/48d817fe83c556e95cf84e87d9a119211351a08f\"><code>48d817f</code></a> Add mock resolver API to allow for resolving provided instances from third-pa...</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/e6fdaf766d42b9acda43ed1a7ced02b83859196d\"><code>e6fdaf7</code></a> Complete javadoc.</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.5.13...v3.5.15\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.13&new-version=3.5.15)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.13&new-version=3.5.15)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7102", "Bump build-info-extractor-gradle from 4.17.2 to 4.18.0", null, "dependabot-preview[bot]", "10/27/20, 07:28:09 AM", "Bumps build-info-extractor-gradle from 4.17.2 to 4.18.0.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.17.2&new-version=4.18.0)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.17.2&new-version=4.18.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7103", "Bump mockito-core from 3.5.15 to 3.6.0", null, "dependabot-preview[bot]", "10/27/20, 07:27:33 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.5.15 to 3.6.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.6.0</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Release notes were automatically generated by <a href=\"http://shipkit.org/\">Shipkit</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.0</h4>\n<ul>\n<li>2020-10-27 - <a href=\"https://github.com/mockito/mockito/compare/v3.5.15...v3.6.0\">7 commits</a> by <a href=\"https://github.com/mockitoguy\">Szczepan Faber</a> (4), <a href=\"https://github.com/shipkit-org\">shipkit-org</a> (2), <a href=\"https://github.com/TimvdLippe\">Tim van der Lippe</a> (1) - published to <a href=\"https://bintray.com/mockito/maven/mockito/3.6.0\"><img src=\"https://img.shields.io/badge/Bintray-3.6.0-green.svg\" alt=\"Bintray\" /></a></li>\n<li>Retry the release [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2078\">#2078</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2078\">mockito/mockito#2078</a>)</li>\n<li>Retry 3.6.0 release [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2077\">#2077</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2077\">mockito/mockito#2077</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/caac3535daaeb9370cd25f23694d3d059a72d8d9\"><code>caac353</code></a> 3.6.0 release (previous 3.5.15) + release notes updated by CI build 4836</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/b5bea2b81efab66f7bb2609694c871aa55ee64d9\"><code>b5bea2b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2078\">#2078</a> from mockito/sf2</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/80c1d4ab1a5f2a0c7318b78d03a368c18085553b\"><code>80c1d4a</code></a> Reverted to retry the release</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/f22a47786ebb776b5453fc595fa4a79eb7ec0b0c\"><code>f22a477</code></a> 3.6.0 release (previous 3.5.15) + release notes updated by CI build 4832</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/281a4b216256c68532d6cabd422f6df9c21afcda\"><code>281a4b2</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2077\">#2077</a> from mockito/sf2</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/23a9d6a7e32d2023c67cdb024d7fa24749e2ce0f\"><code>23a9d6a</code></a> Retry 3.6.0 release</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/9fadca578aceaa01ab1d09c6bbd21aa144c154db\"><code>9fadca5</code></a> 3.6.0 release (previous 3.5.15) + release notes updated by CI build 4828</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/eba5964a4b051bf566aaf46ca749cde2b36d96ba\"><code>eba5964</code></a> Publish new minor version to Maven Central</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.5.15...v3.6.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.15&new-version=3.6.0)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.5.15&new-version=3.6.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7104", "Switch to travis-ci.com as the org goes away", "David Karnok", "akarnokd", "10/30/20, 07:31:42 AM", "travis-ci.org will go defunct and the backend has been migrated to travis-ci.com. This PR updates the badge links and triggers the first build(s) there.", "NaN"], ["7106", "Bump gradle-animalsniffer-plugin from 1.5.1 to 1.5.2", null, "dependabot-preview[bot]", "11/05/20, 07:49:08 AM", "Bumps gradle-animalsniffer-plugin from 1.5.1 to 1.5.2.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=ru.vyarus:gradle-animalsniffer-plugin&package-manager=gradle&previous-version=1.5.1&new-version=1.5.2)](https://dependabot.com/compatibility-score/?dependency-name=ru.vyarus:gradle-animalsniffer-plugin&package-manager=gradle&previous-version=1.5.1&new-version=1.5.2)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7110", "3.x: Flowable scan/scanWith backpressure documentation update", "Fabio Barata", "fsbarata", "11/12/20, 10:13:14 AM", "Documented Flowable initial value scan variants upstream consumption pattern as it is different from the variant with no initial value.\r\n\r\n\r\nResolves #7109", "NaN"], ["7113", "3.x: Fix source locator code to support GitHub Actions folder layout", "David Karnok", "akarnokd", "11/20/20, 03:35:17 PM", "GitHub Action `actions/checkout@v2` downloads the files to a directory that doesn't appear to include the  `rxjava` name anymore and makes the source code tests unable to read the files.\r\n\r\nThis changes the locator to try for `src/main/java` in each parent directory relative to where the class files are located via `getResource`.\r\n\r\nThis is a preparation in case we have to bail from Travis CI. They now have a pricing model that in theory would be free for open source projects still but who knows in practice as there are hops apparently to get projects recognized as such.\r", "NaN"], ["7114", "3.x Switch from Travis CI to GitHub Actions", "David Karnok", "akarnokd", "11/20/20, 05:28:22 PM", "Recently, [Travis CI introduced](https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing) a pricing model that requires OSS projects to repeatedly apply for \"free build credits\". After consulting the internet, I decided to switch to GitHub Actions.\r\n\r\nGitHub Actions (GHA) uses a build system similar to Travis CI but their setup is slightly different and the logic in `.travis.yml` and in various other files have to be converted to it.\r\n\r\nThis PR introduces 4 actions depending on how the project is interacted with:\r\n- **PR builds**: used when someone posts a PR.\r\n- **Branch builds other than `3.x`**, used by dependabot or temporary branches.\r\n- **3.x pushes**: these generate snapshots\r\n- **releases**: when a new release is created\r\n\r\nThe latter two require secret information such as login credentials to Bintray, Sonatype and GitHub itself (for Javadocs pushback) and these have to be specified on the project's [secrets](https://github.com/ReactiveX/RxJava/settings/secrets/actions) page:\r\n\r\n- `BINTRAY_USER` (snapshot deploy)\r\n- `BINTRAY_KEY` (snapshot deploy)\r\n- `SONATYPE_USER` (release deploy)\r\n- `SONATYPE_PASSWORD` (release deploy)\r\n- `JAVADOCS_TOKEN` (used for pushing back the generated snapshot/release javadocs to `gh-pages`)\r\n\r\nUnfortunately, to verify these actions, I have to merge stuff into `3.x` to trigger snapshot and do an release candidate to trigger the release.", "NaN"], ["7115", "3.x: Update badge in README.md", "David Karnok", "akarnokd", "11/20/20, 06:10:40 PM", "Update the build badge to use the GitHub Actions Snapshot image (merged in PRs).", "NaN"], ["7116", "Bump mockito-core from 3.6.0 to 3.6.28", null, "dependabot-preview[bot]", "11/25/20, 08:24:15 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.6.0 to 3.6.28.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.6.28</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.28</h4>\n<ul>\n<li>2020-11-25 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.27...v3.6.28\">1 commit(s)</a> by Szczepan Faber</li>\n<li>No notable improvements. No pull requests (issues) were referenced from commits.</li>\n</ul>\n<h2>v3.6.27</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.27</h4>\n<ul>\n<li>2020-11-25 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.26...v3.6.27\">1 commit(s)</a> by Szczepan Faber</li>\n<li>No notable improvements. No pull requests (issues) were referenced from commits.</li>\n</ul>\n<h2>v3.6.26</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.26</h4>\n<ul>\n<li>2020-11-25 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.25...v3.6.26\">2 commit(s)</a> by Szczepan Faber, sfaber</li>\n<li>Enabled releases to Maven Central [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2111\">#2111</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2111\">mockito/mockito#2111</a>)</li>\n</ul>\n<h2>v3.6.25</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.25</h4>\n<ul>\n<li>2020-11-24 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.23...v3.6.25\">4 commit(s)</a> by Holger, Szczepan Faber, shestee</li>\n<li>Keep META-INF folder at top of published mockito-core jar [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2109\">#2109</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2109\">mockito/mockito#2109</a>)</li>\n<li>JarInputStream fails to get Manifest from published mockito-core [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2108\">#2108</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2108\">mockito/mockito#2108</a>)</li>\n<li>Fixed incorrect comment type in properties file [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2107\">#2107</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2107\">mockito/mockito#2107</a>)</li>\n<li>Avoid CI failures in forks [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2106\">#2106</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2106\">mockito/mockito#2106</a>)</li>\n</ul>\n<h2>v3.6.23</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.23</h4>\n<ul>\n<li>2020-11-15 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.22...v3.6.23\">4 commit(s)</a> by Rafael Winterhalter, Tim van der Lippe</li>\n<li>Update to OpenJDK 15. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2051\">#2051</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2051\">mockito/mockito#2051</a>)</li>\n</ul>\n<h2>v3.6.22</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.22</h4>\n<ul>\n<li>2020-11-15 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.19...v3.6.22\">7 commit(s)</a> by Rafael Winterhalter, Szczepan Faber</li>\n<li>Avoided parallel workflow execution [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2103\">#2103</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2103\">mockito/mockito#2103</a>)</li>\n<li>Commit message directives for CI workflow [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2101\">#2101</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2101\">mockito/mockito#2101</a>)</li>\n<li>Improve error message if initializer fails. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2098\">#2098</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2098\">mockito/mockito#2098</a>)</li>\n</ul>\n<h2>v3.6.19</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<!-- raw HTML omitted -->\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/3e036f87d268af86e4aade24d2d67f1be391989d\"><code>3e036f8</code></a> Force maven central release</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/ce2f0b63aa97f0fbf726b4f0928662c6e5fd387d\"><code>ce2f0b6</code></a> Fixed maven central releases</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/98abe38177afc38c102bc8a6cb45bfbcf233272c\"><code>98abe38</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2111\">#2111</a> from mockito/mvn-central</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/3213b49313749da62ee6ed75999161d629ca7292\"><code>3213b49</code></a> Enabled releases to Maven Central</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/fde5abb9f044a6b614eeb6a8c63d25fffe2df210\"><code>fde5abb</code></a> Keep META-INF folder at top of published mockito-core jar (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2109\">#2109</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/78b22fcf814c33e87585afed387cd9db0b6d36a5\"><code>78b22fc</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2106\">#2106</a> from mockito/mockitoguy-patch-3</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/2e4c214bd2e6660b1047c254ab13af7560f97372\"><code>2e4c214</code></a> Fix incorrect comment type in properties file (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2107\">#2107</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/f5419b0638b6b517a7d29991bf29639988242335\"><code>f5419b0</code></a> Avoid CI failures in forks</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/f8d0f1bc0d6b1bd4fd0f5954a6a75782438ee968\"><code>f8d0f1b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2051\">#2051</a> from mockito/jdk15</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/b8bb0f0905eb5434a35c8511fb4738548a9c9114\"><code>b8bb0f0</code></a> Adjust build to support Java 15.</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.6.0...v3.6.28\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.6.0&new-version=3.6.28)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.6.0&new-version=3.6.28)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7118", "Bump build-info-extractor-gradle from 4.18.0 to 4.18.1", null, "dependabot-preview[bot]", "11/26/20, 08:36:20 AM", "Bumps build-info-extractor-gradle from 4.18.0 to 4.18.1.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.18.0&new-version=4.18.1)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.18.0&new-version=4.18.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7121", "3.x: Remove unnecessary cancel/dispose calls from terminating using", "David Karnok", "akarnokd", "11/30/20, 07:21:15 PM", "Following up on a [Gitter.im report](https://gitter.im/ReactiveX/RxJava?at=5fc4fc11226043667c24e3b6), the `onComplete`/`onError` methods of the `using` operators were calling cancel/dispose on the upstream even though there is no reason to do such a thing and is also not allowed by Reactive Streams rule [2.3](https://github.com/reactive-streams/reactive-streams-jvm#2.3).\r\n\r\nThe original code's side-effect was that given a nested `using` pair, an `onComplete`/`onError` of the inner sequence would trigger a cancellation and resource release in the outer before/while the `onComplete`/`onError` signals propagate downstream and return back on a non-eager setting.\r\n\r", "NaN"], ["7123", "Bump build-info-extractor-gradle from 4.18.1 to 4.18.2", null, "dependabot-preview[bot]", "12/01/20, 08:26:47 AM", "Bumps build-info-extractor-gradle from 4.18.1 to 4.18.2.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.18.1&new-version=4.18.2)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.18.1&new-version=4.18.2)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7124", "3.x: Add onBackpressureReduce operator", "Andrey", "hotburger", "12/09/20, 10:15:52 AM", "Added one more backpressure strategy. It works like backpressure latest but instead of just dropping values it merge/reduce excessive items", "NaN"], ["7126", "3.x: Improve error messages in the test consumers", "David Karnok", "akarnokd", "12/06/20, 09:32:53 PM", "This PR improves the error messages reported in the `TestObserver` and `TestSubscriber`:\r\n\r\n- `assertValue(Predicate)` now shows the value that didn't pass the predicate\r\n- `assertValueAt(index, T)`:\r\n  - If the index is out of range, the message includes the valid range\r\n  - the message now includes the index argument where the failure happened\r\n- `assertValueAt(index, Predicate)`:\r\n  - If the index is out of range, the message includes the valid range\r\n  - shows the value at index that didn't pass the predicate\r\n  - the message now includes the index argument where the failure happened\r\n- `assertError(Predicate)` is now worded to indicate the exception did not pass the predicate\r\n\r\nIn addition, the verification tests for the error messages were not actually testing the error message with `assertThrows` and have been updated.\r\n\r\nResolves #7125 ", "NaN"], ["7127", "3.x: Improve Javadocs of Connectable sources", "David Karnok", "akarnokd", "12/07/20, 12:31:42 PM", "Improve the styling and wording of `ConnectableObservable` and `ConnectableFlowable`.", "NaN"], ["7129", "3.x: Add onBackpressureReduce operator", "Andrey", "hotburger", "12/09/20, 09:52:31 PM", "added one more overloaded version of onBackpressureReduce operator\r\n```\r\n@Experimental\r\n    @CheckReturnValue\r\n    @BackpressureSupport(BackpressureKind.UNBOUNDED_IN)\r\n    @SchedulerSupport(SchedulerSupport.NONE)\r\n    @NonNull\r\n    public final <R> Flowable<R> onBackpressureReduce(@NonNull Supplier<R> supplier, @NonNull BiFunction<R, ? super T, R> reducer) {\r\n        return RxJavaPlugins.onAssembly(new FlowableOnBackpressureReduceWith<>(this, supplier, reducer));\r\n    }\r\n```\r\n\r\nChanges:\r\n- Added `FlowableOnBackpressureReduceWith`\r\n- `AbstractBackpressureThrottlingSubscriber` has two types now T - upstream, R- downstream and inherited by 3 classes: `BackpressureLatestSubscriber`, `BackpressureReduceSubscriber` and `BackpressureReduceWithSubscriber`\r\n\r\nsuggest to review and merge after [this ](https://github.com/ReactiveX/RxJava/pull/7124)PR merged\r\n\r", "NaN"], ["7133", "adding 1.x 2.x 3.x javadoc to wiki sidebar", "Jean Lecordier", "jlecordier", "12/14/20, 06:22:06 AM", "This is a fix of the url located in the sidebar of the wiki, linking to the JavaDoc.  \r\nThe current url links to the 2.x documentation.  The fix links to the 1.x 2.x and 3.x documentations.", "NaN"], ["7134", "Bump guava from 30.0-jre to 30.1-jre", null, "dependabot-preview[bot]", "12/15/20, 07:58:55 AM", "Bumps [guava](https://github.com/google/guava) from 30.0-jre to 30.1-jre.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/google/guava/releases\">guava's releases</a>.</em></p>\n<blockquote>\n<h2>30.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1-jre/api/docs/\">30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1-android/api/docs/\">30.1-android</a></li>\n</ul>\n<h3>JDiff</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1-jre/api/diffs/\">30.1-jre vs. 30.0-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1-android/api/diffs/\">30.1-android vs. 30.0-android</a></li>\n<li><a href=\"http://guava.dev/releases/30.1-android/api/androiddiffs/\">30.1-android vs. 30.1-jre</a></li>\n</ul>\n<h3>Changelog</h3>\n<ul>\n<li>Introduced a warning log message when running <code>guava-android</code> under a Java 7 VM. (Android VMs are unaffected.) This warning is not <em>guaranteed</em> to be logged when running under Java 7, so please don't rely on it as your only warning about future problems. If the warning <em>itself</em> causes you trouble, you can eliminate it by silencing the logger for <code>com.google.common.base.MoreObjects$ToStringHelper</code> (which is used <em>only</em> for this warning). This warning prepares for <a href=\"https://github-redirect.dependabot.com/google/guava/issues/5269\">removing support for Java 7 in 2021</a>. Please report any problems. We have tried to make the warning as safe as possible, but anytime a common library logs, there is the potential for <a href=\"https://stackoverflow.com/a/41017717/28465\"><code>NullPointerException</code></a> or even <a href=\"https://stackoverflow.com/a/48009613/28465\">deadlock</a>. (To be clear, Guava will <em>not</em> log under Java 8 or Android, but it <em>may</em> log under Java 7.) (dc52e6e385)</li>\n<li><code>base</code>: Deprecated <code>StandardSystemProperty.JAVA_EXT_DIRS</code>. We do not plan to remove the API, but note that, under recent versions of Java, that property always has a value of <code>null</code>. (38abf07772)</li>\n<li><code>net</code>: Added <code>HttpHeaders</code> constants for <code>Origin-Isolation</code> and <code>X-Request-ID</code>. (a48fb4f724, 8319d201cd)</li>\n<li><code>reflect</code>: Added <code>ClassInfo.isTopLevel()</code>. (410627262b)</li>\n<li><code>util.concurrent</code>: Added <code>ClosingFuture.submitAsync(AsyncClosingCallable)</code>. (c5e2d8d5cb)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/google/guava/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=30.0-jre&new-version=30.1-jre)](https://dependabot.com/compatibility-score/?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=30.0-jre&new-version=30.1-jre)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7140", "Bump build-info-extractor-gradle from 4.18.2 to 4.18.3", null, "dependabot-preview[bot]", "12/30/20, 06:39:44 PM", "Bumps build-info-extractor-gradle from 4.18.2 to 4.18.3.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.18.2&new-version=4.18.3)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.18.2&new-version=4.18.3)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7141", "Bump mockito-core from 3.6.28 to 3.7.0", null, "dependabot-preview[bot]", "01/05/21, 07:21:51 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.6.28 to 3.7.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7.0</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.0</h4>\n<ul>\n<li>2021-01-04 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.54...v3.7.0\">2 commit(s)</a> by Szczepan Faber, Tim van der Lippe</li>\n<li>Publish new minor version to Maven central [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2165\">#2165</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2165\">mockito/mockito#2165</a>)</li>\n</ul>\n<h2>v3.6.54</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.54</h4>\n<ul>\n<li>2021-01-03 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.52...v3.6.54\">2 commit(s)</a> by Raymond Aug\u00e9, dependabot[bot]</li>\n<li>Bump kotlin-stdlib from 1.4.21 to 1.4.21-2 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2157\">#2157</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2157\">mockito/mockito#2157</a>)</li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1997\">#1997</a> : make mockito-junit-jupiter workin in OSGiMockitoExtensi\u2026 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2047\">#2047</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2047\">mockito/mockito#2047</a>)</li>\n<li>MockitoExtension cannot be used with JUnit 5 in OSGi integration tests [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1997\">#1997</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1997\">mockito/mockito#1997</a>)</li>\n</ul>\n<h2>v3.6.53</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.53</h4>\n<ul>\n<li>2021-01-03 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.52...v3.6.53\">1 commit(s)</a> by Raymond Aug\u00e9</li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1997\">#1997</a> : make mockito-junit-jupiter workin in OSGiMockitoExtensi\u2026 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2047\">#2047</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2047\">mockito/mockito#2047</a>)</li>\n<li>MockitoExtension cannot be used with JUnit 5 in OSGi integration tests [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1997\">#1997</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/1997\">mockito/mockito#1997</a>)</li>\n</ul>\n<h2>v3.6.52</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.52</h4>\n<ul>\n<li>2021-01-03 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.51...v3.6.52\">1 commit(s)</a> by Daniel Kroening</li>\n<li>Fix in the doc for &quot;Mocking object construction&quot; [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2145\">#2145</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2145\">mockito/mockito#2145</a>)</li>\n</ul>\n<h2>v3.6.51</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.51</h4>\n<ul>\n<li>2020-12-31 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.50...v3.6.51\">2 commit(s)</a> by Piotrek \u017bygie\u0142o, Szczepan Faber</li>\n<li>Add field type in <a href=\"https://github.com/Mock\">@Mock</a> example [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2158\">#2158</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2158\">mockito/mockito#2158</a>)</li>\n</ul>\n<h2>v3.6.50</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.50</h4>\n<ul>\n<li>2020-12-31 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.49...v3.6.50\">3 commit(s)</a> by Michal, Szczepan Faber</li>\n<li>Apply new Shipkit Changelog plugin properties [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2163\">#2163</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2163\">mockito/mockito#2163</a>)</li>\n</ul>\n<h2>v3.6.49</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.6.49</h4>\n<ul>\n<li>2020-12-30 - <a href=\"https://github.com/mockito/mockito/compare/v3.6.48...v3.6.49\">2 commit(s)</a> by Szczepan Faber</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/318781de2905a1c254046c3aec49c42655313aa6\"><code>318781d</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2165\">#2165</a> from mockito/TimvdLippe-patch-2</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/0fb7ef58fbe46044ce76c42f37ee8234a3379d6a\"><code>0fb7ef5</code></a> Publish new minor version to Maven central</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/32eb7e490233ac36d54fe1d79975f8df704f756e\"><code>32eb7e4</code></a> Bump kotlin-stdlib from 1.4.21 to 1.4.21-2 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2157\">#2157</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/240d6e4b8eb3954cdd3285e345c6f8982bb76796\"><code>240d6e4</code></a> Make mockito-junit-jupiter work with JUnit 5 in OSGi integration tests (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2047\">#2047</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/1da75c2d6b4d42d751c31441f8bba4651e106a10\"><code>1da75c2</code></a> Fix in the Javadoc for &quot;Mocking object construction&quot; (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2145\">#2145</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/7d45fcd0a26d20e2acf4b0aedc044743736035bc\"><code>7d45fcd</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2158\">#2158</a> from pzygielo/type</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/47d901e218aa268f7545b0b77f610b886d2ce005\"><code>47d901e</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2163\">#2163</a> from shestee/release/3.x</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/6ade10a7963976d0440de8a738f0e947d6577937\"><code>6ade10a</code></a> Bumped version of Shipkit plugins</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/9126184434294d9091f259f2e9b68a9e10bc65ae\"><code>9126184</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2160\">#2160</a> from mockito/mockitoguy-patch-4</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/72d3a1002d9684ec2e332fbb2b8c5a18cce20173\"><code>72d3a10</code></a> Add field type in <a href=\"https://github.com/Mock\">@Mock</a> example</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.6.28...v3.7.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.6.28&new-version=3.7.0)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.6.28&new-version=3.7.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7144", "3.x: Update marbles of amb(), ambArray() and ambWith()", "David Karnok", "akarnokd", "01/08/21, 10:05:11 AM", "Update the marble diagrams in `Flowable` and `Observable`, indicating cancellation of the non-winners.\r\n\r\nResolves #6995\r\n\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.amb.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.ambArray.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Flowable.ambWith.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.amb.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.ambArray.png)\r\n![image](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/Observable.ambWith.png)", "NaN"], ["7145", "3.x: Fix take() mentioning the old limit() operator", "David Karnok", "akarnokd", "01/08/21, 10:23:03 AM", "The Javadocs of `take` still referenced the original `limit` operator.", "NaN"], ["7150", "3.x: Document Schedulers.from's RejectedExecutionException handling", "David Karnok", "akarnokd", "01/19/21, 05:23:32 PM", "Updates the 3 overloads of `Schedulers.from` to describe (in a concise manner) the cases when the `Executor` would throw a `RejectedExecutionException`. Such exceptions can't be reasonably handled from within RxJava.\r\n\r\nThere are typically two cases when such exception would occur:\r\n\r\n1) **The underlying Executor is shut down.** \r\n\r\nOperators such as `observeOn` guarantee worker-confinement when calling `onNext`, `onError` and `onComplete`. A failure to schedule would at best bypass this confinement, notifying the downstream on the current thread, at worst cause overlapping execution downstream.\r\n\r\nThe recommended workaround is to cancel all flows using the particular `Scheduler` after which the Executor can be shut down safely.\r\n\r\n2) **The underlying Executor temporarily rejects more work.**\r\n\r\nSuch temporary rejections are often used in traditional `Executor` usages to drop work or pause the submission of work. In RxJava though, there is often no 1:1 correspondence to signals (`onNext`, `onError` or `onComplete`). Some work may be correlated to several `onNext`s, other work may be due to downstream requests. Dropping any such work may lead to inconsistent flow state or livelocks.\r\n\r\nThe recommended workaround is to express limits on the execution via backpressure (e.g., `Flowable`s).    \r\n\r\nResolves #7149", "NaN"], ["7151", "3.x: onReduceBackpressure internals cleanup", "David Karnok", "akarnokd", "01/19/21, 04:41:37 PM", "- Simplify empty/non-empty cases.\r\n- Fix cancellation order and wrong fall-through.\r\n- Add deterministic test to cover the reduction cases.", "NaN"], ["7152", "Bump mockito-core from 3.7.0 to 3.7.7", null, "dependabot-preview[bot]", "01/18/21, 08:44:58 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.7.0 to 3.7.7.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.7.7</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.7</h4>\n<ul>\n<li>2021-01-16 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.6...v3.7.7\">1 commit(s)</a> by Stefan Bohn</li>\n<li>Fix reversed order of verify parameters [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2179\">#2179</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2179\">mockito/mockito#2179</a>)</li>\n<li>Feature request: Unify order of parameters [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2173\">#2173</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2173\">mockito/mockito#2173</a>)</li>\n</ul>\n<h2>v3.7.6</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.6</h4>\n<ul>\n<li>2021-01-15 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.5...v3.7.6\">1 commit(s)</a> by dependabot[bot]</li>\n<li>Bump versions.errorprone from 2.4.0 to 2.5.1 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2176\">#2176</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2176\">mockito/mockito#2176</a>)</li>\n</ul>\n<h2>v3.7.5</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.5</h4>\n<ul>\n<li>2021-01-15 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.4...v3.7.5\">1 commit(s)</a> by Per Lundberg</li>\n<li>ArgumentMatches: fix Javadoc typo/grammar [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2175\">#2175</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2175\">mockito/mockito#2175</a>)</li>\n</ul>\n<h2>v3.7.4</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.4</h4>\n<ul>\n<li>2021-01-12 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.3...v3.7.4\">2 commit(s)</a> by Szczepan Faber</li>\n<li>Travis -&gt; GH Actions [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2172\">#2172</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2172\">mockito/mockito#2172</a>)</li>\n</ul>\n<h2>v3.7.3</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.3</h4>\n<ul>\n<li>2021-01-11 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.2...v3.7.3\">2 commit(s)</a> by Michal Szestowicki, Szczepan Faber</li>\n<li>Bump Shipkit plugins versions [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2170\">#2170</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2170\">mockito/mockito#2170</a>)</li>\n</ul>\n<h2>v3.7.2</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.2</h4>\n<ul>\n<li>2021-01-06 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.1...v3.7.2\">2 commit(s)</a> by Slawomir Jaranowski, Szczepan Faber</li>\n<li>Endorsed MockitoTestNGListener in the documentation [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2140\">#2140</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2140\">mockito/mockito#2140</a>)</li>\n</ul>\n<h2>v3.7.1</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.1</h4>\n<ul>\n<li>2021-01-05 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.0...v3.7.1\">2 commit(s)</a> by Michal Szestowicki, Szczepan Faber</li>\n<li>Gradle build script tidy-up - renamed plugin name [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2168\">#2168</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2168\">mockito/mockito#2168</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/7b940bcead5240bd030bbe7acbb51c10be0a452b\"><code>7b940bc</code></a> Fix reversed order of verify parameters (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2179\">#2179</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/79f06bae95074c7c6d8ce862db100ab74edddf6e\"><code>79f06ba</code></a> Bump versions.errorprone from 2.4.0 to 2.5.1 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2176\">#2176</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/09bfe5ba2b2acbbd484bb16b989516e9a346b2c0\"><code>09bfe5b</code></a> Fix grammar in ArgumentMatchers JavaDoc (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2175\">#2175</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/ae001c9f8ae3be7a9dcb70588ac5e67227d8adbf\"><code>ae001c9</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2172\">#2172</a> from mockito/mockitoguy-patch-4</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/5bf62a389c242364ec87d200ae845aba0ea5a721\"><code>5bf62a3</code></a> Travis -&gt; GH Actions</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/4c569d189b14e19cc6a454fd8e6b8273b01d8acd\"><code>4c569d1</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2170\">#2170</a> from shestee/release/3.x</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/2cbd284469bf4c6f6e8f7bd3aeb00024575e6b7c\"><code>2cbd284</code></a> Bumped Shipkit plugins versions</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/9208854ef64240ebfb72e21e97e7434e8b60fbe8\"><code>9208854</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2140\">#2140</a> from slawekjaranowski/testng</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/975e4af4073fce646d8d9acb3680fca4b5d58e2a\"><code>975e4af</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2168\">#2168</a> from shestee/release/3.x</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/b90c3da04db60be226396f94473f31e5d11b40c1\"><code>b90c3da</code></a> Apply renamed plugin package</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.7.0...v3.7.7\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.7.0&new-version=3.7.7)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.7.0&new-version=3.7.7)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7159", "Bump build-info-extractor-gradle from 4.18.3 to 4.19.0", null, "dependabot-preview[bot]", "01/25/21, 07:42:08 AM", "Bumps build-info-extractor-gradle from 4.18.3 to 4.19.0.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.18.3&new-version=4.19.0)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.18.3&new-version=4.19.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7160", "Io Scheduler, Scheduled worker release.", "Sergio Garcia", "sgc-code", "01/25/21, 08:09:19 PM", "`IoScheduler` releases the workers back to the pool to be reused optimistically to reduce the number of threads being created. This could lead to deadlocks in some situations like this one:\r\n\r\n```\r\nFlowable.just(\"item\")\r\n        .observeOn(Schedulers.io())\r\n        .firstOrError()\r\n        .subscribe(__ -> {\r\n            for (int i = 0; i < 200; i++) {\r\n                Completable.complete()\r\n                        .observeOn(Schedulers.io())\r\n                        .blockingAwait();\r\n            }\r\n            System.out.println(\"Will never reach this\");\r\n        });\r\n```\r\nAs discussed on https://github.com/ReactiveX/RxJava/issues/7153, this PR allow to configure this behaviour.\r\nEnabling `rx3.io-scheduled-release` will guarantee that workers are not reused until all the processing has finished. \r\n\r\nOnce we merge this we, I can create a similar PR for the `2.x` branch\r", "NaN"], ["7162", "Io Scheduler, Scheduled worker release (v2.x)", "Sergio Garcia", "sgc-code", "01/26/21, 06:47:29 AM", "This is the same change as https://github.com/ReactiveX/RxJava/pull/7160 but targeting the 2.x branch\r\nRelated to issue https://github.com/ReactiveX/RxJava/issues/7153\r", "NaN"], ["7163", "3.x: TestScheduler option to use onSchedule hook", "David Karnok", "akarnokd", "01/27/21, 09:22:04 AM", "The `TestScheduler` is a bit inconsistent regarding the use of `RxJavaPlugins.onSchedule`. It extends `Scheduler` so the `scheduleDirect` methods do invoke the hook whereas the worker's `schedule` methods don't.\r\n\r\nThis PR adds a constructor flag to enable the use of the hook in the worker's `schedule` methods as well. This addition should avoid issues with existing tests not expecting the hook to be invoked all of a sudden.\r\n\r\nResolves #7119", "NaN"], ["7164", "Updating documentation for scheduleActual method", "Archish Thakkar", "Archish27", "01/26/21, 05:23:18 PM", "Remove unnecessary sentence from `NewThreadWorker.scheduleActual`.\r\n\r\nResolves #7161", "NaN"], ["7165", "3.x: Add fusion support to concatMap{Maybe|Single|Completable}", "David Karnok", "akarnokd", "01/27/21, 03:46:34 PM", "This PR adds front fusion support to\r\n- `Flowable.concatMapCompletable`\r\n- `Flowable.concatMapMaybe`\r\n- `Flowable.concatMapSingle`\r\n- `Observable.concatMapCompletable`\r\n- `Observable.concatMapMaybe`\r\n- `Observable.concatMapSingle`\r\n\r\nThe operators have been tidied up by factoring out common code paths.\r\n\r\nIn addition, the `DeferredScalarSubscription`'s fusion-emission had to be fixed. In async fusion mode, `onNext(null)` is generally expected from the upstream but `DeferredScalarSubscription` sent the value itself. Now it correctly sends `null`. (`DeferredScalarDisposable` already did this correctly).\r\n\r\nResolves #7061", "NaN"], ["7168", "3.x: Improve Javadocs style of Schedulers", "David Karnok", "akarnokd", "01/27/21, 10:46:57 AM", "Add the proper links and code blocks to improve style to `io.reactivex.rxjava3.schedulers.Schedulers`.", "NaN"], ["7169", "3.x: Introduce property rx3.scheduler.use-nanotime", null, "SergejIsbrecht", "01/28/21, 03:29:05 PM", "Fixes #7154", "NaN"], ["7170", "2.x: Introduce property rx2.scheduler.use-nanotime (#7154)", null, "SergejIsbrecht", "01/28/21, 03:49:52 PM", "Fixes #7169 ", "NaN"], ["7171", "Bump build-info-extractor-gradle from 4.19.0 to 4.20.0", null, "dependabot-preview[bot]", "01/29/21, 07:56:25 AM", "Bumps build-info-extractor-gradle from 4.19.0 to 4.20.0.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.19.0&new-version=4.20.0)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.19.0&new-version=4.20.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7173", "3.x: Workaround for FutureTask.toString + JDK 11 build", "David Karnok", "akarnokd", "02/01/21, 08:47:58 AM", "Starting from JDK 10, the `FutureTask.toString` can now print the inner callable routine, which if somehow references the parent `FutureTask` again, it leads to `StackOverflowError`. This can happen in RxJava because `AbstractDirectTask` and `ScheduledRunnable` store the `Future` object returned by the executor in a reference field that gets accessed by their default `toString` implementation.\r\n\r\nThe fix is to define custom `toString`s that break this cycle. Note that we can't print the underlying `Runnable` either because that could also reference something in a circular manner. In addition, the release of the `runner` `Thread` marker has been moved closer to the exit of the wrappers which helps with the state determination and self-cancellation.\r\n\r\nTo verify the fix works, a new GitHub Action has been added, targeting JDK 11 as the issue does not manifest itself under the main target JDK 8.\r\n\r\nResolves #7172", "NaN"], ["7176", "3.x: Allow reruns of release actions by enabling bintray.override", "David Karnok", "akarnokd", "02/02/21, 11:36:36 AM", "By default, the bintray plugin only uploads a particular release version once. However, if the maven release fails afterwards, re-running the GitHub Action (GHA) would now fail with duplicate release error.\r\n\r\nThis setting of the bintray plugin allows overriding existing releases thus the GHA could be rerun and hopefully succeed next time.\r\n\r\nNote to test this, a release or pre-release has to be issued so the next release for RxJava has to do release-candidates (RC1,...) first.", "NaN"], ["7178", "Fix the typos", "Wayne Yang", "ShengChangYang", "02/02/21, 06:02:29 PM", "Fix the javadoc typos of #7150.", "NaN"], ["7181", "3.x: Release to Sonatype directly", "David Karnok", "akarnokd", "02/05/21, 04:48:09 PM", "Update the release process to use Sonatype directly via the help of the `com.vanniktech:gradle-maven-publish-plugin`.\r\n\r\nIn order for it to work, two secrets has to be set in the [settings](https://github.com/ReactiveX/RxJava/settings/secrets/actions):\r\n\r\n - `SIGNING_PRIVATE_KEY`\r\n- `SIGNING_PASSWORD`\r\n\r\nThe `SIGNING_PRIVATE_KEY` should be the ascii-armored private key to sign the JAR files and can be generated from a pgp keychain:\r\n\r\n```\r\ngpg --export-secret-key --armor ___key_name_here___ > private_key.asc\r\n```\r\n\r\nThe `SIGNING_PASSWORD` is then the password for that `private_key.asc`.\r\n\r\nI tested the process on my local machine as much as I could, but we'll only know if it really works when doing an RxJava release.\r\n\r\nResolves #7179\r", "NaN"], ["7182", "Bump jmh-gradle-plugin from 0.5.2 to 0.5.3", null, "dependabot-preview[bot]", "02/16/21, 08:40:54 AM", "Bumps jmh-gradle-plugin from 0.5.2 to 0.5.3.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=me.champeau.gradle:jmh-gradle-plugin&package-manager=gradle&previous-version=0.5.2&new-version=0.5.3)](https://dependabot.com/compatibility-score/?dependency-name=me.champeau.gradle:jmh-gradle-plugin&package-manager=gradle&previous-version=0.5.2&new-version=0.5.3)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7184", "3.x: Upgrade to Gradle 6.8.2", "David Karnok", "akarnokd", "02/13/21, 08:20:07 AM", "Upgrade Gradle.", "NaN"], ["7186", "Bump gradle-maven-publish-plugin from 0.13.0 to 0.14.1", null, "dependabot-preview[bot]", "02/13/21, 09:10:37 AM", "Bumps [gradle-maven-publish-plugin](https://github.com/vanniktech/gradle-maven-publish-plugin) from 0.13.0 to 0.14.1.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/blob/master/CHANGELOG.md\">gradle-maven-publish-plugin's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 0.14.1 <em>(2021-02-11)</em></h2>\n<ul>\n<li>fix false positive deprecation warnings</li>\n<li>fix typos in deprecation warnings</li>\n</ul>\n<h2>Version 0.14.0 <em>(2021-02-10)</em></h2>\n<ul>\n<li>enable publishing Kotlin/JS projects</li>\n<li>fixed compatibility with Kotlin Multiplatform projects using Kotlin 1.4.30</li>\n<li>fixed compatibility with Gradle plugin projects using Gradle 6.8</li>\n<li>make <code>closeAndReleaseRepository</code> more flexible in choosing a repository</li>\n<li>deprecated the <code>targets</code> API, check out the README on how to add more repositories</li>\n<li>minimum supported Gradle version is now 6.6</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/daa6f01690ae8db74f669cb9bfd4a87ec7964ae6\"><code>daa6f01</code></a> Prepare version 0.14.1</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/37e66fda307fd54b87f158a4860d992626c71d53\"><code>37e66fd</code></a> fix deprecation warnings (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/187\">#187</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/1d4e8c9c2c82ec759993d7503123e1233b31a9d8\"><code>1d4e8c9</code></a> Prepare next development version.</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/34a39cfc4e17a4ef2c926a09325f07426641cf78\"><code>34a39cf</code></a> fix typo in release workflow</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/c0072fedc7f257545d0da3a89da859acc0b1534f\"><code>c0072fe</code></a> Prepare version 0.14.0</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/f6c13c5330c83757a25f9e51ec558db0bb344fb3\"><code>f6c13c5</code></a> deprecate old target API (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/183\">#183</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/8d6a97cf40e128b0cbcdfc024453d8fa7bbd8e42\"><code>8d6a97c</code></a> bump Gradle to 6.8.2 (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/180\">#180</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/37662796211a9b6410f21dfa5956178e3c999be5\"><code>3766279</code></a> simplify Nexus task setup and option to specify repository (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/182\">#182</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/39a8e140774ed3422061794d8fd9e862241f3e01\"><code>39a8e14</code></a> some cleanups (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/178\">#178</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/1f52d7c3fd5064ad2ca818c2242b306a70e39524\"><code>1f52d7c</code></a> update Kotlin to 1.4.30 (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/179\">#179</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/compare/0.13.0...0.14.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.vanniktech:gradle-maven-publish-plugin&package-manager=gradle&previous-version=0.13.0&new-version=0.14.1)](https://dependabot.com/compatibility-score/?dependency-name=com.vanniktech:gradle-maven-publish-plugin&package-manager=gradle&previous-version=0.13.0&new-version=0.14.1)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7188", "Bump junit from 4.13.1 to 4.13.2", null, "dependabot-preview[bot]", "02/15/21, 08:42:16 AM", "Bumps [junit](https://github.com/junit-team/junit4) from 4.13.1 to 4.13.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/junit-team/junit4/releases\">junit's releases</a>.</em></p>\n<blockquote>\n<h2>JUnit 4.13.2</h2>\n<p>Please refer to the <a href=\"https://github.com/junit-team/junit/blob/HEAD/doc/ReleaseNotes4.13.2.md\">release notes</a> for details.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/junit-team/junit4/commit/05fe2a64f59127c02135be22f416e91260d6ede6\"><code>05fe2a6</code></a> [maven-release-plugin] prepare release r4.13.2</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/ff57344f7171ea8b0935c4f842cacf1097266592\"><code>ff57344</code></a> Add build for JDK 17-ea</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/02aaa01b8f74c0eb496d76685ec49fddeb311087\"><code>02aaa01</code></a> Improve check that thread is stopped</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/e9a75f4be71a4d5a794ccd063522eea4b0f3194f\"><code>e9a75f4</code></a> Merge test for exception type and message</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/d27ad5259228e84c235dac24cd62f974ac0a8e1d\"><code>d27ad52</code></a> Rename DelegateStatement to DelegatingStatement</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/b83dc2e8c4ff06cf233cd347f1280bb417482985\"><code>b83dc2e</code></a> Better name for test that stops statement</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/527f3a3d0d71ad6dc66ede6f68f6fc316904ed2a\"><code>527f3a3</code></a> Replace InfiniteLoop with RunForASecond</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/2db63942882d91020b46d7333285e5c94f1d1e52\"><code>2db6394</code></a> Tidy up FailOnTimeoutTest</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/64634e1c3e357251a84278c26b73b04fc3450ea3\"><code>64634e1</code></a> Update 4.13.2 release notes to document pull 1654</li>\n<li><a href=\"https://github.com/junit-team/junit4/commit/f8ee412316b1a94d3dc35498359cc2f0ca273216\"><code>f8ee412</code></a> Fix serialization of AssumptionViolatedException (<a href=\"https://github-redirect.dependabot.com/junit-team/junit4/issues/1654\">#1654</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/junit-team/junit4/compare/r4.13.1...r4.13.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=gradle&previous-version=4.13.1&new-version=4.13.2)](https://dependabot.com/compatibility-score/?dependency-name=junit:junit&package-manager=gradle&previous-version=4.13.1&new-version=4.13.2)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7189", "Bump gradle-maven-publish-plugin from 0.14.1 to 0.14.2", null, "dependabot-preview[bot]", "02/15/21, 08:27:39 AM", "Bumps [gradle-maven-publish-plugin](https://github.com/vanniktech/gradle-maven-publish-plugin) from 0.14.1 to 0.14.2.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/blob/master/CHANGELOG.md\">gradle-maven-publish-plugin's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 0.14.2 <em>(2021-02-14)</em></h2>\n<ul>\n<li>fix artifact id in Kotlin Multiplatform projects being incorrect</li>\n<li>fix <code>closeAndReleaseRepository</code> requiring callers to pass <code>--repository</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/1544b1ae609cf52ddd8c1c78df5fd493f1f6cad2\"><code>1544b1a</code></a> Prepare version 0.14.2</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/86acc5dc98a57ec02c1999a50e27620ff95d6009\"><code>86acc5d</code></a> add missing <a href=\"https://github.com/Optional\"><code>@Optional</code></a> annotation to closeAndReleaseRepository (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/194\">#194</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/a3f76d17ad775ec374b6616ba6d9b744b53d4556\"><code>a3f76d1</code></a> fix artifact id in Kotlin MPP projects (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/195\">#195</a>)</li>\n<li>See full diff in <a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/compare/0.14.1...0.14.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.vanniktech:gradle-maven-publish-plugin&package-manager=gradle&previous-version=0.14.1&new-version=0.14.2)](https://dependabot.com/compatibility-score/?dependency-name=com.vanniktech:gradle-maven-publish-plugin&package-manager=gradle&previous-version=0.14.1&new-version=0.14.2)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7191", "3.x: Add onSubscribe hook to ParallelFlowable operators", "David Karnok", "akarnokd", "02/24/21, 04:40:47 PM", "Parallel operators were missing an `RxJavaPlugins.onSubscribe` hook.\r\n\r\nResolves #7190", "NaN"], ["7192", "Bump gradle-animalsniffer-plugin from 1.5.2 to 1.5.3", null, "dependabot-preview[bot]", "02/18/21, 06:43:41 AM", "Bumps gradle-animalsniffer-plugin from 1.5.2 to 1.5.3.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=ru.vyarus:gradle-animalsniffer-plugin&package-manager=gradle&previous-version=1.5.2&new-version=1.5.3)](https://dependabot.com/compatibility-score/?dependency-name=ru.vyarus:gradle-animalsniffer-plugin&package-manager=gradle&previous-version=1.5.2&new-version=1.5.3)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7193", "Bump mockito-core from 3.7.7 to 3.8.0", null, "dependabot-preview[bot]", "02/23/21, 04:15:10 PM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.7.7 to 3.8.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.8.0</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.8.0</h4>\n<ul>\n<li>2021-02-22 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.18...v3.8.0\">1 commit(s)</a> by Tim van der Lippe</li>\n<li>Publish new minor version to Maven central [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2213\">#2213</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2213\">mockito/mockito#2213</a>)</li>\n</ul>\n<h2>v3.7.18</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.18</h4>\n<ul>\n<li>2021-02-15 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.17...v3.7.18\">1 commit(s)</a> by Ryan Tandy</li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2204\">#2204</a>: Ignore Groovy methods annotated with Internal [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2207\">#2207</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2207\">mockito/mockito#2207</a>)</li>\n<li>Groovy 3.0 internal methods are not ignored as they should be [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2204\">#2204</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2204\">mockito/mockito#2204</a>)</li>\n</ul>\n<h2>v3.7.17</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.17</h4>\n<ul>\n<li>2021-02-15 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.16...v3.7.17\">1 commit(s)</a> by dependabot[bot]</li>\n<li>Bump junit from 4.13.1 to 4.13.2 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2205\">#2205</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2205\">mockito/mockito#2205</a>)</li>\n</ul>\n<h2>v3.7.16</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.16</h4>\n<ul>\n<li>2021-02-11 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.15...v3.7.16\">1 commit(s)</a> by Rafael Winterhalter</li>\n<li>Add API for clearing mocks. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2194\">#2194</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2194\">mockito/mockito#2194</a>)</li>\n</ul>\n<h2>v3.7.15</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.15</h4>\n<ul>\n<li>2021-02-05 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.13...v3.7.15\">2 commit(s)</a> by dependabot[bot]</li>\n<li>Bump versions.junitJupiter from 5.7.0 to 5.7.1 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2199\">#2199</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2199\">mockito/mockito#2199</a>)</li>\n<li>Bump junit-platform-launcher from 1.7.0 to 1.7.1 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2198\">#2198</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2198\">mockito/mockito#2198</a>)</li>\n</ul>\n<h2>v3.7.14</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.14</h4>\n<ul>\n<li>2021-02-05 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.13...v3.7.14\">1 commit(s)</a> by dependabot[bot]</li>\n<li>Bump versions.junitJupiter from 5.7.0 to 5.7.1 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2199\">#2199</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2199\">mockito/mockito#2199</a>)</li>\n</ul>\n<h2>v3.7.13</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.7.13</h4>\n<ul>\n<li>2021-02-04 - <a href=\"https://github.com/mockito/mockito/compare/v3.7.11...v3.7.13\">2 commit(s)</a> by dependabot[bot]</li>\n<li>Bump kotlin-stdlib from 1.4.21-2 to 1.4.30 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2196\">#2196</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2196\">mockito/mockito#2196</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/900552416c42a494c564a314a34072afc3cc0502\"><code>9005524</code></a> Publish new minor version to Maven central (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2213\">#2213</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/84774556217c23472e54ff9ffe32bc041a40426d\"><code>8477455</code></a> Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2204\">#2204</a>: Ignore Groovy methods annotated with Internal (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2207\">#2207</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/c2488e0a2a0682bd396e9260b0863b89ee554437\"><code>c2488e0</code></a> Bump junit from 4.13.1 to 4.13.2 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2205\">#2205</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/e88fe26110afd6641c464cb0e87bd898b41bf457\"><code>e88fe26</code></a> Add API for clearing mocks. (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2194\">#2194</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/3bffcd0e8f9e1e0fe5678a99e7e9f37426e10635\"><code>3bffcd0</code></a> Bump junit-platform-launcher from 1.7.0 to 1.7.1 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2198\">#2198</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/632a0c829a9d9fe6f55d89e4f4593a3d76a6d4cc\"><code>632a0c8</code></a> Bump versions.junitJupiter from 5.7.0 to 5.7.1 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2199\">#2199</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/43facffb6861bb73c41560c39ba5aaa592a452fc\"><code>43facff</code></a> Bump versions.bytebuddy from 1.10.19 to 1.10.20 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2195\">#2195</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/7745992ae91751df134b7ea09e1ef1ca4d39242a\"><code>7745992</code></a> Bump kotlin-stdlib from 1.4.21-2 to 1.4.30 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2196\">#2196</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/780cfc18b06e82cf6592fc5f250b2e52f6f6a9e6\"><code>780cfc1</code></a> Bump shipkit-changelog from 1.1.1 to 1.1.4 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2190\">#2190</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/8a19d46c19fc00c56bfcaa01274bb2195d9ac6fe\"><code>8a19d46</code></a> Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2154\">#2154</a> : instrument java.lang.Object to fix toString invocations on inli...</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.7.7...v3.8.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.7.7&new-version=3.8.0)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.7.7&new-version=3.8.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7194", "Bump biz.aQute.bnd.gradle from 5.2.0 to 5.3.0", null, "dependabot-preview[bot]", "02/23/21, 07:51:42 AM", "Bumps [biz.aQute.bnd.gradle](https://github.com/bndtools/bnd) from 5.2.0 to 5.3.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/bndtools/bnd/releases\">biz.aQute.bnd.gradle's releases</a>.</em></p>\n<blockquote>\n<h2>Bnd/Bndtools 5.3.0</h2>\n<p>See <a href=\"https://github.com/bndtools/bnd/wiki/Changes-in-5.3.0\">Release Notes</a>.</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/bndtools/bnd/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.2.0&new-version=5.3.0)](https://dependabot.com/compatibility-score/?dependency-name=biz.aQute.bnd:biz.aQute.bnd.gradle&package-manager=gradle&previous-version=5.2.0&new-version=5.3.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7196", "3.x: Allow Single.zip and Maybe.zip result to be garbage collected", null, "LinkiPinki", "02/25/21, 07:02:59 AM", "Resolves #7195", "NaN"], ["7198", "Bump build-info-extractor-gradle from 4.20.0 to 4.21.0", null, "dependabot-preview[bot]", "02/26/21, 07:02:57 AM", "Bumps build-info-extractor-gradle from 4.20.0 to 4.21.0.\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.20.0&new-version=4.21.0)](https://dependabot.com/compatibility-score/?dependency-name=org.jfrog.buildinfo:build-info-extractor-gradle&package-manager=gradle&previous-version=4.20.0&new-version=4.21.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7203", "3.x: Fix Schedulers.from to honor interruptibleWorker across methods", "David Karnok", "akarnokd", "03/05/21, 09:30:00 AM", "The direct scheduling methods of the `ExecutorScheduler` created via `Schedulers.from(Executor, boolean)` did not fully honor the `interruptibleWorker` settings.\r\n\r\nFixes #7201 ", "NaN"], ["7205", "Standardize java source headers", null, "benjamintboyle", "03/05/21, 09:23:18 AM", "Convert License headers to block comments instead of dangling Javadoc comments. Use Checkstyle to validate Java source files have Licenses attached. Updated Checkstyle to most recent version. Updated Checkstyle configuration to remove mostly commented out code and update to correct DTD.\r\n\r\nRemoved unit test FixLicenseHeaders as the functionality is handled by the Checkstyle header validation.\r\n\r\nOne commit is Checkstyle and Gradle updates. Second commit is for all the Java source License updates.\r\n\r\nFixes #7204", "NaN"], ["7206", "3.x: Fix wrong reference in Single.flattenStreamAsObservable javadoc", "David Karnok", "akarnokd", "03/08/21, 08:37:38 AM", "Fix the copy-paste error of pointing to `flattenAsFlowable` instead of `flattenAsObservable`.", "NaN"], ["7207", "Bump gradle to 6.8.3 & optimize gradle config", null, "Goooler", "03/10/21, 08:32:09 AM", "- Update gradle 6.8.3\r\n- Replace `https://plugins.gradle.org/m2/` with `gradlePluginPortal()`\r\n- Put versions into `ext` block\r", "NaN"], ["7208", "3.x: Upgrade Gradle to 6.8.3", "David Karnok", "akarnokd", "03/10/21, 08:06:31 AM", "Upgrade to Gradle 6.8.3, including the wrapper jar and batch files.", "NaN"], ["7210", "Added Javadoc checks to Checkstyle. Fix violating Javadoc.", null, "benjamintboyle", "03/12/21, 07:41:36 AM", "Add JavadocMethod and MissingJavadocMethod checks to Checkstyle.\r\nChecks ensure there are no missing Javadoc comments for public methods,\r\n and that each of the Javadoc comments describe all method parameters.\r\n\r\nAdd suppressions.xml Checkstyle configuration file to exclude Jmh, Test,\r\nand Internal from MissingJavadocMethod check.\r\n\r\nMove Checkstyle configuration files and License headers into config directory, to reduce pollution of root directory.\r\n\r\nFix Javadoc comments that violate the added checks, which should take care of the first bullet from Issue #4535 (parameter names change in the code but the javadocs still refer to the old names).", "NaN"], ["7212", "3.x: CompositeException.printStackTrace to write directly into PrintStream/PrintWriter", "David Karnok", "akarnokd", "03/12/21, 03:13:12 PM", "I don't remember why the stacktrace it wasn't printed directly via the PrintStream/PrintWriter; no reason to aggregate the entire string output.\r\n\r\nFixes: #7211", "NaN"], ["7213", "Fix intermittently failing unit tests", null, "benjamintboyle", "03/14/21, 07:50:44 AM", "Fix several unit tests that are intermittently failing on slower clients due to timeouts. All fixes\r\ninvolve increasing timeouts.\r\n\r\nAll other changes are adjustments to formatting within the updated tests.\r", "NaN"], ["7214", "Fix POM_URL", "Zac Sweers", "ZacSweers", "03/16/21, 06:06:55 AM", "Noticed this appeared to be an accidental copy-pasta leftover", "NaN"], ["7216", "Bump guava from 30.1-jre to 30.1.1-jre", null, "dependabot-preview[bot]", "03/22/21, 07:56:34 AM", "Bumps [guava](https://github.com/google/guava) from 30.1-jre to 30.1.1-jre.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/google/guava/releases\">guava's releases</a>.</em></p>\n<blockquote>\n<h2>30.1.1</h2>\n<h3>Maven</h3>\n<pre lang=\"xml\"><code>&lt;dependency&gt;\n  &lt;groupId&gt;com.google.guava&lt;/groupId&gt;\n  &lt;artifactId&gt;guava&lt;/artifactId&gt;\n  &lt;version&gt;30.1.1-jre&lt;/version&gt;\n  &lt;!-- or, for Android: --&gt;\n  &lt;version&gt;30.1.1-android&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>\n<h3>Javadoc</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/docs/\">30.1.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/docs/\">30.1.1-android</a></li>\n</ul>\n<h3>JDiff</h3>\n<ul>\n<li><a href=\"http://guava.dev/releases/30.1.1-jre/api/diffs/\">30.1.1-jre vs. 30.1-jre</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/diffs/\">30.1.1-android vs. 30.1-android</a></li>\n<li><a href=\"http://guava.dev/releases/30.1.1-android/api/androiddiffs/\">30.1.1-android vs. 30.1.1-jre</a></li>\n</ul>\n<h3>Changelog</h3>\n<ul>\n<li>Increased the aggressiveness of <a href=\"https://github.com/google/guava/releases/tag/v30.1\">Guava 30.1</a>'s warning log message for running <code>guava-android</code> under a Java 7 VM. (Android VMs are unaffected.) If the warning <em>itself</em> causes you trouble, you can eliminate it by silencing the logger for <code>com.google.common.base.Preconditions</code> (which is used <em>only</em> for this warning). This warning prepares for <a href=\"https://github-redirect.dependabot.com/google/guava/issues/5269\">removing support for Java 7 in 2021</a>. Please report any problems. We have tried to make the warning as safe as possible, but anytime a common library logs, especially as aggressively as we do in this new release, there is the potential for <a href=\"https://stackoverflow.com/a/41017717/28465\"><code>NullPointerException</code></a> or even <a href=\"https://stackoverflow.com/a/48009613/28465\">deadlock</a>. (To be clear, Guava will not log under Java 8 or Android, but it will under Java 7.) (00c25e9b11)</li>\n<li><code>cache</code>: Fixed compatibility between <code>asMap().compute(...)</code> and a load. (42bf4f4eb7)</li>\n<li><code>cache</code>: Added <code>@CheckReturnValue</code> to some APIs. (a5ef129ffc)</li>\n<li><code>collect</code>: Added <code>@DoNotCall</code> to the mutator methods on immutable types (6ae9532d11)</li>\n<li><code>hash</code>: Removed <code>@Beta</code> from <code>HashCode</code>. (2c9f161e10)</li>\n<li><code>io</code>: Removed <code>@Beta</code> from <code>CountingOutputStream</code>. (d394bac847)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/google/guava/commits\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=30.1-jre&new-version=30.1.1-jre)](https://dependabot.com/compatibility-score/?dependency-name=com.google.guava:guava&package-manager=gradle&previous-version=30.1-jre&new-version=30.1.1-jre)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7219", "Modernize gradle plugin block, change maven to maven-publish", null, "benjamintboyle", "03/26/21, 10:07:08 PM", "Move gradle plugins to block at top of file per gradle recommendations.\r\nChange deprecated maven plugin to maven-publish as in Gradle 7.0 it will\r\nbe removed. Several other minor updates to gradle file including, removing\r\nsemi-colons, changing println to use built-in logger.\r", "NaN"], ["7223", "3.x: fix typo in FlowableRetryTest.java", "Ikko Ashimine", "eltociear", "04/08/21, 07:45:06 AM", "\r\n\r\nThank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [x] Please give a description about what and why you are contributing, even if it's trivial.\r\n\r\nFixed typo below.\r\n```\r\nseperate -> separate\r\n```\r\n\r\n  - [ ] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n\r\n  - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r", "NaN"], ["7224", "Bump mockito-core from 3.8.0 to 3.9.0", null, "dependabot-preview[bot]", "04/08/21, 07:45:55 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.8.0 to 3.9.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.9.0</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.9.0</h4>\n<ul>\n<li>2021-04-07 - <a href=\"https://github.com/mockito/mockito/compare/v3.8.22...v3.9.0\">4 commit(s)</a> by Tim van der Lippe, dependabot[bot]</li>\n<li>&quot;But invoked here&quot; lists the invocation parameters [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2259\">#2259</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2259\">mockito/mockito#2259</a>)</li>\n<li>Bump auto-service from 1.0-rc7 to 1.0 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2258\">#2258</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2258\">mockito/mockito#2258</a>)</li>\n<li>Bump actions/setup-java from v1 to v2 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2255\">#2255</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2255\">mockito/mockito#2255</a>)</li>\n<li>&quot;But invoked here&quot; should list the invocation parameters [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2058\">#2058</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2058\">mockito/mockito#2058</a>)</li>\n</ul>\n<h2>v3.8.25</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.8.25</h4>\n<ul>\n<li>2021-04-07 - <a href=\"https://github.com/mockito/mockito/compare/v3.8.22...v3.8.25\">3 commit(s)</a> by Tim van der Lippe, dependabot[bot]</li>\n<li>&quot;But invoked here&quot; lists the invocation parameters [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2259\">#2259</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2259\">mockito/mockito#2259</a>)</li>\n<li>Bump auto-service from 1.0-rc7 to 1.0 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2258\">#2258</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2258\">mockito/mockito#2258</a>)</li>\n<li>Bump actions/setup-java from v1 to v2 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2255\">#2255</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2255\">mockito/mockito#2255</a>)</li>\n<li>&quot;But invoked here&quot; should list the invocation parameters [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2058\">#2058</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2058\">mockito/mockito#2058</a>)</li>\n</ul>\n<h2>v3.8.22</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.8.22</h4>\n<ul>\n<li>2021-04-05 - <a href=\"https://github.com/mockito/mockito/compare/v3.8.20...v3.8.22\">2 commit(s)</a> by Tim van der Lippe</li>\n<li>Fix thread race condition [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2248\">#2248</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2248\">mockito/mockito#2248</a>)</li>\n<li>Add missing Deprecated annotation [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2227\">#2227</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2227\">mockito/mockito#2227</a>)</li>\n</ul>\n<h2>v3.8.21</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.8.21</h4>\n<ul>\n<li>2021-04-05 - <a href=\"https://github.com/mockito/mockito/compare/v3.8.20...v3.8.21\">1 commit(s)</a> by Tim van der Lippe</li>\n<li>Add missing Deprecated annotation [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2227\">#2227</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2227\">mockito/mockito#2227</a>)</li>\n</ul>\n<h2>v3.8.20</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.8.20</h4>\n<ul>\n<li>2021-04-01 - <a href=\"https://github.com/mockito/mockito/compare/v3.8.17...v3.8.20\">3 commit(s)</a> by Paul Klauser, dependabot[bot]</li>\n<li>Bump google-java-format from 1.9 to 1.10.0 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2251\">#2251</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2251\">mockito/mockito#2251</a>)</li>\n<li>Bump versions.errorprone from 2.5.1 to 2.6.0 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2250\">#2250</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2250\">mockito/mockito#2250</a>)</li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2007\">#2007</a> : Update objenesis dep to 3.2 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2249\">#2249</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2249\">mockito/mockito#2249</a>)</li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2007\">#2007</a> : Downgrade objenesis version for mockito-android [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2024\">#2024</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2024\">mockito/mockito#2024</a>)</li>\n<li>Android instrumentation test packaging fails for mockito-android 3.5.0 with minSdk &lt; 26 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2007\">#2007</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2007\">mockito/mockito#2007</a>)</li>\n</ul>\n<h2>v3.8.17</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.8.17</h4>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/95841edecb5e236792c2cb09ba5c72e6a38ee88f\"><code>95841ed</code></a> Publish new minor version to Maven central</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/d3d11f40abddb8b79a3be52c8c47ddd7d288d6eb\"><code>d3d11f4</code></a> &quot;But invoked here&quot; lists the invocation parameters (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2259\">#2259</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/f9e4bcadf56587fd7053f7006316b62fc2d6f318\"><code>f9e4bca</code></a> Bump auto-service from 1.0-rc7 to 1.0 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2258\">#2258</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/46ac495d8a67730d69669e985992ff6c979ff1a1\"><code>46ac495</code></a> Bump actions/setup-java from v1 to v2 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2255\">#2255</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/08a2e7661f221e6aa721260bc22d46318ae71f65\"><code>08a2e76</code></a> Fix thread race condition (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2248\">#2248</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/3b96d1f4b9b2e727a06cf6a3b046ed975c183383\"><code>3b96d1f</code></a> Add missing Deprecated annotation (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2227\">#2227</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/7f036eb9ed79444adcec3a6c635870222b109e50\"><code>7f036eb</code></a> Bump versions.errorprone from 2.5.1 to 2.6.0 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2250\">#2250</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/ca92be6a7d35b701728de15b4ab2471880d8592f\"><code>ca92be6</code></a> Bump google-java-format from 1.9 to 1.10.0 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2251\">#2251</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/ec341883c673c2edbd3213f18b99ee64b3d3a612\"><code>ec34188</code></a> Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2007\">#2007</a> : Update objenesis dep to 3.2 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2249\">#2249</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/c5be5c3144af9198acf3f33190c0f45718627a2f\"><code>c5be5c3</code></a> Fix grammar in CONTRIBUTING.md (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2246\">#2246</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.8.0...v3.9.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.8.0&new-version=3.9.0)](https://dependabot.com/compatibility-score/?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.8.0&new-version=3.9.0)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language\n- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language\n- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language\n- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language\n- `@dependabot badge me` will comment on this PR with code to add a \"Dependabot enabled\" badge to your readme\n\nAdditionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):\n- Update frequency (including time of day and day of week)\n- Pull request limits (per update run and/or open at any time)\n- Automerge options (never/patch/minor, and dev/runtime dependencies)\n- Out-of-range updates (receive only lockfile updates, if desired)\n- Security updates (receive only security updates, if desired)\n\n\n\n</details>", "NaN"], ["7225", "Remove custom Gradle garbage collection tasks", null, "benjamintboyle", "04/08/21, 08:30:58 PM", "Garbage collection between Gradle tasks should no longer be needed now\r\nthat tasks are run on Github servers. Also it was only freeing up a few dozen MB.", "NaN"], ["7227", "Initial commit for dependabot.yml config file", null, "benjamintboyle", "04/09/21, 06:33:39 AM", "This is the third part of converting to the native GitHub Dependabot per Issue #7226.\r\n\r\nNote, this should probably not be merged until dependabot-preview has been disabled (first bullet of Issue #7226).\r\n\r\nResolves #7226", "NaN"], ["7230", "Bump actions/cache from v2 to v2.1.4", null, "dependabot[bot]", "04/09/21, 08:42:16 AM", "Bumps [actions/cache](https://github.com/actions/cache) from v2 to v2.1.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/cache/releases\">actions/cache's releases</a>.</em></p>\n<blockquote>\n<h2>v2.1.4</h2>\n<ul>\n<li>Make caching more verbose <a href=\"https://github-redirect.dependabot.com/actions/toolkit/pull/650\">#650</a></li>\n<li>Use GNU tar on macOS if available <a href=\"https://github-redirect.dependabot.com/actions/toolkit/pull/701\">#701</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/cache/commit/26968a09c0ea4f3e233fdddbafd1166051a095f6\"><code>26968a0</code></a> Make save/restore logs akin (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/509\">#509</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/aeaf731ae27476fbdef0ec9028b91f8b07b22c5d\"><code>aeaf731</code></a> Use <code>@\u200bactions/cache</code> version 1.0.6 (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/525\">#525</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/56a8a2f77583e58fcda120d0902eccfbc7b220bf\"><code>56a8a2f</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/514\">#514</a> from eregon/recommend-setup-ruby-bundler-cache</li>\n<li><a href=\"https://github.com/actions/cache/commit/1bfe3accb30cbecd1eb79cdba246c3a7fc899cdf\"><code>1bfe3ac</code></a> Recommend ruby/setup-ruby's bundler-cache: true option</li>\n<li><a href=\"https://github.com/actions/cache/commit/354332455a7a9ae5492723ca9d4d082484e173bc\"><code>3543324</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/434\">#434</a> from DanielHabenicht/patch-1</li>\n<li><a href=\"https://github.com/actions/cache/commit/3303695afa44b4dd4776286c04fc1fbffe1ae68c\"><code>3303695</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/507\">#507</a> from odin-delrio/patch-1</li>\n<li><a href=\"https://github.com/actions/cache/commit/e64ab303d144824d683711d5c78723c915ff952b\"><code>e64ab30</code></a> Improved gradle cache key calculation example</li>\n<li><a href=\"https://github.com/actions/cache/commit/26c48dce83c8127f120594ca7290654e35acfa03\"><code>26c48dc</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/506\">#506</a> from actions/cache-matrix-example</li>\n<li><a href=\"https://github.com/actions/cache/commit/72f66cfa6dcadd8440e1382d36b556a7a43a52bc\"><code>72f66cf</code></a> Added a cache example when using matrix</li>\n<li><a href=\"https://github.com/actions/cache/commit/9f3a4d3e65eb0e37d28bc055c0d1a91eac6d76fe\"><code>9f3a4d3</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/443\">#443</a> from guilleijo/pipenv-example</li>\n<li>Additional commits viewable in <a href=\"https://github.com/actions/cache/compare/v2...26968a09c0ea4f3e233fdddbafd1166051a095f6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7231", "Bump testng from 7.3.0 to 7.4.0", null, "dependabot[bot]", "04/09/21, 08:44:28 AM", "Bumps [testng](https://github.com/cbeust/testng) from 7.3.0 to 7.4.0.\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/cbeust/testng/blob/master/CHANGES.txt\">testng's changelog</a>.</em></p>\n<blockquote>\n<p>7.4.0\nNew  : GITHUB-2459: Support configurable start time - emailable report (Barry Evans)\nFixed: GITHUB-2467: XmlTest does not copy the xmlClasses during clone (C.V.Aditya)\nFixed: GITHUB-2469: Parameters added in XmlTest during AlterSuiteListener not available in SuiteListener (C.V.Aditya)\nFixed: GITHUB-2296: Fix for assertEquals not working for sets as order is not guaranteed. (Prashant Maroti)\nFixed: GITHUB-2465: Fix bux where Strings.join returns empty String\nFixed: GITHUB-1632: throwing SkipException sets iTestResult status to Failure instead of Skip (Julien Herr &amp; Krishnan Mahadevan)\nNew  : GITHUB-2456: Add onDataProviderFailure listener (Krishnan Mahadevan)\nFixed: GITHUB-2445: NPE in FailedReporter.java With Tests Created in Factory (Arham Jain)\nFixed: GITHUB-2428: Configuration methods have the same test class instance when <a href=\"https://github.com/Factory\"><code>@\u200bFactory</code></a> is being used (Nan Liang)\nFixed: GITHUB-2440: Fixed an issue when case timeout returned an incorrect exception and effect the next other test case (Yao Ma)\nNew:   GITHUB-2407: Adds &quot;overrideIncludedMethods&quot; to the global config as a command-line argument, which excludes explicitly included test methods if they belong to any excluded groups (Nikhil Suri)\nFixed: GITHUB-2432: Rework MethodInheritance.fixMethodInheritance to &quot;soft&quot; dependencies (Krishnan Mahadevan)\nFixed: GITHUB-2429: Seggregate Dependency Injection out as a clear implementation (Krishnan Mahadevan)\nFixed: GITHUB-2435: getParameterIndex() always return 0 in test listener\nFixed: GITHUB-2406: TestNG 7.3.0 transitive vulnerability CVE-2020-11022 and CVE-2020-11023 due to JQuery 3.4.1  (Krishnan Mahadevan)\nFixed: GITHUB-2405: Regression: Using TestNG via Maven breaks when optional Guice dependency is unavailable (Krishnan Mahadevan)\nFixed: GITHUB-2427: Guice module (suite parent-module and test module) configure() method is called multiple times (Jacek Centkowski)\nFixed: GITHUB-2419: TestNG JUnit reports are not valid if system output contains XML tags (Lorenzo Orsatti)\nFixed: GITHUB-188: suite parallel=&quot;methods&quot; does not work when there are multiple <!-- raw HTML omitted --> tags in the testng.xml (Krishnan Mahadevan)\nFixed: GITHUB-346: When a method is annotated with both BeforeGroups and AfterGroups only AfterGroup is executed (Krishnan Mahadevan)\nFixed: GITHUB-2403: Suite.xml files attempt to make web request when suite references standard TestNG DTD using HTTP (Krishnan Mahadevan)\nNew:   GITHUB-2385: Make <a href=\"https://github.com/Listeners\"><code>@\u200bListeners</code></a> can work for implemented interfaces and Inherited class (Nan Liang)\nFixed: GITHUB-2053: MethodHelper.collectAndOrderMethods() Hangs when Parallel Instance and dependsOnGroups (Krishnan Mahadevan)\nFixed: GITHUB-2400: BeforeClass/Method (and AfterClass/Method) configuration methods that override default methods are invoked multiple times (Krishnan Mahadevan)\nFixed: GITHUB-2396: <a href=\"https://github.com/Ignore\"><code>@\u200bIgnore</code></a> on method level doesn't work as expected (Krishnan Mahadevan)\nFixed: GITHUB-2382: TestNG version should be specified in MANIFEST.MF (Krishnan Mahadevan)\nFixed: GITHUB-2096: 7.0.0-beta6 memory issues (regression) (Krishnan Mahadevan)\nFixed: GITHUB-2355: TestNG creates multiple Guice Module Instances (Krishnan Mahadevan)\nFixed: GITHUB-2374: Add file name to the warning message (Krishnan Mahadevan)\nFixed: GITHUB-2321: -Dtestng.thread.affinity=true do not work when running multiple instance of test in parallel (Nan Liang)\nFixed: GITHUB-2363: JS error when switching theme (Krishnan Mahadevan)\nFixed: GITHUB-2361: No way to enforce <a href=\"https://github.com/Test\"><code>@\u200bTest</code></a>(singleThreaded = true) when test defined in base class (Krishnan Mahadevan)\nFixed: GITHUB-2343: Injectors are not reused when they share the same set of modules (Krishnan Mahadevan)\nFixed: GITHUB-2346: ITestResult attributes are null when retrieved by Listener onTestStart if test fails at BeforeMethod (Krishnan Mahadevan)\nFixed: GITHUB-2357: TestNG 7.3.0 transitive dependencies</p>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/cbeust/testng/commit/4170ef68fb8203265cba4f6bfdbfb9c4a0b63f05\"><code>4170ef6</code></a> TestNG 7.4.0 release</li>\n<li><a href=\"https://github.com/cbeust/testng/commit/47aa43b5d88be43da4d476a15398d0cffee491c7\"><code>47aa43b</code></a> Simulating a release (<a href=\"https://github-redirect.dependabot.com/cbeust/testng/issues/2479\">#2479</a>)</li>\n<li><a href=\"https://github.com/cbeust/testng/commit/5f6b4e7f5911cf78bc98e76d1cbc9cec456fdd12\"><code>5f6b4e7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/cbeust/testng/issues/2477\">#2477</a> from sullis/gradle-wrapper-validation</li>\n<li><a href=\"https://github.com/cbeust/testng/commit/1de459b885e65d87bca01c2b8b35285cdeaa2a46\"><code>1de459b</code></a> enable Gradle wrapper validation</li>\n<li><a href=\"https://github.com/cbeust/testng/commit/e016840cbd33716e4be25e9e53a7cee390f4cb85\"><code>e016840</code></a> Support configurable start time - emailable report (<a href=\"https://github-redirect.dependabot.com/cbeust/testng/issues/2476\">#2476</a>)</li>\n<li><a href=\"https://github.com/cbeust/testng/commit/7fed1422479c890bbb0badbf81aba7f4feb65468\"><code>7fed142</code></a> Issue <a href=\"https://github-redirect.dependabot.com/cbeust/testng/issues/2469\">#2469</a> (<a href=\"https://github-redirect.dependabot.com/cbeust/testng/issues/2470\">#2470</a>)</li>\n<li><a href=\"https://github.com/cbeust/testng/commit/d882ce775ef423c17f94116f0f5cf304f0e2f7ae\"><code>d882ce7</code></a> Issue 2467 (<a href=\"https://github-redirect.dependabot.com/cbeust/testng/issues/2468\">#2468</a>)</li>\n<li><a href=\"https://github.com/cbeust/testng/commit/841ae94bd07f68695878f679e03f6d6be6a1884d\"><code>841ae94</code></a> Comparing collection using equals method for assertEquals (<a href=\"https://github-redirect.dependabot.com/cbeust/testng/issues/2460\">#2460</a>)</li>\n<li><a href=\"https://github.com/cbeust/testng/commit/378e63e2e9ab02f831638eb01d06b43d9ba1637d\"><code>378e63e</code></a> Fix bux where Strings.join returns empty String (<a href=\"https://github-redirect.dependabot.com/cbeust/testng/issues/2465\">#2465</a>)</li>\n<li><a href=\"https://github.com/cbeust/testng/commit/636a82521ee797537587af079f90a7c6c424980d\"><code>636a825</code></a> Streamline TestResult management from listeners</li>\n<li>Additional commits viewable in <a href=\"https://github.com/cbeust/testng/compare/7.3.0...7.4.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.testng:testng&package-manager=gradle&previous-version=7.3.0&new-version=7.4.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7232", "3.x: Upgrade setup-java GitHub actions to v2", null, "benjamintboyle", "04/09/21, 06:31:26 PM", "There are two [breaking changes](https://github.com/actions/setup-java/blob/main/docs/switching-to-v2.md) between \"setup-java\" GitHub actions v1 and v2.\r\nv2 requires a java distribution be specified. 'adopt' for AdoptOpenJDK has been\r\nselected. v2 has also dropped support for legacy Java version syntax, so\r\n'1.8' must become '8'.\r", "NaN"], ["7234", "Bump actions/cache from v2.1.4 to v2.1.5", null, "dependabot[bot]", "04/13/21, 08:34:33 AM", "Bumps [actions/cache](https://github.com/actions/cache) from v2.1.4 to v2.1.5.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/cache/releases\">actions/cache's releases</a>.</em></p>\n<blockquote>\n<h2>v2.1.5</h2>\n<ul>\n<li>Fix permissions error seen when extracting caches with GNU tar that were previously created using BSD tar (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/527\">actions/cache#527</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/cache/commit/1a9e2138d905efd099035b49d8b7a3888c653ca8\"><code>1a9e213</code></a> Update cache module to v1.0.7 (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/562\">#562</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/981fa981ed950efef5277587ee4ba0eead30cadf\"><code>981fa98</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/actions/cache/issues/469\">#469</a> from ericmj/patch-1</li>\n<li><a href=\"https://github.com/actions/cache/commit/4498c5b4d8b0673dbc7d9731bc11d9cc5a2c6087\"><code>4498c5b</code></a> Drop the example based on using pip's internals (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/519\">#519</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/4134e6de47156381d31ff74f8aabf86718858f70\"><code>4134e6d</code></a> It is not recommended to cache node_modules (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/537\">#537</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/62a4d754427893bc6d043c6d4f5486490cab29b6\"><code>62a4d75</code></a> Also cache _build for Elixir</li>\n<li>See full diff in <a href=\"https://github.com/actions/cache/compare/v2.1.4...1a9e2138d905efd099035b49d8b7a3888c653ca8\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7238", "3.x: Action cache clear, limit environmental variables", "David Karnok", "akarnokd", "04/16/21, 06:32:51 AM", "GitHub Actions don't support clearing the cache so the [suggested workaround](https://github.community/t/how-to-clear-cache-in-github-actions/129038/4) is to key it with a version number from a secret that can be updated without changing the yml.\r\n\r\nIn addition, secrets are now scoped to their run block which should prevent them from leaking across unrelated steps.\r", "NaN"], ["7246", "Bump com.vanniktech.maven.publish from 0.14.2 to 0.15.0", null, "dependabot[bot]", "04/26/21, 10:05:02 AM", "Bumps [com.vanniktech.maven.publish](https://github.com/vanniktech/gradle-maven-publish-plugin) from 0.14.2 to 0.15.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/releases\">com.vanniktech.maven.publish's releases</a>.</em></p>\n<blockquote>\n<h2>0.15.0</h2>\n<p><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/blob/master/CHANGELOG.md#version-0150-2021-04-24\">Changelog</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/blob/master/CHANGELOG.md\">com.vanniktech.maven.publish's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 0.15.0 <em>(2021-04-24)</em></h2>\n<ul>\n<li><strong>BREAKING</strong>: Removed support for deprecated <code>RELEASE_REPOSITORY_URL</code>, <code>SNAPSHOT_REPOSITORY_URL</code>, <code>SONATYPE_NEXUS_USERNAME</code>, <code>SONATYPE_NEXUS_PASSWORD</code> environment variables and properties.\nFor safety reasons the project will fail when finding these. Use <code>mavenCentralRepositoryUsername</code> and <code>mavenCentralRepositoryPassword</code> Gradle properties or\n<code>ORG_GRADLE_PROJECT_mavenCentralRepositoryUsername</code> and <code>ORG_GRADLE_PROJECT_mavenCentralRepositoryPassword</code> environment variables instead.</li>\n<li><strong>BREAKING</strong>: Removed deprecated <code>targets</code> API. See README for alternative ways of adding targets.</li>\n<li>Behavior change: The dokka plugin is not applied by default anymore for Kotlin projects. When it is applied we will still use the dokka tasks to create the javadoc jar.</li>\n<li>Support for <code>s01.oss.sonatype.org</code> by setting <code>sonatypeHost = &quot;S01&quot;</code>.</li>\n<li>Introduce <code>com.vanniktech.maven.publish.base</code> plugin. This plugin contains all the functionality of the main plugin, but does not configure anything automatically.\nInstead, it offers a public API, which is also used by the main plugin to do so yourself. This allows for more flexibility and to publish different project types.\nThe API is not final yet, but we're happy to receive feedback.</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/dbc2cd901cc48b7de45bcb7bd29d3576d31dd4b5\"><code>dbc2cd9</code></a> Prepare version 0.15.0</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/02d52b1c68a1295b38c63d25b30b85b5f444fb32\"><code>02d52b1</code></a> update README and CHANGELOG for 0.15.0 (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/227\">#227</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/0f8efe0b796eb4ae2cb0b4e6772f4e4c5af33bb3\"><code>0f8efe0</code></a> API improvements for Groovy users (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/226\">#226</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/8df14087de77dcdaa486335a372e5c768230345a\"><code>8df1408</code></a> add sonatypeHost to legacy extension, deprecate NexusOptions (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/213\">#213</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/0e1bd418bc10499409892325b2c1173d980f9c6e\"><code>0e1bd41</code></a> add API to configure what to publish (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/212\">#212</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/b352ff9e3209ed2b124437a22c28714bc6db30e5\"><code>b352ff9</code></a> Merge branch 'gmale-fix/variant-error-message'</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/045297f151a238f9126ae01c9cfb6f92a84c8fc8\"><code>045297f</code></a> fix detekt</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/863cc2108063bf8e6457d5b4ef72664f47cf1302\"><code>863cc21</code></a> move section down</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/84730c491ee3a1d5df5eede4e168b2077659c6af\"><code>84730c4</code></a> Mention the androidVariantToPublish setting in the README.</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/9e9158d7e5fba2e039b4ae15812f82ac3c7dcf1b\"><code>9e9158d</code></a> Merge branch 'gmale-fix/variant-error'</li>\n<li>Additional commits viewable in <a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/compare/0.14.2...0.15.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.vanniktech.maven.publish&package-manager=gradle&previous-version=0.14.2&new-version=0.15.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7247", "3.x: Update env names for release plugin v0.15", "David Karnok", "akarnokd", "04/26/21, 10:28:44 AM", "After merging #7246.", "NaN"], ["7250", "Bump com.vanniktech.maven.publish from 0.15.0 to 0.15.1", null, "dependabot[bot]", "05/03/21, 10:08:09 AM", "Bumps [com.vanniktech.maven.publish](https://github.com/vanniktech/gradle-maven-publish-plugin) from 0.15.0 to 0.15.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/releases\">com.vanniktech.maven.publish's releases</a>.</em></p>\n<blockquote>\n<h2>0.15.1</h2>\n<p><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/blob/master/CHANGELOG.md#version-0151-2021-05-02\">Changelog</a></p>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/blob/master/CHANGELOG.md\">com.vanniktech.maven.publish's changelog</a>.</em></p>\n<blockquote>\n<h2>Version 0.15.1 <em>(2021-05-02)</em></h2>\n<ul>\n<li>The <code>closeAndReleaseRepository</code> task was mistakenly expecting the wrong Gradle properties. The README and changelog also mentioned the wrong properties. The correct ones are <code>mavenCentralUsername</code> and <code>mavenCentralPassword</code> or for environment variables: <code>ORG_GRADLE_PROJECT_mavenCentralUsername</code> and <code>ORG_GRADLE_PROJECT_mavenCentralPassword</code>.</li>\n<li>Fix <code>signing</code> not being configurable until <code>afterEvaluate</code></li>\n<li>Use empty string as in memory signing password when no password is specified</li>\n<li>Fix <code>statingProfile</code> in <code>nexusOptions</code> not being optional which causes an error when running <code>closeAndReleaseRepository</code></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/c7d73702afc0c8005609d83cd996ae8cf70f021f\"><code>c7d7370</code></a> Prepare version 0.15.1</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/8a3363016aabb83ce60fc9d01cd1d4d77fd67d61\"><code>8a33630</code></a> apply Signing plugin early in regular plugin (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/235\">#235</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/0c677fee103561564fcb2cfb72eaeab4e8e13968\"><code>0c677fe</code></a> make stagingProfile optional (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/236\">#236</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/7d9a7b15dff77d67c5d782a4ae8664c53459cc2a\"><code>7d9a7b1</code></a> Use mavenCentralUsername and mavenCentralPassword everywhere (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/230\">#230</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/cafe2fd0d8e576d6862c83e98175e99b30f28f31\"><code>cafe2fd</code></a> Fallback to an empty string when signingInMemoryKeyPassword is null (<a href=\"https://github-redirect.dependabot.com/vanniktech/gradle-maven-publish-plugin/issues/231\">#231</a>)</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/d4dfbbcb4c543ad5f753b6e0d8f83d47f66bc543\"><code>d4dfbbc</code></a> Update CHANGELOG.md</li>\n<li><a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/commit/d2e035c65b25611553842835d1067ef093da7667\"><code>d2e035c</code></a> Prepare next development version.</li>\n<li>See full diff in <a href=\"https://github.com/vanniktech/gradle-maven-publish-plugin/compare/0.15.0...0.15.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=com.vanniktech.maven.publish&package-manager=gradle&previous-version=0.15.0&new-version=0.15.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7253", "3.x: Remove fixPom method from build.gradle", null, "benjamintboyle", "05/05/21, 06:28:55 AM", "The pom is generated with the reactive-streams scope set to 'compile' based on it being set to 'api' in dependencies. I'm assuming this was fixed at some point previously, so the fixPom method is no longer needed.\r\n\r\nTo test that this works, the below gradle tasks were run:\r\n./gradlew -PreleaseMode=full cleanGeneratePomFileForMavenPublication generatePomFileForMavenPublication\r\n./gradlew -PreleaseMode=branch cleanGeneratePomFileForMavenPublication generatePomFileForMavenPublication\r\n\r\nBoth tasks generated a pom file with the reactive-streams set to\r\n'compile' scope.\r", "NaN"], ["7255", "3.x: Update Gradle task dependencies to remove dependsOn 'build' task", null, "benjamintboyle", "05/05/21, 05:47:48 PM", "It is generally discouraged to add dependencies on 'build', so 'javadocCleanup'\r\nand 'jacocoTestReport' have been removed and put on better tasks. Also,\r\n'jacocoTestReport' needs input from the test results.\r\n\r\nUpdated task dependencies:\r\n- Gradle 'javadoc' task is finalized by 'javadocCleanup', and 'javadocCleanup'\r\n  no longer directly invoked by 'build'\r\n- Gradle 'jacocoTestReport' task run by 'check' instead of 'build', and\r\n  'jacocoTestReport' depends on 'test' and 'testng'\r\n\r\nChanges due to dependency updates:\r\n- Add 'javadoc' generation task on Github actions that only 'build'\r\n- Remove 'javadocCleanup' task from Github action as 'publish...' tasks\r\n  already dependent on 'javadoc'\r\n\r\nMiscellaneous tangential cleanup:\r\n- Remove \"pr\" parameter on command line in Github workflow as parameter\r\n  is no longer functional\r\n- Enclose source/target compatibility in Gradle java block\r", "NaN"], ["7257", "3.x: Remove redundant addition of JMH to classpath", null, "benjamintboyle", "05/05/21, 08:54:52 PM", "Remove manual addition of JMH classpath in build file. Gradle adds classpath\r\nfor all sourceSets to Eclipse by default as fixed in Gradle 6.8 by PR\r\n[14534](https://github.com/gradle/gradle/pull/14534). The JMH sourceSet is added by the JMH Plugin.\r\n\r\nTested by running 'eclipse' task in Eclipse 2021-03 (4.19.0). Then refreshing,\r\nand JMH still on classpath and viewable in Eclipse. Then removed project from\r\nEclipse, ran 'cleanEclipse', and re-imported project to Eclipse. All successful.\r", "NaN"], ["7258", "3.x: Remove Javadoc not failing on error", null, "benjamintboyle", "05/06/21, 06:51:16 AM", "The 'javadoc' task should fail when there is an error. The\r\n'javadocCleanup' task failed for PR [7239](https://github.com/ReactiveX/RxJava/pull/7239/checks) due to publish plugin issue [242](https://github.com/vanniktech/gradle-maven-publish-plugin/issues/242),\r\nwhile it should have been the 'javadoc' task that failed the build.\r\nAlso, publishing when javadocs fail is not desired.\r", "NaN"], ["7259", "3.x: Gradle wrapper 7 0", null, "benjamintboyle", "05/07/21, 05:02:29 AM", "Updated to Gradle 7.0 and License Plugin 0.16.1 simultaneously which gets around the issue with the License Plugin update not working with Gradle 6.0+.", "NaN"], ["7260", "3.x: Move Gradle properties into gradle.properties file", null, "benjamintboyle", "05/07/21, 05:21:45 AM", "Moved version, group, and description into gradle.properties file.\r\nRemoved POM_ARTIFACT property as the 'name' property in the settings file\r\nis used when building the POM. Removed 'release.scope' property as it\r\ndoes not appear to be used. Removed VERSION_NAME property and references\r\nto it, in favor of 'version' property.\r", "NaN"], ["7261", "3.x: Remove toolVersion for jacoco and checkstyle", null, "benjamintboyle", "05/07/21, 08:24:27 AM", "Remove versioning of Jacoco and Checkstyle. Instead they will be updated\r\nby Gradle when it is updated. Dependabot does not update tool versions.\r\nIf issues come up, they can be corrected when Gradle is updated.\r", "NaN"], ["7262", "3.x: Rename workflow tasks", null, "benjamintboyle", "05/07/21, 09:12:31 AM", "Change 'build' tasks name to Build RxJava. Update Javadoc task names.\r", "NaN"], ["7263", "3.x: Consolidate test logging", null, "benjamintboyle", "05/07/21, 01:10:41 PM", "Move test logging to consolidated block. Change all 'rootProject' to\r\n'project'.\r", "NaN"], ["7264", "3.x: Updated javadocCleanup to use logger and remove semi-colons", null, "benjamintboyle", "05/07/21, 11:10:20 AM", "Instead of print use logger. Remove semi-colons.", "NaN"], ["7265", "3.x: Fix minor formatting issues in build.gradle", null, "benjamintboyle", "05/08/21, 09:06:33 PM", "NaN", "NaN"], ["7268", "Bump gradle/wrapper-validation-action from 1 to 1.0.3", null, "dependabot[bot]", "05/12/21, 07:14:34 AM", "Bumps [gradle/wrapper-validation-action](https://github.com/gradle/wrapper-validation-action) from 1 to 1.0.3.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/gradle/wrapper-validation-action/releases\">gradle/wrapper-validation-action's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.3</h2>\n<h1>Gradle Wrapper Validation</h1>\n<p>Update <code>minimist</code> version to  <code>1.2.5</code></p>\n<h2>v1.0.2</h2>\n<h1>Gradle Wrapper Validation</h1>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/pull/6\">gradle/wrapper-validation-action#6</a> Check homoglyph variants of Gradle Wrapper JARs</li>\n<li><a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/7\">gradle/wrapper-validation-action#7</a> Validation failure message explain how to react to invalid Gradle Wrapper JARs</li>\n</ul>\n<h2>v1.0.1</h2>\n<h1>Gradle Wrapper Validation</h1>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/2\">gradle/wrapper-validation-action#2</a> Always print the hashes of all found Gradle Wrapper JARs</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/gradle/wrapper-validation-action/compare/v1...v1.0.3\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=gradle/wrapper-validation-action&package-manager=github_actions&previous-version=1&new-version=1.0.3)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7269", "Bump actions/checkout from 2 to 2.3.4", null, "dependabot[bot]", "05/12/21, 07:56:30 AM", "Bumps [actions/checkout](https://github.com/actions/checkout) from 2 to 2.3.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/releases\">actions/checkout's releases</a>.</em></p>\n<blockquote>\n<h2>v2.3.4</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/379\">Add missing <code>await</code>s</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/360\">Swap to Environment Files</a></li>\n</ul>\n<h2>v2.3.3</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/345\">Remove Unneeded commit information from build logs</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/326\">Add Licensed to verify third party dependencies</a></li>\n</ul>\n<h2>v2.3.2</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/320\">Add Third Party License Information to Dist Files</a></p>\n<h2>v2.3.1</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></p>\n<h2>v2.3.0</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></p>\n<h2>v2.2.0</h2>\n<p><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></p>\n<h2>v2.1.1</h2>\n<p>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</p>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/checkout/blob/main/CHANGELOG.md\">actions/checkout's changelog</a>.</em></p>\n<blockquote>\n<h1>Changelog</h1>\n<h2>v2.3.1</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/284\">Fix default branch resolution for .wiki and when using SSH</a></li>\n</ul>\n<h2>v2.3.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/278\">Fallback to the default branch</a></li>\n</ul>\n<h2>v2.2.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/258\">Fetch all history for all tags and branches when fetch-depth=0</a></li>\n</ul>\n<h2>v2.1.1</h2>\n<ul>\n<li>Changes to support GHES (<a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/236\">here</a> and <a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/248\">here</a>)</li>\n</ul>\n<h2>v2.1.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/191\">Group output</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/199\">Changes to support GHES alpha release</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/184\">Persist core.sshCommand for submodules</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/163\">Add support ssh</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/179\">Convert submodule SSH URL to HTTPS, when not using SSH</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/157\">Add submodule support</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/144\">Follow proxy settings</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/141\">Fix ref for pr closed event when a pr is merged</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/128\">Fix issue checking detached when git less than 2.22</a></li>\n</ul>\n<h2>v2.0.0</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/108\">Do not pass cred on command line</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/107\">Add input persist-credentials</a></li>\n<li><a href=\"https://github-redirect.dependabot.com/actions/checkout/pull/104\">Fallback to REST API to download repo</a></li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/actions/checkout/compare/v2...v2.3.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/checkout&package-manager=github_actions&previous-version=2&new-version=2.3.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7270", "Bump codecov/codecov-action from 1 to 1.5.0", null, "dependabot[bot]", "05/12/21, 07:41:07 AM", "Bumps [codecov/codecov-action](https://github.com/codecov/codecov-action) from 1 to 1.5.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/codecov/codecov-action/releases\">codecov/codecov-action's releases</a>.</em></p>\n<blockquote>\n<h2>v1.5.0</h2>\n<h2>1.5.0</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/299\">#299</a> Pull Codecov bash script into the action</li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/271\">#271</a> Bump typescript from 4.2.3 to 4.2.4</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/277\">#277</a> Bump <code>@\u200btypescript-eslint/eslint-plugin</code> from 4.16.1 to 4.22.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/278\">#278</a> Bump <code>@\u200btypescript-eslint/parser</code> from 4.20.0 to 4.22.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/279\">#279</a> Bump <code>@\u200bactions/core</code> from 1.2.6 to 1.2.7</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/292\">#292</a> Bump ts-jest from 26.5.3 to 26.5.5</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/293\">#293</a> Bump eslint from 7.21.0 to 7.25.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/297\">#297</a> Bump <code>@\u200btypes/jest</code> from 26.0.20 to 26.0.23</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/298\">#298</a> Upgrade to GitHub-native Dependabot</li>\n</ul>\n<h2>v1.4.1</h2>\n<h2>1.4.1</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/287\">#287</a> Update VERSION regex to restrict on digits and dot and move checksums into script</li>\n</ul>\n<h2>v1.4.0</h2>\n<h2>1.4.0</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/282\">#282</a> Add checksum verification of bash script</li>\n</ul>\n<h2>v1.3.2</h2>\n<h2>1.3.2</h2>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/264\">#264</a> Overwrites pr number for pull_request_target events</li>\n</ul>\n<h2>v1.3.1</h2>\n<h2>1.3.1</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/253\">#253</a> Add <code>network_filter</code> to action manifest</li>\n</ul>\n<h2>v1.3.0</h2>\n<h2>1.3.0</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/252\">#252</a> Add &quot;network_filter&quot; input</li>\n</ul>\n<h2>v1.2.2</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/241\">#241</a> pass root_dir using proper bash arg</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/244\">#244</a> Overwrite the commit on pull_request* events</li>\n</ul>\n<h2>v1.2.1</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/196\">#196</a> Add parameters to the action.yml</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/codecov/codecov-action/blob/master/CHANGELOG.md\">codecov/codecov-action's changelog</a>.</em></p>\n<blockquote>\n<h2>1.5.0</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/299\">#299</a> Pull Codecov bash script into the action</li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/271\">#271</a> Bump typescript from 4.2.3 to 4.2.4</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/277\">#277</a> Bump <code>@\u200btypescript-eslint/eslint-plugin</code> from 4.16.1 to 4.22.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/278\">#278</a> Bump <code>@\u200btypescript-eslint/parser</code> from 4.20.0 to 4.22.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/279\">#279</a> Bump <code>@\u200bactions/core</code> from 1.2.6 to 1.2.7</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/292\">#292</a> Bump ts-jest from 26.5.3 to 26.5.5</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/293\">#293</a> Bump eslint from 7.21.0 to 7.25.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/297\">#297</a> Bump <code>@\u200btypes/jest</code> from 26.0.20 to 26.0.23</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/298\">#298</a> Upgrade to GitHub-native Dependabot</li>\n</ul>\n<h2>1.4.1</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/287\">#287</a> Update VERSION regex to restrict on digits and dot and move checksums into script</li>\n</ul>\n<h2>1.4.0</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/282\">#282</a> Add checksum verification of bash script</li>\n</ul>\n<h2>1.3.2</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/264\">#264</a> Overwrites pr number for pull_request_target events</li>\n</ul>\n<h2>1.3.1</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/253\">#253</a> Add <code>network_filter</code> to action manifest</li>\n</ul>\n<h2>1.3.0</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/252\">#252</a> Add &quot;network_filter&quot; input</li>\n</ul>\n<h2>1.2.2</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/241\">#241</a> pass root_dir using proper bash arg</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/244\">#244</a> Overwrite the commit on pull_request* events</li>\n</ul>\n<h2>1.2.1</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/196\">#196</a> Add parameters to the action.yml</li>\n</ul>\n<h2>1.2.0</h2>\n<h3>Features</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/193\">#193</a> Add all the bash params</li>\n</ul>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/193\">#193</a> Fixes issue with working-directory</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li>See full diff in <a href=\"https://github.com/codecov/codecov-action/compare/v1...v1.5.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=codecov/codecov-action&package-manager=github_actions&previous-version=1&new-version=1.5.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7272", "3.x: Fix copy-paste error in Completable javadoc", "David Karnok", "akarnokd", "05/12/21, 12:21:02 PM", "It was incorrectly referencing `SingleObserver` in one of the sentences.\r\n\r\nResolves: #7271", "NaN"], ["7273", "Bump mockito-core from 3.9.0 to 3.10.0", null, "dependabot[bot]", "05/13/21, 07:10:11 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.9.0 to 3.10.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.10.0</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.10.0</h4>\n<ul>\n<li>2021-05-12 - <a href=\"https://github.com/mockito/mockito/compare/HEAD...v3.10.0\">0 commit(s)</a> by</li>\n<li>No notable improvements. No pull requests (issues) were referenced from commits.</li>\n</ul>\n<h2>v3.9.10</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.9.10</h4>\n<ul>\n<li>2021-04-29 - <a href=\"https://github.com/mockito/mockito/compare/v3.9.7...v3.9.10\">3 commit(s)</a> by Isma\u00ebl Mej\u00eda, Tim van der Lippe, dependabot[bot]</li>\n<li>Remove ASM dependency [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2279\">#2279</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2279\">mockito/mockito#2279</a>)</li>\n<li>Apply automated ErrorProne fixes [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2277\">#2277</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2277\">mockito/mockito#2277</a>)</li>\n<li>Bump kotlinx-coroutines-core from 1.4.2-native-mt to 1.4.3-native-mt [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2276\">#2276</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2276\">mockito/mockito#2276</a>)</li>\n</ul>\n<h2>v3.9.9</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.9.9</h4>\n<ul>\n<li>2021-04-29 - <a href=\"https://github.com/mockito/mockito/compare/v3.9.7...v3.9.9\">2 commit(s)</a> by Isma\u00ebl Mej\u00eda, dependabot[bot]</li>\n<li>Remove ASM dependency [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2279\">#2279</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2279\">mockito/mockito#2279</a>)</li>\n<li>Bump kotlinx-coroutines-core from 1.4.2-native-mt to 1.4.3-native-mt [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2276\">#2276</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2276\">mockito/mockito#2276</a>)</li>\n</ul>\n<h2>v3.9.7</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.9.7</h4>\n<ul>\n<li>2021-04-23 - <a href=\"https://github.com/mockito/mockito/compare/v3.9.3...v3.9.7\">4 commit(s)</a> by Michael Vitz, dependabot[bot]</li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2273\">#2273</a> : Add missing parenthesis to javadoc example [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2274\">#2274</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2274\">mockito/mockito#2274</a>)</li>\n<li>Example in javadoc of ArgumentMatcher has missing parenthesis [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2273\">#2273</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2273\">mockito/mockito#2273</a>)</li>\n<li>Bump groovy from 3.0.7 to 3.0.8 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2271\">#2271</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2271\">mockito/mockito#2271</a>)</li>\n<li>Bump shipkit-changelog from 1.1.13 to 1.1.15 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2270\">#2270</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2270\">mockito/mockito#2270</a>)</li>\n<li>Bump versions.bytebuddy from 1.10.20 to 1.11.0 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2269\">#2269</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2269\">mockito/mockito#2269</a>)</li>\n</ul>\n<h2>v3.9.3</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.9.3</h4>\n<ul>\n<li>2021-04-14 - <a href=\"https://github.com/mockito/mockito/compare/v3.9.2...v3.9.3\">1 commit(s)</a> by A248</li>\n<li>Include cause when FieldReader fails to access field [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2267\">#2267</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2267\">mockito/mockito#2267</a>)</li>\n<li>Swallowed illegal access exceptions make it harder to debug modularity-related issues [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2266\">#2266</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2266\">mockito/mockito#2266</a>)</li>\n</ul>\n<h2>v3.9.2</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.9.2</h4>\n<ul>\n<li>2021-04-12 - <a href=\"https://github.com/mockito/mockito/compare/v3.9.0...v3.9.2\">2 commit(s)</a> by dependabot[bot], devin040</li>\n<li>Fixes <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2242\">#2242</a> : Make exceptions for Inorder.verify more standard / spec\u2026 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2263\">#2263</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2263\">mockito/mockito#2263</a>)</li>\n<li>Bump shipkit-auto-version from 1.1.5 to 1.1.8 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2261\">#2261</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2261\">mockito/mockito#2261</a>)</li>\n</ul>\n<!-- raw HTML omitted -->\n</blockquote>\n<p>... (truncated)</p>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/544cc758bbf6c8b14e5d18ec395b98e11375d8e5\"><code>544cc75</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2292\">#2292</a> from mockito/fix-stackoverflow</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/a53876d6b18a37fc741a0f7f716112aeee9cb814\"><code>a53876d</code></a> Fix stackoverflow in ArgumentsAreDifferent reporting</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/067ff2446ad08d49a634374d04dd0e6913e1259c\"><code>067ff24</code></a> Bump biz.aQute.bnd.gradle from 5.2.0 to 5.3.0 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2291\">#2291</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/ff29c0bf84125b8c08f5808c311997dc4edefd48\"><code>ff29c0b</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2243\">#2243</a> from mockito/ci</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/1e20c6966d0fbb642b98f23eb2fc53bf6134b023\"><code>1e20c69</code></a> Fixed CI triggers</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/f25e46602955c5ade1dcf441b50eed0bbc7db959\"><code>f25e466</code></a> Fixed issue in iml</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/78b821c933ed429e5572d4c4f5d0f58736aecf17\"><code>78b821c</code></a> Fixed bug in yml</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/cef375d00cf895f1f9fcf7d5f0df6811a7ed3cfd\"><code>cef375d</code></a> Minor fixes, locked versions</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/17239aec26a22d8c895ac6b8de1e11dd00c00acd\"><code>17239ae</code></a> Updated readme</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/4392c42dc16004135a6acff08159cfbe1cc3a929\"><code>4392c42</code></a> Added release summary</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.9.0...v3.10.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.9.0&new-version=3.10.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7274", "3.x: Javadoc: Fix wording of *OnSubscribe interfaces", "David Karnok", "akarnokd", "05/14/21, 08:08:20 PM", "Bad wording: \"an instance of a(n) X instance\".", "NaN"], ["7277", "3.x: fix typo in ObservableRetryTest.java", "Ikko Ashimine", "eltociear", "05/27/21, 06:38:19 AM", "\r\n\r\nThank you for contributing to RxJava. Before pressing the \"Create Pull Request\" button, please consider the following points:\r\n\r\n  - [x] Please give a description about what and why you are contributing, even if it's trivial.\r\n\r\nFixed typo below.\r\n```\r\nseperate -> separate\r\n```\r\n\r\n  - [ ] Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those.\r\n\r\n  - [ ] Please include a reasonable set of unit tests if you contribute new code or change an existing one. If you contribute an operator, (if applicable) please make sure you have tests for working with an `empty`, `just`, `range` of values as well as an `error` source, with and/or without backpressure and see if unsubscription/cancellation propagates correctly.\r", "NaN"], ["7278", "Bump actions/cache from 2.1.5 to 2.1.6", null, "dependabot[bot]", "05/28/21, 07:08:49 AM", "Bumps [actions/cache](https://github.com/actions/cache) from 2.1.5 to 2.1.6.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/actions/cache/releases\">actions/cache's releases</a>.</em></p>\n<blockquote>\n<h2>v2.1.6</h2>\n<ul>\n<li>Catch unhandled &quot;bad file descriptor&quot; errors that sometimes occurs when the cache server returns non-successful response (<a href=\"https://github-redirect.dependabot.com/actions/cache/pull/596\">actions/cache#596</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/actions/cache/commit/c64c572235d810460d0d6876e9c705ad5002b353\"><code>c64c572</code></a> Catch and log unhandled exceptions stemming from closed file descriptor (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/596\">#596</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/cc2d767a726ddd654506e76169ec14b20dc75915\"><code>cc2d767</code></a> Update Rust directories recommended for caching (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/433\">#433</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/2fa955d825a29821e73ec064792122ea9f70e573\"><code>2fa955d</code></a> Update examples.md (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/588\">#588</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/3a696372f2ec10535e4c026a4fdae5fcca629e4a\"><code>3a69637</code></a> elixir typo - stray parenthesis (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/569\">#569</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/366e5ba0224e0ebd6fba2a453d108cb20e734946\"><code>366e5ba</code></a> Update cache key for Elixir (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/568\">#568</a>)</li>\n<li><a href=\"https://github.com/actions/cache/commit/8d3f2fc3ce25d6c95a1297ce8d93f9c3c3ac8f00\"><code>8d3f2fc</code></a> Update dependencies (<a href=\"https://github-redirect.dependabot.com/actions/cache/issues/565\">#565</a>)</li>\n<li>See full diff in <a href=\"https://github.com/actions/cache/compare/v2.1.5...v2.1.6\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=actions/cache&package-manager=github_actions&previous-version=2.1.5&new-version=2.1.6)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7279", "Bump gradle/wrapper-validation-action from 1.0.3 to 1.0.4", null, "dependabot[bot]", "05/31/21, 08:58:59 AM", "Bumps [gradle/wrapper-validation-action](https://github.com/gradle/wrapper-validation-action) from 1.0.3 to 1.0.4.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/gradle/wrapper-validation-action/releases\">gradle/wrapper-validation-action's releases</a>.</em></p>\n<blockquote>\n<h2>v1.0.4</h2>\n<h1>Gradle Wrapper Validation</h1>\n<ul>\n<li>Retry connections to the server on failure (<a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/39\">#39</a>)</li>\n<li>Update dependencies (<a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/38\">#38</a>, <a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/37\">#37</a>, <a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/36\">#36</a>, <a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/34\">#34</a>, <a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/31\">#31</a>, <a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/30\">#30</a>, <a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/29\">#29</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/gradle/wrapper-validation-action/commit/e6e38bacfdf1a337459f332974bb2327a31aaf4b\"><code>e6e38ba</code></a> Dependencies</li>\n<li><a href=\"https://github.com/gradle/wrapper-validation-action/commit/07d55c647beccd034466bfc0a09dfbec6c8673e3\"><code>07d55c6</code></a> Merge branch 'master' into releases/v1</li>\n<li><a href=\"https://github.com/gradle/wrapper-validation-action/commit/ef08c6885017f258a11d59e0da103ed39424aa6b\"><code>ef08c68</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/38\">#38</a> from gradle/dependabot/npm_and_yarn/hosted-git-info-2.8.9</li>\n<li><a href=\"https://github.com/gradle/wrapper-validation-action/commit/2649583adda682ba90a9d6c6db85cfb6463e1527\"><code>2649583</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/37\">#37</a> from gradle/dependabot/npm_and_yarn/lodash-4.17.21</li>\n<li><a href=\"https://github.com/gradle/wrapper-validation-action/commit/c0c53eb6bad87bf2667749a3b813763da33cdc9d\"><code>c0c53eb</code></a> Bump lodash from 4.17.20 to 4.17.21</li>\n<li><a href=\"https://github.com/gradle/wrapper-validation-action/commit/d01b0237194650e470392a61b6609b89a27c6f1e\"><code>d01b023</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/39\">#39</a> from KengoTODA/retry</li>\n<li><a href=\"https://github.com/gradle/wrapper-validation-action/commit/aeee4bda64c18947e20a005dc7629772beaae798\"><code>aeee4bd</code></a> fix: introduce retry to stabilize the workflow</li>\n<li><a href=\"https://github.com/gradle/wrapper-validation-action/commit/3e5f126fb78a94ece809cfa73508082848fbd2ff\"><code>3e5f126</code></a> test: reproduce the problem by jest</li>\n<li><a href=\"https://github.com/gradle/wrapper-validation-action/commit/d15ec7e0e518cc29b70cacb818124afed3bd9e13\"><code>d15ec7e</code></a> Bump hosted-git-info from 2.8.8 to 2.8.9</li>\n<li><a href=\"https://github.com/gradle/wrapper-validation-action/commit/12b3fff2c3f403a0378d0412d0d7dc82747886b6\"><code>12b3fff</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/gradle/wrapper-validation-action/issues/36\">#36</a> from gradle/dependabot/npm_and_yarn/y18n-4.0.1</li>\n<li>Additional commits viewable in <a href=\"https://github.com/gradle/wrapper-validation-action/compare/v1.0.3...v1.0.4\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=gradle/wrapper-validation-action&package-manager=github_actions&previous-version=1.0.3&new-version=1.0.4)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7280", "Bump mockito-core from 3.10.0 to 3.11.0", null, "dependabot[bot]", "06/04/21, 07:37:53 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.10.0 to 3.11.0.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.11.0</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.11.0</h4>\n<ul>\n<li>2021-06-03 - <a href=\"https://github.com/mockito/mockito/compare/v3.10.0...v3.11.0\">18 commit(s)</a> by Charles Munger, Szczepan Faber, dependabot[bot]</li>\n<li>Bump versions.bytebuddy from 1.11.0 to 1.11.1 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2313\">#2313</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2313\">mockito/mockito#2313</a>)</li>\n<li>Undo parent for MultipleParentsClassLoader [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2312\">#2312</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2312\">mockito/mockito#2312</a>)</li>\n<li>Bump shipkit-auto-version from 1.1.14 to 1.1.16 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2310\">#2310</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2310\">mockito/mockito#2310</a>)</li>\n<li>Bump gradle/wrapper-validation-action from 1.0.3 to 1.0.4 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2309\">#2309</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2309\">mockito/mockito#2309</a>)</li>\n<li>Bump com.github.ben-manes.versions from 0.38.0 to 0.39.0 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2308\">#2308</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2308\">mockito/mockito#2308</a>)</li>\n<li>Bump shipkit-auto-version from 1.1.11 to 1.1.14 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2307\">#2307</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2307\">mockito/mockito#2307</a>)</li>\n<li>Use the parent classloader if the context classloader is a child of it. [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2306\">#2306</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2306\">mockito/mockito#2306</a>)</li>\n<li>Bump kotlin-stdlib from 1.5.0 to 1.5.10 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2305\">#2305</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2305\">mockito/mockito#2305</a>)</li>\n<li>&quot;The type is not public and its mock class is loaded by a different class loader&quot; with a context classloader that delegates [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2303\">#2303</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2303\">mockito/mockito#2303</a>)</li>\n<li>Enabled automated changelog [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2301\">#2301</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2301\">mockito/mockito#2301</a>)</li>\n<li>Bump kotlinx-coroutines-core from 1.4.3-native-mt to 1.5.0-native-mt [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2299\">#2299</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2299\">mockito/mockito#2299</a>)</li>\n<li>Bump versions.errorprone from 2.6.0 to 2.7.1 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2298\">#2298</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2298\">mockito/mockito#2298</a>)</li>\n<li>Bump junit-platform-launcher from 1.7.1 to 1.7.2 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2297\">#2297</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2297\">mockito/mockito#2297</a>)</li>\n<li>Bump versions.junitJupiter from 5.7.1 to 5.7.2 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2296\">#2296</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2296\">mockito/mockito#2296</a>)</li>\n<li>Renamed main dev branch [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2295\">#2295</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2295\">mockito/mockito#2295</a>)</li>\n<li>Bump gradle/wrapper-validation-action from 1 to 1.0.3 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2294\">#2294</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2294\">mockito/mockito#2294</a>)</li>\n<li>Bump actions/checkout from 2 to 2.3.4 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2293\">#2293</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2293\">mockito/mockito#2293</a>)</li>\n<li>'this' is not available - when enabling mock-maker-inline [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2082\">#2082</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2082\">mockito/mockito#2082</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/92cbac227d930f9b306527e8292a89bdb0cde348\"><code>92cbac2</code></a> Undo parent for MultipleParentsClassLoader (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2312\">#2312</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/67c56326daac74ac9f2a147f760f84635c2b8044\"><code>67c5632</code></a> Bump versions.bytebuddy from 1.11.0 to 1.11.1 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2313\">#2313</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/d4753548bc3e9be3f95395c52ce856b5cf518b13\"><code>d475354</code></a> Bump gradle/wrapper-validation-action from 1.0.3 to 1.0.4 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2309\">#2309</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/7ceabaf529aeb227f20b1eecbd4e7be95924290c\"><code>7ceabaf</code></a> Bump shipkit-auto-version from 1.1.14 to 1.1.16 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2310\">#2310</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/5c775ee9a8bc65b3c9118d02788f65e803b24e69\"><code>5c775ee</code></a> Bump com.github.ben-manes.versions from 0.38.0 to 0.39.0 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2308\">#2308</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/66998ea7f81c6adf49983cea081586e19760b7a0\"><code>66998ea</code></a> Use the parent classloader if the context classloader is a child of it (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2306\">#2306</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/ae6dd4efbd0aa4a58558fb689bbed8be474cfe68\"><code>ae6dd4e</code></a> Bump shipkit-auto-version from 1.1.11 to 1.1.14 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2307\">#2307</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/c2715ea34a4f32325aad9f00221a24ce6c95bc86\"><code>c2715ea</code></a> Bump kotlin-stdlib from 1.5.0 to 1.5.10 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2305\">#2305</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/c6054cd3822b8d2c37b439ce508049b4cbe563c6\"><code>c6054cd</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2301\">#2301</a> from mockito/ci</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/45bf88726bbb17a82f501a02b02ca26dba019d98\"><code>45bf887</code></a> Bump versions.errorprone from 2.6.0 to 2.7.1 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2298\">#2298</a>)</li>\n<li>Additional commits viewable in <a href=\"https://github.com/mockito/mockito/compare/v3.10.0...v3.11.0\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.10.0&new-version=3.11.0)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7282", "Bump codecov/codecov-action from 1.5.0 to 1.5.2", null, "dependabot[bot]", "06/09/21, 06:47:43 AM", "Bumps [codecov/codecov-action](https://github.com/codecov/codecov-action) from 1.5.0 to 1.5.2.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/codecov/codecov-action/releases\">codecov/codecov-action's releases</a>.</em></p>\n<blockquote>\n<h2>v1.5.2</h2>\n<h2>1.5.2</h2>\n<h3>Fixes</h3>\n<ul>\n<li>\n<h1>fix: Import version properly as string not object</h1>\n</li>\n</ul>\n<h2>v1.5.1</h2>\n<h2>1.5.1</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/320\">#320</a> doc: add github actions badge</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/336\">#336</a> Update bash uploader to 1.0.3</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/339\">#339</a> fix: Add action version</li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/302\">#302</a> Bump <code>@\u200btypescript-eslint/eslint-plugin</code> from 4.22.0 to 4.22.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/303\">#303</a> Bump <code>@\u200btypescript-eslint/parser</code> from 4.22.0 to 4.22.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/304\">#304</a> Bump ts-jest from 26.5.5 to 26.5.6</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/309\">#309</a> Bump lodash from 4.17.19 to 4.17.21</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/310\">#310</a> Bump hosted-git-info from 2.8.8 to 2.8.9</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/311\">#311</a> Bump <code>@\u200bactions/github</code> from 4.0.0 to 5.0.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/314\">#314</a> Bump eslint from 7.25.0 to 7.27.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/315\">#315</a> Bump <code>@\u200bactions/core</code> from 1.2.7 to 1.3.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/316\">#316</a> Bump <code>@\u200btypescript-eslint/parser</code> from 4.22.1 to 4.25.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/317\">#317</a> Bump <code>@\u200btypescript-eslint/eslint-plugin</code> from 4.22.1 to 4.25.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/319\">#319</a> Bump jest-junit from 12.0.0 to 12.1.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/321\">#321</a> Bump typescript from 4.2.4 to 4.3.2</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/323\">#323</a> Bump ws from 7.3.1 to 7.4.6</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/331\">#331</a> Bump eslint from 7.27.0 to 7.28.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/332\">#332</a> Bump <code>@\u200bactions/exec</code> from 1.0.4 to 1.1.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/333\">#333</a> Bump <code>@\u200btypescript-eslint/parser</code> from 4.25.0 to 4.26.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/334\">#334</a> Bump <code>@\u200btypescript-eslint/eslint-plugin</code> from 4.25.0 to 4.26.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/335\">#335</a> Bump <code>@\u200bactions/core</code> from 1.3.0 to 1.4.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/337\">#337</a> Bump glob-parent from 5.1.1 to 5.1.2</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Changelog</summary>\n<p><em>Sourced from <a href=\"https://github.com/codecov/codecov-action/blob/master/CHANGELOG.md\">codecov/codecov-action's changelog</a>.</em></p>\n<blockquote>\n<h2>1.5.2</h2>\n<h3>Fixes</h3>\n<ul>\n<li>\n<h1>fix: Import version properly as string not object</h1>\n</li>\n</ul>\n<h2>1.5.1</h2>\n<h3>Fixes</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/320\">#320</a> doc: add github actions badge</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/336\">#336</a> Update bash uploader to 1.0.3</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/339\">#339</a> fix: Add action version</li>\n</ul>\n<h3>Dependencies</h3>\n<ul>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/302\">#302</a> Bump <code>@\u200btypescript-eslint/eslint-plugin</code> from 4.22.0 to 4.22.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/303\">#303</a> Bump <code>@\u200btypescript-eslint/parser</code> from 4.22.0 to 4.22.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/304\">#304</a> Bump ts-jest from 26.5.5 to 26.5.6</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/309\">#309</a> Bump lodash from 4.17.19 to 4.17.21</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/310\">#310</a> Bump hosted-git-info from 2.8.8 to 2.8.9</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/311\">#311</a> Bump <code>@\u200bactions/github</code> from 4.0.0 to 5.0.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/314\">#314</a> Bump eslint from 7.25.0 to 7.27.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/315\">#315</a> Bump <code>@\u200bactions/core</code> from 1.2.7 to 1.3.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/316\">#316</a> Bump <code>@\u200btypescript-eslint/parser</code> from 4.22.1 to 4.25.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/317\">#317</a> Bump <code>@\u200btypescript-eslint/eslint-plugin</code> from 4.22.1 to 4.25.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/319\">#319</a> Bump jest-junit from 12.0.0 to 12.1.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/321\">#321</a> Bump typescript from 4.2.4 to 4.3.2</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/323\">#323</a> Bump ws from 7.3.1 to 7.4.6</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/331\">#331</a> Bump eslint from 7.27.0 to 7.28.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/332\">#332</a> Bump <code>@\u200bactions/exec</code> from 1.0.4 to 1.1.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/333\">#333</a> Bump <code>@\u200btypescript-eslint/parser</code> from 4.25.0 to 4.26.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/334\">#334</a> Bump <code>@\u200btypescript-eslint/eslint-plugin</code> from 4.25.0 to 4.26.1</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/335\">#335</a> Bump <code>@\u200bactions/core</code> from 1.3.0 to 1.4.0</li>\n<li><a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/337\">#337</a> Bump glob-parent from 5.1.1 to 5.1.2</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/29386c70ef20e286228c72b668a06fd0e8399192\"><code>29386c7</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/342\">#342</a> from codecov/1.5.2</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/52497068bd2117dbc668797d4e5a9c1722c041a6\"><code>5249706</code></a> fix: Import version properly as string not object</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/fbeda37de967cc17491cd6587ec90ab98e3a3da0\"><code>fbeda37</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/338\">#338</a> from codecov/1.5.1</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/ebcf63d8f0a2b5ec95a5edf47b54d7bd6f49d094\"><code>ebcf63d</code></a> Update changelog</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/a3e633d744fc75e7d36ab1666ee33a884b2acffd\"><code>a3e633d</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/339\">#339</a> from codecov/action-version</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/b8f68524afdfa99b19eb050a7facfe1341594954\"><code>b8f6852</code></a> lint</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/c9d0b8155c1a7ca4f072a580cdcb3df48a9137a4\"><code>c9d0b81</code></a> fix: Add action version</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/8f0855a85cc368b858984ca274721562a591ed26\"><code>8f0855a</code></a> Bump to 1.5.1</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/c53d6ba320e1a46702ab7ccb976e266fd7effb71\"><code>c53d6ba</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/337\">#337</a> from codecov/dependabot/npm_and_yarn/glob-parent-5.1.2</li>\n<li><a href=\"https://github.com/codecov/codecov-action/commit/67f597a1c4d83f8490454cbad4c43f06cbe2f466\"><code>67f597a</code></a> Merge pull request <a href=\"https://github-redirect.dependabot.com/codecov/codecov-action/issues/336\">#336</a> from slarse/update-bash-uploader-to-1.0.3</li>\n<li>Additional commits viewable in <a href=\"https://github.com/codecov/codecov-action/compare/v1.5.0...v1.5.2\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=codecov/codecov-action&package-manager=github_actions&previous-version=1.5.0&new-version=1.5.2)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"], ["7283", "Bump mockito-core from 3.11.0 to 3.11.1", null, "dependabot[bot]", "06/14/21, 08:13:32 AM", "Bumps [mockito-core](https://github.com/mockito/mockito) from 3.11.0 to 3.11.1.\n<details>\n<summary>Release notes</summary>\n<p><em>Sourced from <a href=\"https://github.com/mockito/mockito/releases\">mockito-core's releases</a>.</em></p>\n<blockquote>\n<h2>v3.11.1</h2>\n<p><!-- raw HTML omitted --><!-- raw HTML omitted --><em>Changelog generated by <a href=\"https://github.com/shipkit/shipkit-changelog\">Shipkit Changelog Gradle Plugin</a></em><!-- raw HTML omitted --><!-- raw HTML omitted --></p>\n<h4>3.11.1</h4>\n<ul>\n<li>2021-06-11 - <a href=\"https://github.com/mockito/mockito/compare/v3.11.0...v3.11.1\">3 commit(s)</a> by Charles Munger, dependabot[bot]</li>\n<li>Bump versions.bytebuddy from 1.11.1 to 1.11.2 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2322\">#2322</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2322\">mockito/mockito#2322</a>)</li>\n<li>Check package-privacy of method params [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2318\">#2318</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2318\">mockito/mockito#2318</a>)</li>\n<li>Bump shipkit-auto-version from 1.1.16 to 1.1.17 [(<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2317\">#2317</a>)](<a href=\"https://github-redirect.dependabot.com/mockito/mockito/pull/2317\">mockito/mockito#2317</a>)</li>\n</ul>\n</blockquote>\n</details>\n<details>\n<summary>Commits</summary>\n<ul>\n<li><a href=\"https://github.com/mockito/mockito/commit/ef34307383da5a27fff23f7310787d262fbb4cfd\"><code>ef34307</code></a> Bump versions.bytebuddy from 1.11.1 to 1.11.2 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2322\">#2322</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/41e445c1f7029a8635283428f1f02846ba95f241\"><code>41e445c</code></a> Check for non-public type references in methods (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2318\">#2318</a>)</li>\n<li><a href=\"https://github.com/mockito/mockito/commit/07951e90c82d194f65821ff809247ea819264ea2\"><code>07951e9</code></a> Bump shipkit-auto-version from 1.1.16 to 1.1.17 (<a href=\"https://github-redirect.dependabot.com/mockito/mockito/issues/2317\">#2317</a>)</li>\n<li>See full diff in <a href=\"https://github.com/mockito/mockito/compare/v3.11.0...v3.11.1\">compare view</a></li>\n</ul>\n</details>\n<br />\n\n\n[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=org.mockito:mockito-core&package-manager=gradle&previous-version=3.11.0&new-version=3.11.1)](https://docs.github.com/en/github/managing-security-vulnerabilities/about-dependabot-security-updates#about-compatibility-scores)\n\nDependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.\n\n[//]: # (dependabot-automerge-start)\n[//]: # (dependabot-automerge-end)\n\n---\n\n<details>\n<summary>Dependabot commands and options</summary>\n<br />\n\nYou can trigger Dependabot actions by commenting on this PR:\n- `@dependabot rebase` will rebase this PR\n- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it\n- `@dependabot merge` will merge this PR after your CI passes on it\n- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it\n- `@dependabot cancel merge` will cancel a previously requested merge and block automerging\n- `@dependabot reopen` will reopen this PR if it is closed\n- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually\n- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)\n- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)\n\n\n</details>", "NaN"]]